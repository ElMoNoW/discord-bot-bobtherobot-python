import asyncio
import sys
from tools.dataIO import fileIO
import threading
import datetime
import time
import urllib
import copy
import random
import hashlib
import signal
from random import choice
from copy import deepcopy
import glob
import os
import aiohttp
import json
import requests
try:
  from secure import config
except:
  print("configyes is not installed. Please install it!")
try:
  from secure import secrets
except:
  print("secureyes is not installed. Please install it!")  
from typing import List
try:
    from discord.ext import commands
    import discord
except ImportError:
    print("Discord.py is not installed. Please install it!")
    sys.exit(5)
try:
    from bananopie import *
except ImportError:
    print("bananopie is not installed. Please install it!")
    sys.exit(5)
from exm.commandsx.view import *
try:
    try:
        from exm.commandsx.view import *
        print("ok view")
    except:
        print("notok view")
    try:
        from exm.commandsx.display import *
        print("notok display")
    except:
        print("notok display")
    try:
        from exm.commandsx.codesnip import *
        print("notok codesnip")
    except:
        print("notok codesnip")
    try:
        sub = Sub()
        print("ok sub")
    except:
        one = 1
    try:
        sub = Sub1()
        print("ok Sub1")
    except:
        one = 1
    try:
        add = Add()
        print("ok Add")
    except:
        one = 1
    try:
        add = Add1()
        print("ok Add1")
    except:
        one = 1
    try:
        rpc = RPC("https://kaliumapi.appditto.com/api")
        wallet = Wallet(rpc)
        print("ok New_Wallet")
    except:
        print("notok New_Wallet")
        new_wallet = New_wallet()
    try:
        check_666_out_1 = Check_666_out_1()
        print("ok check_666_out_1")
    except:
        one = 1
    try:
        check_555_out_1 = Check_555_out_1()
        print("ok check_555_out_1")
    except:
        one = 1
except ImportError:
    print("Discord.py is not installed. Please install it!")
    sys.exit(5)
## from vol1818 import *
starttime = time.time()
VS = 1.0
config_location = fileIO("config/config.json", "load")
wallets_location = fileIO("wallets/wallets.json", "load")
players_location = fileIO("wallets/players.json", "load")
enten_location = fileIO("bobo/boboente.enf", "load")
Shards = config_location["Shards"]
Prefix = config_location["Prefix"]
Prefix1 = config_location["Prefix1"]
Wallets = wallets_location["Wallets"]
Players = players_location["Players"]
newData = {"Safe_version":"0.4","serverGuild_id": 0,"enemyhp":0,"meters":0,"meters_max":1,"meters_high":1,"selected_enemy_player":"None", "castle_guild_exp":0, "a":0,"password" : 0,"assetspixilminiwax" : 0, "assetspixellabs123" : 0, "assetshoodpunknfts" : 0,"assetsrock" : 0,"assetsscissor" : 0,"assetspaper" : 0,"assetscoffee" : 0,"assetsspace" : 0,"assetsmemberpass" : 0,"assetspackage" : 0,"castle_exp" : 0,"castle_exp_max" : 0,"castle_to_next_lvl" : 0,"b_1":0,"b_2": 0,"b_3": 0,"b_4": 0,"b_5": 0,"b_6": 0,"b_7": 0,"b_8": 0,"b_9": 0,"b_10": 0,"b_11": 0,"b_12": 0,"b_13": 0,"b_14": 0,"b_15": 0,"b_16": 0,"b_17": 0,"b_18": 0,"b_19": 0,"b_20": 0,"b_21": 0,"b_22": 0,"b_23": 0,"b_24": 0,"b_25": 0,"b_26": 0,"b_27": 0,"b_28": 0,"b_29": 0,"b_30": 0,"b_31": 0,"b_32": 0,"b_33": 0,"b_34": 0,"b_35": 0,"b_36": 0,"b_37": 0,"b_38": 0,"b_39": 0,"b_40": 0,"b_41": 0,"b_42": 0,"b_43": 0,"b_44": 0,"b_45": 0,"b_46": 0,"b_47": 0,"b_48": 0,"b_49": 0,"b_50": 0,"b_51": 0,"b_52": 0,"b_53": 0,"b_54": 0,"b_55": 0,"b_56": 0,"b_57": 0,"b_58": 0,"b_59": 0,"b_60": 0,"b_61": 0,"b_62": 0,"b_63": 0,"b_64": 0,"b_65": 0,"b_66": 0,"b_67": 0,"b_68": 0,"b_69": 0,"b_a": 0,"b_b": 0,"b_c": 0,"b_rR": 0,"b_r1": 0,"b_r3": 0,"b_r5": 0,"b_r9": 0,"totalvol18": 0,"castle_str" : 0,"castle_vit" : 0,"castle_agi" : 0,"castle_dex" : 0,"castle_int" : 0,"castle_luk" : 0,"token_str" : 0,"token_vit" : 0,"token_agi" : 0,"token_dex" : 0,"token_int" : 0,"token_luk" : 0,"streets_location" : 0,"streets_location_old_roll" : None,"streets_check_prison" : False,"streets_check_pair" : 0,"whereServer" : 0,"check_depts_bol" : False,"check_depts_int" : 0,"Player_In" : 0,}
newDataFlobalKICK = {"Safe_version":"0.4","bdiscordid":0,"adiscordid":0,"street_0x0" : 0,"street_0x1" : 0,"street_0x2" : 0,"street_0x3" : 0,"street_0x4" : 0,"street_0x5" : 0,"street_0x6" : 0,"street_0x7" : 0,"street_0x8" : 0,"street_0x9" : 0,"street_0x10" : 0,"street_0x11" : 0,"street_0x12" : 0,"street_0x13" : 0,"street_0x14" : 0,"street_0x15" : 0,"street_0x16" : 0,"street_0x17" : 0,"street_0x18" : 0,"street_0x19" : 0,"street_0x20" : 0,"street_0x21" : 0,"street_0x22" : 0,"street_0x23" : 0,"street_0x24" : 0,"street_0x25" : 0,"street_0x26" : 0,"street_0x27" : 0,"street_0x28" : 0,"street_0x29" : 0,"street_0x30" : 0,"street_0x31" : 0,"street_0x32" : 0,"street_0x33" : 0,"street_0x34" : 0,"street_0x35" : 0,"street_0x36" : 0,"street_0x37" : 0,"street_0x38" : 0,"street_0x39" : 0,"streets_pot" : 0,}
tbp0 = 56373
tbp1 = 65258
tbp2 = 65271
tbp3 = 65260
tbp4 = 65285
tbp5 = 65286
tbp6 = 65287
tbp7 = 65288
tbp8 = 65289
tbp9 = 65291
tbp10 = 65300
tbp11 = 65301
tbp12 = 65302
tbp13 = 65324
tbp14 = 65329
tbp15 = 65332
tbp16 = 65333
tbp17 = 65336
tbp18 = 65338
tbp19 = 65339
tbp20 = 65343
tbp21 = 65346
tbp22 = 65350
tbp23 = 65351
tbp24 = 65352
tbp25 = 65353
tbpfreecandy1 = 73524
tbpfreecandylv52 = 83008
tbpfreecandytwitch3 = 83008
tbpramdonator = 76729
tbpbalcrit = 88236
tbpqualityam = 00000
tbpfireprofe = 00000
tbppacksv710 = 217050
tbppacksv75 = 217049
tbppacksv71 = 217047
tbppacksv825 = 211902
tbppacksv81 = 211864
tbppacksv6f = 155190
tbppacksv51025 = 87978
tbppacksv51075 = 87979
tbppacksv51050 = 87980
tbppacksv4525 = 82910
tbppacksv4550 = 82913
tbppacksv4575 = 82915
tbppacksv2 = 66928
tbppacksv1 = 66705
tbpcretro = 155041
tbpwhite = 155039
tbpcbwhite = 155036
tbpcclassic = 155014
tbpcclean = 155032
tbpcdirty = 155026
tbpccc = 155025
tbpjacktick = 154962
fire0 = 210727
fire1 = 210728
fire2 = 210729
fire3 = 210730
fire4 = 210731
fire5 = 210732
fire6 = 210733
fire7 = 210734
fire8 = 210735
fire9 = 210736
fire10 = 210738
fire11 = 210739
fire12 = 210740
fire13 = 210739
fire14 = 210742
fire15 = 210743
fire16 = 210744
fire17 = 210745
fire18 = 210747
fire19 = 210746
fire20 = 210748
fire21 = 210749
fire22 = 210750
fire23 = 210751
fire24 = 210752
fire25 = 210753
#"bpfreecandy" : 0,
#"bpfreecandylv52" : 0,
#"bpfreecandytwitch3" : 0,
#"bpramdonator" : 0,
#"bpbalcrit" : 0,
#"bpqualityam" : 0,
#3"bpfireprofe" : 0,
#"bppacksv710" : 0,
#"bppacksv75" : 0,
#"bppacksv71" : 0,
#"bppacksv825" : 0,
#"bppacksv81" : 0,
#"bppacksv6f" : 0,
#"bppacksv51025" : 0,
#"bppacksv51075" : 0,
#"bppacksv51050" : 0,
#"bppacksv4525" : 0,
#"bppacksv4550" : 0,
#"bppacksv4575" : 0,
#"bppacksv2" : 0,
#"bppacksv1" : 0,
#"bpcretro" : 0,
#"bpcwhite" : 0,
#"bpcclassic" : 0,
#"bpcclean" : 0,
#"bpcdirty" : 0,
#"bpccc" : 0,
#"bpjacktick" : 0,
#"bpfreecandy" : 0,
#"bpfreecandy" : 0,
BoboCoinServer = 802187353607110676
PIXELMINISserver = 498894646697656331
PIXELMINIS = 986421051640664075 #chat
BP0x0Poker = 1056413736228900905
RockCastle = 874887432963776563
PaperCastle = 874887827865866241
ScissorCastle = 874888849837424661
streetsServer = 1069993213257076787
rock_market_chat = 890488675572527104
rock_market_bot = 890488730090078218
rock_training_chat = 890492014293049354
rock_training_bot = 890492049185443870
rock_castle_chat = 890491345565798430
rock_castle_bot = 890491403623350314
rock_forest_chat = 890490978673238056
rock_forest_bot = 890491441317552148
rock_mine_chat = 890490957236146186
rock_mine_bot = 890491554739937300
rock_field_chat = 890490932741419059
rock_field_bot = 890491515531587584
rock_dungon_chat = 890500881240428555
rock_dungon_bot = 890500899796054056
paper_market_chat = 890496216624943154
paper_market_bot = 890495928761479168
scissor_market_chat = 890500115234693190
scissor_market_bot = 890500128232837151
original_market = 947164332146454548

# Initialize the bot
bot = commands.AutoShardedBot(shard_count=config.Shards, intents=discord.Intents.all(), command_prefix=commands.when_mentioned_or(config.Prefix))

# Load cogs
initial_extensions = [
    'cogs.my_cog1',
    'cogs.my_cog2',
    'cogs.my_cog3'
    # Add more cogs here as needed
]

if __name__ == '__main__':
    for extension in initial_extensions:
        bot.load_extension(extension)
bot.remove_command('help')
#bot.load_extension("exm.commandsx.foo") # Path to the file, instead of using a slash use a period
#bot.add_cog(MyCog(bot))
@bot.command()
async def pixmix(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    return showState
async def showState(message):
    embed = discord.Embed(title="Battle State", color=0x0044ff)
    state = await renderBattleState(message.channel)
    await message.channel.send(file=state, embed=embed)
async def renderBattleState(ctx):
    IMAGE_WIDTH = 600
    IMAGE_HEIGHT = 200
    image = Image.new('RGB', (IMAGE_WIDTH, IMAGE_HEIGHT))
    mini1 = Image.open("image0.png")
    mini2 = Image.open("image1.png")
    mini3 = Image.open("image2.png")
    image.paste(mini1, (0, 0))
    image.paste(mini2, (200, 0))
    image.paste(mini3, (400, 0))
    draw = ImageDraw.Draw(image)
    buffer = io.BytesIO()
    image.save(buffer, format='PNG')
    buffer.seek(0)
    file = discord.File(buffer, 'myimage.png')
    return file
class Confirm1(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.value = None
    @discord.ui.button(label='Confirm', style=discord.ButtonStyle.green, emoji="üåç")
    async def confirm(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Red', style=discord.ButtonStyle.red, emoji="üòé")
    async def Red(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Blue', style=discord.ButtonStyle.blurple)
    async def Blue(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Blue1', style=discord.ButtonStyle.blurple, emoji="üö´") #   , emoji="`:metal-1:967394141824749570`")
    async def Blue1(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
class Confirm(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.value = None
    @discord.ui.button(label='S', style=discord.ButtonStyle.red, emoji="‚úåÔ∏è")
    async def x1y1(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='S', style=discord.ButtonStyle.red, emoji="‚úåÔ∏è")
    async def x1y2(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x1y3(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='P', style=discord.ButtonStyle.green, emoji="ü§ö")
    async def x1y4(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='P', style=discord.ButtonStyle.green, emoji="ü§ö")
    async def x1y5(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='S', style=discord.ButtonStyle.red, emoji="‚úåÔ∏è")
    async def x2y1(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='RSP', style=discord.ButtonStyle.gray)
    async def x2y2(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x2y3(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='RSP', style=discord.ButtonStyle.gray)
    async def x2y4(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='S', style=discord.ButtonStyle.green, emoji="ü§ö")
    async def x2y5(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x3y1(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x3y2(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='?', style=discord.ButtonStyle.gray)
    async def x3y3(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x3y4(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x3y5(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='?', style=discord.ButtonStyle.blurple, emoji="üö´")
    async def x4y1(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='RSP', style=discord.ButtonStyle.gray)
    async def x4y2(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x4y3(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='RSP', style=discord.ButtonStyle.gray)
    async def x4y4(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='R', style=discord.ButtonStyle.blurple, emoji="‚úä")
    async def x4y5(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='?', style=discord.ButtonStyle.blurple, emoji="üö´")
    async def x5y1(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='?', style=discord.ButtonStyle.blurple, emoji="üö´")
    async def x5y2(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='Oxo', style=discord.ButtonStyle.gray)
    async def x5y3(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='R', style=discord.ButtonStyle.blurple, emoji="‚úä")
    async def x5y4(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    @discord.ui.button(label='R', style=discord.ButtonStyle.blurple, emoji="‚úä")
    async def x5y5(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    #  , emoji="üòé"   , emoji="üòÄ")   , emoji="üö´"  , emoji="üåç"   üòÉ
    #
    # Rock Fist  0  , emoji="‚úä"
    # Paper Hand  5   , emoji="ü§ö"
    # Scissor Hand  2   , emoji="‚úåÔ∏è"
    # Alien Hand  2   , emoji="üëΩ"
    # Time Hand  2   , emoji="‚è±Ô∏è"
    # key Hand  2   , emoji="üóùÔ∏è"
    # NO Go Hand  2   , emoji="üö´"
    # Earth  2   , emoji="üåç"
    # portal  2   , emoji="üåå"
    # Learn  2   , emoji="üéì"
    # Heard  2   , emoji="‚ù§Ô∏è"
    #
    # This one is similar to the confirmation button except sets the inner value to `False `
    #@discord.ui.button(label='Cancel', style=discord.ButtonStyle.grey)
    #async def cancel(self, button: discord.ui.Button, interaction: discord.Interaction):
    #    await interaction.response.send_message('Cancelling', ephemeral=True)
    #    self.value = False
    #    self.stop()
@bot.command()
async def oxoo(ctx):
   idid = ":bp0x0_0~1:"
   emoji = await ctx.guild.fetch_emoji(idid)
   await ctx.send("test", components = [Button(custom_id = "test", label = "Test", color = "gray", emoji = "‚úä")])
@bot.command()
async def baloo(ctx):
   await _check_baloo(ctx)
class ConfirmPoker(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.value = None
    @discord.ui.button(label='Yes,I have', style=discord.ButtonStyle.green)
    async def confirm(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Confirming', ephemeral=True)
        self.value = True
        self.stop()
    # This one is similar to the confirmation button except sets the inner value to `False `
    @discord.ui.button(label='No I do not have', style=discord.ButtonStyle.grey)
    async def cancel(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message('Cancelling', ephemeral=True)
        self.value = False
        self.stop()
class TicTacToeButton(discord.ui.Button['TicTacToe']):
    def __init__(self, x: int, y: int):
        # A label is required, but we don't need one so a zero-width space is used
        # The row parameter tells the View which row to place the button under.
        # A View can only contain up to 5 rows -- each row can only have 5 buttons.
        # Since a Tic Tac Toe grid is 3x3 that means we have 3 rows and 3 columns.
        super().__init__(style=discord.ButtonStyle.secondary, label='\u200b', row=y)
        self.x = x
        self.y = y
    # This function is called whenever this particular button is pressed
    # This is part of the "meat" of the game logic
    async def callback(self, interaction: discord.Interaction):
        assert self.view is not None
        view: TicTacToe = self.view
        state = view.board[self.y][self.x]
        if state in (view.X, view.O):
            return
        if view.current_player == view.X:
            self.style = discord.ButtonStyle.danger
            self.label = 'X'
            self.disabled = True
            view.board[self.y][self.x] = view.X
            view.current_player = view.O
            content = "It is now O's turn"
        else:
            self.style = discord.ButtonStyle.success
            self.label = 'O'
            self.disabled = True
            view.board[self.y][self.x] = view.O
            view.current_player = view.X
            content = "It is now X's turn"
        winner = view.check_board_winner()
        if winner is not None:
            if winner == view.X:
                content = 'X won!'
            elif winner == view.O:
                content = 'O won!'
            else:
                content = "It's a tie!"
            for child in view.children:
                child.disabled = True
            view.stop()
        await interaction.response.edit_message(content=content, view=view)
# This is our actual board View
class TicTacToe(discord.ui.View):
    # This tells the IDE or linter that all our children will be TicTacToeButtons
    # This is not required
    children: List[TicTacToeButton]
    X = -1
    O = 1
    Tie = 2
    def __init__(self):
        super().__init__()
        self.current_player = self.X
        self.board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]
        # Our board is made up of 3 by 3 TicTacToeButtons
        # The TicTacToeButton maintains the callbacks and helps steer
        # the actual game.
        for x in range(5):
            for y in range(5):
                self.add_item(TicTacToeButton(x, y))
    # This method checks for the board winner -- it is used by the TicTacToeButton
    def check_board_winner(self):
        for across in self.board:
            value = sum(across)
            if value == 3:
                return self.O
            elif value == -3:
                return self.X
        # Check vertical
        for line in range(3):
            value = self.board[0][line] + self.board[1][line] + self.board[2][line]
            if value == 3:
                return self.O
            elif value == -3:
                return self.X
        # Check diagonals
        diag = self.board[0][2] + self.board[1][1] + self.board[2][0]
        if diag == 3:
            return self.O
        elif diag == -3:
            return self.X
        diag = self.board[0][0] + self.board[1][1] + self.board[2][2]
        if diag == 3:
            return self.O
        elif diag == -3:
            return self.X
        # If we're here, we need to check if a tie was made
        if all(i != 0 for row in self.board for i in row):
            return self.Tie
        return None
class TicTacToeBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=commands.when_mentioned_or('$'))
@bot.event
async def on_ready():
    channel = bot.get_channel(816488235332927509)
    info = fileIO("config/config.json", "load")
    info["starttime"] = starttime
    fileIO("config/config.json", "save", info)
    print("Login info:\nUser: {}\nUser ID: {}".format(bot.user.name, bot.user.id))
    await channel.send(f"TeleportService is Online!!!\n ```diff\nMay I !help you with **.help** ```")
@bot.event
async def on_ready():
    channel = bot.get_channel(816488235332927509)
    info = fileIO("config/config.json", "load")
    info["starttime"] = starttime
    fileIO("config/config.json", "save", info)
    print("Login info:\nUser: {}\nUser ID: {}".format(bot.user.name, bot.user.id))
    await channel.send(f"TeleportService is Online!!!\n ```diff\nMay I !help you with **.help** ```")
@bot.event
async def on_member_join(member):
    author = ctx.author
    message = ctx.message
    member = message.author
    try:
        role = discord.utils.get(member.server.roles, id="1086562492504879175")
        await bot.add_roles(member, role)
    except:
        try:
            var = discord.utils.get(member.guild.roles, name = "BP0x0street_Action_0x0")
            # This will get the role you want to edit^
            await member.add_roles(var) # adds the role
            await var.edit(color=0xaafff1, reason="Giveaway")
            #channel_BP0x0street_Action_0x0 = discord.utils.get(ctx.guild.channels, name='BP0x0street_Action_0x0')
            #print(channel_friedhof_rip_chat)
            #await channel_BP0x0street_Action_0x0.send(f"Hello {member}!")
            #and edits the color  async def _check_setNewbe(ctx):
            #role = get (ctx.author.guild.roles, name = "Wallet-OFF")
            #await ctx.author.remove_roles (role)
            #role = discord.utils.get(ctx.author.guild.roles, name="Wallet_OFF")
            #await member.remove_roles(role)
        except:
            print("no 2")
@bot.command()
async def help(ctx):
    author = ctx.author
    em = discord.Embed(description="\n**[===Commands to Setup===]**\n\n **{}help** | Shows this message.\n\n **{}start** | Start your Game Character!\n\n **{}setname <Your Name>** | Give Yourself a Name\n\n **{}setcastlename <Your Castle Name>** | Give Your Castle a Name\n\n **{}setwallet <Wallet Address>** | your Wallet Address.\n\n **{}sync** | If you buy new NFTs.\n [==============]\n\n\n **[===Commands for Info===]**\n\n **{}stats** | View your player stats.(st)\n\n **{}statsall** | View all stats.(sw)\n\n **{}statscastle** | View your castle stats.(33)\n\n **{}inv** | View your inventory.(i)\n\n **{}boboinv** | Show You BoboPixel0x0 NFTs.(bpinv)\n\n **{}travel** | Travel to other locations.(t)\n\n **{}key** | Open the Castle Buy Menu \n\n **{}bp0x0inv** | See Items in Slots\n\n **{}check <TemplateID>** | Look up any NFT on the AomicHub Chain.\n\n **{}info** | Show bot info.\n [==============]\n\n\n**[=== Commands to get Stronger===]**\n\n **{}bp0x0 + SlotNR**| equip Items in Slot\n\n **{}rest** | Rest your player (r)\n\n **{}use <Pot>** | Use a potion.\n\n **{}upgrade** | Upgrade your Castle(u)\n\n **{}update** | Update your stats(up)\n\n **{}skillinv < Slot_NR 0-3 ** | Equipt your Skill(sk)\n [==============] \n\n\n**[=== Commands PvP===]**\n\n **{}fight** | Fight enemies(!f)\n\n **{}attack @User** | Fight enemies(f)\n\n **{}steal @User** | Try to steal someting\n\n **{}send** | Send your stuff to someone.\n[==============]\n\n\n**[=== Commands to get Rich===]**\n\n **{}buy** | Buy items\n\n **{}sell** | sell items(at Market)\n\n **{}bag** | Open a Bag of Items\n\n **{}guess <amount> BoCo 1-100** | Number guess game.\n\n **{}lucky ** | Number Luck Spin.\n\n **{}box** | Open a Box of Itmes\n\n **{}daily** | Claim your daily reward!\n\n **{}hunt** | Hunt for Food(need Rifle)\n **{}melt** | Melt Stone and Wood for Gold and Metal (need Oven)\n\n **{}dig** | Dig for Gifts(need Shovel)\n\n **{}mine** | Mine Ore.(need Pick)\n\n **{}chop** | Chop some trees.(need Axe)\n\n **{}b** | Claim a 5 Minutes Drop of BP1x1!\n\n **{}p** | Blend All posible BP1x1 to there next Value!\n\n **{}code <NFT-Code>** | NFT must be in Your Wallet!\n[==============]\n Token Commands\n\n **{}bals ** | Token of BP0x0 in Your Wallet!\n \n **{}wallet/{}w ** | Your Token's \n\n **{}twax ** | WAXp Price Ticker + BUY Link \n\n[==============]\n **{}sha256 <Text>** | Gives md5 and sha256 Text as Hash\n\n **{}whitelist | {}wl <Wallet>** | Register For Drop\n[==============]\nTeleport to BoboPixel0x0Centrale \n INVITE CODE \n https://discord.gg/3cH32c9QyU \n".format(Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix), color=discord.Color.blue())
    await ctx.send(embed=em)
@bot.command()
async def adminhelp(ctx):
    author = ctx.author
    em = discord.Embed(description="\n**up2**\n\n *accept**\n\n **foto**\n\n**high**\n\n **showl**\n\n **showml**\n\n **delwal**\n\n **ediwal**\n\n **addvar*\n".format(), color=discord.Color.blue())
    await ctx.send(embed=em)
@bot.command(aliases=["ph"])
async def panichelp(ctx):
    author = ctx.author
    em = discord.Embed(description="\n**Commands to use:** \n{}search ( Look around the Room )\n{}player ( Player STATS ) \n{}use ( Use an Item of your Inventory )\n{}inventory ( Inventory )\n{}send ( Send Items )\n{}burn ( Burn Items )\n{}touch ( Interact with the environment )\n\n\n[==============]\n INVITE CODE's\n nBoboPixel0x0Centrale\n https://discord.gg/3cH32c9QyU \nPanicRoom\n https://discord.gg/W6vZuwEa8g\n".format(Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix), color=discord.Color.blue())
    await ctx.send(embed=em)
@bot.command(aliases=["hh"])
async def hackerhelp(ctx):
    author = ctx.author
    em=discord.Embed(title="**List of commands.**", description="** This Is a GAME!!!**\n\n{}bot_info ( Bot Info and Server Stats )\n{}stats <file_name>( Player Stats ) \n{}scan <@ping user>( Scan a Target ) \n{}upgrade <file_name>( Upgrade Your Stuff )\n{}upload <file_name>( Upload a File ) \n{}download <file_name> ( Download a File ) \n{}task ( See your Running Tasks ) \n{}delete <file_name>( Delete a File ) \n{}crack <file_name>( Crack Password ) \n{}inventory ( See your Inventory ) \n{}hardware ( Your Hardware  ) \n{}software ( Your Software ) \n{}install <file_name>( Install a File ) \n{}run <file_name>( Run a Script ) \n{}buy ( BuY NFT on Atomic Market and Nefty ) \n{}login <user_name>,<password>( Login as ) \n{}setpass ( any password tou can remember) \n\n{}logout ( Logout ) \n{}brute_force<@ping user> ( Brute-Force a Password ) \n{}mine (  Miner Stats ) \n{}spam ( Spam Stats ) \n{}transfer ( Transfer FakeToken ) \n{}hide ( Hide a File ) \n{}unhide ( Unhide a File ) \n{}collect ( Collect Miner and Spam )\n\n[=======INVITE CODE's=======]\n\nBoboPixel0x0Centrale\n https://discord.gg/3cH32c9QyU\nPanicRoom\n https://discord.gg/W6vZuwEa8g\nHacker Guild\n https://discord.gg/ERRDkARtgS\n\n".format(Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix), colour=discord.Color.orange())
    await ctx.send(embed=em)
@bot.event
async def on_command1():
    print("command")
    info = fileIO("config/config.json", "load")
    info["Commands_used"] = info["Commands_used"] + 1
    fileIO("config/config.json", "save", info)
    #if
@bot.command(aliases=["ping"])
async def info(ctx):
    author = ctx.author
    message = ctx.message
    member = message.author
    info = fileIO("config/config.json", "load")
    curr_time = time.time()
    runtime = float(curr_time) - float(info["starttime"])
    Name_Robot = info["Name_Robot"]
    ID_Robot = info["ID_Robot"]
    em = discord.Embed(title="BOT INFO:", type="rich", description="Robot Name: {}\n Robot ID: {}\n\n1) Prefix: {}\n2) Admin: {}\n3) Bot: {}\n4) Version: {}\n5) Shards: {}\n6) Total commands: {}\n7) Users: {}\n8) Total Wallets: {}\n9) Run Time: {}sec\n".format(Name_Robot, ID_Robot,Prefix, bot.user.name, bot.user.id, VS, Shards, info["Commands_used"], info["totalusers"], info["regwallets"], round(runtime, 3)), color=discord.Color.blue())
    #em = discord.Embed(description="<@{}>\n```diff\n What Box Would you like to Open?\n (1)Food, (2)Wood, (3)Stone, (4)Gold,\n (5)Metal, (6)Bobo, (7)People, (8)Coin,\n (9)Small, (10)Key, (11)OpenAll\n\n CaseSensitive! or use numbers.\n```".format(author.id), color=discord.Color.blue())
    await ctx.send(embed=em)
    options = ["Time", "time", "Users", "User", "users", "user", "Admin", "admin", "Bot", "bot", "gole", "metal", "bobo", "people", "Coin", "coin", "Small", "small", "Key", "key", "OpenAll", "openall", "1", "2", "3", "4" ,"5", "6", "7", "8", "9", "10", "11"]
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer1 = await bot.wait_for("message", check=pred)
    if answer1.content in options :
        if answer1.content == "9" or answer1.content == "time" or answer1.content == "Time":
            #print("INfo Here")
            starttimeOriginal = info["starttime"]
            curr_time = time.time()
            #print(curr_time)
            #runtime = float(curr_time) - float(info["starttime"])
            runtime1 = float(starttimeOriginal) - float(curr_time)
            seconds = runtime
            m1, s1 = divmod(seconds, 60)
            h1, m1 = divmod(m1, 60)
            #curr_timecurr_time = float(curr_time) - 1520000000
            #mcurr_time, scurr_time = divmod(curr_timecurr_time, 60)
            #hcurr_time, mcurr_time = divmod(mcurr_time, 60)
            em1 = discord.Embed(description="```diff\n- runtime:\n\n- {} Hours,\n {} Minutes,\n {} Seconds\n ```".format(int(h1), int(m1), int(s1)), color=discord.Color.red())
            await ctx.send(embed=em1)
            em = discord.Embed(description="<@{}>\n```diff\n\n starttimeOriginal{}\n runtime{}\n runtime1{}\n```".format(author.id, starttimeOriginal,runtime,runtime1), color=discord.Color.blue())
            return
            #await ctx.send(embed=em)
            #em.set_image(url="https://wax.atomichub.io/explorer/asset/1099543183485")
            #em.set_thumbnail(url=bot.user.avatar_url)
            #await ctx.send(embed=em)
        if answer1.content == "7" or answer1.content == "Users" or answer1.content == "users"or answer1.content == "User" or answer1.content == "user":
            #print("INfo Here")
            rock_member = info["rock_member"]
            scissor_member = info["scissor_member"]
            paper_member = info["paper_member"]
            totaluser = info["totalusers"]
            paladin_member = info["paladin_member"]
            mage_member = info["mage_member"]
            thief_member = info["thief_member"]
            archer_member =info["archer_member"]
            hacker_member = info["hacker_member"]
            owner_castle_member = info["owner_castle_member"]
            citizen_member = info["citizen_member"]
            vip_member =info["vip_member"]
            trader_member = info["trader_member"]
            traveler_member = info["traveler_member"]
            botter_member =info["botter_member"]
            novice_member = info["novice_member"]
            fighter_member = info["fighter_member"]
            em = discord.Embed(description="```diff\n **vip_member: {}**\n\n fighter_member: {}\n traveler_member: {}\n trader_member: {}\n botter_member: {}\n novice_member: {}\n\n rock_member: {}\n scissor_member: {}\n paper_member: {}\n\n paladin_member: {}\n mage_member: {}\n thief_member: {}\n archer_member: {}\n hacker_member: {}\n\n owner_castle_member: {}\n citizen_member: {}\n\n- totaluser: {}\n ```".format(int(vip_member), int(fighter_member), int(traveler_member),int(trader_member), int(botter_member), int(novice_member),int(rock_member), int(scissor_member), int(paper_member), int(paladin_member),int(mage_member), int(thief_member), int(archer_member),int(hacker_member),int(owner_castle_member), int(citizen_member),int(totaluser)), color=discord.Color.red())
            await ctx.send(embed=em)
            return
            #await ctx.send(embed=em)
            #em.set_image(url="https://wax.atomichub.io/explorer/asset/1099543183485")
            #em.set_thumbnail(url=bot.user.avatar_url)
            #await ctx.send(embed=em)
        if answer1.content == "2" or answer1.content == "Admin" or answer1.content == "admin":
            #print("INfo Here")
            Owner = info["Owner"]
            Name_Host = info["Name_Host"]
            Admin = info["Admin"]
            ID_Host =info["ID_Host"]
            em = discord.Embed(description="```diff\n- Owner: {}\n Name_Host: {}\n Admin: {}\n ID_Host: {}\n Name_Robot: {}\n ID_Robot: {}\n ```".format(Owner,Name_Host, Admin, ID_Host,Name_Robot, ID_Robot), color=discord.Color.red())
            await ctx.send(embed=em)
            return
            #await ctx.send(embed=em)
            #em.set_image(url="https://wax.atomichub.io/explorer/asset/1099543183485")
            #em.set_thumbnail(url=bot.user.avatar_url)
            #await ctx.send(embed=em)
        if answer1.content == "3" or answer1.content == "Bot" or answer1.content == "bot":
            #print("INfo Here")
            Owner = info["Owner"]
            Name_Host = info["Name_Host"]
            Admin = info["Admin"]
            ID_Host =info["ID_Host"]
            em = discord.Embed(description="```diff\n The whole bot is writen in python it contains some json and env files plus the libary of discord to funktion well.\n if you are interessted in the source code please let it me know!\n as well if you have some improvments for the code. \n ```".format(Owner,ID_Host,Name_Robot, ID_Robot), color=discord.Color.red())
            await ctx.send(embed=em)
            em = discord.Embed(description="```diff\n If you are interessted in Automated programs to play the game?\n\n Contact me and Let's build your wish Robot!\n- Owner: {}\n- ID_Host: {}\n\n Name_Robot: {}\n ID_Robot: {}\n ```".format(Owner,ID_Host,Name_Robot, ID_Robot), color=discord.Color.red())
            await ctx.send(embed=em)
            return
            #await ctx.send(embed=em)
            #em.set_image(url="https://wax.atomichub.io/explorer/asset/1099543183485")
            #em.set_thumbnail(url=bot.user.avatar_url)
            #await ctx.send(embed=em)
@bot.event
async def on_command(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    user = (discord.Member)
    guild = ctx.guild
    print("ctx income")
    info = fileIO("config/config.json", "load")
    info["Commands_used"] = info["Commands_used"] + 1
    fileIO("config/config.json", "save", info)
    whereServer = ctx.message.guild.id
    try:
        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    except:
        print("No DATA")
    ainfo["whereServer"] = ctx.message.guild.id
    try:
        rock_market_chat = 890488675572527104
        rock_market_bot = 890488730090078218
        rock_training_chat = 890492014293049354
        rock_training_bot = 890492049185443870
        rock_castle_chat = 890491345565798430
        rock_castle_bot = 890491403623350314
        rock_forest_chat = 890490978673238056
        rock_forest_bot = 890491441317552148
        rock_mine_chat = 890490957236146186
        rock_mine_bot = 890491554739937300
        rock_field_chat = 890490932741419059
        rock_field_bot = 890491515531587584
        rock_dungon_chat = 890500881240428555
        rock_dungon_bot = 890500899796054056
        info = fileIO("players/{}/info.json".format(author.id), "load")
        info["where"] = channel.id
        #ainfo["wherecastle"] = ctx.message.guild.id
        #fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        if info["where"] == rock_training_chat :
            info["location"] = "Newbe Training Ground"
        if info["where"] == rock_training_bot :
            info["location"] = "Newbe Training Ground"
        if info["where"] == rock_market_chat :
            info["location"] = "Market I"
        if info["where"] == rock_market_bot :
            info["location"] = "Market I"
        if info["where"] == rock_field_chat :
            info["location"] = "Rock Field II"
        if info["where"] == rock_field_bot :
            info["location"] = "Rock Field II"
        if info["where"] == rock_forest_chat :
            info["location"] = "Rock Forest IV"
        if info["where"] == rock_forest_bot :
            info["location"] = "Rock Forest IV"
        if info["where"] == rock_castle_chat :
            info["location"] = "Player Battle Field"
        if info["where"] == rock_castle_bot :
            info["location"] = "Player Battle Field"
        if info["where"] == rock_mine_chat :
            info["location"] = "Rock Mine III"
        if info["where"] == rock_mine_bot :
            info["location"] = "Rock Mine III"
        if info["where"] == rock_dungon_chat :
            info["location"] = "Rock Dungon V"
        if info["where"] == rock_dungon_bot :
            info["location"] = "Rock Dungon V"
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except:
        print("Is not Member yet")
        print("Is not Member yet")
        print("Is not Member yet")
        print("Is not Member yet")
    #where = ainfo["where"]
  #if channel.id == rock_market_chat:
    #     await ctx.send("You are at rockmarket chat ")
    #     print("You are at rockmarket chat ")
    #elif channel.id == rock_market_bot:
    #     await ctx.send("You are at rockmarket bot")
    #     print("You are at rockmarket bot")
#-----------------------------------------------------------------#
#-------------------------------RPG-------------------------------#
#-----------------------------------------------------------------#
#--------------------------------------------------------------------------#
#-------------------------------BOT COMMANDS-------------------------------#
#--------------------------------------------------------------------------#
@bot.command()
async def start(ctx):
    author = ctx.author
    message = ctx.message
    channel = ctx.channel
    BoboCoinServer = 802187353607110676
    bpServer = 944872160470659103 # BoboCoins's Server TEXT CHAT
    await _create_userFirst(ctx)
    await _create_user(author)
    ainfo = fileIO("config/config.json", "load")
    infoFirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #ainfo["rock_member"] = ainfo["starttime"]
    #fileIO("config/config.json", "save", info) if info["race"] and info["class"] == "None": $$ if infoFirst["where"] and infoFirst["wherecastle"] == "None" or
    await ctx.send("<@{}> Welcome This is The Beginning of your Journey through the Infinity World of BoboPixel0x0\n please use ping @bobocoin#2774 for any Questions or Talk. The Bot mostly read DATA of the Blockchain and Print it Here on Discord... enjoymon the Game".format(author.id))
    if channel.id == BoboCoinServer:
        embed = discord.Embed()
        embed.description = ("Please go to Verify Channel in Guild Server #verify thoug Invite_Link_1st! Select your Main Element <Rock> <Scissor> <Paper>! Please select the Channel to Start there!\n Each Castle Guild has its Own Level Rank and Drop Rates as well as Attack Advantage!\n\n \n\n[Rock_Invite_Link_1st](https://discord.gg/36gzxxF4Q8)\n {} Member\n\n[Scissor_Invite_Link_1st](https://discord.gg/gS46rQmHNg)\n {} Member\n\n[Paper_Invite_Link_1st](https://discord.gg/frtvfuhGJ9)\n {} Member\n\n[PixelMinisBastion](https://discord.gg/r2KDxQJuz6)\n\n\n\n[BP0x0Poker(https://discord.gg/y4h3tARMny)\n\n[Bp0x0PanicRoom](https://discord.gg/HvFFf8a2)\n\n\n- USE Invite Link 1st \n\n USE COMMAND {}start in the #verify channel on the Other Server!".format(Prefix,ainfo["rock_member"], ainfo["scissor_member"], ainfo["paper_member"]))
        await ctx.send(embed=embed)
        #embed.description = ("Please go to Verify Channel in Guild Server #verify thoug Invite_Link_1st! Select your Main Element <Rock> <Scissor> <Paper>! Please select the Channel to Start there!\n Each Castle Guild has its Own Rank and Drop Rates as well as Attack Advantage!\n If you just want to look around and desite later what Guild to go with. Visit as Travler and Check the Server Out! \n\n[Rock_Invite_Link_1st](https://discord.gg/36gzxxF4Q8)\n[RockTravler](https://discord.com/channels/874887432963776563/891350875996569620)\n[RockVerify](https://discord.com/channels/874887432963776563/936652264733556736)\n {} Member\n\n[Scissor_Invite_Link_1st](https://discord.gg/R5dp47zBpe)\n[ScissorTravler](https://discord.com/channels/874888849837424661/891360460992028815)\n[ScissorVerify](https://discord.com/channels/874888849837424661/938407736973082634)\n {} Member\n\n[Paper_Invite_Link_1st](https://discord.gg/JaMRmnAwyu)\n[PaperTravler](https://discord.com/channels/874887827865866241/891360660712194049)\n[PaperVerify](https://discord.com/channels/874887827865866241/938407609906630707)\n {} Member\n\n\n- USE Invite Link 1st \n\n USE COMMAND {}start in the #verify channel on the Other Server!".format(Prefix,ainfo["rock_member"], ainfo["scissor_member"], ainfo["paper_member"]))
        #await ctx.send(embed=embed)
        return
    else:
        # if infoFirst["where"] == "None" and infoFirst["wherecastle"] == "None" or
        print("Where is NOT bpServer = 944872160470659103  BoboCoinServer")
        #await _create_user(author)
        if channel.id == bpServer:
            channel1 = channel.id
            print("CHANNEL IS 944where and wherecastle ")
            print("Where ChannelID   ***                  channel1")
            print(channel1)
            await ctx.send("<@{}> Welcome This is The Beginning of your Journey through the Infinity World of BoboPixel0x0\n please use #port to Select a Guild enjoymon the Game".format(author.id))
            embed = discord.Embed()
            embed.description = ("Please go to Verify Channel in Guild Server #verify and Write **{}start** to Verify your Wallet and get Role's! Invite_Link_1st! Select your Main Element <Rock> <Scissor> <Paper>! Please select the Channel to Start there!\n Each Castle Guild has its Own Level Rank and Drop Rates as well as Attack Advantage! PixelMinis NFTS Collection can be used as Charackter soon!\nBP0x0Poker is for Tabel Games with Giveaways\n\n \n\n[Rock_Invite_Link_1st](https://discord.gg/36gzxxF4Q8)\n {} Member\n\n[Scissor_Invite_Link_1st](https://discord.gg/gS46rQmHNg)\n {} Member\n\n[Paper_Invite_Link_1st](https://discord.gg/frtvfuhGJ9)\n {} Member\n\n[PixelMinisBastion](https://discord.gg/r2KDxQJuz6)\n\n\n\n[BP0x0Poker(https://discord.gg/y4h3tARMny)\n\n[Bp0x0PanicRoom](https://discord.gg/HvFFf8a2)\n\n\n- USE Invite Link 1st \n\n USE COMMAND {}start in the #verify channel on the Other Server!".format(Prefix,ainfo["rock_member"], ainfo["scissor_member"], ainfo["paper_member"],Prefix))
            await ctx.send(embed=embed)
            return
        else:
            await _create_user(author)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            info["where"] = channel.id
            print("where and wherecastle ")
            print("Where ChannelID    CHANNEL IS RSP or ANYWHERE")
            print(info["where"])
            info["wherecastle"] = ctx.message.guild.id
            print("wherecastle guildID")
            print(info["wherecastle"])
            info["wherecastle"] = ctx.message.guild.id
            fileIO("players/{}/info.json".format(author.id), "save", info)
    #   info = fileIO("players/{}/info.json".format(author.id), "load")
    print("other where and wherecastle  NoneNoneNoneNone AFTER ERROR")
    print("where NoneNoneNoneNone")
    print("Where ChannelID")
    print(info["where"])
    print("wherecastle  NoneNoneNoneNone")
    print("wherecastle guildID")
    print(info["wherecastle"])
    rock_verify_chat = 936652264733556736
    rock_verify2_bot = 890493614361288754
    scissor_verify_chat = 938407736973082634
    scissor_verify2_bot = 890498522330320896
    paper_verify_chat = 938407609906630707
    paper_verify2_bot = 890494844533874739
    test2channel = 919230871867912252
    test3channel = 939181534445961216
    test4channel = 940225470887256117
    RockCastle = 874887432963776563
    ScissorCastle = 874888849837424661
    PaperCastle = 874887827865866241
    PIXELMINIS = 986421051640664075
    PIXELMINISserver = 498894646697656331
    coffeeServer = 1085900861747769388
    coffeechat = 1085901851590934549
    rock_dungon_Server = 1079313545193345124
    rock__chat_unborn = 1085838152079519754
    scissor_dungon_Server = 1085897583735611433
    scissor_chat_unborn = 1085898547855110206
    paper_dungon_Server = 1085885211386064896
    paper__chat_unborn = 1085889721504374784
    streetsServerServer = 1069993213257076787/1086570270053126154
    streets_0x0 = 1086570270053126154
    whereServer = ctx.message.guild.id
    if whereServer == coffeeServer :
        info["castle_guild_name"] = "COFFEE"
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #ainfo["rock_member"] += 1
        info["all_base_wood"] = 1
        info["all_base_stone"] = 1
        info["all_base_metal"] = 1
        #fileIO("config/config.json", "save", ainfo)
        if info["race"] and info["class"] == "None":
            await ctx.send("<@{}> Created Stats...\n\nWelcome to BoboPixel0x0 RPG!\n```May I ask what is your WAX wallet address?```\nIf you do not Owne NFTS yet\n WOMBAT give a FREE Wallet and games you play there give you Tokens to Swap for EOS...\n https://go.getwombat.io/JiTx\n Promo  CODE: ```TSUX3G2```\n".format(author.id))
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            wallet_to_check_new = str(answer1.content)
            if wallet_to_check_new == None:
                try:
                    if wallet_to_check_new == None:
                        em = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                except TypeError :
                    print("TypeError account!")
                    return
            if len(wallet_to_check_new) < 1 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(wallet_to_check_new), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(wallet_to_check_new) > 13 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(wallet_to_check_new), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(wallet_to_check_new) > 1 and len(wallet_to_check_new) < 13 :
                print("account")
                print(wallet_to_check_new)
                info["account_to_check"] = wallet_to_check_new
                info["account"] = wallet_to_check_new
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", info)
                em = discord.Embed(description="```diff\n+ A Moment please Safe and Check your entry...!\n- If it takes to long repeat your COmmnad\n+ {}setwallet {}```".format(Prefix, wallet_to_check_new), color=discord.Color.blue())
                await ctx.send(embed=em)
                #await _check_wallet(ctx)
                freecandy = info["bpfreecandy"]
                high = 6
                middle = 3
                low2 = 2
                low = 1
                maxran = freecandy + high
                random_1 = random.randint(low, maxran) + 1
                random_2 = random.randint(low, maxran) + 1
                random_3 = random.randint(low, maxran) + 1
                random_4 = random.randint(low, maxran)
                random_5 = random.randint(low, maxran) + 1
                random_6 = random.randint(low, maxran) + 1
                random_7 = random.randint(low, maxran) + 1
                random_9 = random.randint(low, maxran) + 1
                random_10 = random.randint(low, middle) + 4
                random_11 = random.randint(low, middle)
                random_12 = random.randint(low, middle) + 3
                random_13 = random.randint(low, middle) + 5
                random_14 = random.randint(low, middle) + 1
                random_15 = random.randint(low, high) + 4
                random_16 = random.randint(low, high) + 3
                random_17 = random.randint(low, high) + 1
                random_18 = random.randint(low, high)
                random_19 = random.randint(low, high) + 2
                random_8 = random.randint(low, high) + 1
                random_21 = random.randint(low, low2) + 1
                random_22 = random.randint(low, low2) + 4
                random_23 = random.randint(low, low2) + 3
                random_24 = random.randint(low, low2) + 5
                random_25 = random.randint(low, low2) + 1
                random_26 = random.randint(low, low2) + 2
                if random_18 == 1:
                    info["race"] = "Bobo"
                if random_18 == 2:
                    info["race"] = "Unicorn"
                if random_18 == 3:
                    info["race"] = "Animal"
                if random_18 == 4:
                    info["race"] = "Alien"
                if random_18 == 5:
                    info["race"] = "Robot"
                if random_18 == 6:
                    info["race"] = "Human"
                info["all_base_attack"] += random_1 + 1
                info["all_base_defence"] += random_2 + 2
                info["all_base_drop"] += random_24
                info["all_base_boco"] += random_3
                info["all_base_exp"] += random_11
                info["all_base_skexp"] += random_13 + 2
                info["all_base_food"] += 1
                info["all_base_gold"] += random_25
                info["all_base_wood"] += 1
                info["all_base_stone"] += random_4
                info["all_base_metal"] += 1
                info["all_base_hp"] += random_5
                info["all_base_sp"] += random_14
                info["all_base_mp"] += random_17
                info["all_base_people"] += 10
                info["all_base_door"] += random_21
                info["all_base_key"] += random_22
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
            else:
                await ctx.send("Next time choose one of the options.")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
        else:
            await ctx.send("You're already setup from Start.")
    if whereServer == paper_dungon_Server :
        info["castle_guild_name"] = "PaperCastle"
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #ainfo["rock_member"] += 1
        info["all_base_wood"] = 100
        info["all_base_stone"] = 1
        info["all_base_metal"] = 1
        #fileIO("config/config.json", "save", ainfo)
        if info["race"] and info["class"] == "None":
            await ctx.send("<@{}> Created Stats...\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what is your WAX wallet address?\n`If you do not Owne one yet\n WOMBAT give a FREE Wallet and games you play there give you Tokens to Swap for EOS...\n https://go.getwombat.io/JiTx\n Promo  CODE: ```TSUX3G2```\n".format(author.id))
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            wallet_to_check_new
            if account == None:
                try:
                    if account == None:
                        em = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                except TypeError :
                    print("TypeError account!")
                    return
            if len(account) < 1 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(account) > 13 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(account) > 1 and len(account) < 13 :
                print("account")
                print(account)
                info["account_to_check"] = account
                info["account"] = account
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", info)
                em = discord.Embed(description="```diff\n+ A Moment please Safe and Check your entry...!\n- If it takes to long repeat your COmmnad\n+ {}setwallet {}```".format(Prefix, account), color=discord.Color.blue())
                await ctx.send(embed=em)
                #await _check_wallet(ctx)
                freecandy = info["bpfreecandy"]
                high = 6
                middle = 3
                low2 = 2
                low = 1
                maxran = freecandy + high
                random_1 = random.randint(low, maxran) + 1
                random_2 = random.randint(low, maxran) + 1
                random_3 = random.randint(low, maxran) + 1
                random_4 = random.randint(low, maxran)
                random_5 = random.randint(low, maxran) + 1
                random_6 = random.randint(low, maxran) + 1
                random_7 = random.randint(low, maxran) + 1
                random_9 = random.randint(low, maxran) + 1
                random_10 = random.randint(low, middle) + 4
                random_11 = random.randint(low, middle)
                random_12 = random.randint(low, middle) + 3
                random_13 = random.randint(low, middle) + 5
                random_14 = random.randint(low, middle) + 1
                random_15 = random.randint(low, high) + 4
                random_16 = random.randint(low, high) + 3
                random_17 = random.randint(low, high) + 1
                random_18 = random.randint(low, high)
                random_19 = random.randint(low, high) + 2
                random_8 = random.randint(low, high) + 1
                random_21 = random.randint(low, low2) + 1
                random_22 = random.randint(low, low2) + 4
                random_23 = random.randint(low, low2) + 3
                random_24 = random.randint(low, low2) + 5
                random_25 = random.randint(low, low2) + 1
                random_26 = random.randint(low, low2) + 2
                if random_18 == 1:
                    info["race"] = "Bobo"
                if random_18 == 2:
                    info["race"] = "Unicorn"
                if random_18 == 3:
                    info["race"] = "Animal"
                if random_18 == 4:
                    info["race"] = "Alien"
                if random_18 == 5:
                    info["race"] = "Robot"
                if random_18 == 6:
                    info["race"] = "Human"
                info["all_base_attack"] += random_1 + 1
                info["all_base_defence"] += random_2 + 2
                info["all_base_drop"] += random_24
                info["all_base_boco"] += random_3
                info["all_base_exp"] += random_11
                info["all_base_skexp"] += random_13 + 2
                info["all_base_food"] += 1
                info["all_base_gold"] += random_25
                info["all_base_wood"] += 1
                info["all_base_stone"] += random_4
                info["all_base_metal"] += 1
                info["all_base_hp"] += random_5
                info["all_base_sp"] += random_14
                info["all_base_mp"] += random_17
                info["all_base_people"] += 10
                info["all_base_door"] += random_21
                info["all_base_key"] += random_22
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
            else:
                await ctx.send("Next time choose one of the options.")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
        else:
            await ctx.send("You're already setup from Start.")
    if whereServer == scissor_dungon_Server :
        info["castle_guild_name"] = "ScissorCastle"
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #ainfo["rock_member"] += 1
        info["all_base_wood"] = 1
        info["all_base_stone"] = 1
        info["all_base_metal"] = 100
        #fileIO("config/config.json", "save", ainfo)
        if info["race"] and info["class"] == "None":
            await ctx.send("<@{}> Created Stats...\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what is your WAX wallet address?\n`If you do not Owne one yet\n WOMBAT give a FREE Wallet and games you play there give you Tokens to Swap for EOS...\n https://go.getwombat.io/JiTx\n Promo  CODE: ```TSUX3G2```\n".format(author.id))
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            wallet_to_check_new
            if account == None:
                try:
                    if account == None:
                        em = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                except TypeError :
                    print("TypeError account!")
                    return
            if len(account) < 1 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(account) > 13 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(account) > 1 and len(account) < 13 :
                print("account")
                print(account)
                info["account_to_check"] = account
                info["account"] = account
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", info)
                em = discord.Embed(description="```diff\n+ A Moment please Safe and Check your entry...!\n- If it takes to long repeat your COmmnad\n+ {}setwallet {}```".format(Prefix, account), color=discord.Color.blue())
                await ctx.send(embed=em)
                #await _check_wallet(ctx)
                freecandy = info["bpfreecandy"]
                high = 6
                middle = 3
                low2 = 2
                low = 1
                maxran = freecandy + high
                random_1 = random.randint(low, maxran) + 1
                random_2 = random.randint(low, maxran) + 1
                random_3 = random.randint(low, maxran) + 1
                random_4 = random.randint(low, maxran)
                random_5 = random.randint(low, maxran) + 1
                random_6 = random.randint(low, maxran) + 1
                random_7 = random.randint(low, maxran) + 1
                random_9 = random.randint(low, maxran) + 1
                random_10 = random.randint(low, middle) + 4
                random_11 = random.randint(low, middle)
                random_12 = random.randint(low, middle) + 3
                random_13 = random.randint(low, middle) + 5
                random_14 = random.randint(low, middle) + 1
                random_15 = random.randint(low, high) + 4
                random_16 = random.randint(low, high) + 3
                random_17 = random.randint(low, high) + 1
                random_18 = random.randint(low, high)
                random_19 = random.randint(low, high) + 2
                random_8 = random.randint(low, high) + 1
                random_21 = random.randint(low, low2) + 1
                random_22 = random.randint(low, low2) + 4
                random_23 = random.randint(low, low2) + 3
                random_24 = random.randint(low, low2) + 5
                random_25 = random.randint(low, low2) + 1
                random_26 = random.randint(low, low2) + 2
                if random_18 == 1:
                    info["race"] = "Bobo"
                if random_18 == 2:
                    info["race"] = "Unicorn"
                if random_18 == 3:
                    info["race"] = "Animal"
                if random_18 == 4:
                    info["race"] = "Alien"
                if random_18 == 5:
                    info["race"] = "Robot"
                if random_18 == 6:
                    info["race"] = "Human"
                info["all_base_attack"] += random_1 + 1
                info["all_base_defence"] += random_2 + 2
                info["all_base_drop"] += random_24
                info["all_base_boco"] += random_3
                info["all_base_exp"] += random_11
                info["all_base_skexp"] += random_13 + 2
                info["all_base_food"] += 1
                info["all_base_gold"] += random_25
                info["all_base_wood"] += 1
                info["all_base_stone"] += random_4
                info["all_base_metal"] += 1
                info["all_base_hp"] += random_5
                info["all_base_sp"] += random_14
                info["all_base_mp"] += random_17
                info["all_base_people"] += 10
                info["all_base_door"] += random_21
                info["all_base_key"] += random_22
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
            else:
                await ctx.send("Next time choose one of the options.")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
        else:
            await ctx.send("You're already setup from Start.")
    if whereServer == rock_dungon_Server :
        info["castle_guild_name"] = "RockCastle"
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #ainfo["rock_member"] += 1
        info["all_base_wood"] = 1
        info["all_base_stone"] = 100
        info["all_base_metal"] = 1
        #fileIO("config/config.json", "save", ainfo)
        if info["race"] and info["class"] == "None":
            await ctx.send("<@{}> Created Stats...\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what is your WAX wallet address?\n`If you do not Owne one yet\n WOMBAT give a FREE Wallet and games you play there give you Tokens to Swap for EOS...\n https://go.getwombat.io/JiTx\n Promo  CODE: ```TSUX3G2```\n".format(author.id))
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            wallet_to_check_new
            if account == None:
                try:
                    if account == None:
                        em = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                except TypeError :
                    print("TypeError account!")
                    return
            if len(account) < 1 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(account) > 13 :
                em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
                await ctx.send(embed=em)
                em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
                await ctx.send(embed=em1)
                return
            if len(account) > 1 and len(account) < 13 :
                print("account")
                print(account)
                info["account_to_check"] = account
                info["account"] = account
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", info)
                em = discord.Embed(description="```diff\n+ A Moment please Safe and Check your entry...!\n- If it takes to long repeat your COmmnad\n+ {}setwallet {}```".format(Prefix, account), color=discord.Color.blue())
                await ctx.send(embed=em)
                #await _check_wallet(ctx)
                freecandy = info["bpfreecandy"]
                high = 6
                middle = 3
                low2 = 2
                low = 1
                maxran = freecandy + high
                random_1 = random.randint(low, maxran) + 1
                random_2 = random.randint(low, maxran) + 1
                random_3 = random.randint(low, maxran) + 1
                random_4 = random.randint(low, maxran)
                random_5 = random.randint(low, maxran) + 1
                random_6 = random.randint(low, maxran) + 1
                random_7 = random.randint(low, maxran) + 1
                random_9 = random.randint(low, maxran) + 1
                random_10 = random.randint(low, middle) + 4
                random_11 = random.randint(low, middle)
                random_12 = random.randint(low, middle) + 3
                random_13 = random.randint(low, middle) + 5
                random_14 = random.randint(low, middle) + 1
                random_15 = random.randint(low, high) + 4
                random_16 = random.randint(low, high) + 3
                random_17 = random.randint(low, high) + 1
                random_18 = random.randint(low, high)
                random_19 = random.randint(low, high) + 2
                random_8 = random.randint(low, high) + 1
                random_21 = random.randint(low, low2) + 1
                random_22 = random.randint(low, low2) + 4
                random_23 = random.randint(low, low2) + 3
                random_24 = random.randint(low, low2) + 5
                random_25 = random.randint(low, low2) + 1
                random_26 = random.randint(low, low2) + 2
                if random_18 == 1:
                    info["race"] = "Bobo"
                if random_18 == 2:
                    info["race"] = "Unicorn"
                if random_18 == 3:
                    info["race"] = "Animal"
                if random_18 == 4:
                    info["race"] = "Alien"
                if random_18 == 5:
                    info["race"] = "Robot"
                if random_18 == 6:
                    info["race"] = "Human"
                info["all_base_attack"] += random_1 + 1
                info["all_base_defence"] += random_2 + 2
                info["all_base_drop"] += random_24
                info["all_base_boco"] += random_3
                info["all_base_exp"] += random_11
                info["all_base_skexp"] += random_13 + 2
                info["all_base_food"] += 1
                info["all_base_gold"] += random_25
                info["all_base_wood"] += 1
                info["all_base_stone"] += random_4
                info["all_base_metal"] += 1
                info["all_base_hp"] += random_5
                info["all_base_sp"] += random_14
                info["all_base_mp"] += random_17
                info["all_base_people"] += 10
                info["all_base_door"] += random_21
                info["all_base_key"] += random_22
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
                info["all_base_pot"] += random_23
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setCalcDroptoTotal(ctx)
                await _pick_class(ctx)
                return
            else:
                await ctx.send("Next time choose one of the options.")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
        else:
            await ctx.send("You're already setup from Start.")
    if info["where"] == rock_verify_chat or info["where"] == rock_verify2_bot or info["where"] == test2channel or info["where"] == PIXELMINIS or info["where"] == paper_verify2_bot or info["where"] == paper_verify_chat or info["where"] == scissor_verify2_bot or info["where"] == scissor_verify_chat or info["where"] == test3channel or info["where"] == test4channel:
        print("where ELif                rock_verify_chat")
        print(info["where"])
        print("wherecastle ELif")
        print(info["wherecastle"])
        if info["wherecastle"] == RockCastle:
        #if info["wherecastle"] == rock_verify_chat or info["wherecastle"] == rock_verify2_bot or info["wherecastle"] == test2channel:
            info["castle_guild_name"] = "RockCastle"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            ainfo["rock_member"] += 1
            info["all_base_wood"] = 0
            info["all_base_stone"] = 100
            info["all_base_metal"] = 0
            fileIO("config/config.json", "save", ainfo)
            if info["race"] and info["class"] == "None" and info["where"] == rock_verify_chat or info["where"] == rock_verify2_bot or info["where"] == test2channel:
                await ctx.send("<@{}> Created Stats...\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what race you want to play?\n`Choose one of the following`\n(1)Orc\n(2)Unicorn\n(3)Bobo\n(4)Animal\n(5)Alien\n(6)Robot\n(7)Human\n\n Race Stats are Random Selected 1-x\n Use Numer or Name to Navigate\n".format(author.id))
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer1 = await bot.wait_for("message", check=pred)
                values = ["orc", "Orc", "human", "Human", "unicorn", "Unicorn", "Alien", "alien", "Hacker", "hacker", "Bobo", "bobo", "Animal", "animal", "Robot", "robot", "secret1x1", "Secret1x1", "secret0x0", "Secret0x0", "1", "2", "3", "4", "5", "6", "7","8", "9", "{}start".format(Prefix)]
                if str(answer1.content) in values:
                    freecandy = info["bpfreecandy"]
                    high = 6
                    middle = 3
                    low2 = 2
                    low = 1
                    maxran = freecandy + high
                    random_1 = random.randint(low, maxran)
                    random_2 = random.randint(low, maxran)
                    random_3 = random.randint(low, maxran)
                    random_4 = random.randint(low, maxran)
                    random_5 = random.randint(low, maxran)
                    random_6 = random.randint(low, maxran)
                    random_7 = random.randint(low, maxran)
                    random_9 = random.randint(low, maxran)
                    random_10 = random.randint(low, middle)
                    random_11 = random.randint(low, middle)
                    random_12 = random.randint(low, middle)
                    random_13 = random.randint(low, middle)
                    random_14 = random.randint(low, middle)
                    random_15 = random.randint(low, high)
                    random_16 = random.randint(low, high)
                    random_17 = random.randint(low, high)
                    random_18 = random.randint(low, high)
                    random_19 = random.randint(low, high)
                    random_8 = random.randint(low, high)
                    random_21 = random.randint(low, low2)
                    random_22 = random.randint(low, low2)
                    random_23 = random.randint(low, low2)
                    random_24 = random.randint(low, low2)
                    random_25 = random.randint(low, low2)
                    random_26 = random.randint(low, low2)
                    if answer1.content == "{}start".format(Prefix):
                        return
                    elif answer1.content == "orc" or answer1.content == "Orc" or answer1.content == "1":
                        info["race"] = "Orc"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "human" or answer1.content == "Human" or answer1.content == "7":
                        info["race"] = "Human"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "unicorn" or answer1.content == "Unicorn" or answer1.content == "2":
                        info["race"] = "Unicorn"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "animal" or answer1.content == "Animal" or answer1.content == "4":
                        info["race"] = "Animal"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "bobo" or answer1.content == "Bobo" or answer1.content == "3":
                        info["race"] = "Bobo"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "alien" or answer1.content == "Alien" or answer1.content == "5":
                        info["race"] = "Alien"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "robot" or answer1.content == "Robot" or answer1.content == "6":
                        info["race"] = "Robot"
                        info["all_base_attack"] += random_1
                        info["all_base_defence"] += random_2
                        info["all_base_drop"] += random_24
                        info["all_base_boco"] += random_3
                        info["all_base_exp"] += random_11
                        info["all_base_skexp"] += random_13
                        info["all_base_food"] += 1
                        info["all_base_gold"] += random_25
                        info["all_base_wood"] += 1
                        info["all_base_stone"] += random_4
                        info["all_base_metal"] += 1
                        info["all_base_hp"] += random_5
                        info["all_base_sp"] += random_14
                        info["all_base_mp"] += random_17
                        info["all_base_people"] += 1
                        info["all_base_door"] += random_21
                        info["all_base_key"] += random_22
                        info["all_base_pot"] += random_23
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "secret0x0" or answer1.content == "Secret0x0" or answer1.content == "8":
                        info["race"] = "Secret0x0"
                        info["all_base_attack"] += random_1 * 2 * 2
                        info["all_base_defence"] += random_2 * 2 * 2
                        info["all_base_drop"] += random_24 * 2 * 2
                        info["all_base_boco"] += random_3 * 2 * 2
                        info["all_base_exp"] += random_11 * 2 * 2
                        info["all_base_skexp"] += random_13 * 2 * 2
                        info["all_base_food"] += 1 * 2 * 2
                        info["all_base_gold"] += random_25 * 2 * 2
                        info["all_base_wood"] += 1 * 2 * 2
                        info["all_base_stone"] += random_4 * 2 * 2
                        info["all_base_metal"] += 1 * 2 * 2
                        info["all_base_hp"] += random_5 * 2 * 2
                        info["all_base_sp"] += random_14 * 2 * 2
                        info["all_base_mp"] += random_17 * 2 * 2
                        info["all_base_people"] += 1 * 2 * 2
                        info["all_base_door"] += random_21 * 2 * 2
                        info["all_base_key"] += random_22  * 2 * 2
                        info["all_base_pot"] += random_23 * 2 * 2
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                    elif answer1.content == "secret1x1" or answer1.content == "Secret1x1" or answer1.content == "9":
                        info["race"] = "Secret1x1"
                        info["all_base_attack"] += random_1 * 2
                        info["all_base_defence"] += random_2 * 2
                        info["all_base_drop"] += random_24 * 2
                        info["all_base_boco"] += random_3 * 2
                        info["all_base_exp"] += random_11 * 2
                        info["all_base_skexp"] += random_13 * 2
                        info["all_base_food"] += 1 * 2
                        info["all_base_gold"] += random_25 * 2
                        info["all_base_wood"] += 1 * 2
                        info["all_base_stone"] += random_4 * 2
                        info["all_base_metal"] += 1 * 2
                        info["all_base_hp"] += random_5 * 2
                        info["all_base_sp"] += random_14 * 2
                        info["all_base_mp"] += random_17 * 2
                        info["all_base_people"] += 1 * 2
                        info["all_base_door"] += random_21 * 2
                        info["all_base_key"] += random_22 * 2
                        info["all_base_pot"] += random_23 * 2
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        await _check_setCalcDroptoTotal(ctx)
                        await _pick_class(ctx)
                        return
                else:
                    await ctx.send("Next time choose one of the options.")
                info["all_base_wood"] += 50
                info["all_base_stone"] += 100
                info["all_base_metal"] += 25
                fileIO("players/{}/info.json".format(author.id), "save", info)
                print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
            else:
                await ctx.send("You're already setup from Start.")
        elif info["where"] == paper_verify_chat or info["where"] == paper_verify2_bot or info["where"] == test4channel:
            if info["wherecastle"] == PaperCastle:
            #if info["wherecastle"] == paper_verify_chat or info["wherecastle"] == paper_verify2_bot or info["wherecastle"] == test4channel:
                info["castle_guild_name"] = "PaperCastle"
                fileIO("players/{}/info.json".format(author.id), "save", info)
                ainfo["paper_member"] += 1
                info["all_base_wood"] += 100
                info["all_base_stone"] = 0
                info["all_base_metal"] = 0
                fileIO("config/config.json", "save", ainfo)
                if info["race"] and info["class"] == "None":
                    await ctx.send("<@{}> Stats created.\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what race you want to play?\n`Choose one of the following`\n(1)Orc\n(2)Unicorn\n(3)Bobo\n(4)Animal\n(5)Alien\n(6)Robot\n(7)Human\n\n Stats are Random Selected 1-6\n Use Numer or Name to Navigate\n".format(author.id))
                    def pred(m):
                        return m.author == message.author and m.channel == message.channel
                    answer1 = await bot.wait_for("message", check=pred)
                    values = ["orc", "Orc", "human", "Human", "unicorn", "Unicorn", "Alien", "alien", "Hacker", "hacker", "Bobo", "bobo", "Animal", "animal", "Robot", "robot", "1", "2", "3", "4", "5", "6", "7", "{}start".format(Prefix)]
                    if str(answer1.content) in values:
                        freecandy = info["bpfreecandy"]
                        high = 6
                        middle = 3
                        low2 = 2
                        low = 1
                        maxran = freecandy + high
                        random_1 = random.randint(low, maxran)
                        random_2 = random.randint(low, maxran)
                        random_3 = random.randint(low, maxran)
                        random_4 = random.randint(low, maxran)
                        random_5 = random.randint(low, maxran)
                        random_6 = random.randint(low, maxran)
                        random_7 = random.randint(low, maxran)
                        random_9 = random.randint(low, maxran)
                        random_10 = random.randint(low, middle)
                        random_11 = random.randint(low, middle)
                        random_12 = random.randint(low, middle)
                        random_13 = random.randint(low, middle)
                        random_14 = random.randint(low, middle)
                        random_15 = random.randint(low, high)
                        random_16 = random.randint(low, high)
                        random_17 = random.randint(low, high)
                        random_18 = random.randint(low, high)
                        random_19 = random.randint(low, high)
                        random_8 = random.randint(low, high)
                        random_21 = random.randint(low, low2)
                        random_22 = random.randint(low, low2)
                        random_23 = random.randint(low, low2)
                        random_24 = random.randint(low, low2)
                        random_25 = random.randint(low, low2)
                        random_26 = random.randint(low, low2)
                        if answer1.content == "{}start".format(Prefix):
                            return
                        elif answer1.content == "orc" or answer1.content == "Orc" or answer1.content == "1":
                            info["race"] = "Orc"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "human" or answer1.content == "Human" or answer1.content == "7":
                            info["race"] = "Human"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                        elif answer1.content == "unicorn" or answer1.content == "Unicorn" or answer1.content == "2":
                            info["race"] = "Unicorn"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                        elif answer1.content == "animal" or answer1.content == "Animal" or answer1.content == "4":
                            info["race"] = "Animal"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                        elif answer1.content == "bobo" or answer1.content == "Bobo" or answer1.content == "3":
                            info["race"] = "Bobo"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "alien" or answer1.content == "Alien" or answer1.content == "5":
                            info["race"] = "Alien"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "robot" or answer1.content == "Robot" or answer1.content == "6":
                            info["race"] = "Robot"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += random_4
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += 1
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                    else:
                        await ctx.send("Next time choose one of the options.")
                    info["all_base_wood"] += 100
                    info["all_base_stone"] += 25
                    info["all_base_metal"] += 50
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
                else:
                    await ctx.send("Wrong Answer!")
        elif info["where"] == scissor_verify_chat or info["where"] == scissor_verify2_bot or info["where"] == test3channel:
            if info["wherecastle"] == ScissorCastle:
            #if info["wherecastle"] == scissor_verify_chat or info["wherecastle"] == scissor_verify2_bot or info["wherecastle"] == test3channel:
                info["castle_guild_name"] = "ScissorCastle"
                fileIO("players/{}/info.json".format(author.id), "save", info)
                ainfo["scissor_member"] += 1
                info["all_base_wood"] = 0
                info["all_base_stone"] = 0
                info["all_base_metal"] += 100
                fileIO("config/config.json", "save", ainfo)
                if info["race"] and info["class"] == "None":
                    await ctx.send("<@{}> Stats created.\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what race you want to play?\n`Choose one of the following`\n(1)Orc\n(2)Unicorn\n(3)Bobo\n(4)Animal\n(5)Alien\n(6)Robot\n(7)Human\n\n Stats are Random Selected 1-9\n Use Numer or Name to Navigate\n".format(author.id))
                    def pred(m):
                        return m.author == message.author and m.channel == message.channel
                    answer1 = await bot.wait_for("message", check=pred)
                    values = ["orc", "Orc", "human", "Human", "unicorn", "Unicorn", "Alien", "alien", "Hacker", "hacker", "Bobo", "bobo", "Animal", "animal", "Robot", "robot", "1", "2", "3", "4", "5", "6", "7", "{}start".format(Prefix)]
                    if str(answer1.content) in values:
                        high = 6
                        middle = 3
                        low2 = 2
                        low = 1
                        maxran = high
                        random_1 = random.randint(low, maxran)
                        random_2 = random.randint(low, maxran)
                        random_3 = random.randint(low, maxran)
                        random_4 = random.randint(low, maxran)
                        random_5 = random.randint(low, maxran)
                        random_6 = random.randint(low, maxran)
                        random_7 = random.randint(low, maxran)
                        random_9 = random.randint(low, maxran)
                        random_10 = random.randint(low, middle)
                        random_11 = random.randint(low, middle)
                        random_12 = random.randint(low, middle)
                        random_13 = random.randint(low, middle)
                        random_14 = random.randint(low, middle)
                        random_15 = random.randint(low, high)
                        random_16 = random.randint(low, high)
                        random_17 = random.randint(low, high)
                        random_18 = random.randint(low, high)
                        random_19 = random.randint(low, high)
                        random_8 = random.randint(low, high)
                        random_21 = random.randint(low, low2)
                        random_22 = random.randint(low, low2)
                        random_23 = random.randint(low, low2)
                        random_24 = random.randint(low, low2)
                        random_25 = random.randint(low, low2)
                        random_26 = random.randint(low, low2)
                        if answer1.content == "{}start".format(Prefix):
                            return
                        elif answer1.content == "orc" or answer1.content == "Orc" or answer1.content == "1":
                            info["race"] = "Orc"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "human" or answer1.content == "Human" or answer1.content == "7":
                            info["race"] = "Human"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "unicorn" or answer1.content == "Unicorn" or answer1.content == "2":
                            info["race"] = "Unicorn"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "animal" or answer1.content == "Animal" or answer1.content == "4":
                            info["race"] = "Animal"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "bobo" or answer1.content == "Bobo" or answer1.content == "3":
                            info["race"] = "Bobo"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "PixelMini" or answer1.content == "PixelMinis" or answer1.content == "10":
                            info["race"] = "Robot"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "alien" or answer1.content == "Alien" or answer1.content == "5":
                            info["race"] = "Alien"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "robot" or answer1.content == "Robot" or answer1.content == "6":
                            info["race"] = "Robot"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                        info["all_base_wood"] += 25
                        info["all_base_stone"] += 50
                        info["all_base_metal"] += 100
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    else:
                        await ctx.send("Next time choose one of the options.")
                        print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
                        return
                else:
                    try:
                        em = discord.Embed(description="```diff\n **Please Not that I can not Steal Anything of your Wallet simpley because I Do not know your Secret Seed! SO PLEASE NEVER SHARE IT WITH ANYONE when you not execly\n know How to Protect yourself\n The Game Read Only your Wallet and see if you Hold that specific NFT to prof you Own it!**\n\n #list_of_all for Giveaways are Real...\n Did you know you can get a Trader Roll or a Travler with your Char on All Server! \n USE COMMAND```\n\n** {}pass **\n to be a Travler \n or\n** {}lice **\n to be a Trader\n on the Other Servers\n".format(Prefix, Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                    except:
                        print("error??2323")
        elif info["where"] == PIXELMINIS :
            print("PIXELMINIS")
            info["castle_guild_name"] = "PixelMinisBastion"
            if info["wherecastle"] == PIXELMINISserver:
                print("PIXELMINISserver")
                fileIO("players/{}/info.json".format(author.id), "save", info)
                if info["race"] and info["class"] == "None":
                    await ctx.send("<@{}> Stats created.\n\nWelcome to BoboPixel0x0 RPG!\nMay I ask what race you want to play?\n`Choose one of the following`\n(1)Orc\n(2)Unicorn\n(3)Bobo\n(4)Animal\n(5)Alien\n(6)Robot\n(7)Human\n(10)PixelMinisBastion\n\n Stats are Random Selected 1-9\n Use Numer or Name to Navigate\n".format(author.id))
                    def pred(m):
                        return m.author == message.author and m.channel == message.channel
                    answer1 = await bot.wait_for("message", check=pred)
                    values = ["orc", "Orc", "human", "Human", "unicorn", "Unicorn", "Alien", "alien", "Hacker", "hacker", "Bobo", "bobo", "Animal", "animal", "Robot", "robot", "1", "2", "3", "4", "5", "6", "7","PixelMinisBastion", "10", "pixelminisbastion", "{}start".format(Prefix)]
                    if str(answer1.content) in values:
                        high = 6
                        middle = 3
                        low2 = 2
                        low = 1
                        maxran = high
                        random_1 = random.randint(low, maxran)
                        random_2 = random.randint(low, maxran)
                        random_3 = random.randint(low, maxran)
                        random_4 = random.randint(low, maxran)
                        random_5 = random.randint(low, maxran)
                        random_6 = random.randint(low, maxran)
                        random_7 = random.randint(low, maxran)
                        random_9 = random.randint(low, maxran)
                        random_10 = random.randint(low, middle)
                        random_11 = random.randint(low, middle)
                        random_12 = random.randint(low, middle)
                        random_13 = random.randint(low, middle)
                        random_14 = random.randint(low, middle)
                        random_15 = random.randint(low, high)
                        random_16 = random.randint(low, high)
                        random_17 = random.randint(low, high)
                        random_18 = random.randint(low, high)
                        random_19 = random.randint(low, high)
                        random_8 = random.randint(low, high)
                        random_21 = random.randint(low, low2)
                        random_22 = random.randint(low, low2)
                        random_23 = random.randint(low, low2)
                        random_24 = random.randint(low, low2)
                        random_25 = random.randint(low, low2)
                        random_26 = random.randint(low, low2)
                        if answer1.content == "{}start".format(Prefix):
                            return
                        elif answer1.content == "orc" or answer1.content == "Orc" or answer1.content == "1":
                            info["race"] = "Orc"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "human" or answer1.content == "Human" or answer1.content == "7":
                            info["race"] = "Human"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "unicorn" or answer1.content == "Unicorn" or answer1.content == "2":
                            info["race"] = "Unicorn"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "animal" or answer1.content == "Animal" or answer1.content == "4":
                            info["race"] = "Animal"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "bobo" or answer1.content == "Bobo" or answer1.content == "3":
                            info["race"] = "Bobo"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "alien" or answer1.content == "Alien" or answer1.content == "5":
                            info["race"] = "Alien"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "robot" or answer1.content == "Robot" or answer1.content == "6":
                            info["race"] = "Robot"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            info["all_base_wood"] += 25
                            info["all_base_stone"] += 50
                            info["all_base_metal"] += 100
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        elif answer1.content == "PixelMinis" or answer1.content == "pixelminis" or answer1.content == "PixelMini" or answer1.content == "pixelmini" or answer1.content == "10":
                            info["race"] = "PixelMinisBastion"
                            info["all_base_attack"] += random_1
                            info["all_base_defence"] += random_2
                            info["all_base_drop"] += random_24
                            info["all_base_boco"] += random_3
                            info["all_base_exp"] += random_11
                            info["all_base_skexp"] += random_13
                            info["all_base_food"] += 1
                            info["all_base_gold"] += random_25
                            info["all_base_wood"] += 1
                            info["all_base_stone"] += 1
                            info["all_base_metal"] += random_4
                            info["all_base_hp"] += random_5
                            info["all_base_sp"] += random_14
                            info["all_base_mp"] += random_17
                            info["all_base_people"] += 1
                            info["all_base_door"] += random_21
                            info["all_base_key"] += random_22
                            info["all_base_pot"] += random_23
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await _check_setCalcDroptoTotal(ctx)
                            await _pick_class(ctx)
                            return
                        #info["all_base_wood"] += 25
                        #info["all_base_stone"] += 50
                        #info["all_base_metal"] += 100
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        em = discord.Embed(description="```diff\n **Please Not that I can not Steal Anything of your Wallet simpley because I Do not know your Secret Seed! SO PLEASE NEVER SHARE IT WITH ANYONE when you not execly\n know How to Protect yourself\n The Game Read Only your Wallet and see if you Hold that specific NFT to prof you Own it!**\n\n #list_of_all for Giveaways are Real...\n Did you know you can get a Trader Roll or a Travler with your Char on All Server! \n USE COMMAND```\n\n** {}pass **\n to be a Travler \n or\n** {}lice **\n to be a Trader\n on the Other Servers\n".format(Prefix, Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                        #return
                    else:
                        await ctx.send("Next time choose one of the options.")
                        print("SAFE RACE RANDOM <<<<<<<<<<<<<<<<STATS")
                        return
                else:
                    try:
                        em = discord.Embed(description="```diff\n **Please Not that I can not Steal Anything of your Wallet simpley because I Do not know your Secret Seed! SO PLEASE NEVER SHARE IT WITH ANYONE when you not execly\n know How to Protect yourself\n The Game Read Only your Wallet and see if you Hold that specific NFT to prof you Own it!**\n\n #list_of_all for Giveaways are Real...\n Did you know you can get a Trader Roll or a Travler with your Char on All Server! \n USE COMMAND```\n\n** {}pass **\n to be a Travler \n or\n** {}lice **\n to be a Trader\n on the Other Servers\n".format(Prefix, Prefix), color=discord.Color.red())
                        await ctx.send(embed=em1)
                        return
                    except:
                        print("error??2323")
    if not info["where"] == rock_verify_chat or not info["where"] == rock_verify2_bot or not info["where"] == test2channel or not info["where"] == scissor_verify_chat or not info["where"] == paper_verify_chat or not info["where"] == test3channel or not info["where"] == test4channel or not info["where"] == PIXELMINIS :
        print("wherenot")
        print(info["where"])
        print(info["class"])
        print(info["race"])
        em = discord.Embed(description="```diff\n YOU ARE IN THE WRONG CHAT go to #verify\n **Please Not that I can not Steal Anything of your Wallet simpley because I Do not know your Secret Seed! SO PLEASE NEVER SHARE IT WITH ANYONE when you not execly\n know How to Protect yourself\n The Game Read Only your Wallet and see if you Hold that specific NFT to prof you Own it!**\n\n #list_of_all for Giveaways are Real...\n Did you know you can get a Trader Roll or a Travler with your Char on All Server! \n USE COMMAND```\n\n** {}pass **\n to be a Travler \n or\n** {}lice **\n to be a Trader\n on the Other Servers\n".format(Prefix, Prefix), color=discord.Color.red())
        await ctx.send(embed=em)
        embed = discord.Embed()
        embed.description = ("Please go to Verify Channel in Guild Server #verify thoug Invite_Link_1st! Select your Main Element <Rock> <Scissor> <Paper>! Please select the Channel to Start there!\n Each Castle Guild has its Own Level Rank and Drop Rates as well as Attack Advantage!\n\n \n\n[Rock_Invite_Link_1st](https://discord.gg/36gzxxF4Q8)\n {} Member\n\n[Scissor_Invite_Link_1st](https://discord.gg/gS46rQmHNg)\n {} Member\n\n[Paper_Invite_Link_1st](https://discord.gg/frtvfuhGJ9)\n {} Member\n\n[PixelMinisBastion](https://discord.gg/r2KDxQJuz6)\n\n\n\n[BP0x0Poker(https://discord.gg/y4h3tARMny)\n\n[Bp0x0PanicRoom](https://discord.gg/HvFFf8a2)\n\n\n- USE Invite Link 1st \n\n USE COMMAND {}start in the #verify channel on the Other Server!".format(Prefix,ainfo["rock_member"], ainfo["scissor_member"], ainfo["paper_member"]))
        await ctx.send(embed=embed)
        return
        print("END REturn IF NOT WHERE VERIFY CHANNELS")
        return
@bot.command()
async def sha256(ctx, text=None):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    b = hashlib.md5((text).encode())
    print(b.hexdigest())
    texthash = b.hexdigest()
    await ctx.send("PONG md5\n".format())
    await ctx.send("{}".format(texthash))
    c = hashlib.sha256((text).encode('utf-8'))
    print(c.hexdigest())
    texthashc = c.hexdigest()
    await ctx.send("PONG sha256\n".format())
    await ctx.send("{}".format(texthashc))
    #hashlib.sha256("b".encode('utf-8')).hexdigest()
    #textsha256 = hashlib.sha256(text).hexdigest() #,encoding='utf-8'
    #len(hashlib.sha256("{}".format(b"texthash")).digest())
    #print(textsha256)
    if len(text) >= 0:
        try:
            cipher = AES.new(secret_key,AES.MODE_ECB) # never use ECB in strong systems obviously
            encoded = base64.b64encode(cipher.encrypt(text))
            # ...
            decoded = cipher.decrypt(baes64.b64decode(text))
            await ctx.send("The text {} in sha256\n >>{}<<".format(text, textsha256))
            hashed = hashlib.sha256('1234').hexdigest()
            hashedstring = '1234' + ',' + hashed
            def check_secure_val(h):
                commapos = h.find(",")
                val = h[0:commapos]
                hashval = h[commapos+1:-1]
                rehashval = hash_str(val)
                if rehashval == hashval:
                    return val
        except:
            print("Fail")
    else:
        await ctx.send("Something Whent wrong with {}".format(text))
@bot.command()
async def key(ctx):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    key = info["key"]
    print("key1")
    print(key)
    keyUse = 1
    if key > 0:
        print("Key over 0")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["qakey"] == 0 and key > 101:
            info["qakey"] = 5
            print("Key over 0 and > 101")
        #    print("Key over 0")
            #await ctx.send("<@{}> You Unlocked the Items\n USE COMMAND {}buy and than otion 1!".format(author.id,Prefix))
        #    print("Key over 0")
            #await ctx.send("<@{}> You Unlocked the Items\n USE COMMAND {}buy and than otion 1!".format(author.id,Prefix))
        if info["qakey"] == 5 and key > 101:
            await ctx.send("<@{}> You Unlocked the Castle Menu\n USE COMMAND {}buy and than option 4 ".format(author.id,Prefix))
            keyUse = 101
            info["qakey"] = 102
            print("key2 use")
            print(keyUse)
        if  key > 10101:
            info["qakey"] =10
            print("key22 key over 10101 ")
            #print(keyUse)
        else:
            await ctx.send("<@{}> You NEED More Keys to Unlock Items\n use Command {}fight or {}bag to find one.".format(author.id,Prefix,Prefix))
        if info["qakey"] == 10 and key > 10101:
            await ctx.send("<@{}> You Unlocked the Items\n USE COMMAND {}buy and than option 1 ".format(author.id,Prefix))
            keyUse = 10101
            print("key33 use")
            print(keyUse)
            info["qakey"] = 10102
        elif info["qakey"] == 10 and key < 10101:
            await ctx.send("<@{}> You NEED More Keys to Unlock Items\n use Command {}fight or {}bag to find one.".format(author.id,Prefix,Prefix))
            #keyUse = 10101
            print("key33333 use")
            print(keyUse)
        print("save")
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #info["key"] = info["key"] -1
    if info["qakey"] > 4:
        #info["qakey"] =0
        info["key"] -= keyUse
        print("key4 after")
        print(info["key"])
        print("qakey")
        print(info["qakey"])
        if info["key"] <= 0 :
            info["key"] = 0
            await ctx.send("<@{}> You are Out of Keys\n use Command {}fight or {}bag to find one.".format(author.id,Prefix,Prefix))
        print("save")
        fileIO("players/{}/info.json".format(author.id), "save", info)
    else:
        await ctx.send("<@{}> You Dont have a KEY!\n use Command {}fight or {}f to find one.".format(author.id,Prefix,Prefix))
@bot.command()
async def ask(ctx: commands.Context):
    """Asks the user a question to confirm something."""
    # We create the view and assign it to a variable so we can wait for it later.
    view = Confirm()
    await ctx.send('Do you want to continue?', view=view)
    # Wait for the View to stop listening for input...
    await view.wait()
    if view.value is None:
        print('Timed out...')
    elif view.value:
        #info["in_party"].append(discord.member)
        print('Confirmed...')
    else:
        print('Cancelled...')
@bot.command(aliases=["f"])
async def fight(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    user = (discord.Member)
    guild = ctx.guild
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    einfo = fileIO("core/enemies/enemies.json", "load")
    ginfo = fileIO("core/enemies/gates.json", "load")
    ainfo = fileIO("core/enemies/weapons.json", "load")
    print("ctx income")
    xinfo = fileIO("config/config.json", "load")
    xinfo["Commands_used"] = xinfo["Commands_used"] + 1
    fileIO("config/config.json", "save", xinfo)
    max_exp = info["expmax"]
    max_expNOW = info["exp"]
    lvl = info["lvl"]
    location = info["location"]
    #skillDMG = random.randint(1, 2)
    #user_dmgDif = random.randint(1, 2)
    qakey = info["qakey"]
    slot0 = info["zslot_0_inventory"]
    slot1 = info["zslot_1_inventory"]
    slot2 = info["zslot_2_inventory"]
    slot3 = info["zslot_3_inventory"]
    slot4 = info["zslot_4_inventory"]
    slot5 = info["zslot_5_inventory"]
    slot6 = info["zslot_6_inventory"]
    slot7 = info["zslot_7_inventory"]
    slot8 = info["zslot_8_inventory"]
    slot9 = info["zslot_9_inventory"]
    slot10 = info["zslot_10_inventory"]
    slot11 = info["zslot_11_inventory"]
    slot12 = info["zslot_12_inventory"]
    slot13 = info["zslot_13_inventory"]
    slot14 = info["zslot_14_inventory"]
    slot15 = info["zslot_15_inventory"]
    slot16 = info["zslot_16_inventory"]
    slot17 = info["zslot_17_inventory"]
    slot18 = info["zslot_18_inventory"]
    slot19 = info["zslot_19_inventory"]
    slot20 = info["zslot_20_inventory"]
    slot21 = info["zslot_21_inventory"]
    slot22 = info["zslot_22_inventory"]
    slot23 = info["zslot_23_inventory"]
    slot24 = info["zslot_24_inventory"]
    slot25 = info["zslot_25_inventory"]
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
        if not info["where"] == rock_training_chat or not  info["where"] == rock_training_bot :
            here = 890488730090078218
            info["location"] = 890492014293049354
            embed = discord.Embed()
            embed.description = "Please go to the Market Channel to trade there! [ü§ñbot-chatü§ñ](https://discord.com/channels/874887432963776563/{})".format(here)
            await ctx.send(embed=embed)
            return
    if info["where"] == rock_training_chat :
        info["location"] = "Newbe Training Ground"
    if info["where"] == rock_training_bot :
        info["location"] = "Newbe Training Ground"
    if info["where"] == rock_market_chat :
        info["location"] = "Market I"
    if info["where"] == rock_market_bot :
        info["location"] = "Market I"
    if info["where"] == rock_field_chat :
        info["location"] = "Rock Field II"
    if info["where"] == rock_field_bot :
        info["location"] = "Rock Field II"
    if info["where"] == rock_forest_chat :
        info["location"] = "Rock Forest IV"
    if info["where"] == rock_forest_bot :
        info["location"] = "Rock Forest IV"
    if info["where"] == rock_castle_chat :
        info["location"] = "Player Battle Field"
    if info["where"] == rock_castle_bot :
        info["location"] = "Player Battle Field"
    if info["where"] == rock_mine_chat :
        info["location"] = "Rock Mine III"
    if info["where"] == rock_mine_bot :
        info["location"] = "Rock Mine III"
    if info["where"] == rock_dungon_chat :
        info["location"] = "Rock Dungon V"
    if info["where"] == rock_dungon_bot :
        info["location"] = "Rock Dungon V"
    fileIO("players/{}/info.json".format(author.id), "save", info)
    if info["health"] < int("0") or info["health"] == int("0") :
        await ctx.send("<@{}> You cannot fight with 0 HP.\n- USE COMMAND:\n- {}rest or {}use \n To refill POWER!\n or buy some pot!".format(author.id,Prefix,Prefix))
        return
    if info["stamina"] < int("9"):
        await ctx.send("<@{}> You cannot fight with so low Stamina.\n- USE COMMAND:\n+ {}rest\n To refill POWER!\n or buy some pot!".format(author.id,Prefix))
        return
    if info["selected_enemy"] == "None" and info["infight_status"] == "False":
        location = info["location"]
        monster = info["selected_enemy"]
        #await _check_set6(ctx)
        elocation = info["location"]
        if elocation == "In The Wild":
            monster = ["Wild Dog", "Wild Cat", "Wild Rat"]
        if elocation == "Forest":
            monster = ["Bandit", "Stalker", "Man in Coat"]
        if elocation == "Battle Field":
            monster = ["Lost Soul", "Lost Soul", "Lost Soul"]
        if elocation == "Member Door" :
            monster = ["Lost Soul Lv10-100, Lost Soul Lv100-400, Lost Soul Boss Lv3000-6000"]
        if elocation == "Newbe Training Ground":
            monster = ["0", "0", "1"]
        if elocation == "Player Battle Field":
            monster = ["Lost Soul100M", "Lost Soul100MM", "Lost Soul", "Lost Soul", "Lost Soul"]
        if elocation == "Rock Market I":
            monster = ["0", "1", "0", "1", "4", "Dog", "Cat", "Rat", "3", "5", "2",]
        if elocation == "Market I":
            monster = ["0", "1", "0", "1", "4", "Dog", "Cat", "Rat", "3", "5", "2",]
        if elocation == "Rock Field II":
            monster = ["1", "2", "3", "4", "5", "6", "7", "8", "0a", "9", "10"]
        if elocation == "Rock Mine III":
            monster = ["7", "8","9", "10", "11", "12", "13", "14", "15", "16", "7b"]
        if elocation == "Rock Forest IV" :
            monster = ["15", "16", "17", "18", "19", "20", "21", "22", "12c"]
        if elocation == "Rock Dungon V":
            monster = ["0a", "0b", "0c", "0d", "0e", "0f", "0g", "0h", "0i", "0j", "0k", "0l", "0m", "25", "24", "23", "22", "21"]
        if elocation == "Rock Dungon VI":
            monster = ["24", "23", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]
        if elocation == "Rock Dungon VII" :
            monster = ["25", "24", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0" ]
        if elocation == "Rock Dungon VIII" :
            monster = ["0a", "0b", "0c", "0d", "0e", "0f", "0g", "0h", "0i", "0j", "0k", "0l", "0m"]
        monsterz = random.choice((monster))
        user_enemy = monsterz
        enemy = monsterz
        user_location = info["location"]
        monster_name = einfo["locations"]["Forest"]["enemies"][user_enemy]["name"]
        monster_img = einfo["locations"]["Forest"]["enemies"][user_enemy]["img"]
        monster_backimg = einfo["locations"]["Forest"]["enemies"][user_enemy]["backimg"]
        monster_collection = einfo["locations"]["Forest"]["enemies"][user_enemy]["collection"]
        monster_category = einfo["locations"]["Forest"]["enemies"][user_enemy]["category"]
        monster_level = einfo["locations"]["Forest"]["enemies"][user_enemy]["level"]
        monster_quality = einfo["locations"]["Forest"]["enemies"][user_enemy]["quality"]
        monster_quality = einfo["locations"]["Forest"]["enemies"][user_enemy]["quantity"]
        monster_cardid = einfo["locations"]["Forest"]["enemies"][user_enemy]["cardid"]
        monster_luckynr = einfo["locations"]["Forest"]["enemies"][user_enemy]["luckynr"]
        monster_bobovalue = einfo["locations"]["Forest"]["enemies"][user_enemy]["bobovalue"]
        monster_style = einfo["locations"]["Forest"]["enemies"][user_enemy]["style"]
        monster_info = einfo["locations"]["Forest"]["enemies"][user_enemy]["info"]
        monster_freedrops = einfo["locations"]["Forest"]["enemies"][user_enemy]["freedrops"]
        monster_creator = einfo["locations"]["Forest"]["enemies"][user_enemy]["creator"]
        monster_date = einfo["locations"]["Forest"]["enemies"][user_enemy]["date"]
        monster_support = einfo["locations"]["Forest"]["enemies"][user_enemy]["support"]
        description = einfo["locations"]["Forest"]["enemies"][user_enemy]["description"]
        player_lvl = info["lvl"]
        multyThis = 1
        if monster_level == 0 :
            multyThis = 1
        elif monster_level == 1 :
            multyThis = 1 * 2
        elif monster_level == 2 :
            multyThis = 1 * 2 * 2
        elif monster_level == 3 :
            multyThis = 1 * 2 * 2 * 2
        elif monster_level == 4 :
            multyThis = 1 * 2 * 2 * 2 * 2
        elif monster_level == 5 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 6 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 7 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 8 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 9 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 10 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 11 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 12 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 13 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 14 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 15 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 16 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 17 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 18 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 19 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 20 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 21 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 22 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 23 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 24 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        elif monster_level == 25 :
            multyThis = 1 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
        print("multyThis")
        print(multyThis)
        monster_hp_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_health"]
        monster_hp_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_health"]
        monster_dmg_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_dmg"]
        monster_dmg_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_dmg"]
        monster_def_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_def"]
        monster_def_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_def"]
        monster_drop_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_drop"]
        monster_drop_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_drop"]
        monster_xp_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_xp"]
        monster_xp_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_xp"]
        ehp_min = monster_hp_min
        ehp_max = monster_hp_max
        enemy_hp = random.randint(ehp_min, ehp_max)
        edmg_min = monster_dmg_min
        edmg_max = monster_dmg_max
        enemy_dmg = random.randint(edmg_min, edmg_max)
        edef_min = monster_def_min
        edef_max = monster_def_max
        enemy_def = random.randint(edef_min, edef_max)
        edrop_min = monster_drop_min
        edrop_max = monster_drop_max
        enemy_drop = random.randint(edrop_min, edrop_max)
        eexp_min = monster_xp_min
        eexp_max = monster_xp_max
        enemy_exp = random.randint(eexp_min, eexp_max)
        monster_attack = multyThis * 0.5
        monster_defence = multyThis * 0.5
        monster_health = multyThis * 0.5
        #monster_name
        embed = discord.Embed(title=monster_cardid, description=description, color=0x00ff00)
        embed.add_field(name=monster_name, value="Level : {}\n HP : {}-{}\n Attack : {}-{}\n Defence : {}-{}\n Drop : {}-{}\n exp : {}-{}\n".format(monster_level, ehp_min, ehp_max , edmg_min, edmg_max,edef_min, edef_max, edrop_min, edrop_max,eexp_min, eexp_max), inline=False)
        embed.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(monster_img))
        #embed.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(monster_img))
        await ctx.send(embed=embed)
        await ctx.send("You wonder around {} and find a {}, would you like to fight it?\n**Y** or **N**".format(info["location"], enemy))
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["y", "Y", "yes", "Yes", "1", "0", "n", "N", "no", "No", "q", "Q", "{}fight".format(Prefix)]
        if str(answer1.content) in values:
            if answer1.content == "{}fight".format(Prefix):
                return
            if answer1.content == "y" or answer1.content == "Y" or answer1.content == "yes" or answer1.content == "Yes" or answer1.content == "1" or answer1.content == "Q"  or answer1.content == "q":
                if info["selected_enemy_player"] == "None" or info["selected_enemy_player"] == None:
                    info["selected_enemy"] = enemy
                else:
                    info["selected_enemy"] = info["selected_enemy_player"]
                info["infight_status"] = "True"
                info["enemyhp"] = enemy_hp
                info["selected_enemy_hp"] = enemy_hp
                info["selected_enemy_drop"] = enemy_drop
                info["selected_enemy_cardid"] = monster_cardid
                info["selected_enemy_lvl"] = monster_level
                info["selected_enemy_name"] = monster_name
                info["enemyhp"] = enemy_hp
                info["selected_enemy_hp"] = enemy_hp
                info["selected_enemy_drop"] = enemy_drop
                info["selected_enemy_cardid"] = monster_cardid
                info["selected_enemy_lvl"] = monster_level
                info["selected_enemy_name"] = monster_name
                #print(enemy_hp)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                #await ctx.send("You start fighting a {}...\nPlease use `{}fight` or `{}f` to start fighting it.".format(enemy, Prefix, Prefix))
                return await fight(ctx)
            elif answer1.content == "n" or answer1.content == "N" or answer1.content == "no" or answer1.content == "No":
                await ctx.send("Ok then.")
                info["infight_status"] = "False"
        else:
            await ctx.send("Please choose one of the options next time.")
            info["infight_status"] = "False"
    else:
        #await _check_setCalcDroptoTotal(ctx)
        await _check_setBoboValue(ctx)
        #Define our user stats here.
        all_drop_attack = info["all_drop_attack"]
        all_drop_defence = info["all_drop_defence"]
        all_drop = info["all_drop"]
        all_drop_boco = info["all_drop_boco"]
        all_drop_exp = info["all_drop_exp"]
        all_drop_food = info["all_drop_food"]
        all_drop_gold = info["all_drop_gold"]
        all_drop_hp = info["all_drop_hp"]
        all_drop_key = info["all_drop_key"]
        all_drop_metal = info["all_drop_metal"]
        all_drop_mp = info["all_drop_mp"]
        all_drop_pot = info["all_drop_pot"]
        all_drop_skexp = info["all_drop_skexp"]
        all_drop_sp = info["all_drop_sp"]
        all_drop_stone = info["all_drop_stone"]
        all_drop_wood = info["all_drop_wood"]
        all_attack = info["all_total_base_attack"]
        all_total_base_attack = info["all_total_base_attack"]
        all_defence = info["all_defence"]
        all_total_base_defence = info["all_total_base_defence"]
        all_total_base_drop = info["all_total_base_drop"]
        all_total_base_boco = info["all_total_base_boco"]
        all_total_base_exp = info["all_total_base_exp"]
        all_total_base_food = info["all_total_base_food"]
        all_total_base_gold = info["all_total_base_gold"]
        all_total_base_hp = info["all_total_base_hp"]
        all_total_base_key = info["all_total_base_key"]
        all_total_base_metal = info["all_total_base_metal"]
        all_total_base_mp = info["all_total_base_mp"]
        all_total_base_pot = info["all_total_base_pot"]
        all_total_base_skexp = info["all_total_base_skexp"]
        all_total_base_sp = info["all_total_base_sp"]
        all_total_base_stone = info["all_total_base_stone"]
        all_total_base_people = info["all_total_base_people"]
        all_total_base_wood = info["all_total_base_wood"]
        all_total_base_door = info["all_total_base_door"]
        max_dmg = info["all_total_base_attack"]
        max_def = info["all_total_base_defence"]
        user_dmg = info["all_total_base_attack"]
        all_total_base_drop = info["all_total_base_drop"]
        all_total_base_boco = info["all_total_base_boco"]
        all_total_base_exp = info["all_total_base_exp"]
        all_total_base_food = info["all_total_base_food"]
        all_total_base_gold = info["all_total_base_gold"]
        all_total_base_hp = info["all_total_base_hp"]
        all_total_base_key = info["all_total_base_key"]
        all_total_base_metal = info["all_total_base_metal"]
        all_total_base_mp = info["all_total_base_mp"]
        all_total_base_pot = info["all_total_base_pot"]
        all_total_base_skexp = info["all_total_base_skexp"]
        all_total_base_sp = info["all_total_base_sp"]
        all_total_base_stone = info["all_total_base_stone"]
        all_total_base_people = info["all_total_base_people"]
        all_total_base_wood = info["all_total_base_wood"]
        all_total_base_door = info["all_total_base_door"]
        user_location = info["location"]
        user_enemy = info["selected_enemy"]
        user_enemy_hp = info["enemyhp"]
        user_skills = info["skills_learned"]
        max_dmg = info["all_total_base_attack"]
        bbvalue_stats = info["bbvalue_stats"]
        #max_dmg = info["equipluk"]
        max_def = info["all_total_base_defence"]
        user_hp = info["health"]
        user_name = info["name"]
        #Define wep dmg.
        ainfo = fileIO("core/enemies/weapons.json", "load")
        #user_wep_define = ainfo[user_wep]
        #max_dmg = ainfo[user_wep]["max_dmg"]
        #Define enemy stats.
        enemy_define = info["selected_enemy"]
        selected_enemy = info["selected_enemy"]
        enemy_define_hp = info["enemyhp"]
        selected_enemy_hp = info["selected_enemy_hp"]
        try: #location
            enemy_min_dmg = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_dmg"]
            enemy_max_dmg = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_dmg"]
        except:
            enemy_min_dmg = 1
            enemy_max_dmg = 100
        enemy_dmg = random.randint(enemy_min_dmg, enemy_max_dmg)
        try: #location
            enemy_min_def = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_def"]
            enemy_max_def = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_def"]
        except:
            enemy_min_def = 1
            enemy_max_def = 100
        enemy_def = random.randint(enemy_min_def, enemy_max_def)
        try: #location
            enemy_gold = einfo["locations"]["Forest"]["enemies"][user_enemy]["gold_drop"]
        except:
            enemy_gold = 10
        try: #location
            enemy_xp_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_xp"]
            enemy_xp_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_xp"]
        except:
            enemy_xp_min = 1
            enemy_xp_max = 100
        enemy_xp = random.randint(enemy_xp_min, enemy_xp_max)
        monster_cardid = info["selected_enemy_cardid"]
        monster_level = info["selected_enemy_lvl"]
        enemy_hp = info["enemyhp"]
        #enemy_dmg = info["selected_enemy_attack"]
        #enemy_def = info["selected_enemy_defence"]
        #selected_enemy_hp = info["selected_enemy_hp"]
        #enemy_xp = info["selected_enemy_exp"]
        enemy_drop = info["selected_enemy_drop"]
        showEXP1 = enemy_xp + all_total_base_exp
        embed1 = discord.Embed(title=monster_cardid, color=0x00ff00)
        embed1.add_field(name=enemy_define, value="\n Enamy: {}\n Level : {}\n HPFull : {}\n HP: {}\n **Attack : {}\n Defence : {} **\n Drop : {}\n GoldDrop: {}\n \n exp : {} \n Boosted : {}\n\n ** Your HP **\n HP: {}\n ** Defence: {}\n Attack: {} **ATA\n".format(selected_enemy, monster_level, round(selected_enemy_hp, 0), round(enemy_hp, 0), round(enemy_dmg, 0), round(enemy_def, 0), round(enemy_drop, 0), round(enemy_gold, 0), round(enemy_xp, 0), round(showEXP1, 0), round(user_hp, 0 ), round(max_def, 0), round(max_dmg), inline=False))
        await ctx.send(embed=embed1)
        options = []
        options_show = []
        options.append("{}fight".format(Prefix))
        if "Attack" in info["skills_learned"]:
            options.append("Attack")
            options.append("attack")
            options.append("1")
            options_show.append("1)Attack")
        if "Swing" in info["skills_learned"]:
            options.append("Swing")
            options.append("swing")
            options.append("2")
            options_show.append("2)Swing")
        if "Cast" in info["skills_learned"]:
            options.append("Cast")
            options.append("cast")
            options.append("3")
            options_show.append("3)Cast")
        if "Shoot" in info["skills_learned"]:
            options.append("Shoot")
            options.append("shoot")
            options.append("4")
            options_show.append("4)Shoot")
        if "Run" in info["skills_learned"]:
            options.append("Run")
            options.append("run")
            options.append("5")
            options_show.append("5)Run")
        if "Punch" in info["skills_learned"]:
            options.append("Punch")
            options.append("punch")
            options.append("6")
            options_show.append("6)Punch")
        if "Fire Ball" in info["skills_learned"]:
            options.append("Fire Ball")
            options.append("fire ball")
            options.append("7")
            options_show.append("7)Fire Ball")
        if "Heal" in info["skills_learned"]:
            options.append("Heal")
            options.append("heal")
            options.append("8")
            options_show.append("8)Heal")
        if "Arrow Shower" in info["skills_learned"]:
            options.append("Arrow Shower")
            options.append("arrow shower")
            options.append("9")
            options_show.append("9)Arrow Shower")
        if "Steel Arrow" in info["skills_learned"]:
            options.append("Steel Arrow")
            options.append("steel arrow")
            options.append("10")
            options_show.append("10)Steel Arrow")
        if "Trap" in info["skills_learned"]:
            options.append("Trap")
            options.append("trap")
            options.append("11")
            options_show.append("11)trap")
        if "Shield" in info["skills_learned"]:
            options.append("Shield")
            options.append("shield")
            options.append("12")
            options_show.append("12)shield")
        if "Knock Back" in info["skills_learned"]:
            options.append("Knock Back")
            options.append("knock Back")
            options.append("13")
            options_show.append("13)knock Back")
        if "Brute Force" in info["skills_learned"]:
            options.append("Brute Force")
            options.append("brute Force")
            options.append("14")
            options_show.append("14)brute Force")
        if "Water Ball" in info["skills_learned"]:
            options.append("Water Ball")
            options.append("water Ball")
            options.append("15")
            options_show.append("15)water Ball")
        if "Wind Ball" in info["skills_learned"]:
            options.append("Wind Ball")
            options.append("wind ball")
            options.append("16")
            options_show.append("16)Wind Ball")
        if "Earth Ball" in info["skills_learned"]:
            options.append("Earth Ball")
            options.append("earth ball")
            options.append("17")
            options_show.append("17)Earth Ball")
        if "Pickpocket" in info["skills_learned"]:
            options.append("Pickpocket")
            options.append("pickpocket")
            options.append("18")
            options_show.append("18)Pickpocket")
        if "Hide" in info["skills_learned"]:
            options.append("Hide")
            options.append("hide")
            options.append("19")
            options_show.append("19)Hide")
        if "Jump" in info["skills_learned"]:
            options.append("Jump")
            options.append("jump")
            options.append("20")
            options_show.append("20)Jump")
        if "Secret Dagger" in info["skills_learned"]:
            options.append("Secret Dagger")
            options.append("secret dagger")
            options.append("21")
            options_show.append("21)secret Dagger")
        if "Scan" in info["skills_learned"]:
            options.append("Scan")
            options.append("scan")
            options.append("22")
            options_show.append("22)Scan")
        if "Crack" in info["skills_learned"]:
            options.append("Crack")
            options.append("crack")
            options.append("23")
            options_show.append("23)Crack")
        if "DDOS" in info["skills_learned"]:
            options.append("DDOS")
            options.append("ddos")
            options.append("24")
            options_show.append("24)DDOS")
        if "Install" in info["skills_learned"]:
            options.append("Install")
            options.append("Install")
            options.append("25")
            options_show.append("25)Install")
        await ctx.send("<@{}> what skill would you like to use?\n\n`Choose one`\n{}".format(author.id, "\n".join(options_show), color=discord.Color.blue()))
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if str(answer1.content) in options:
            skillDMG = 1
            user_dmgSELFBurn = 0
            if answer1.content == "Attack" or answer1.content == "attack" or answer1.content == "1":
                move = "Attack"
                skillDMG = 1
                user_dmgSELFBurn = 0
            elif answer1.content == "Swing" or answer1.content == "swing" or answer1.content == "2":
                move = "Swing"
                skillDMG = info["health"] * info["sklvl"]
                user_dmgSELFBurn = 0
            elif answer1.content == "Cast" or answer1.content == "cast" or answer1.content == "3":
                move = "Cast"
                skillDMG = 1
                user_dmgSELFBurn = 0
            elif answer1.content == "Shoot" or answer1.content == "shoot" or answer1.content == "4":
                move = "Shoot"
                skillDMG = 1
                user_dmgSELFBurn = 0
            elif answer1.content == "Fire Ball" or answer1.content == "sire ball" or answer1.content == "7":
                move = "Fire Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    skillDMG = 1
                    user_dmgSELFBurn = 0
                    if info["class"] == "Mage":
                        if info["ammo_fire_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_fire_pot"] = info["ammo_fire_pot"] - 1
                            if randomNUm == 0 or  randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf FirePots".format())
                            return
                    else:
                        if info["ammo_fire_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_fire_pot"] = info["ammo_fire_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                info["mana"] = info["mana"] - 10 * info["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                info["mana"] = info["mana"] - 20 * info["lvl"]
                            await ctx.send("You are not a Mage and burnt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf FirePots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Heal" or answer1.content == "heal" or answer1.content == "8":
                move = "Heal"
                skillDMG = 1
                user_dmgSELFBurn = 0
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    randomNum = random.randint(10, 40)
                    user_hp = info["healthmax"]
                    info["health"] = info["healthmax"]
                    info["mana"] = info["manamax"]
                    info["stamina"] = info["staminamax"]
                    info["mana"] = info["mana"] - randomNum * info["lvl"]
                    info["stamina"] = info["stamina"] - randomNum * info["lvl"]
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Punch" or answer1.content == "punch" or answer1.content == "6":
                    move = "Punch"
            elif answer1.content == "Run" or answer1.content == "run" or answer1.content == "5":
                move = "Run"
                info["selected_enemy"] = "None"
                info["infight_status"] = "False"
                info["runaways"] = info["runaways"] + 1
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await ctx.send("```diff\n- You could escape.```".format())
                return
            elif answer1.content == "Arrow Shower" or answer1.content == "arrow shower" or answer1.content == "9":
                move = "Arrow Shower"
                if slot0 == "Bow" or slot1 == "Bow" or slot2 == "Bow" or slot3 == "Bow" or slot4 == "Bow" or slot5 == "Bow" or slot6 == "Bow" or slot7 == "Bow" or slot8 == "Bow" or slot9 == "Bow" or slot10 == "Bow" or slot11 == "Bow" or slot12 == "Bow" or slot13 == "Bow" or slot14 == "Bow" or slot15 == "Bow" or slot16 == "Bow" or slot17 == "Bow" or slot18 == "Bow" or slot19 == "Bow" or slot20 == "Bow"or slot21 == "Bow"or slot22 == "Bow"or slot23 == "Bow"or slot24 == "Bow"or slot25 == "Bow" or slot0 == "Wood Bow" or slot1 == "Wood Bow" or slot2 == "Wood Bow" or slot3 == "Wood Bow" or slot4 == "Wood Bow" or slot5 == "Wood Bow" or slot6 == "Wood Bow" or slot7 == "Wood Bow" or slot8 == "Wood Bow" or slot9 == "Wood Bow" or slot10 == "Wood Bow" or slot11 == "Wood Bow" or slot12 == "Wood Bow" or slot13 == "Wood Bow" or slot14 == "Wood Bow" or slot15 == "Wood Bow" or slot16 == "Wood Bow" or slot17 == "Wood Bow" or slot18 == "Wood Bow" or slot19 == "Wood Bow" or slot20 == "Wood Bow"or slot21 == "Wood Bow"or slot22 == "Wood Bow"or slot23 == "Wood Bow"or slot24 == "Wood Bow"or slot25 == "Wood Bow" or slot0 == "Stone Bow" or slot1 == "Stone Bow" or slot2 == "Stone Bow" or slot3 == "Stone Bow" or slot4 == "Stone Bow" or slot5 == "Stone Bow" or slot6 == "Stone Bow" or slot7 == "Stone Bow" or slot8 == "Stone Bow" or slot9 == "Stone Bow" or slot10 == "Stone Bow" or slot11 == "Stone Bow" or slot12 == "Stone Bow" or slot13 == "Stone Bow" or slot14 == "Stone Bow" or slot15 == "Stone Bow" or slot16 == "Stone Bow" or slot17 == "Stone Bow" or slot18 == "Stone Bow" or slot19 == "Stone Bow" or slot20 == "Stone Bow"or slot21 == "Stone Bow"or slot22 == "Stone Bow"or slot23 == "Stone Bow"or slot24 == "Stone Bow"or slot25 == "Stone Bow" or slot0 == "Gold Bow" or slot1 == "Gold Bow" or slot2 == "Gold Bow" or slot3 == "Gold Bow" or slot4 == "Gold Bow" or slot5 == "Gold Bow" or slot6 == "Gold Bow" or slot7 == "Gold Bow" or slot8 == "Gold Bow" or slot9 == "Gold Bow" or slot10 == "Gold Bow" or slot11 == "Gold Bow" or slot12 == "Gold Bow" or slot13 == "Gold Bow" or slot14 == "Gold Bow" or slot15 == "Gold Bow" or slot16 == "Gold Bow" or slot17 == "Gold Bow" or slot18 == "Gold Bow" or slot19 == "Gold Bow" or slot20 == "Gold Bow"or slot21 == "Gold Bow"or slot22 == "Gold Bow"or slot23 == "Gold Bow"or slot24 == "Gold Bow"or slot25 == "Gold Bow" or slot0 == "Metal Bow" or slot1 == "Metal Bow" or slot2 == "Metal Bow" or slot3 == "Metal Bow" or slot4 == "Metal Bow" or slot5 == "Metal Bow" or slot6 == "Metal Bow" or slot7 == "Metal Bow" or slot8 == "Metal Bow" or slot9 == "Metal Bow" or slot10 == "Metal Bow" or slot11 == "Metal Bow" or slot12 == "Metal Bow" or slot13 == "Metal Bow" or slot14 == "Metal Bow" or slot15 == "Metal Bow" or slot16 == "Metal Bow" or slot17 == "Metal Bow" or slot18 == "Metal Bow" or slot19 == "Metal Bow" or slot20 == "Metal Bow"or slot21 == "Metal Bow"or slot22 == "Metal Bow"or slot23 == "Metal Bow"or slot24 == "Metal Bow"or slot25 == "Metal Bow" or slot0 == "Bobo Bow" or slot1 == "Bobo Bow" or slot2 == "Bobo Bow" or slot3 == "Bobo Bow" or slot4 == "Bobo Bow" or slot5 == "Bobo Bow" or slot6 == "Bobo Bow" or slot7 == "Bobo Bow" or slot8 == "Bobo Bow" or slot9 == "Bobo Bow" or slot10 == "Bobo Bow" or slot11 == "Bobo Bow" or slot12 == "Bobo Bow" or slot13 == "Bobo Bow" or slot14 == "Bobo Bow" or slot15 == "Bobo Bow" or slot16 == "Bobo Bow" or slot17 == "Bobo Bow" or slot18 == "Bobo Bow" or slot19 == "Bobo Bow" or slot20 == "Bobo Bow"or slot21 == "Bobo Bow"or slot22 == "Bobo Bow"or slot23 == "Bobo Bow"or slot24 == "Bobo Bow"or slot25 == "Bobo Bow" :
                    if info["class"] == "Archer":
                        if info["ammo_arrow"] >= 5:
                            randomNUm = random.randint(1, 6)
                            howManyArrows = random.randint(5, 100)
                            if howManyArrows >= info["ammo_arrow"]:
                                howManyArrows = info["ammo_arrow"]
                            info["ammo_arrow"] = info["ammo_arrow"] - howManyArrows
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg + user_dmgDif * 4
                                info["stamina"] = info["stamina"] - 10 * info["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg + user_dmgDif * 8
                                info["stamina"] = info["stamina"] - 20 * info["lvl"]
                            if randomNUm == 6:
                                skillDMG = user_dmg + user_dmgDif * 16
                                info["stamina"] = info["stamina"] - 40 * info["lvl"]
                        else:
                            await ctx.send("You have not enaf Arrows!".format())
                            return
                    else:
                        if info["ammo_arrow"] >= 5:
                            randomNUm = random.randint(1, 6)
                            info["ammo_arrow"] = info["ammo_arrow"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - 10 * info["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 4
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - 20 * info["lvl"]
                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf Arrows".format())
                            return
                else:
                    await ctx.send("You Need a Bow for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Steel Arrow" or answer1.content == "steel arrow" or answer1.content == "10":
                move = "Steel Arrow"
                if slot0 == "Bow" or slot1 == "Bow" or slot2 == "Bow" or slot3 == "Bow" or slot4 == "Bow" or slot5 == "Bow" or slot6 == "Bow" or slot7 == "Bow" or slot8 == "Bow" or slot9 == "Bow" or slot10 == "Bow" or slot11 == "Bow" or slot12 == "Bow" or slot13 == "Bow" or slot14 == "Bow" or slot15 == "Bow" or slot16 == "Bow" or slot17 == "Bow" or slot18 == "Bow" or slot19 == "Bow" or slot20 == "Bow"or slot21 == "Bow"or slot22 == "Bow"or slot23 == "Bow"or slot24 == "Bow"or slot25 == "Bow" or slot0 == "Wood Bow" or slot1 == "Wood Bow" or slot2 == "Wood Bow" or slot3 == "Wood Bow" or slot4 == "Wood Bow" or slot5 == "Wood Bow" or slot6 == "Wood Bow" or slot7 == "Wood Bow" or slot8 == "Wood Bow" or slot9 == "Wood Bow" or slot10 == "Wood Bow" or slot11 == "Wood Bow" or slot12 == "Wood Bow" or slot13 == "Wood Bow" or slot14 == "Wood Bow" or slot15 == "Wood Bow" or slot16 == "Wood Bow" or slot17 == "Wood Bow" or slot18 == "Wood Bow" or slot19 == "Wood Bow" or slot20 == "Wood Bow"or slot21 == "Wood Bow"or slot22 == "Wood Bow"or slot23 == "Wood Bow"or slot24 == "Wood Bow"or slot25 == "Wood Bow" or slot0 == "Stone Bow" or slot1 == "Stone Bow" or slot2 == "Stone Bow" or slot3 == "Stone Bow" or slot4 == "Stone Bow" or slot5 == "Stone Bow" or slot6 == "Stone Bow" or slot7 == "Stone Bow" or slot8 == "Stone Bow" or slot9 == "Stone Bow" or slot10 == "Stone Bow" or slot11 == "Stone Bow" or slot12 == "Stone Bow" or slot13 == "Stone Bow" or slot14 == "Stone Bow" or slot15 == "Stone Bow" or slot16 == "Stone Bow" or slot17 == "Stone Bow" or slot18 == "Stone Bow" or slot19 == "Stone Bow" or slot20 == "Stone Bow"or slot21 == "Stone Bow"or slot22 == "Stone Bow"or slot23 == "Stone Bow"or slot24 == "Stone Bow"or slot25 == "Stone Bow" or slot0 == "Gold Bow" or slot1 == "Gold Bow" or slot2 == "Gold Bow" or slot3 == "Gold Bow" or slot4 == "Gold Bow" or slot5 == "Gold Bow" or slot6 == "Gold Bow" or slot7 == "Gold Bow" or slot8 == "Gold Bow" or slot9 == "Gold Bow" or slot10 == "Gold Bow" or slot11 == "Gold Bow" or slot12 == "Gold Bow" or slot13 == "Gold Bow" or slot14 == "Gold Bow" or slot15 == "Gold Bow" or slot16 == "Gold Bow" or slot17 == "Gold Bow" or slot18 == "Gold Bow" or slot19 == "Gold Bow" or slot20 == "Gold Bow"or slot21 == "Gold Bow"or slot22 == "Gold Bow"or slot23 == "Gold Bow"or slot24 == "Gold Bow"or slot25 == "Gold Bow" or slot0 == "Metal Bow" or slot1 == "Metal Bow" or slot2 == "Metal Bow" or slot3 == "Metal Bow" or slot4 == "Metal Bow" or slot5 == "Metal Bow" or slot6 == "Metal Bow" or slot7 == "Metal Bow" or slot8 == "Metal Bow" or slot9 == "Metal Bow" or slot10 == "Metal Bow" or slot11 == "Metal Bow" or slot12 == "Metal Bow" or slot13 == "Metal Bow" or slot14 == "Metal Bow" or slot15 == "Metal Bow" or slot16 == "Metal Bow" or slot17 == "Metal Bow" or slot18 == "Metal Bow" or slot19 == "Metal Bow" or slot20 == "Metal Bow"or slot21 == "Metal Bow"or slot22 == "Metal Bow"or slot23 == "Metal Bow"or slot24 == "Metal Bow"or slot25 == "Metal Bow" or slot0 == "Bobo Bow" or slot1 == "Bobo Bow" or slot2 == "Bobo Bow" or slot3 == "Bobo Bow" or slot4 == "Bobo Bow" or slot5 == "Bobo Bow" or slot6 == "Bobo Bow" or slot7 == "Bobo Bow" or slot8 == "Bobo Bow" or slot9 == "Bobo Bow" or slot10 == "Bobo Bow" or slot11 == "Bobo Bow" or slot12 == "Bobo Bow" or slot13 == "Bobo Bow" or slot14 == "Bobo Bow" or slot15 == "Bobo Bow" or slot16 == "Bobo Bow" or slot17 == "Bobo Bow" or slot18 == "Bobo Bow" or slot19 == "Bobo Bow" or slot20 == "Bobo Bow"or slot21 == "Bobo Bow"or slot22 == "Bobo Bow"or slot23 == "Bobo Bow"or slot24 == "Bobo Bow"or slot25 == "Bobo Bow":
                    if info["class"] == "Archer":
                        if info["ammo_arrow_steal"] >= 1:
                            randomNUm = random.randint(0, 7)
                            info["ammo_arrow_steal"] = info["ammo_arrow_steal"] - 1
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                enemy_def = 8
                                skillDMG = user_dmg + user_dmgDif * 1
                            if randomNUm == 4 or randomNUm == 5:
                                enemy_def = 4
                                skillDMG = user_dmg + user_dmgDif * 2
                            if randomNUm == 6:
                                enemy_def = 2
                                skillDMG = user_dmg + user_dmgDif * 4
                            if randomNUm == 7:
                                enemy_def = 1
                                skillDMG = user_dmg + user_dmgDif * 4
                                info["stamina"] = info["stamina"] - 20 * info["lvl"]
                        else:
                            await ctx.send("You have not enaf Arrows!".format())
                    else:
                        if info["ammo_arrow_steal"] >= 1:
                            randomNUm = random.randint(0, 7)
                            info["ammo_arrow_steal"] = info["ammo_arrow_steal"] - 1
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                enemy_def /= 128
                                skillDMG = user_dmg + user_dmgDif * 1
                                info["stamina"] = info["stamina"] - 20 * info["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                enemy_def /= 64
                                skillDMG = user_dmg + user_dmgDif * 2
                                info["stamina"] = info["stamina"] - 40 * info["lvl"]
                            if randomNUm == 6:
                                enemy_def /= 32
                                skillDMG = user_dmg + user_dmgDif * 4
                                info["stamina"] = info["stamina"] - 80 * info["lvl"]
                            if randomNUm == 7:
                                enemy_def /= 16
                                skillDMG = user_dmg + user_dmgDif * 4
                                info["stamina"] = info["stamina"] - 160 * info["lvl"]
                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf Arrows".format())
                else:
                    await ctx.send("You Need a Bow for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Trap" or answer1.content == "trap" or answer1.content == "11":
                move = "Cast"
                if info["class"] == "Archer":
                    if info["ammo_arrow_trap"] >= 1:
                        info["ammo_arrow_trap"] = info["ammo_arrow_trap"] - 1
                        if info["status_trap"] == "False":
                            info["status_trap"] = "True"
                            info["stamina"] = info["stamina"] - 20 * info["lvl"]
                        else:
                            await ctx.send("Your Trap is active!".format())
                    else:
                        await ctx.send("You have not enaf Traps!".format())
                else:
                    if info["ammo_arrow_trap"] >= 1:
                        info["ammo_arrow_trap"] = info["ammo_arrow_trap"] - 1
                        if info["status_trap"] == "False":
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= 10
                            user_enemy_hp -= user_dmgSELFBurn
                            info["status_trap"] = "True"
                            info["stamina"] = info["stamina"] - 40 * info["lvl"]
                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}\n Anyway your Trap is active now".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("Your Trap is active! BUt you got some Damage! Beware you are not an Archer".format())
                    else:
                        await ctx.send("You have not enaf Traps!".format())
            elif answer1.content == "Shield" or answer1.content == "shield" or answer1.content == "12":
                move = "Shield"
                if slot0 == "Amore" or slot1 == "Amore" or slot2 == "Amore" or slot3 == "Amore" or slot4 == "Amore" or slot5 == "Amore" or slot6 == "Amore" or slot7 == "Amore" or slot8 == "Amore" or slot9 == "Amore" or slot10 == "Amore" or slot11 == "Amore" or slot12 == "Amore" or slot13 == "Amore" or slot14 == "Amore" or slot15 == "Amore" or slot16 == "Amore" or slot17 == "Amore" or slot18 == "Amore" or slot19 == "Amore" or slot20 == "Amore"or slot21 == "Amore"or slot22 == "Amore"or slot23 == "Amore"or slot24 == "Amore"or slot25 == "Amore" or slot0 == "Wood Amore" or slot1 == "Wood Amore" or slot2 == "Wood Amore" or slot3 == "Wood Amore" or slot4 == "Wood Amore" or slot5 == "Wood Amore" or slot6 == "Wood Amore" or slot7 == "Wood Amore" or slot8 == "Wood Amore" or slot9 == "Wood Amore" or slot10 == "Wood Amore" or slot11 == "Wood Amore" or slot12 == "Wood Amore" or slot13 == "Wood Amore" or slot14 == "Wood Amore" or slot15 == "Wood Amore" or slot16 == "Wood Amore" or slot17 == "Wood Amore" or slot18 == "Wood Amore" or slot19 == "Wood Amore" or slot20 == "Wood Amore"or slot21 == "Wood Amore"or slot22 == "Wood Amore"or slot23 == "Wood Amore"or slot24 == "Wood Amore"or slot25 == "Wood Amore" or slot0 == "Stone Amore" or slot1 == "Stone Amore" or slot2 == "Stone Amore" or slot3 == "Stone Amore" or slot4 == "Stone Amore" or slot5 == "Stone Amore" or slot6 == "Stone Amore" or slot7 == "Stone Amore" or slot8 == "Stone Amore" or slot9 == "Stone Amore" or slot10 == "Stone Amore" or slot11 == "Stone Amore" or slot12 == "Stone Amore" or slot13 == "Stone Amore" or slot14 == "Stone Amore" or slot15 == "Stone Amore" or slot16 == "Stone Amore" or slot17 == "Stone Amore" or slot18 == "Stone Amore" or slot19 == "Stone Amore" or slot20 == "Stone Amore"or slot21 == "Stone Amore"or slot22 == "Stone Amore"or slot23 == "Stone Amore"or slot24 == "Stone Amore"or slot25 == "Stone Amore" or slot0 == "Gold Amore" or slot1 == "Gold Amore" or slot2 == "Gold Amore" or slot3 == "Gold Amore" or slot4 == "Gold Amore" or slot5 == "Gold Amore" or slot6 == "Gold Amore" or slot7 == "Gold Amore" or slot8 == "Gold Amore" or slot9 == "Gold Amore" or slot10 == "Gold Amore" or slot11 == "Gold Amore" or slot12 == "Gold Amore" or slot13 == "Gold Amore" or slot14 == "Gold Amore" or slot15 == "Gold Amore" or slot16 == "Gold Amore" or slot17 == "Gold Amore" or slot18 == "Gold Amore" or slot19 == "Gold Amore" or slot20 == "Gold Amore"or slot21 == "Gold Amore"or slot22 == "Gold Amore"or slot23 == "Gold Amore"or slot24 == "Gold Amore"or slot25 == "Gold Amore" or slot0 == "Metal Amore" or slot1 == "Metal Amore" or slot2 == "Metal Amore" or slot3 == "Metal Amore" or slot4 == "Metal Amore" or slot5 == "Metal Amore" or slot6 == "Metal Amore" or slot7 == "Metal Amore" or slot8 == "Metal Amore" or slot9 == "Metal Amore" or slot10 == "Metal Amore" or slot11 == "Metal Amore" or slot12 == "Metal Amore" or slot13 == "Metal Amore" or slot14 == "Metal Amore" or slot15 == "Metal Amore" or slot16 == "Metal Amore" or slot17 == "Metal Amore" or slot18 == "Metal Amore" or slot19 == "Metal Amore" or slot20 == "Metal Amore"or slot21 == "Metal Amore"or slot22 == "Metal Amore"or slot23 == "Metal Amore"or slot24 == "Metal Amore"or slot25 == "Metal Amore" or slot0 == "Bobo Amore" or slot1 == "Bobo Amore" or slot2 == "Bobo Amore" or slot3 == "Bobo Amore" or slot4 == "Bobo Amore" or slot5 == "Bobo Amore" or slot6 == "Bobo Amore" or slot7 == "Bobo Amore" or slot8 == "Bobo Amore" or slot9 == "Bobo Amore" or slot10 == "Bobo Amore" or slot11 == "Bobo Amore" or slot12 == "Bobo Amore" or slot13 == "Bobo Amore" or slot14 == "Bobo Amore" or slot15 == "Bobo Amore" or slot16 == "Bobo Amore" or slot17 == "Bobo Amore" or slot18 == "Bobo Amore" or slot19 == "Bobo Amore" or slot20 == "Bobo Amore"or slot21 == "Bobo Amore"or slot22 == "Bobo Amore"or slot23 == "Bobo Amore"or slot24 == "Bobo Amore"or slot25 == "Bobo Amore" or  slot0 == "Amore I" or slot1 == "Amore I" or slot2 == "Amore I" or slot3 == "Amore I" or slot4 == "Amore I" or slot5 == "Amore I" or slot6 == "Amore I" or slot7 == "Amore I" or slot8 == "Amore I" or slot9 == "Amore I" or slot10 == "Amore I" or slot11 == "Amore I" or slot12 == "Amore I" or slot13 == "Amore I" or slot14 == "Amore I" or slot15 == "Amore I" or slot16 == "Amore I" or slot17 == "Amore I" or slot18 == "Amore I" or slot19 == "Amore I" or slot20 == "Amore I"or slot21 == "Amore I"or slot22 == "Amore I"or slot23 == "Amore I"or slot24 == "Amore I"or slot25 == "Amore I" or  slot0 == "Amore II" or slot1 == "Amore II" or slot2 == "Amore II" or slot3 == "Amore II" or slot4 == "Amore II" or slot5 == "Amore II" or slot6 == "Amore II" or slot7 == "Amore II" or slot8 == "Amore II" or slot9 == "Amore II" or slot10 == "Amore II" or slot11 == "Amore II" or slot12 == "Amore II" or slot13 == "Amore II" or slot14 == "Amore II" or slot15 == "Amore II" or slot16 == "Amore II" or slot17 == "Amore II" or slot18 == "Amore II" or slot19 == "Amore II" or slot20 == "Amore II"or slot21 == "Amore II"or slot22 == "Amore II"or slot23 == "Amore II"or slot24 == "Amore II"or slot25 == "Amore II" or  slot0 == "Amore III" or slot1 == "Amore III" or slot2 == "Amore III" or slot3 == "Amore III" or slot4 == "Amore III" or slot5 == "Amore III" or slot6 == "Amore III" or slot7 == "Amore III" or slot8 == "Amore III" or slot9 == "Amore III" or slot10 == "Amore III" or slot11 == "Amore III" or slot12 == "Amore III" or slot13 == "Amore III" or slot14 == "Amore III" or slot15 == "Amore III" or slot16 == "Amore III" or slot17 == "Amore III" or slot18 == "Amore III" or slot19 == "Amore III" or slot20 == "Amore III"or slot21 == "Amore III"or slot22 == "Amore III"or slot23 == "Amore III"or slot24 == "Amore III"or slot25 == "Amore III" or  slot0 == "Amore IV" or slot1 == "Amore IV" or slot2 == "Amore IV" or slot3 == "Amore IV" or slot4 == "Amore IV" or slot5 == "Amore IV" or slot6 == "Amore IV" or slot7 == "Amore IV" or slot8 == "Amore IV" or slot9 == "Amore IV" or slot10 == "Amore IV" or slot11 == "Amore IV" or slot12 == "Amore IV" or slot13 == "Amore IV" or slot14 == "Amore IV" or slot15 == "Amore IV" or slot16 == "Amore IV" or slot17 == "Amore IV" or slot18 == "Amore IV" or slot19 == "Amore IV" or slot20 == "Amore IV"or slot21 == "Amore IV"or slot22 == "Amore IV"or slot23 == "Amore IV"or slot24 == "Amore IV"or slot25 == "Amore IV" or  slot0 == "Amore V" or slot1 == "Amore V" or slot2 == "Amore V" or slot3 == "Amore V" or slot4 == "Amore V" or slot5 == "Amore V" or slot6 == "Amore V" or slot7 == "Amore V" or slot8 == "Amore V" or slot9 == "Amore V" or slot10 == "Amore V" or slot11 == "Amore V" or slot12 == "Amore V" or slot13 == "Amore V" or slot14 == "Amore V" or slot15 == "Amore V" or slot16 == "Amore V" or slot17 == "Amore V" or slot18 == "Amore V" or slot19 == "Amore V" or slot20 == "Amore V"or slot21 == "Amore V"or slot22 == "Amore V"or slot23 == "Amore V"or slot24 == "Amore V"or slot25 == "Amore V":
                    if info["class"] == "Paladin":
                        randomNUm = random.randint(10, 40)
                        info["ammo_arrow_steal"] = info["ammo_arrow_steal"] - 1
                        max_def = max_def * randomNUm
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            max_def = max_def * randomNUm
                        if randomNUm == 4 or randomNUm == 5:
                            max_def = max_def * randomNUm
                        if randomNUm == 6:
                            max_def = max_def * randomNUm
                        if randomNUm == 7:
                            max_def = max_def * randomNUm
                        info["stamina"] = info["stamina"] - 20 * info["lvl"]
                    else:
                        await ctx.send("You are not a Paladin your Protection is wasteless!".format())
                else:
                    await ctx.send("You Need an Amore for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Knock Back" or answer1.content == "knock back" or answer1.content == "13":
                move = "Knock Back"
                if slot0 == "Amore" or slot1 == "Amore" or slot2 == "Amore" or slot3 == "Amore" or slot4 == "Amore" or slot5 == "Amore" or slot6 == "Amore" or slot7 == "Amore" or slot8 == "Amore" or slot9 == "Amore" or slot10 == "Amore" or slot11 == "Amore" or slot12 == "Amore" or slot13 == "Amore" or slot14 == "Amore" or slot15 == "Amore" or slot16 == "Amore" or slot17 == "Amore" or slot18 == "Amore" or slot19 == "Amore" or slot20 == "Amore"or slot21 == "Amore"or slot22 == "Amore"or slot23 == "Amore"or slot24 == "Amore"or slot25 == "Amore" or slot0 == "Wood Amore" or slot1 == "Wood Amore" or slot2 == "Wood Amore" or slot3 == "Wood Amore" or slot4 == "Wood Amore" or slot5 == "Wood Amore" or slot6 == "Wood Amore" or slot7 == "Wood Amore" or slot8 == "Wood Amore" or slot9 == "Wood Amore" or slot10 == "Wood Amore" or slot11 == "Wood Amore" or slot12 == "Wood Amore" or slot13 == "Wood Amore" or slot14 == "Wood Amore" or slot15 == "Wood Amore" or slot16 == "Wood Amore" or slot17 == "Wood Amore" or slot18 == "Wood Amore" or slot19 == "Wood Amore" or slot20 == "Wood Amore"or slot21 == "Wood Amore"or slot22 == "Wood Amore"or slot23 == "Wood Amore"or slot24 == "Wood Amore"or slot25 == "Wood Amore" or slot0 == "Stone Amore" or slot1 == "Stone Amore" or slot2 == "Stone Amore" or slot3 == "Stone Amore" or slot4 == "Stone Amore" or slot5 == "Stone Amore" or slot6 == "Stone Amore" or slot7 == "Stone Amore" or slot8 == "Stone Amore" or slot9 == "Stone Amore" or slot10 == "Stone Amore" or slot11 == "Stone Amore" or slot12 == "Stone Amore" or slot13 == "Stone Amore" or slot14 == "Stone Amore" or slot15 == "Stone Amore" or slot16 == "Stone Amore" or slot17 == "Stone Amore" or slot18 == "Stone Amore" or slot19 == "Stone Amore" or slot20 == "Stone Amore"or slot21 == "Stone Amore"or slot22 == "Stone Amore"or slot23 == "Stone Amore"or slot24 == "Stone Amore"or slot25 == "Stone Amore" or slot0 == "Gold Amore" or slot1 == "Gold Amore" or slot2 == "Gold Amore" or slot3 == "Gold Amore" or slot4 == "Gold Amore" or slot5 == "Gold Amore" or slot6 == "Gold Amore" or slot7 == "Gold Amore" or slot8 == "Gold Amore" or slot9 == "Gold Amore" or slot10 == "Gold Amore" or slot11 == "Gold Amore" or slot12 == "Gold Amore" or slot13 == "Gold Amore" or slot14 == "Gold Amore" or slot15 == "Gold Amore" or slot16 == "Gold Amore" or slot17 == "Gold Amore" or slot18 == "Gold Amore" or slot19 == "Gold Amore" or slot20 == "Gold Amore"or slot21 == "Gold Amore"or slot22 == "Gold Amore"or slot23 == "Gold Amore"or slot24 == "Gold Amore"or slot25 == "Gold Amore" or slot0 == "Metal Amore" or slot1 == "Metal Amore" or slot2 == "Metal Amore" or slot3 == "Metal Amore" or slot4 == "Metal Amore" or slot5 == "Metal Amore" or slot6 == "Metal Amore" or slot7 == "Metal Amore" or slot8 == "Metal Amore" or slot9 == "Metal Amore" or slot10 == "Metal Amore" or slot11 == "Metal Amore" or slot12 == "Metal Amore" or slot13 == "Metal Amore" or slot14 == "Metal Amore" or slot15 == "Metal Amore" or slot16 == "Metal Amore" or slot17 == "Metal Amore" or slot18 == "Metal Amore" or slot19 == "Metal Amore" or slot20 == "Metal Amore"or slot21 == "Metal Amore"or slot22 == "Metal Amore"or slot23 == "Metal Amore"or slot24 == "Metal Amore"or slot25 == "Metal Amore" or slot0 == "Bobo Amore" or slot1 == "Bobo Amore" or slot2 == "Bobo Amore" or slot3 == "Bobo Amore" or slot4 == "Bobo Amore" or slot5 == "Bobo Amore" or slot6 == "Bobo Amore" or slot7 == "Bobo Amore" or slot8 == "Bobo Amore" or slot9 == "Bobo Amore" or slot10 == "Bobo Amore" or slot11 == "Bobo Amore" or slot12 == "Bobo Amore" or slot13 == "Bobo Amore" or slot14 == "Bobo Amore" or slot15 == "Bobo Amore" or slot16 == "Bobo Amore" or slot17 == "Bobo Amore" or slot18 == "Bobo Amore" or slot19 == "Bobo Amore" or slot20 == "Bobo Amore"or slot21 == "Bobo Amore"or slot22 == "Bobo Amore"or slot23 == "Bobo Amore"or slot24 == "Bobo Amore"or slot25 == "Bobo Amore" or  slot0 == "Amore I" or slot1 == "Amore I" or slot2 == "Amore I" or slot3 == "Amore I" or slot4 == "Amore I" or slot5 == "Amore I" or slot6 == "Amore I" or slot7 == "Amore I" or slot8 == "Amore I" or slot9 == "Amore I" or slot10 == "Amore I" or slot11 == "Amore I" or slot12 == "Amore I" or slot13 == "Amore I" or slot14 == "Amore I" or slot15 == "Amore I" or slot16 == "Amore I" or slot17 == "Amore I" or slot18 == "Amore I" or slot19 == "Amore I" or slot20 == "Amore I"or slot21 == "Amore I"or slot22 == "Amore I"or slot23 == "Amore I"or slot24 == "Amore I"or slot25 == "Amore I" or  slot0 == "Amore II" or slot1 == "Amore II" or slot2 == "Amore II" or slot3 == "Amore II" or slot4 == "Amore II" or slot5 == "Amore II" or slot6 == "Amore II" or slot7 == "Amore II" or slot8 == "Amore II" or slot9 == "Amore II" or slot10 == "Amore II" or slot11 == "Amore II" or slot12 == "Amore II" or slot13 == "Amore II" or slot14 == "Amore II" or slot15 == "Amore II" or slot16 == "Amore II" or slot17 == "Amore II" or slot18 == "Amore II" or slot19 == "Amore II" or slot20 == "Amore II"or slot21 == "Amore II"or slot22 == "Amore II"or slot23 == "Amore II"or slot24 == "Amore II"or slot25 == "Amore II" or  slot0 == "Amore III" or slot1 == "Amore III" or slot2 == "Amore III" or slot3 == "Amore III" or slot4 == "Amore III" or slot5 == "Amore III" or slot6 == "Amore III" or slot7 == "Amore III" or slot8 == "Amore III" or slot9 == "Amore III" or slot10 == "Amore III" or slot11 == "Amore III" or slot12 == "Amore III" or slot13 == "Amore III" or slot14 == "Amore III" or slot15 == "Amore III" or slot16 == "Amore III" or slot17 == "Amore III" or slot18 == "Amore III" or slot19 == "Amore III" or slot20 == "Amore III"or slot21 == "Amore III"or slot22 == "Amore III"or slot23 == "Amore III"or slot24 == "Amore III"or slot25 == "Amore III" or  slot0 == "Amore IV" or slot1 == "Amore IV" or slot2 == "Amore IV" or slot3 == "Amore IV" or slot4 == "Amore IV" or slot5 == "Amore IV" or slot6 == "Amore IV" or slot7 == "Amore IV" or slot8 == "Amore IV" or slot9 == "Amore IV" or slot10 == "Amore IV" or slot11 == "Amore IV" or slot12 == "Amore IV" or slot13 == "Amore IV" or slot14 == "Amore IV" or slot15 == "Amore IV" or slot16 == "Amore IV" or slot17 == "Amore IV" or slot18 == "Amore IV" or slot19 == "Amore IV" or slot20 == "Amore IV"or slot21 == "Amore IV"or slot22 == "Amore IV"or slot23 == "Amore IV"or slot24 == "Amore IV"or slot25 == "Amore IV" or  slot0 == "Amore V" or slot1 == "Amore V" or slot2 == "Amore V" or slot3 == "Amore V" or slot4 == "Amore V" or slot5 == "Amore V" or slot6 == "Amore V" or slot7 == "Amore V" or slot8 == "Amore V" or slot9 == "Amore V" or slot10 == "Amore V" or slot11 == "Amore V" or slot12 == "Amore V" or slot13 == "Amore V" or slot14 == "Amore V" or slot15 == "Amore V" or slot16 == "Amore V" or slot17 == "Amore V" or slot18 == "Amore V" or slot19 == "Amore V" or slot20 == "Amore V"or slot21 == "Amore V"or slot22 == "Amore V"or slot23 == "Amore V"or slot24 == "Amore V"or slot25 == "Amore V":
                    if info["class"] == "Paladin":
                        if info["status_confuse"] == "False":
                            info["status_confuse"] = "True"
                            info["stamina"] = info["stamina"] - 20 * info["lvl"]
                            await ctx.send("You knock sso hard that your enamy is confuessed!".format())
                        else:
                            await ctx.send("Your enamy is still confuessed!".format())
                    else:
                        await ctx.send("You not a Paladin...your power is to weak!".format())
                else:
                    await ctx.send("You Need an Amore for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Brute Force" or answer1.content == "brute force" or answer1.content == "14":
                move = "Brute Force"
                if slot0 == "Sword" or slot1 == "Sword" or slot2 == "Sword" or slot3 == "Sword" or slot4 == "Sword" or slot5 == "Sword" or slot6 == "Sword" or slot7 == "Sword" or slot8 == "Sword" or slot9 == "Sword" or slot10 == "Sword" or slot11 == "Sword" or slot12 == "Sword" or slot13 == "Sword" or slot14 == "Sword" or slot15 == "Sword" or slot16 == "Sword" or slot17 == "Sword" or slot18 == "Sword" or slot19 == "Sword" or slot20 == "Sword"or slot21 == "Sword"or slot22 == "Sword"or slot23 == "Sword"or slot24 == "Sword"or slot25 == "Sword" or slot0 == "Wood Sword" or slot1 == "Wood Sword" or slot2 == "Wood Sword" or slot3 == "Wood Sword" or slot4 == "Wood Sword" or slot5 == "Wood Sword" or slot6 == "Wood Sword" or slot7 == "Wood Sword" or slot8 == "Wood Sword" or slot9 == "Wood Sword" or slot10 == "Wood Sword" or slot11 == "Wood Sword" or slot12 == "Wood Sword" or slot13 == "Wood Sword" or slot14 == "Wood Sword" or slot15 == "Wood Sword" or slot16 == "Wood Sword" or slot17 == "Wood Sword" or slot18 == "Wood Sword" or slot19 == "Wood Sword" or slot20 == "Wood Sword"or slot21 == "Wood Sword"or slot22 == "Wood Sword"or slot23 == "Wood Sword"or slot24 == "Wood Sword"or slot25 == "Wood Sword" or slot0 == "Stone Sword" or slot1 == "Stone Sword" or slot2 == "Stone Sword" or slot3 == "Stone Sword" or slot4 == "Stone Sword" or slot5 == "Stone Sword" or slot6 == "Stone Sword" or slot7 == "Stone Sword" or slot8 == "Stone Sword" or slot9 == "Stone Sword" or slot10 == "Stone Sword" or slot11 == "Stone Sword" or slot12 == "Stone Sword" or slot13 == "Stone Sword" or slot14 == "Stone Sword" or slot15 == "Stone Sword" or slot16 == "Stone Sword" or slot17 == "Stone Sword" or slot18 == "Stone Sword" or slot19 == "Stone Sword" or slot20 == "Stone Sword"or slot21 == "Stone Sword"or slot22 == "Stone Sword"or slot23 == "Stone Sword"or slot24 == "Stone Sword"or slot25 == "Stone Sword" or slot0 == "Gold Sword" or slot1 == "Gold Sword" or slot2 == "Gold Sword" or slot3 == "Gold Sword" or slot4 == "Gold Sword" or slot5 == "Gold Sword" or slot6 == "Gold Sword" or slot7 == "Gold Sword" or slot8 == "Gold Sword" or slot9 == "Gold Sword" or slot10 == "Gold Sword" or slot11 == "Gold Sword" or slot12 == "Gold Sword" or slot13 == "Gold Sword" or slot14 == "Gold Sword" or slot15 == "Gold Sword" or slot16 == "Gold Sword" or slot17 == "Gold Sword" or slot18 == "Gold Sword" or slot19 == "Gold Sword" or slot20 == "Gold Sword"or slot21 == "Gold Sword"or slot22 == "Gold Sword"or slot23 == "Gold Sword"or slot24 == "Gold Sword"or slot25 == "Gold Sword" or slot0 == "Metal Sword" or slot1 == "Metal Sword" or slot2 == "Metal Sword" or slot3 == "Metal Sword" or slot4 == "Metal Sword" or slot5 == "Metal Sword" or slot6 == "Metal Sword" or slot7 == "Metal Sword" or slot8 == "Metal Sword" or slot9 == "Metal Sword" or slot10 == "Metal Sword" or slot11 == "Metal Sword" or slot12 == "Metal Sword" or slot13 == "Metal Sword" or slot14 == "Metal Sword" or slot15 == "Metal Sword" or slot16 == "Metal Sword" or slot17 == "Metal Sword" or slot18 == "Metal Sword" or slot19 == "Metal Sword" or slot20 == "Metal Sword"or slot21 == "Metal Sword"or slot22 == "Metal Sword"or slot23 == "Metal Sword"or slot24 == "Metal Sword"or slot25 == "Metal Sword" or slot0 == "Bobo Sword" or slot1 == "Bobo Sword" or slot2 == "Bobo Sword" or slot3 == "Bobo Sword" or slot4 == "Bobo Sword" or slot5 == "Bobo Sword" or slot6 == "Bobo Sword" or slot7 == "Bobo Sword" or slot8 == "Bobo Sword" or slot9 == "Bobo Sword" or slot10 == "Bobo Sword" or slot11 == "Bobo Sword" or slot12 == "Bobo Sword" or slot13 == "Bobo Sword" or slot14 == "Bobo Sword" or slot15 == "Bobo Sword" or slot16 == "Bobo Sword" or slot17 == "Bobo Sword" or slot18 == "Bobo Sword" or slot19 == "Bobo Sword" or slot20 == "Bobo Sword"or slot21 == "Bobo Sword"or slot22 == "Bobo Sword"or slot23 == "Bobo Sword"or slot24 == "Bobo Sword"or slot25 == "Bobo Sword":
                    if info["class"] == "Paladin":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                    else:
                        randomNUm = random.randint(1, 6)
                        if randomNUm == 0 or  randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        await ctx.send("You are not an Paladin and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                else:
                    await ctx.send("You Need an Sword for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Water Ball" or answer1.content == "water ball" or answer1.content == "15":
                move = "Water Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    if info["class"] == "Mage":
                        if info["ammo_water_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_water_pot"] = info["ammo_water_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf WaterPots".format())
                            return
                    else:
                        if info["ammo_water_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_water_pot"] = info["ammo_water_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                info["mana"] = info["mana"] - 10 * info["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                info["mana"] = info["mana"] - 20 * info["lvl"]
                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf WaterPots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Wind Ball" or answer1.content == "wind ball" or answer1.content == "16":
                move = "Wind Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    if info["class"] == "Mage":
                        if info["ammo_wind_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_wind_pot"] = info["ammo_wind_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf WindPots".format())
                            return
                    else:
                        if info["ammo_wind_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_wind_pot"] = info["ammo_wind_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                info["mana"] = info["mana"] - 10 * info["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                info["mana"] = info["mana"] - 20 * info["lvl"]
                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf WindPots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return fight(ctx)
            if answer1.content == "Earth Ball" or answer1.content == "earth ball" or answer1.content == "17":
                move = "Earth Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    if info["class"] == "Mage":
                        if info["ammo_earth_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_earth_pot"] = info["ammo_earth_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf EarthPots".format())
                            return
                    else:
                        if info["ammo_earth_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            info["ammo_earth_pot"] = info["ammo_earth_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn /= randomNUm
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg / randomNUm
                                info["mana"] = info["mana"] - 20 * info["lvl"]
                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf EarthPots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Pickpocket" or answer1.content == "pickpocket" or answer1.content == "18":
                move = "Pickpocket"
                name = info["name"]
                chance = random.randint(0, 6)
                drop = random.randint(1, 10)
                if chance == 1 or chance == 2 or chance == 3:
                    gain = drop * 0.50
                    info["boco"] = drop + gain
                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 50%!\n {} Bobocoin's\n```".format(name, gain), color=discord.Color.red())
                    await ctx.send(embed=em)
                elif chance == 4 or chance == 5:
                    gain = drop * 0.75
                    info["boco"] = drop + gain
                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 75% at!\n {} Bobocoin's\n```".format(name,  gain), color=discord.Color.red())
                    await ctx.send(embed=em)
                elif chance == 6:
                    gain = drop * 0.9
                    info["boco"] = drop + gain
                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 90%!\n {} Bobocoin's\n```".format(name, gain), color=discord.Color.red())
                    await ctx.send(embed=em)
                elif chance == 0:
                    await ctx.send("Nothing Sorry")
                    info["boco"] = info["boco"]
            elif answer1.content == "Hide" or answer1.content == "hide" or answer1.content == "19":
                move = "Hide"
                if info["class"] == "Thief":
                    if info["status_hide"] == "False":
                        info["status_hide"] = "True"
                        info["stamina"] = info["stamina"] - 20 * info["lvl"]
                        await ctx.send("You hidden between the trees!".format())
                        return fight(ctx)
                    else:
                        await ctx.send("No one spoted you so far!".format())
                        if info["class"] == "Thief":
                            randomNUm = random.randint(1, 6)
                            howManyArrows = random.randint(5, 100)
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_hide"] = "False"
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_hide"] = "False"
                            if randomNUm == 6:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_hide"] = "False"
                        else:
                            randomNUm = random.randint(1, 6)
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * randomNUm
                                #user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_hide"] = "False"
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= randomNUm
                                #user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_hide"] = "False"
                                await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                else:
                    HideOrNot = random.randint(1, 3)
                    if HideOrNot == "1" or HideOrNot == 1:
                        await ctx.send("You are not a Thief!...you hide Very baddly!".format())
                        if ainfo["status_hide"] == "True":
                            ainfo["status_hide"] = "True"
                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            await ctx.send("You hidden between the trees!".format())
                            return #skill(ctx)
                        else:
                            await ctx.send("No one spoted you so far!".format())
                    elif HideOrNot == "2" or HideOrNot == 2:
                        await ctx.send("You are not a Thief!...you hide but was direct spoted!".format())
                    elif HideOrNot == "3" or HideOrNot == 3:
                        await ctx.send("You are not a Thief!...you hide Very baddly!".format())
                        if ainfo["status_hide"] == "True":
                            ainfo["status_hide"] = "True"
                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            await ctx.send("You hidden between the trees!".format())
                            return #skill(ctx)
                        else:
                            await ctx.send("No one spoted you so far!".format())
                    else:
                        await ctx.send("You are not a Thief!...you hide but was direct spoted!\n Thiefs have Special abbility to Attack while Hidden!".format())
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
            elif answer1.content == "Jump" or answer1.content == "jump" or answer1.content == "20":
                move = "Jump"
                if info["class"] == "Thief":
                    if info["status_jump"] == "False":
                        info["status_jump"] = "True"
                        enemy_dmg = 0
                        info["stamina"] = info["stamina"] - 20 * info["lvl"]
                        await ctx.send("You Jump in the Air!".format())
                        return fight(ctx)
                    else:
                        await ctx.send("Still on flying!".format())
                        if info["class"] == "Thief":
                            randomNUm = random.randint(1, 6)
                            howManyArrows = random.randint(5, 100)
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_jump"] = "False"
                            elif randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_jump"] = "False"
                            elif randomNUm == 6:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_jump"] = "False"
                        else:
                            randomNUm = random.randint(1, 6)
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg + 10
                                user_dmgSELFBurn /= randomNUm
                                user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_jump"] = "False"
                            elif randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg + 100
                                user_dmgSELFBurn /= randomNUm
                                user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_jump"] = "False"
                                await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                            else:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg + 1000
                                user_dmgSELFBurn /= randomNUm
                                user_enemy_hp -= user_dmgSELFBurn
                                info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                                info["status_jump"] = "False"
                                await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                else:
                    randomNUm = random.randint(1, 6)
                    if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                        skillDMG = user_dmg * randomNUm
                        user_dmgSELFBurn = user_dmg + 10
                        user_dmgSELFBurn /= randomNUm
                        user_enemy_hp -= user_dmgSELFBurn
                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        ainfo["status_jump"] = "False"
                    elif randomNUm == 4 or randomNUm == 5:
                        skillDMG = user_dmg * randomNUm
                        user_dmgSELFBurn = user_dmg + 100
                        user_dmgSELFBurn /= randomNUm
                        user_enemy_hp -= user_dmgSELFBurn
                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        ainfo["status_jump"] = "False"
                        await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                    else:
                        skillDMG = user_dmg * randomNUm
                        user_dmgSELFBurn = user_dmg + 1000
                        user_dmgSELFBurn /= randomNUm
                        user_enemy_hp -= user_dmgSELFBurn
                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        ainfo["status_jump"] = "False"
                        await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                    await ctx.send("You are not a Thief...you jump but plobbed direct on the ground!".format())
            elif answer1.content == "Secret Dagger" or answer1.content == "secret dagger" or answer1.content == "21":
                move = "Secret Dagger"
                if slot0 == "Dagger" or slot1 == "Dagger" or slot2 == "Dagger" or slot3 == "Dagger" or slot4 == "Dagger" or slot5 == "Dagger" or slot6 == "Dagger" or slot7 == "Dagger" or slot8 == "Dagger" or slot9 == "Dagger" or slot10 == "Dagger" or slot11 == "Dagger" or slot12 == "Dagger" or slot13 == "Dagger" or slot14 == "Dagger" or slot15 == "Dagger" or slot16 == "Dagger" or slot17 == "Dagger" or slot18 == "Dagger" or slot19 == "Dagger" or slot20 == "Dagger"or slot21 == "Dagger"or slot22 == "Dagger"or slot23 == "Dagger"or slot24 == "Dagger"or slot25 == "Dagger" or slot0 == "Wood Dagger" or slot1 == "Wood Dagger" or slot2 == "Wood Dagger" or slot3 == "Wood Dagger" or slot4 == "Wood Dagger" or slot5 == "Wood Dagger" or slot6 == "Wood Dagger" or slot7 == "Wood Dagger" or slot8 == "Wood Dagger" or slot9 == "Wood Dagger" or slot10 == "Wood Dagger" or slot11 == "Wood Dagger" or slot12 == "Wood Dagger" or slot13 == "Wood Dagger" or slot14 == "Wood Dagger" or slot15 == "Wood Dagger" or slot16 == "Wood Dagger" or slot17 == "Wood Dagger" or slot18 == "Wood Dagger" or slot19 == "Wood Dagger" or slot20 == "Wood Dagger"or slot21 == "Wood Dagger"or slot22 == "Wood Dagger"or slot23 == "Wood Dagger"or slot24 == "Wood Dagger"or slot25 == "Wood Dagger" or slot0 == "Stone Dagger" or slot1 == "Stone Dagger" or slot2 == "Stone Dagger" or slot3 == "Stone Dagger" or slot4 == "Stone Dagger" or slot5 == "Stone Dagger" or slot6 == "Stone Dagger" or slot7 == "Stone Dagger" or slot8 == "Stone Dagger" or slot9 == "Stone Dagger" or slot10 == "Stone Dagger" or slot11 == "Stone Dagger" or slot12 == "Stone Dagger" or slot13 == "Stone Dagger" or slot14 == "Stone Dagger" or slot15 == "Stone Dagger" or slot16 == "Stone Dagger" or slot17 == "Stone Dagger" or slot18 == "Stone Dagger" or slot19 == "Stone Dagger" or slot20 == "Stone Dagger"or slot21 == "Stone Dagger"or slot22 == "Stone Dagger"or slot23 == "Stone Dagger"or slot24 == "Stone Dagger"or slot25 == "Stone Dagger" or slot0 == "Gold Dagger" or slot1 == "Gold Dagger" or slot2 == "Gold Dagger" or slot3 == "Gold Dagger" or slot4 == "Gold Dagger" or slot5 == "Gold Dagger" or slot6 == "Gold Dagger" or slot7 == "Gold Dagger" or slot8 == "Gold Dagger" or slot9 == "Gold Dagger" or slot10 == "Gold Dagger" or slot11 == "Gold Dagger" or slot12 == "Gold Dagger" or slot13 == "Gold Dagger" or slot14 == "Gold Dagger" or slot15 == "Gold Dagger" or slot16 == "Gold Dagger" or slot17 == "Gold Dagger" or slot18 == "Gold Dagger" or slot19 == "Gold Dagger" or slot20 == "Gold Dagger"or slot21 == "Gold Dagger"or slot22 == "Gold Dagger"or slot23 == "Gold Dagger"or slot24 == "Gold Dagger"or slot25 == "Gold Dagger" or slot0 == "Metal Dagger" or slot1 == "Metal Dagger" or slot2 == "Metal Dagger" or slot3 == "Metal Dagger" or slot4 == "Metal Dagger" or slot5 == "Metal Dagger" or slot6 == "Metal Dagger" or slot7 == "Metal Dagger" or slot8 == "Metal Dagger" or slot9 == "Metal Dagger" or slot10 == "Metal Dagger" or slot11 == "Metal Dagger" or slot12 == "Metal Dagger" or slot13 == "Metal Dagger" or slot14 == "Metal Dagger" or slot15 == "Metal Dagger" or slot16 == "Metal Dagger" or slot17 == "Metal Dagger" or slot18 == "Metal Dagger" or slot19 == "Metal Dagger" or slot20 == "Metal Dagger"or slot21 == "Metal Dagger"or slot22 == "Metal Dagger"or slot23 == "Metal Dagger"or slot24 == "Metal Dagger"or slot25 == "Metal Dagger" or slot0 == "Bobo Dagger" or slot1 == "Bobo Dagger" or slot2 == "Bobo Dagger" or slot3 == "Bobo Dagger" or slot4 == "Bobo Dagger" or slot5 == "Bobo Dagger" or slot6 == "Bobo Dagger" or slot7 == "Bobo Dagger" or slot8 == "Bobo Dagger" or slot9 == "Bobo Dagger" or slot10 == "Bobo Dagger" or slot11 == "Bobo Dagger" or slot12 == "Bobo Dagger" or slot13 == "Bobo Dagger" or slot14 == "Bobo Dagger" or slot15 == "Bobo Dagger" or slot16 == "Bobo Dagger" or slot17 == "Bobo Dagger" or slot18 == "Bobo Dagger" or slot19 == "Bobo Dagger" or slot20 == "Bobo Dagger"or slot21 == "Bobo Dagger"or slot22 == "Bobo Dagger"or slot23 == "Bobo Dagger"or slot24 == "Bobo Dagger"or slot25 == "Bobo Dagger":
                    if info["class"] == "Thief":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                    else:
                        randomNUm = random.randint(1, 6)
                        info["ammo_arrow"] = info["ammo_arrow"] - 1
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                            await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                else:
                    await ctx.send("You Need an Dagger for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Scan" or answer1.content == "scan" or answer1.content == "22":
                move = "Scan"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if info["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                            info["status_scan"] = "True"
                        await ctx.send("You Scanned your Taget and found Open Ports".format())
                else:
                    await ctx.send("You Need a PC for that Move".format())
                    return fight(ctx)
            elif answer1.content == "Crack" or answer1.content == "crack" or answer1.content == "23":
                move = "Crack"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if info["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if info["status_scan"] == "True":
                            info["status_crack"] = "True"
                            await ctx.send("You Cracked your Taget PC use DDOS or Install to attack!".format())
                        else:
                            await ctx.send("Use attack {}scan first!".format(Prefix))
                            await ctx.send("Use attack {}crack than!".format(Prefix))
                else:
                    await ctx.send("You need to be a HACKER for that!".format())
                    return fight(ctx)
            elif answer1.content == "DDOS" or answer1.content == "ddos" or answer1.content == "25":
                move = "DDOS"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if info["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if info["status_ddos"] == "True":
                            info["status_confuse"] = "True"
                            await ctx.send("You send many pings to your target and confuessed him with that!".format())
                        else:
                            await ctx.send("Use attack {}crack first!".format(Prefix))
                else:
                    await ctx.send("You need to be a HACKER for that!".format())
                    return fight(ctx)
            elif answer1.content == "Install" or answer1.content == "install" or answer1.content == "24":
                move = "Install"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if info["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            info["stamina"] = info["stamina"] - randomNUm * info["lvl"]
                        if info["status_crack"] == "True":
                            info["status_install_who"] = info["name"]
                            info["status_install"] = "True"
                            await ctx.send("You send many pings to your target and confuessed him with that!".format())
                        else:
                            await ctx.send("Use attack {}crack first!".format(Prefix))
                else:
                    await ctx.send("You need to be a HACKER for that!".format())
                    return fight(ctx)
            MissOrNot = random.randint(2, 2)
            if MissOrNot == 2 or MissOrNot == 4 or MissOrNot == 6 or MissOrNot == 8 or MissOrNot == 10 :
                print("[=======CALC+++++START=======]")
                #Hit = enemy_max_dmg
                info["stamina"] = info["stamina"] - random.randint(1, 10)
                enemy_hp = user_enemy_hp
                user_hp -= user_dmgSELFBurn
                gold_lost = random.randint(9, 99)
                #print("")  attack*(100/(100+defense))
                #print()
                #print("")
                #print()
                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                #user_hp_after = int(user_hp) - int(enemy_dmg)
                #userAtk * (100/(100+enemy_def))
                user_dmg = user_dmg + skillDMG
                print("[=======PlayA=======]")
                print("user_hp")
                print(user_hp)
                print("max_def")
                print(max_def)
                print("user_dmg")
                print(user_dmg)
                print("[=======PlayA=======]")
                print("[=======MonA=======]")
                print("enemy_hp")
                print(enemy_hp)
                print("enemy_dmg")
                print(enemy_dmg)
                print("enemy_def")
                print(enemy_def)
                print("[=======MonA=======]")
                if max_def > enemy_dmg and user_dmg > enemy_def:
                    atk_def_userAtkShow = enemy_hp
                    #atk_def_enamyAtkShow = 0
                    atk_def_enamyAtk = 0
                    user_hp_after = user_hp
                    atk_def_userAtk = user_dmg - enemy_def
                    enemy_hp_after = atk_def_userAtkShow - int(atk_def_userAtk)
                    enemy_hp_after -= skillDMG
                    if enemy_hp_after <= 0:
                        enemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(atk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0),  skillDMG, user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    print("atk_def_userAtk")
                    print(atk_def_userAtk)
                    print("enemy_hp_after")
                    print(enemy_hp_after)
                    print("if max_def > enemy_dmg and user_dmg > enemy_def:")
                elif enemy_dmg > max_def and enemy_def > user_dmg:
                    atk_def_userAtkShow = user_hp
                    atk_def_enamyAtkShow = 0
                    atk_def_enamyAtk = enemy_hp
                    atk_def_userAtk = enemy_dmg - max_def
                    skillendCALS = atk_def_enamyAtk - skillDMG
                    enemy_hp_after = skillendCALS
                    #enemy_hp_after = atk_def_enamyAtk * skillDMG
                    user_hp_after = atk_def_userAtkShow - int(atk_def_userAtk)
                    enATk0 = atk_def_userAtk
                    usAtk0 = 0
                    if enemy_hp_after <= 0:
                        enemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(enATk0, 0), user_name, move, round(usAtk0, 0), skillDMG, user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    if user_dmg < enemy_def :
                        em = discord.Embed(description="```diff\n- YOU MAKE LESS THAN THE RECOMANDED DAMAGE!\n- USE COMMAND {}bp0x0 0 to equipt a weapon!\n And \n- USE COMMAND {}lvl to check your lvl!```".format(Prefix,Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                    print("if enemy_dmg > max_def and enemy_def > user_dmg:")
                elif max_def > enemy_dmg  and enemy_def > user_dmg:
                    enATk0 = 0
                    usAtk0 = 0
                    enemy_hp_after = enemy_hp
                    user_hp_after = user_hp
                    usATKuSkill = usAtk0 + skillDMG
                    enemy_hp_after -= usATKuSkill
                    user_hp_after -= enATk0
                    if enemy_hp_after <= 0:
                        enemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(enATk0, 0), user_name, move, round(usAtk0, 0), round(usATKuSkill, 0), user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    print("if max_def > enemy_dmg  and enemy_def > user_dmg:")
                elif enemy_dmg > max_def and user_dmg > enemy_def:
                    enATk0 = enemy_dmg - max_def
                    usAtk0 = user_dmg - enemy_def
                    usATKuSkill = skillDMG
                    damageCalc = usAtk0 + skillDMG
                    enemy_hp_after = enemy_hp - damageCalc
                    user_hp_after = user_hp - enATk0
                    if enemy_hp_after <= 0:
                        enemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(enATk0, 0), user_name, move, round(usAtk0, 0), round(usATKuSkill, 0), user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    print("if enemy_dmg > max_def and user_dmg > enemy_def:")
                elif enemy_dmg > max_def:
                    atk_def_userAtkShow = enemy_def - user_dmg
                    atk_def_enamyAtkShow = max_def - enemy_dmg
                    atk_def_enamyAtkShow = 0
                    atk_def_enamyAtk = max_def - enemy_dmg
                    atk_def_enamyAtk = 0
                    atk_def_userAtk = enemy_def - user_dmg
                    print("atk_def_userAtkShow = enemy_def - user_dmg")
                    print(atk_def_userAtkShow)
                    print("atk_def_enamyAtkShow = max_def - enemy_dmg = 0")
                    print(atk_def_enamyAtkShow)
                    print("if enemy_dmg > max_def:")
                    if atk_def_userAtk < atk_def_enamyAtk:
                        print("if atk_def_userAtk < atk_def_enamyAtk:12")
                        print("atk_def_userAtk Verliert")
                        print(atk_def_userAtk)
                        print("atk_def_enamyAtk")
                        print(atk_def_enamyAtk)
                        print("if atk_def_userAtk < atk_def_enamyAtk:")
                else:
                    print("Else If HP over Under 3248=================]")
                print("CALC FINISH=================]")
                #print("max_def")
                #print(max_def)
                #print("user_dmg")
                #print(user_dmg)
                #print("enemy_dmg")
                #print(enemy_dmg)
                #print("enemy_def")
                #print(enemy_def)
                #enemy_hp_after = round(enemy_hp_after, 0)
                #user_hp_after = round(user_hp_after, 0)
                #print("enemy_hp_after")
                #print(enemy_hp_after)
                #print("user_hp_after")
                #print(user_hp_after)
                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                #user_hp_after = int(user_hp) - int(enemy_dmg)
                #enemy_hp = user_enemy_hp
                #calc1 = user_dmg - enemy_def
                #user_dmg = calc1
                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                #user_hp_after = int(user_hp) - int(enemy_dmg)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                #await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} Hit {}\n+ {} uses  Heal and heals for {} HP.\n.```".format(user_enemy, user_enemy_hp, user_name, user_hp, user_enemy, user_name, user_name, info["healthmax"]))
                #Lootbag# 10% chance to obtain one from an enemy.
                #enemy_hp_after = int(enemy_hp) - int(atk_def_enamyAtk)
                #if enemy_hp_after <= 0:
                #    enemy_hp_after = 0
                #if user_hp_after <= 0:
                #    user_hp_after = 0
                #await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(atk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0), user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                info["health"] = round(user_hp_after,0)
                info["enemyhp"] = round(enemy_hp_after, 0)
                info["selected_enemy"] = user_enemy
                info["selected_enemy_exp"] = round(enemy_xp, 0) + all_drop_exp
                info["selected_enemy_gold"] = round(enemy_gold, 0) +all_drop_gold
                fileIO("players/{}/info.json".format(author.id), "save", info)
                if int(enemy_hp_after) < 1 and int(user_hp_after) < 1: #Draw
                    await ctx.send("```diff\n- {} has killed you its a draw!\n- You lost {} gold```".format(user_enemy, gold_lost))
                    info["gold"] = info["gold"] - gold_lost
                    info["health"] = 0
                    info["selected_enemy"] = "None"
                    info["infight_status"] = "False"
                    info["enemieskilled"] = info["enemieskilled"] + 1
                    info["deaths"] = info["deaths"] + 1
                    info["count_played"] = info["count_played"] + 1
                    info["count_draw"] = info["count_draw"] + 1
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    if info["gold"] < 0:
                        info["gold"] = 0
                        info["health"] = 0
                        info["selected_enemy"] = "None"
                        info["infight_status"] = "False"
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                elif int(user_hp_after) < 1 and int(enemy_hp_after) > int(user_hp_after) :#Lose
                    await ctx.send("```diff\n- {} has killed you\n- You lost {} gold```".format(user_enemy, gold_lost))
                    info["gold"] = info["gold"] - gold_lost
                    info["health"] = 0
                    info["selected_enemy"] = "None"
                    info["infight_status"] = "False"
                    info["enemieskilled"] = info["enemieskilled"] + 1
                    info["deaths"] = info["deaths"] + 1
                    info["count_played"] = info["count_played"] + 1
                    info["count_lose"] = info["count_lose"] + 1
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    whereServer = ctx.message.guild.id
                    try:
                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                    except:
                        print("No DATA")
                    ainfo["whereServer"] = ctx.message.guild.id
                    try:
                        streetsServer = 1069993213257076787
                        if whereServer == streetsServer:
                            print("On the STREETS")
                            hp = ainfo["health"]
                            print("hp")
                            print(hp)
                            if hp <= 0:
                                userTargetA = adiscordid
                                #userTargetB = bdiscordid
                                #user = discord.utils.get(ctx.guild.members, id=userTargetB)
                                userA = discord.utils.get(ctx.guild.members, id=userTargetA)
                                #await user.kick(reason=None)
                                await userA.kick(reason=None)
                            else:
                                print("You are JUCIE")
                        else:
                            print("Not on the streets Killed")
                    except:
                        print("Not on the streets Killed")
                    if info["gold"] < 0:
                        info["gold"] = 0
                        info["health"] = 0
                        info["selected_enemy"] = "None"
                        info["infight_status"] = "False"
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                elif int(enemy_hp_after) < 1:# Win
                    num22 = random.randint(1, 2)
                    if num22 == 2 :
                        await _ran(ctx)
                    else:
                        print("no NFTS Chance")
                    await ctx.send("```diff\n- {} You WIN the Fight```".format(user_name))
                    info["enemieskilled"] = info["enemieskilled"] + 1
                    info["count_win"] = info["count_win"] + 1
                    info["count_played"] = info["count_played"] + 1
                    #user_hp_after -=
                    #info["enemyhp"] = enemy_hp_after
                    #user_enemy_hp = enemy_hp_after
                    xpmax = int(info["expmax"])
                    xp = int(info["exp"])
                    skxpmax = int(info["expmaxsk"])
                    skxp = int(info["skexp"])
                    all_total_base_exp  = info["all_total_base_exp"]
                    enemy_gold = round(enemy_gold, 0) + all_drop_gold
                    enemy_xp = round(enemy_xp, 0) + all_total_base_exp
                    info["selected_enemy"] = user_enemy
                    info["selected_enemy_exp"] = round(enemy_xp, 0)
                    info["selected_enemy_gold"] = round(enemy_gold, 0)
                    info["gold"] += enemy_gold
                    #if atk_def_userAtk < atk_def_enamyAtk:
                    #    print("kleiner  atk_def_userAtk")
                    #    print("atk_def_userAtk")
                    #    print(atk_def_userAtk)
                    #    gold_lost = random.randint(99, 999)
                    #if atk_def_enamyAtk < atk_def_userAtk:
                    #    print("kleiner  atk_def_enamyAtk Enamy ----")
                    #    print("atk_def_enamyAtk")
                    #    print(atk_def_enamyAtk)
                    #    gold_lost = random.randint(0, 250)
                        #user_hp_after -=
                        #info["enemyhp"] = enemy_hp_after
                        #user_enemy_hp = enemy_hp_after
                    info["healthmax"] += 10
                    info["exp"] += enemy_xp
                    yonextlevel = info["expmax"]  - info["exp"]
                    await ctx.send("```diff\n+ You killed {}\n You gained \n+ {} gold\n and exp points \n+ {} \n```".format(user_enemy, enemy_gold,  enemy_xp))
                    nextlvl = info["lvl"] +1
                    await ctx.send("```diff\n+ EXP {} To Next Level {}```".format(round(yonextlevel, 0), round(nextlvl, 0)))
                    #enemy_xp1 = enemy_xp * info["all_drop_exp"]
                    #info ["exp"] = info["exp"] + info["all_drop_exp"] + info["selected_enemy_exp"]
                    info["infight_status"] = "False"
                    lootbag = random.randint(1, 14)
                    lootbag100 = random.randint(1, 100)
                    luckynumber = info["luknum"]
                    #info["selected_enemy"] = "None"
                    #all_total_base_exp  = info["all_total_base_exp"]
                    #enemy_xp = info["selected_enemy_exp"]
                    #gain = enemy_xp * all_total_base_exp
                    #info["exp"] += gain
                    #info["expmax"] =
                    #info["expmaxsk"] =
                    #info["skexp"] =
                    #info["all_total_base_exp"] =
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    if info["exp"] >= info["expmax"]:
                        await ctx.send("Checking your EXP")
                        await _check_setExpLVL(ctx)
                        info = fileIO("players/{}/info.json".format(author.id), "load")
                        print("BACK")
                        #await _check_setExpLVL(ctx)
                    #
                    #
                    #
                    #
                    #
                    #
                    #
                    #
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    if lootbag == 1:
                        await ctx.send("```diff\n+ {} obtained a Food bag!\n- USE COMMAND:\n+ {}foodbag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_food"] = info["bag_food"] + 1
                    elif lootbag == 7:
                        await ctx.send("```diff\n+ {} obtained a Wood bag!\n- USE COMMAND:\n+ {}woodbag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_wood"] = info["bag_wood"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        #await _check_levelup(ctx)
                    elif lootbag == 8:
                        await ctx.send("```diff\n+ {} obtained a bag full of Metal!\n- USE COMMAND:\n+ {}metalbag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_metal"] = info["bag_metal"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                    elif lootbag == 4:
                        await ctx.send("```diff\n+ {} obtained a Gold bag!\n- USE COMMAND:\n+ {}goldbag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_gold"] = info["bag_gold"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                    elif lootbag == 5:
                        await ctx.send("```diff\n+ {} obtained a bag full of BoboCoins!\n- USE COMMAND:\n+ {}bocobag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_boco"] = info["bag_boco"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                    elif lootbag == 13:
                        await ctx.send("```diff\n+ {} obtained a Key bag!\n- USE COMMAND:\n+ {}keybag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_key"] = info["bag_key"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                    elif lootbag == 14:
                        await ctx.send("```diff\n+ {} obtained a bag full of Stones!\n- USE COMMAND:\n+ {}stonebag\n To open and resive your goods.```".format(user_name,Prefix))
                        info["bag_stone"] = info["bag_stone"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                    elif lootbag == 2 or lootbag == 3 or lootbag == 6 or lootbag == 9 or lootbag == 10 or lootbag == 11 or lootbag == 0:
                        await ctx.send("```diff\n+ The Monster lost Nothing```".format())
                    em = discord.Embed(description="```diff\n HP:  {} / {}\n SP: {} / {}\n MP: {} / {}```".format(round(info["health"], 2), round(info["healthmax"], 2), round(info["stamina"], 2), round(info["staminamax"], 2), round(info["mana"], 2), round(info["manamax"], 2)), color=discord.Color.red())
                    await ctx.send(embed=em)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    if enemy_xp == 0 :
                        em = discord.Embed(description="```diff\n- You need to get a WAX Cloud Wallet\n- and at least one BP0x0 NFT!\n- To Level up and enjoy the Game!```".format(), color=discord.Color.red())
                        await ctx.send(embed=em)
                    info["selected_enemy"] = "None"
                    info["infight_status"] = "False"
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    print("===================LAST SAFE FIGHT==============")
                    return
                else:
                    await ctx.send("Still Alive Attck Harder!")
                    return await fight(ctx)
            else:
                await ctx.send("You Miss!!! Attck Harder!!!")
                return await fight(ctx)
        else:
            await ctx.send("You Miss!!! Push Harder!!! Check your Spelling!!! You Lost The Monster")
            health = info["health"] * 0.1
            info["health"] -= health
            info["enemyhp"] += health
            info["selected_enemy"] = "None"
            info["infight_status"] = "False"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            #await fight(ctx)
@bot.command()
async def buypot(ctx):
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    em = discord.Embed(description="```diff\n+ How many would you like to buy?```", color=discord.Color.blue())
    await ctx.send(embed=em)
    await ctx.input(num=None)
    value = num *30
    if info["gold"] < value:
        em = discord.Embed(description="```diff\n- {}, you don't have enough gold for  potion(s)```".format(info["name"]), color=discord.Color.red())
        await ctx.send(embed=em)
    else:
        info["gold"] = info["gold"] - value
        nfo["smallPot"] = info["smallPot"] + num
        fileIO("players/{}/info.json".format(author.id), "save", info)
        em = discord.Embed(description="```diff\n+ {}, you bought potion(s) for {} gold!```".format(info["name"], value), color=discord.Color.blue())
        await ctx.send(embed=em)
@bot.command(aliases=["shop"])
async def buy(ctx):
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    iinfo = fileIO("core/enemies/all.json", "load")
    tinfo = fileIO("core/enemies/all.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    em = discord.Embed(description="```diff\n+ What category would you like to buy from?\n\n- (1) Items\n- (2) Potions\n- (3) Tools\n- (4) Castle\n- (5) Weapons\n- (7) Amore\n- (8) Skills\n- (9) Ammo\n```", color=discord.Color.blue())
    await ctx.send(embed=em)
    options = ["potions", "Potions", "items", "Items", "tools", "Tools", "Castle", "castle", "weapons", "Weapons", "1", "2", "cheats", "Cheats", "6", "5", "3", "4", "7", "Amore", "amore", "8", "skills", "Skills", "Ammo", "ammo", "9", "{}buy".format(Prefix)]
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer1 = await bot.wait_for("message", check=pred)
    if answer1.content in options:
        if answer1.content == "{}buy".format(Prefix):
            await ctx.send(" if anser1 == !buy activiert")
        elif answer1.content == "cheats" or answer1.content == "Cheats" or answer1.content == "6":
            canbuy = info["boco"] / 100
            em = discord.Embed(description="```diff\n+ Cheats Cost 100 BoboCoins\n- You can Buy {}\n How many would you like to buy?```".format(canbuy), color=discord.Color.blue())
            await ctx.send(embed=em)
            def pred2(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred2)
            try:
                value = int(answer2.content) * 100
                if info["boco"] < value:
                    em = discord.Embed(description="```diff\n- {}, you don't have enough BoboCoins for {} Cheats```".format(info["name"], answer2.content), color=discord.Color.red())
                    await ctx.send(embed=em)
                else:
                    info["boco"] = info["boco"] - value
                    gain = 100 * int(answer2.content)
                    info["exp"] = info["exp"] + gain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em = discord.Embed(description="```diff\n+ {}, you bought {} times!\n and gained {} EXP CHEAT\n```".format(info["name"], answer2.content, gain), color=discord.Color.blue())
                    await ctx.send(embed=em)
            except:
                em = discord.Embed(description="```diff\n- {}, please put a correct number value next time.```".format(info["name"]), color=discord.Color.red())
                await ctx.send(embed=em)
        elif answer1.content == "Items" or answer1.content == "items" or answer1.content == "1":
            try:
                if info["qakey"] < 10101:
                    await ctx.send("<@{}> You need 10101 key's for that\n USE COMMAND {}key to open the menu".format(author.id,Prefix))
                    return
                #if info["qakey"] > 10101:
                #    await ctx.send("<@{}> You need 10101 key's for that\n USE COMMAND {}key to open the menu".format(author.id,Prefix))
            except:
                print("key Items Fail except qakey error 3636")
            #
            #
            data = tinfo["Items_List_this"]["material"]["List"]
            json.dumps(data, indent=10)
            #items = tinfo["Items_List"]["material"]["Simple"]
            #tools = tinfo["Items_List"]
            em = discord.Embed(description="**You have {} BoboCoin's**\nItem - Price Board\n```diff\n {}.```\n```diff\n+ What would you like to buy?```".format(info["boco"], "\n".join(data), color=discord.Color.blue()))
            await ctx.send(embed=em)
            options = ["All", "Simple", "Wood", "Stone", "Metal", "Gold", "Bobo", "all", "simple", "wood", "stone", "metal", "gold", "bobo",  "0", "1", "2", "3", "4", "5", "6"]
            def pred3(m):
                return m.author == message.author and m.channel == message.channel
            answer3 = await bot.wait_for("message", check=pred3)
            if str(answer3.content) == "0" or str(answer3.content) == "all" or str(answer3.content) == "All":
                material = "All"
            elif str(answer3.content) == "1" or str(answer3.content) == "simple" or str(answer3.content) == "Simple":
                material = "Simple"
            elif str(answer3.content) == "2" or str(answer3.content) == "Wood" or str(answer3.content) == "wood":
                material = "Wood"
            elif str(answer3.content) == "3" or str(answer3.content) == "Stone" or str(answer3.content) == "stone":
                material = "Stone"
            elif str(answer3.content) == "4" or str(answer3.content) == "gold" or str(answer3.content) == "Gold":
                material = "Gold"
            elif str(answer3.content) == "5" or str(answer3.content) == "metal" or str(answer3.content) == "Metal":
                material = "Metal"
            elif str(answer3.content) == "6" or str(answer3.content) == "bobo" or str(answer3.content) == "Bobo":
                material = "Bobo"
            else:
                material = str(answer3.content)
            if answer3.content == "All" or answer3.content == "all" or answer3.content == "0":
                datalist = tinfo["Items_List_this"]["material"]["All"]
                options = ["Food Box", "Wood Box", "Stone Box", "Gold Box", "Metal Box", "Key Box", "Small Box", "Coin Box", "People Box", "Bobo Box","Hand","Axe","Pick","Shovel","PC","Bow","Sword","Staff","Dagger","Wood Pick","Wood Axe","Wood Hand","Wood Shovel","Wood PC","Wood Bow","Wood Sword","Wood Staff","Wood Dagger", "Stone Pick","Stone Axe","Stone Hand","Stone Shovel","Stone PC","Stone Bow","Stone Sword","Stone Staff","Stone Dagger", "Metal Pick","Metal Axe","Metal Hand","Metal Shovel","Metal PC","Metal Bow","Metal Sword","Metal Staff","Metal Dagger", "Gold Pick","Gold Axe","Gold Hand","Gold Shovel","Gold PC","Gold Bow","Gold Sword","Gold Staff","Gold PC", "Bobo Pick","Bobo Axe","Bobo Hand","Bobo Shovel","Bobo PC","Bobo Bow","Bobo Sword","Bobo Staff","Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","BoCo Amore", "Rifle"]
            elif answer3.content == "Simple" or answer3.content == "simple" or answer3.content == "1":
                datalist = tinfo["Items_List_this"]["material"]["Simple"]
                options = ["Food Box", "Wood Box", "Stone Box", "Gold Box", "Metal Box", "Key Box", "Small Box", "Coin Box", "People Box", "Bobo Box"]
            elif material == "Wood" or answer3.content == "2":
                datalist = tinfo["Items_List_this"]["material"]["Wood"]
                options = ["Wood Box"]
            elif material == "Stone" or answer3.content == "3":
                datalist = tinfo["Items_List_this"]["material"]["Stone"]
                options = [ "Stone Box"]
            elif material == "Metal" or answer3.content == "5":
                datalist = tinfo["Items_List_this"]["material"]["Metal"]
                options = ["Metal Box"]
            elif material == "Gold" or answer3.content == "4":
                datalist = tinfo["Items_List_this"]["material"]["Gold"]
                options = ["Gold Box"]
            elif material == "Bobo" or answer3.content == "6":
                datalist = tinfo["Items_List_this"]["material"]["Bobo"]
                options = ["Bobo Box"]
            datalist = tinfo["Items_List_this"]["material"][material]
            em1 = discord.Embed(description="**You have {} BoboCoin's**\n\n```diff\n{}.```\n```diff\n+ What would you like to buy?\n\n- Please write exacly like the Items Name!\n\n```".format(info["boco"],"\n".join(datalist), color=discord.Color.blue()))
            await ctx.send(embed=em1)
            #await ctx.send(datalist)
            def pred4(m):
                return m.author == message.author and m.channel == message.channel
            answer4 = await bot.wait_for("message", check=pred4)
            await ctx.send(answer4.content)
            if answer4.content in options:
                if answer4.content in options:
                    material = str(answer3.content)
                    Items_List = str(answer4.content)
                    price = tinfo[Items_List]["price"]
                    if info["boco"] < price:
                        em = discord.Embed(description="```diff\n- {}, you don't have enough BoboCoins.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                    else:
                        await ctx.send("Price")
                        await ctx.send(price)
                        if answer4.content in options:
                            info["boco"] = info["boco"] - price
                            frup = str(answer4.content)
                            info["all_inventory"].append(frup)
                            info["castle_inventory"].append(frup)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, you bought  {}!```".format(info["name"], frup), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            return
            else:
                await ctx.send("Please check your Spelling!")
                return
        elif answer1.content == "tools" or answer1.content == "Tools" or answer1.content == "3":
                data = tinfo["Amore_List"]["material"]["List"]
                json.dumps(data, indent=10)
                #items = tinfo["Tools_List"]["Items_List"]["material"]["Simple"]
                tools = info["all_inventory"]
                em = discord.Embed(description="**You have {} BoboCoin's**\n\n Item - Tools\n```diff\n {}.```\n```diff\n+ Tools are funktion as usfull\n when using COMMANDS:\n {}chop ({}c), {}dig ({}d), {}hunt ({}h), {}mine ({}m) Tools aslo incrase your rates!```\n```diff\n+ What would you like to buy?```".format(info["boco"], "\n".join(data),Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix), color=discord.Color.blue())
                await ctx.send(embed=em)
                options = ["All", "Simple", "Wood", "Stone", "Metal", "Gold", "Bobo", "all", "simple", "wood", "stone", "metal", "gold", "bobo",  "0", "1", "2", "3", "4", "5", "6"]
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                if str(answer3.content) == "0" or str(answer3.content) == "all" or str(answer3.content) == "All":
                    material = "All"
                elif str(answer3.content) == "1" or str(answer3.content) == "simple" or str(answer3.content) == "Simple":
                    material = "Simple"
                elif str(answer3.content) == "2" or str(answer3.content) == "Wood" or str(answer3.content) == "wood":
                    material = "Wood"
                elif str(answer3.content) == "3" or str(answer3.content) == "Stone" or str(answer3.content) == "stone":
                    material = "Stone"
                elif str(answer3.content) == "4" or str(answer3.content) == "gold" or str(answer3.content) == "Gold":
                    material = "Gold"
                elif str(answer3.content) == "5" or str(answer3.content) == "metal" or str(answer3.content) == "Metal":
                    material = "Metal"
                elif str(answer3.content) == "6" or str(answer3.content) == "bobo" or str(answer3.content) == "Bobo":
                    material = "Bobo"
                if answer3.content == "All" or answer3.content == "0" or answer3.content == "all":
                    datalist = tinfo["Items_List_this"]["material"]["All"]
                    options = ["Food Box", "Wood Box", "Stone Box", "Gold Box", "Metal Box", "Key Box", "Small Box", "Coin Box", "People Box", "Bobo Box","Hand","Axe","Pick","Shovel","PC","Bow","Sword","Staff","Dagger","Wood Pick","Wood Axe","Wood Hand","Wood Shovel","Wood PC","Wood Bow","Wood Sword","Wood Staff","Wood Dagger", "Stone Pick","Stone Axe","Stone Hand","Stone Shovel","Stone PC","Stone Bow","Stone Sword","Stone Staff","Stone Dagger", "Metal Pick","Metal Axe","Metal Hand","Metal Shovel","Metal PC","Metal Bow","Metal Sword","Metal Staff","Metal Dagger", "Gold Pick","Gold Axe","Gold Hand","Gold Shovel","Gold PC","Gold Bow","Gold Sword","Gold Staff","Gold PC", "Bobo Pick","Bobo Axe","Bobo Hand","Bobo Shovel","Bobo PC","Bobo Bow","Bobo Sword","Bobo Staff","Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","BoCo Amore", "Rifle"]
                elif answer3.content == "Simple" or answer3.content == "1" or answer3.content == "simple":
                    datalist = tinfo["Amore_List"]["material"]["Simple"]
                    options = ["Pick", "Axe", "Hand", "Shovel", "Rifle", "PC", "Key Box", "Small Box", "Coin Box", "Sword","Staff","Dagger", "Food Box", "Rifle"]
                elif material == "Wood" or answer3.content == "2" or answer3.content == "wood":
                    datalist = tinfo["Amore_List"]["material"]["Wood"]
                    options = ["Wood Pick","Wood Axe","Wood Hand","Wood Shovel","Wood PC","Wood Bow","Wood Sword","Wood Hand","Wood Staff","Wood Dagger", "Wood Box", "Wood Rifle"]
                elif material == "Stone" or answer3.content == "3" or answer3.content == "stone":
                    datalist = tinfo["Amore_List"]["material"]["Stone"]
                    options = ["Stone Pick","Stone Axe","Stone Hand","Stone Shovel","Stone PC","Stone Bow","Stone Sword","Stone Hand","Stone Staff","Stone Dagger", "Stone Box", "Stone Rifle"]
                elif material == "Metal" or answer3.content == "5" or answer3.content == "metal":
                    datalist = tinfo["Amore_List"]["material"]["Metal"]
                    options = ["Metal Pick","Metal Axe","Metal Hand","Metal Shovel","Metal PC","Metal Bow","Metal Sword","Metal Hand","Metal Staff","Metal Dagger", "Metal Box", "Metal Rifle"]
                elif material == "Gold" or answer3.content == "4" or answer3.content == "gold":
                    datalist = tinfo["Amore_List"]["material"]["Gold"]
                    options = ["Gold Pick","Gold Axe","Gold Hand","Gold Shovel","Gold Bow","Gold Sword","Gold Hand","Gold Staff","Gold PC", "Gold Box", "Gold Rifle"]
                elif material == "Bobo" or answer3.content == "6" or answer3.content == "bobo":
                    datalist = tinfo["Amore_List"]["material"]["Bobo"]
                    options = ["Bobo Pick","Bobo Axe","Bobo Hand","Bobo Shovel","Bobo PC","Bobo Bow","Bobo Sword","Bobo Hand","Bobo Staff","Bobo PC", "Bobo Box", "Bobo Rifle"]
                #print(answer4.content)
                datalist = tinfo["Amore_List"]["material"][material]
                em1 = discord.Embed(description="**You have {} BoboCoin's**\n\n```diff\n+ What would you like to buy?\n\n- Please write exacly like the options shown!\n exemple: Wood Axe\n\n{}\n\n Counter {}```".format(info["boco"],"\n".join(datalist), info["counterWoodFail"]), color=discord.Color.blue())
                await ctx.send(embed=em1)
                info["counterWoodFail"] += 1
                #await ctx.send(datalist)
                def pred4(m):
                    return m.author == message.author and m.channel == message.channel
                answer4 = await bot.wait_for("message", check=pred4)
                #await ctx.send(answer4.content)
                if answer4.content in options:
                    if answer4.content in options:
                        material = str(answer3.content)
                        Tools_List = str(answer4.content)
                        price = tinfo[Tools_List]["price"]
                        if info["boco"] < price:
                            em = discord.Embed(description="```diff\n- {}, you don't have enough Bobocoin {}.```".format(info["name"], info["boco"]), color=discord.Color.red())
                            await ctx.send(embed=em)
                            return
                        else:
                            em = discord.Embed(description="**You have {} BoboCoin's**\nInventory\n```diff\n{}.```\n```diff\n+ Thx for Shopping```".format(info["boco"], "\n".join(tools), color=discord.Color.blue()))
                            await ctx.send(embed=em)
                            #await ctx.send("Price")
                            #await ctx.send(price)
                            if answer4.content in options:
                                info["boco"] = info["boco"] - price
                                frup = str(answer4.content)
                                info["all_inventory"].append(frup)
                                em = discord.Embed(description="```diff\n{}, you bought  \n+ {}!\n for {} Bobocoins```".format(info["name"], frup, price), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Save ok")
                                return
                else:
                    em2 = discord.Embed(description="```diff\n!**Please check your Spelling**!```\n\n```diff\n+ Counter {} ```\n```diff\n How many Times Wrote Fail\n to write correct in the correct category\n because not Wood Selected Wood Axe\n- In a Wrong Shop!```\n```diff\n Please select wisely...```".format(info["counterWoodFail"],"\n".join(datalist)), color=discord.Color.blue())
                    await ctx.send(embed=em2)
                    return
        elif answer1.content == "weapon" or answer1.content == "Weapon" or answer1.content == "5":
                data = tinfo["Box_List"]["material"]["List1"]
                json.dumps(data, indent=10)
                items = tinfo["Box_List"]["material"]["Simple"]
                tools = tinfo["Box_List"]
                em = discord.Embed(description="**You have {} BoboCoin's**\n```diff\n {}.```\n```diff\n+ What Material SHOP?```".format(round(info["boco"], 0), "\n".join(data), color=discord.Color.blue() ) )
                await ctx.send(embed=em)
                options = ["All", "Simple", "Wood", "Stone", "Metal", "Gold", "Bobo", "0", "1", "2", "3", "4", "5", "6"]
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                if str(answer3.content) == "0" or str(answer3.content) == "all" or str(answer3.content) == "All":
                    material = "All"
                elif str(answer3.content) == "1" or str(answer3.content) == "simple" or str(answer3.content) == "Simple":
                    material = "Simple"
                elif str(answer3.content) == "2" or str(answer3.content) == "Wood" or str(answer3.content) == "wood":
                    material = "Wood"
                elif str(answer3.content) == "3" or str(answer3.content) == "Stone" or str(answer3.content) == "stone":
                    material = "Stone"
                elif str(answer3.content) == "4" or str(answer3.content) == "gold" or str(answer3.content) == "Gold":
                    material = "Gold"
                elif str(answer3.content) == "5" or str(answer3.content) == "metal" or str(answer3.content) == "Metal":
                    material = "Metal"
                elif str(answer3.content) == "6" or str(answer3.content) == "bobo" or str(answer3.content) == "Bobo":
                    material = "Bobo"
                if answer3.content == "All" or answer3.content == "0":
                    datalist = tinfo["Items_List_this"]["material"]["Simple"]
                    options = ["Food Box", "Wood Box", "Stone Box", "Gold Box", "Metal Box", "Key Box", "Small Box", "Coin Box", "People Box", "Bobo Box","Hand","Axe","Pick","Shovel","PC","Bow","Sword","Staff","Dagger","Wood Pick","Wood Axe","Wood Hand","Wood Shovel","Wood PC","Wood Bow","Wood Sword","Wood Staff","Wood Dagger", "Stone Pick","Stone Axe","Stone Hand","Stone Shovel","Stone PC","Stone Bow","Stone Sword","Stone Staff","Stone Dagger", "Metal Pick","Metal Axe","Metal Hand","Metal Shovel","Metal PC","Metal Bow","Metal Sword","Metal Staff","Metal Dagger", "Gold Pick","Gold Axe","Gold Hand","Gold Shovel","Gold PC","Gold Bow","Gold Sword","Gold Staff","Gold PC", "Bobo Pick","Bobo Axe","Bobo Hand","Bobo Shovel","Bobo PC","Bobo Bow","Bobo Sword","Bobo Staff","Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","BoCo Amore", "Rifle"]
                elif answer3.content == "Simple" or answer3.content == "1" or answer3.content == "simple":
                    datalist = tinfo["Box_List"]["material"]["Simple"]
                    options = ["Hand", "Bow","Sword","Staff","Dagger", "Rifle"]
                elif material == "Wood" or answer3.content == "2" or answer3.content == "wood":
                    datalist = tinfo["Box_List"]["material"]["Wood"]
                    options = ["Wood Bow","Wood Sword","Wood Hand","Wood Dagger","Wood Staff","Wood Rifle",]
                elif material == "Stone" or answer3.content == "3" or answer3.content == "stone":
                    datalist = tinfo["Box_List"]["material"]["Stone"]
                    options = ["Stone Bow","Stone Sword","Stone Hand","Stone Dagger","Stone Staff","Stone Rifle",]
                elif material == "Metal" or answer3.content == "5" or answer3.content == "metal":
                    datalist = tinfo["Box_List"]["material"]["Metal"]
                    options = ["Metal Bow","Metal Sword","Metal Hand","Metal Dagger","Metal Staff","Metal Rifle",]
                elif material == "Gold" or answer3.content == "4" or answer3.content == "gold":
                    datalist = tinfo["Box_List"]["material"]["Gold"]
                    options = ["Gold Bow","Gold Sword","Gold Dagger","Gold Hand","Gold Staff","Gold PC","Gold Rifle",]
                elif material == "Bobo" or answer3.content == "6" or answer3.content == "bobo":
                    datalist = tinfo["Box_List"]["material"]["Bobo"]
                    options = ["Bobo Bow","Bobo Sword","Bobo Dagger","Bobo Hand","Bobo Staff","Bobo PC","Bobo Rifle",]
                datalist = tinfo["Box_List"]["material"][material]
                em1 = discord.Embed(description="**You have {} BoboCoin's**\n\n```diff\n+ {} Shop Price List\n\n{}\n\n- Please write exacly like the options shown!\n\n exemple: Wood Bow\n```".format(round(info["boco"], 0), material,"\n".join(datalist), color=discord.Color.blue()))
                await ctx.send(embed=em1)
                #await ctx.send(datalist)
                def pred4(m):
                    return m.author == message.author and m.channel == message.channel
                answer4 = await bot.wait_for("message", check=pred4)
                if answer4.content in options: # and answer3.content == "Simple":
                    if answer4.content in options:
                        material = str(answer3.content)
                        Weapon_List = str(answer4.content)
                        price = tinfo[Weapon_List]["price"]
                        if info["boco"] < price:
                            await ctx.send(answer4.content)
                            await ctx.send("Price")
                            await ctx.send(price)
                            await ctx.send("BoboCoin's")
                            await ctx.send(info["boco"])
                            em = discord.Embed(description="\n ```diff\n- {}, you don't have enough BoboCoin.```".format(info["name"]), color=discord.Color.red())
                            await ctx.send(embed=em)
                            #embed = discord.Embed(description="```diff\n Please go to the Verify Channel to Start there! [verify](https://discord.com/channels/874887432963776563/936652264733556736)."
                            #await ctx.send(embed=embed)
                            return
                            #else:
                            #    #await ctx.send("Price")
                            #    #await ctx.send(price)
                            #    pass
                            if answer4.content in options:
                                await ctx.send("Options Itemss ok")
                                info["gold"] = info["gold"] - price
                                frup = str(answer4.content)
                                info["all_inventory"].append(frup)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, you bought  {}!```".format(info["name"], frup), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                return
                            elif answer4.content in options:
                                if answer4.content in options:
                                    material = str(answer3.content)
                                    Weapon_List = str(answer4.content)
                                    price = tinfo[Weapon_List]["price"]
                        if info["boco"] < price:
                            await ctx.send(answer4.content)
                            await ctx.send("Price")
                            await ctx.send(price)
                            await ctx.send("BoboCoin's")
                            await ctx.send(info["boco"])
                            em = discord.Embed(description="\n ```diff\n- {}, you don't have enough BoboCoin.```".format(info["name"]), color=discord.Color.red())
                            await ctx.send(embed=em)
                            embed = discord.Embed()
                            embed.description = "Please visit the Market Channel to to **sell** some items and goods! [Rock Market ( Danger I )](https://discord.com/channels/874887432963776563/890488730090078218)."
                            await ctx.send(embed=embed)
                            return
                        else:
                            #    await ctx.send("Price")
                            #    await ctx.send(price)
                            if answer4.content in options:
                                await ctx.send("Deal Done!")
                                info["boco"] = info["boco"] - price
                                frup = str(answer4.content)
                                info["all_inventory"].append(frup)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, you bought  {}!\n For {} BoboCoin's```".format(info["name"], frup, price), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                return
                else:
                    await ctx.send("Please check your Spelling!")
                    return
        elif answer1.content == "potions" or answer1.content == "Potion" or answer1.content == "2":
            rabbat = info["rabbat"]
            smallpot = 30
            mediumpot = 1000
            bigpot = 10000
            speedpot = 100000
            amnesia = 100000
            sklvl = info["sklvl"]
            canbuysmall = info["gold"]
            canbuymedium = info["gold"]
            canbuybig = info["gold"]
            canbuyspeed = info["boco"]
            canbuyamnesia = info["boco"]
            em = discord.Embed(description="```diff**You have {} BoboCoin's*```\n+ PriceList.\n```diff\n 1) smallPot=30\n 2) MediumPot=1000\n 3) BIGPOT=10000\n 4) SpeedPot=1000000\n 5) AmnesiaPot=1000000\n+\n- You have \n+ Gold={}\n+ BoboCoins={}\n-\n Discount {}\n```".format(info["boco"], info["gold"], info["boco"], info["rabbat"]), color=discord.Color.blue())
            await ctx.send(embed=em)
            options = ["small", "Small", "1", "medium", "Medium", "2", "big", "BIG", "3", "speed", "Speed", "4", "Amnesia", "amnesia", "5", "{}buy".format(Prefix)]
            def pred1(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred1)
            if answer2.content in options:
                if  answer2.content == "small" or answer2.content == "Small" or answer2.content == "1" :
                    try:
                        canbuy = info["boco"] / smallpot
                        em = discord.Embed(description="```diff\n+ How many smallpot(s) would you like to buy?\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                        await ctx.send(embed=em)
                        def pred2(m):
                            return m.author == message.author and m.channel == message.channel
                        answer3 = await bot.wait_for("message", check=pred2)
                    except:
                        await ctx.send("somthing wrong")
                        print("rabbat2")
                        print(rabbat)
                    try:
                        MmP = int(answer3.content) * smallpot
                        print("MmP")
                        print(MmP)
                        if rabbat >= 1:
                            rabbat = 1
                            print("rabbat1")
                            print(rabbat)
                        print("rabbat2")
                        print(rabbat)
                        RmM = MmP * rabbat
                        print(RmM)
                        value = MmP - RmM
                        print("Rabbat3")
                        print(rabbat)
                        print("value")
                        print(value)
                        print("smallpot")
                        print(smallpot)
#xPreis = 30
#yRabbat = 0.1
#zMenge = 10
#PreisMalMenge = xPreis * zMenge
#RabbatMalPre = PreisMalMenge * yRabbat
#Bezahlen = PreisMalMenge - RabbatMalPre
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough boboCoins's for {} potion(s)```".format(info["name"], answer2.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                            pass
                        else:
                            info["boco"] -= value
                            info["smallpot"] = info["smallpot"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} smallPot(s) for {} gold!\n-\n- USE COMMAND {}use```".format(info["name"], answer3.content, value, Prefix), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            pass
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next times Small.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                elif answer2.content in options and answer2.content == "medium" or answer2.content == "Medium" or answer2.content == "2" :
                    print("medium")
                    canbuy = info["boco"] / mediumpot
                    em = discord.Embed(description="```diff\n+ How many MediumPot(s) would you like to buy?\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        value = int(answer3.content) * mediumpot
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {},  don't have enough boco for {} potion(s)```".format(info["name"], answer2.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                            pass
                        else:
                            info["boco"] = info["boco"] - value
                            info["mediumpot"] = info["mediumpot"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} MediumPot(s) for {} BoboCoin's!\n-\n USE COMMAND {}use\n-```".format(info["name"], answer3.content, value, Prefix), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeMedium.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                elif answer2.content in options and answer2.content == "big" or answer2.content == "Big" or answer2.content == "BIGPOT" or answer2.content == "3":
                    canbuy = info["boco"] / bigpot
                    em = discord.Embed(description="```diff\n+ How many  BIGPOT would you like to buy?\n BIGPOTS reganarait HP SP SP FULL\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        value = int(answer3.content) * bigpot
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough gold for {} potion(s)```".format(info["name"], answer2.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                        else:
                            info["boco"] = info["boco"] - value
                            info["bigpot"] = info["bigpot"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} BIGPOT(s) for {} gold!\n-\n USE COMMAND {}use\n-```".format(info["name"], answer3.content, value,Prefix), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeBIG.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
               # elif info["class"] == "Thief":
                elif answer2.content == "amnesia" or answer2.content == "Amensia" or answer2.content == "5" :
                    canbuy = info["boco"] / amnesia
                    em = discord.Embed(description="```diff\n+ How many  AmnesiaPot would you like to buy? - AmensiaPots Rest BP0x0x(t)ime.\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        value = int(answer3.content) * amnesia
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough gold for {} potion(s)```".format(info["name"], answer3.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                        else:
                            info["boco"] = info["boco"] - value
                            info["amnesiapot"] = info["amnesiapot"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} AmnesiaPotion(s) for {} gold!\n-\n USE COMMAND {}use\n-```".format(info["name"], answer3.content, value,Prefix), color=discord.Color.blue())
                            await ctx.send(embed=em)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeAmnesi.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                elif answer2.content == "speed" or answer2.content == "Speed" or answer2.content == "4" or answer2.content == "SpeedPot" :
                    canbuy = info["boco"] / speedpot
                    em = discord.Embed(description="```diff\n+ How many  SpeedPot would you like to buy?\n\n SpeedPots Rest BP0x0x(t)ime.\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        value = int(answer3.content) * speedpot
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough boco for {} potion(s)```".format(info["name"], answer3.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                        else:
                            info["boco"] = info["boco"] - value
                            info["speedpot"] = info["speedpot"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} SpeedPot(s) for {} boco!\n-\n\n USE COMMAND {}use\n-```".format(info["name"], answer3.content, value,Prefix), color=discord.Color.blue())
                            await ctx.send(embed=em)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeSpeed.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                else:
                    return
            else:
                return
        elif answer1.content == "amore" or answer1.content == "Amore" or answer1.content == "7":
                data = tinfo["Amore_List1"]["material"]["List"]
                json.dumps(data, indent=10)
                items = tinfo["Amore_List1"]["material"]["Simple"]
                tools = tinfo["Amore_List1"]
                em = discord.Embed(description="**You have {} BoboCoin's**\nItem - Cost\n ```diff\n- {}.```\n ```diff\n+ What would you like to buy? ```".format(info["boco"], "\n".join(data), color=discord.Color.blue()))
                await ctx.send(embed=em)
                options = ["All", "Simple", "Wood", "Stone", "Metal", "Gold", "Bobo", "0", "1", "2", "3", "4", "5", "6"]
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                if str(answer3.content) == "0" or str(answer3.content) == "all" or str(answer3.content) == "All":
                    material = "All"
                elif str(answer3.content) == "1" or str(answer3.content) == "simple" or str(answer3.content) == "Simple":
                    material = "Simple"
                elif str(answer3.content) == "2" or str(answer3.content) == "Wood" or str(answer3.content) == "wood":
                    material = "Wood"
                elif str(answer3.content) == "3" or str(answer3.content) == "Stone" or str(answer3.content) == "stone":
                    material = "Stone"
                elif str(answer3.content) == "4" or str(answer3.content) == "gold" or str(answer3.content) == "Gold":
                    material = "Gold"
                elif str(answer3.content) == "5" or str(answer3.content) == "metal" or str(answer3.content) == "Metal":
                    material = "Metal"
                elif str(answer3.content) == "6" or str(answer3.content) == "bobo" or str(answer3.content) == "Bobo":
                    material = "Bobo"
                else:
                    material = str(answer3.content)
                if answer3.content == "All" or answer3.content == "0"  or answer3.content == "all":
                    datalist = tinfo["Items_List_this"]["material"]["All"]
                    options = ["Food Box", "Wood Box", "Stone Box", "Gold Box", "Metal Box", "Key Box", "Small Box", "Coin Box", "People Box", "Bobo Box","Wood Pick","Wood Axe","Wood Hand","Wood Shovel","Wood PC","Wood Bow","Wood Sword","Wood Staff","Wood Dagger", "Stone Pick","Stone Axe","Stone Hand","Stone Shovel","Stone PC","Stone Bow","Stone Sword","Stone Staff","Stone Dagger", "Metal Pick","Metal Axe","Metal Hand","Metal Shovel","Metal PC","Metal Bow","Metal Sword","Metal Staff","Metal Dagger", "Gold Pick","Gold Axe","Gold Hand","Gold Shovel","Gold PC","Gold Bow","Gold Sword","Gold Staff","Gold PC", "Bobo Pick","Bobo Axe","Bobo Hand","Bobo Shovel","Bobo PC","Bobo Bow","Bobo Sword","Bobo Staff","Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","Bobo Amore"]
                elif answer3.content == "Simple" or answer3.content == "1" or answer3.content == "simple":
                    datalist = tinfo["Amore_List1"]["material"]["Simple"]
                    options = ["Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","BoCo Amore"]
                elif material == "Wood" or answer3.content == "2" or answer3.content == "wood":
                    datalist = tinfo["Amore_List1"]["material"]["Wood"]
                    options = ["Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","Bobo Amore"]
                elif material == "Stone" or answer3.content == "3" or answer3.content == "stone":
                    datalist = tinfo["Amore_List1"]["material"]["Stone"]
                    options = ["Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","Bobo Amore"]
                elif material == "Metal" or answer3.content == "5" or answer3.content == "metal":
                    datalist = tinfo["Amore_List1"]["material"]["Metal"]
                    options = ["Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","Bobo Amore"]
                elif material == "Gold" or answer3.content == "4" or answer3.content == "gold":
                    datalist = tinfo["Amore_List1"]["material"]["Gold"]
                    options = ["Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","Bobo Amore"]
                elif material == "Bobo" or answer3.content == "6" or answer3.content == "bobo":
                    datalist = tinfo["Amore_List1"]["material"]["Bobo"]
                    options = ["Amore","Amore I","Amore II","Amore III","Amore IV","Amore V","Wood Amore","Stone Amore","Gold Amore","Metal Amore","Bobo Amore"]
                datalist = tinfo["Amore_List1"]["material"][material]
                em = discord.Embed(description="**You have {} BoboCoin's**\n\n```diff\n{}.```\n```diff\n+ What would you like to buy?\n\n- Please write exacly like the Items Name!\n\n```".format(info["boco"],"\n".join(datalist), color=discord.Color.blue()))
                await ctx.send(embed=em)
                #await ctx.send(options)
                def pred4(m):
                    return m.author == message.author and m.channel == message.channel
                answer4 = await bot.wait_for("message", check=pred4)
                await ctx.send(answer4.content)
                if answer4.content in options and answer3.content == "Simple":
                    if answer4.content in options:
                        material = str(answer3.content)
                        Weapon_List = str(answer4.content)
                        price = tinfo[Weapon_List]["price"]
                        if info["boco"] < price:
                            em = discord.Embed(description="```diff\n- {}, you don't have enough BoboCoins.```".format(info["name"]), color=discord.Color.red())
                            await ctx.send(embed=em)
                            return
                        else:
                            await ctx.send("Price")
                            await ctx.send(price)
                            if answer4.content in options:
                                await ctx.send("Options Itemss ok")
                                info["boco"] = info["boco"] - price
                                frup = str(answer4.content)
                                info["all_inventory"].append(frup)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, you bought  {}!```".format(info["name"], frup), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                return
                elif answer4.content in options:
                    if answer4.content in options:
                        material = str(answer3.content)
                        Weapon_List = str(answer4.content)
                        price = tinfo[Weapon_List]["price"]
                        if info["boco"] < price:
                            em = discord.Embed(description="```diff\n- {}, you don't have enough BoboCoins.```".format(info["name"]), color=discord.Color.red())
                            await ctx.send(embed=em)
                            return
                        else:
                            await ctx.send("Price")
                            await ctx.send(price)
                            if answer4.content in options:
                                await ctx.send("Options Itemss ok")
                                info["boco"] = info["boco"] - price
                                frup = str(answer4.content)
                                info["all_inventory"].append(frup)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, you bought  {}!```".format(info["name"], frup), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                return
                else:
                    await ctx.send("Please check your Spelling!")
                    return
        elif answer1.content == "castle" or answer1.content == "Castle" or answer1.content == "4":
            if info["qakey"] < 101:
                await ctx.send("<@{}> You need 101 key's for that\n USE COMMAND !key to open the menu".format(author.id))
                return
            if info["qakey"] > 101:
                data = tinfo["Box_List"]["material"]["List"]
                json.dumps(data, indent=10)
                items = tinfo["Box_List"]["material"]["Simple"]
                tools = tinfo["Box_List"]
                em = discord.Embed(description="**You have {} BoboCoin's **\n\n```diff\n {}.```\n```diff\n+ What would you like to buy?```".format(info["boco"], "\n".join(data), color=discord.Color.blue()))
                await ctx.send(embed=em)
                options = ["ArmyRock", "ArmyPaper", "ArmyScissor", "Tower", "Guard" ,"1", "2", "3", "4", "5"]
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                material = str(answer3.content)
                if answer3.content == "ArmyRock" or answer3.content == "2":
                    havefood = round(info["food"], 0)
                    havestone = round(info["stone"], 0)
                    havesamy01 = round(info["castle_army_rock"], 0)
                    havesPepy01 = round(info["people"], 0)
                    calcstone = havestone / 4
                    if calcstone <= havefood:
                        canbuy = calcstone
                    elif calcstone >= havefood or calcstone == havefood:
                        canbuy = havefood
                    em = discord.Embed(description="\n**You have {} ArmyRock**\n**You have {} People **\n**You have {} Food **\n** and {} Stones**\n\n You can buy {} ArmyRock\n\n```diff\n+ How many would you like to buy?\n\n```".format(havesamy01, havesPepy01, havefood, havestone, canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred4(m):
                        return m.author == message.author and m.channel == message.channel
                    answer4 = await bot.wait_for("message", check=pred4)
                    amount = int(answer4.content)
                    haverocks = info["stone"]
                    if amount <= 0:
                        await ctx.send("```diff\n No Negative Numbers!\n```".format())
                        return
                    if havefood < canbuy :
                        await ctx.send("```diff\nLooks like you have not enaf material!\n```".format())
                        return
                    if amount > canbuy:
                        amount = canbuy
                        rocks = canbuy * 4
                        food = canbuy * 1
                        info["food"] = info["food"] - food
                        info["stone"] = info["stone"] - rocks
                        info["castle_army_rock"] = info["castle_army_rock"] + amount
                        await ctx.send("```diff\n Grate!\n\n You baugte {} ArmyRock\n Thank you for shopping come again.\n\n You have now {} ArmyRock```".format(amount, info["castle_army_rock"]))
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    else :
                        rocksonce = amount * 4
                        foods = amount * 1
                        info["food"] = info["food"] - foods
                        info["stone"] = info["stone"] - rocksonce
                        info["castle_army_rock"] = info["castle_army_rock"] + amount
                        await ctx.send("```diff\n Grate!\n\n You baugte {} ArmyRock\n Thank you for shopping come again.\n\n You have now {} ArmyRock```".format(amount, info["castle_army_rock"]))
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                if answer3.content == "ArmyPaper" or answer3.content == "1" or answer3.content == "armypaper" or answer3.content == "paper" or answer3.content == "Paper":
                    havefood = round(info["food"], 0)
                    havestone0 = round(info["wood"], 0)
                    havesamy0 = round(info["castle_army_paper"], 0)
                    havesPep0 = round(info["people"], 0)
                    calcstone = havestone0 / 2
                    if calcstone <= havefood:
                        canbuy = calcstone
                    elif calcstone >= havefood or calcstone == havefood:
                        canbuy = havefood
                    em = discord.Embed(description="\n**You have {} ArmyPaper **\n**You have {} People **\n**You have {} Food **\n** and {} Wood**\n\n You can buy {} ArmyPaper\n\n```diff\n+ How many would you like to buy?\n\n```".format(havesamy0, havesPep0, havefood, havestone0, canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred4(m):
                        return m.author == message.author and m.channel == message.channel
                    answer4 = await bot.wait_for("message", check=pred4)
                    amount = int(answer4.content)
                    haverocks = info["wood"]
                    if amount <= 0:
                        await ctx.send("```diff\n No Negative Numbers!\n```".format())
                        return
                    if havefood < canbuy :
                        await ctx.send("```diff\nLooks like you have not enaf material!\n```".format())
                        return
                    if amount > canbuy:
                        amount = canbuy
                        rocks = canbuy * 2
                        food = canbuy * 1
                        info["food"] = info["food"] - food
                        info["wood"] = info["wood"] - rocks
                        info["castle_army_paper"] = info["castle_army_paper"] + amount
                        await ctx.send("```diff\n Grate!\n\n You baugte {} ArmyPaper\n Thank you for shopping come again.\n\n You have now {} ArmyPaper```".format(amount, info["castle_army_paper"]))
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    else :
                        rocksonce = amount * 2
                        foods = amount * 1
                        info["food"] = info["food"] - foods
                        info["wood"] = info["wood"] - rocksonce
                        info["castle_army_paper"] = info["castle_army_paper"] + amount
                        await ctx.send("```diff\n Grate!\n\n You baugte {} ArmyPaper\n Thank you for shopping come again.\n\n You have now {} ArmyPaper```".format(amount, info["castle_army_paper"]))
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                if answer3.content == "ArmyScissor" or answer3.content == "3" or answer3.content == "armyscissor" or answer3.content == "Scissor"  or answer3.content == "scissor":
                    havefood = round(info["food"], 0)
                    havestone1 = round(info["metal"], 0)
                    havesamy01 = round(info["castle_army_scissor"], 0)
                    havespepol01 = round(info["people"], 0)
                    calcstone = havestone1 / 8
                    amountCanbuy = calcstone * 8
                    if calcstone <= havefood:
                        canbuy = calcstone
                        print("1")
                    elif calcstone >= havefood or calcstone == havefood:
                        canbuy = havefood
                        print("0")
                    em = discord.Embed(description="\n**You have {} ArmyScissor**\n**You have {} People **\n**You have {} Food **\n** and {} Metal**\n\n You can buy {} ArmyScissor\n\n```diff\n+ How many would you like to buy?\n\n```".format(havesamy01, havespepol01, havefood, havestone1, canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred4(m):
                        return m.author == message.author and m.channel == message.channel
                    answer4 = await bot.wait_for("message", check=pred4)
                    amount = int(answer4.content)
                    haverocks = info["metal"]
                    if amount <= 0:
                        await ctx.send("```diff\n No Negative Numbers!\n```".format())
                        return
                    if havefood < canbuy :
                        await ctx.send("```diff\nLooks like you have not enaf material!\n```".format())
                        return
                    if amount > canbuy:
                        amount = canbuy
                        rocks = canbuy * 8
                        food = canbuy * 1
                        info["food"] = info["food"] - food
                        info["metal"] = info["metal"] - rocks
                        info["castle_army_scissor"] = info["castle_army_scissor"] + amount
                        await ctx.send("```diff\n Grate!\n\n You baugte {} ArmyScissor\n Thank you for shopping come again.\n\n You have now {} ArmyScissor```".format(amount, info["castle_army_scissor"]))
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    else :
                        rocksonce = amount * 8
                        foods = amount * 1
                        info["food"] = info["food"] - foods
                        info["metal"] = info["metal"] - rocksonce
                        info["castle_army_scissor"] = info["castle_army_scissor"] + amount
                        await ctx.send("```diff\n Grate!\n\n You baugte {} ArmyScissor\n Thank you for shopping come again.\n\n You have now {} ArmyScissor```".format(amount, info["castle_army_scissor"]))
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                if answer3.content == "Tower" or answer3.content == "4" or answer3.content == "tower" or answer3.content == "T" or answer3.content == "t":
                    boco = round(info["boco"], 0)
                    em = discord.Embed(description="\n**A Tower Help to Incrase Your Attack Power!\n\n It cost 100,000 BobocCoin's\n\nYou can upgrade them with !upgrade command.\n\n You have {} BoboCoins\nDo you want one?\n\n Y or N".format(boco), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred4(m):
                        return m.author == message.author and m.channel == message.channel
                    answer4 = await bot.wait_for("message", check=pred4)
                    values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}buy".format(Prefix)]
                    if str(answer4.content) in values:
                        if answer4.content == "y" or answer4.content == "Y" or answer4.content == "yes" or answer4.content == "Yes":
                            value = 100000
                            print("value")
                            print(value)
                            if info["boco"] < value:
                                await ctx.send("```diff\nYou do not have enaf to buy an Tower for your Castle.\n```".format())
                            else:
                                info["boco"] = info["boco"] - value
                                info["exp"] = info["exp"] + 1000
                                info["castle_tower"] = info["castle_tower"] + 1
                                info["castle_inventory"].append("Tower")
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("```diff\n You have bought a Tower for your Castle.\n```".format())
                        elif answer4.content == "n" or answer4.content == "N" or answer4.content == "no" or answer4.content == "No":
                            await ctx.send("Ok then.")
                            return
                if answer3.content == "Guard" or answer3.content == "5" or answer3.content == "guard" or answer3.content == "G" or answer3.content == "g":
                    boco = round(info["boco"], 0)
                    em = discord.Embed(description="\n**A Guard Help to Incrase Your Defence Power!\n\nIt cost 200,000 BobocCoin's\n\nYou can upgrade them with !upgrade command.\n\nYou have {} BoboCoins\nDo you want one?\n\nY or N".format(boco), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred4(m):
                        return m.author == message.author and m.channel == message.channel
                    answer4 = await bot.wait_for("message", check=pred4)
                    values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}buy".format(Prefix)]
                    if str(answer4.content) in values:
                        if answer4.content == "y" or answer4.content == "Y" or answer4.content == "yes" or answer4.content == "Yes":
                            value = 200000
                            if info["boco"] < value:
                                em = discord.Embed(description="```diff\n- {}, you don't have enough BoboCoins for ``".format(info["name"]), color=discord.Color.red())
                                await ctx.send(embed=em)
                            else:
                                info["boco"] = info["boco"] - value
                                info["exp"] = info["exp"] + 2000
                                info["castle_guard"] = info["castle_guard"] + 1
                                info["castle_inventory"].append("Guard")
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("```diff\n You have bought a Guard for your Castle.\n```".format())
                        elif answer4.content == "n" or answer4.content == "N" or answer4.content == "no" or answer4.content == "No":
                            await ctx.send("Ok then.")
                            return
                else:
                    #await ctx.send("Please check your Spelling!")
                    return
        elif answer1.content == "skills" or answer1.content == "Skills" or answer1.content == "8":
                data = tinfo["Skill_List"]["class"]["List1"]
                json.dumps(data, indent=10)
                #items = tinfo["Items_List"]["material"]["Simple"]
                #tools = tinfo["Items_List"]
                em = discord.Embed(description="**You have {} BoboCoin's**\nItem - Price Board\n```diff\n {}.```\n```diff\n+ What would you like to buy?```".format(info["boco"], "\n".join(data), color=discord.Color.blue()))
                await ctx.send(embed=em)
                options = ["Archer", "archer", "1", "Paladin", "paladin", "2", "Mage", "mage", "3", "Thief", "thief", "4", "Hacker", "hacker",  "5"]
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                if str(answer3.content) == "1" or str(answer3.content) == "archer" or str(answer3.content) == "Archer":
                    material = "Archer"
                elif str(answer3.content) == "2" or str(answer3.content) == "Paladin" or str(answer3.content) == "paladin":
                    material = "Paladin"
                elif str(answer3.content) == "3" or str(answer3.content) == "Mage" or str(answer3.content) == "mage":
                    material = "Mage"
                elif str(answer3.content) == "4" or str(answer3.content) == "Thief" or str(answer3.content) == "thief":
                    material = "Thief"
                elif str(answer3.content) == "5" or str(answer3.content) == "Hacker" or str(answer3.content) == "hacker":
                    material = "Hacker"
                    em1 = discord.Embed(description="```diff\n**You need the Class Hacker**\n Or Need Access to the Server\n USE COMMAND\n {}login \n\n+ THIS IS A GAME! \n- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n- DO NOT USE YOUR REAL USERNAME OR PASSWORD\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n```".format(Prefix), color=discord.Color.blue())
                    await ctx.send(embed=em1)
                else:
                    material = str(answer3.content)
                if answer3.content == "Archer" or answer3.content == "archer" or answer3.content == "1":
                    datalist = tinfo["Skill_List"]["class"]["Archer"]
                    options = ["Shoot", "Arrow Shower", "Steel Arrow", "Trap"]
                elif answer3.content == "Paladin" or answer3.content == "paladin" or answer3.content == "2":
                    datalist = tinfo["Skill_List"]["class"]["Paladin"]
                    options = ["Swing", "Knock Back", "Shield", "Brute Force"]
                elif material == "Mage" or answer3.content == "3":
                    datalist = tinfo["Skill_List"]["class"]["Mage"]
                    options = ["Heal", "Fire Ball", "Water Ball", "Wind Ball", "Earth Ball"]
                elif material == "Thief" or answer3.content == "4":
                    datalist = tinfo["Skill_List"]["class"]["Thief"]
                    options = ["Pickpocket", "Hide", "Jump", "Secret Dagger"]
                elif material == "Hacker" or answer3.content == "5":
                    datalist = tinfo["Skill_List"]["class"]["Hacker"]
                    options = ["Scan", "Crack", "DDOS", "Install"]
                datalist = tinfo["Skill_List"]["class"][material]
                em1 = discord.Embed(description="**You have {} BoboCoin's**\n\n```diff\n{}.```\n```diff\n+ What would you like to buy?\n\n- Please write exacly like the Items Name!\n\n```".format(info["boco"],"\n".join(datalist), color=discord.Color.blue()))
                await ctx.send(embed=em1)
                #await ctx.send(datalist)
                def pred4(m):
                    return m.author == message.author and m.channel == message.channel
                answer4 = await bot.wait_for("message", check=pred4)
                await ctx.send(answer4.content)
                if answer4.content in options:
                    if answer4.content in options:
                        material = str(answer3.content)
                        Items_List = str(answer4.content)
                        price = 5000
                        if info["boco"] < price:
                            em = discord.Embed(description="```diff\n- {}, you don't have enough BoboCoins.```".format(info["name"]), color=discord.Color.red())
                            await ctx.send(embed=em)
                            return
                        else:
                            await ctx.send("Price")
                            await ctx.send(price)
                            if answer4.content in options:
                                info["boco"] = info["boco"] - price
                                frup = str(answer4.content)
                                info["skill_inventory"].append(frup)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, you bought  {}!```".format(info["name"], frup), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                em = discord.Embed(description="```diff\n+ USE COMMAND\n {}skillinv <slotNum 0-3>\n```".format(Prefix), color=discord.Color.blue())
                                await ctx.send(embed=em)
                                return
                else:
                    await ctx.send("Please check your Spelling!")
                    return
        elif answer1.content == "ammo" or answer1.content == "Ammo" or answer1.content == "9":
            rabbat = info["rabbat"]
            arrow = 1
            steelarrow = 2
            trap = 100
            magicpot = 30
            sklvl = info["sklvl"]
            canbuyarrow = info["boco"]
            canbuysteelarrow = info["boco"]
            canbuytrap = info["boco"]
            canbuymagicpot = info["boco"]
            em = discord.Embed(description=" ```diff\n **You have {} BoboCoin's** ```\n+ PriceList.\n ```diff\n 1) Arrow=1B\n 2) Steel Arrow=2B\n 3) Trap=100\n 4) Magic Pot=30\n+\n- You have \n+ \n+ BoboCoins={}\n-\n Discount {}\n ```\n".format(info["boco"], info["boco"], info["rabbat"]), color=discord.Color.blue())
            await ctx.send(embed=em)
            options = ["Arrow", "arrow", "1", "Steel Arrow", "steel arrow", "2", "Trap", "trap", "3", "Magic Pot", "magic pot", "4","{}buy".format(Prefix)]
            def pred1(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred1)
            if answer2.content in options:
                if  answer2.content == "Arrow" or answer2.content == "arrow" or answer2.content == "1" :
                    try:
                        canbuy = info["boco"] / arrow
                        em = discord.Embed(description="```diff\n+ How many Arrow(s) would you like to buy?\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                        await ctx.send(embed=em)
                        def pred2(m):
                            return m.author == message.author and m.channel == message.channel
                        answer3 = await bot.wait_for("message", check=pred2)
                        print("Wait for Answer")
                    except:
                        await ctx.send("somthing wrong")
                    try:
                        MmP = int(answer3.content) * arrow
                        if MmP <= 0:
                            await ctx.send(" NoNegative Numbers !")
                            return
                        RmM = MmP * rabbat
                        value = MmP - RmM
                        print("Rabbat")
                        print(rabbat)
                        print("value")
                        print(value)
                        print("arrow")
                        print(arrow)
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough boboCoins's for {} potion(s)```".format(info["name"], answer2.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                            pass
                        else:
                            info["boco"] = info["boco"] - value
                            info["ammo_arrow"] = info["ammo_arrow"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} Arrow(s) for {} Bobocoins!\n```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            pass
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next time.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                elif answer2.content in options and answer2.content == "steel arrow" or answer2.content == "Steel Arrow" or answer2.content == "2" :
                    print("Steel Arrow")
                    canbuy = info["boco"] / steelarrow
                    em = discord.Embed(description="```diff\n+ How many Steel Arrow(s) would you like to buy?\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        MmP = int(answer3.content) * steelarrow
                        if MmP <= 0:
                            await ctx.send(" NoNegative Numbers !")
                            return
                        RmM = MmP * rabbat
                        value = MmP - RmM
                        print("Rabbat")
                        print(rabbat)
                        print("value")
                        print(value)
                        print("steelarrow")
                        print(steelarrow)
                        value = int(answer3.content) * steelarrow
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {},  don't have enough boco for {} potion(s)```".format(info["name"], answer2.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                            pass
                        else:
                            info["boco"] = info["boco"] - value
                            info["ammo_arrow_steal"] = info["ammo_arrow_steal"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} Steel Arrow(s) for {} BoboCoin's!\n-\n USE COMMAND !use\n-```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                            await ctx.send(embed=em)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeMedium.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                        return
                elif answer2.content in options and answer2.content == "trap" or answer2.content == "Trap" or answer2.content == "3":
                    canbuy = info["boco"] / trap
                    em = discord.Embed(description="```diff\n+ How many Trap(s) would you like to buy?\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        value = int(answer3.content) * trap
                        if value <= 0:
                            await ctx.send(" NoNegative Numbers !")
                            return
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough BoboCoins for {} potion(s)```".format(info["name"], answer2.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                        else:
                            info["boco"] = info["boco"] - value
                            info["ammo_arrow_trap"] = info["ammo_arrow_trap"] + int(answer3.content)
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            em = discord.Embed(description="```diff\n+ {}, bought {} Trap(s) for {} BoboCoin!\n-\n USE COMMAND !use\n-```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                            await ctx.send(embed=em)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeBIG.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                elif answer2.content == "Magic Pot" or answer2.content == "magic pot" or answer2.content == "4" :
                    em = discord.Embed(description="```diff\n+ What Element Fire, Water, Wind, Earth\n```", color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred5(m):
                        return m.author == message.author and m.channel == message.channel
                    answer5 = await bot.wait_for("message", check=pred5)
                    element = str(answer5.content)
                    canbuy = info["boco"] / magicpot
                    em = discord.Embed(description="```diff\n+ How many MagicPot(s) would you like to buy?\n You can Buy {}\n```".format(canbuy), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    def pred2(m):
                        return m.author == message.author and m.channel == message.channel
                    answer3 = await bot.wait_for("message", check=pred2)
                    try:
                        value = int(answer3.content) * magicpot
                        if value <= 0:
                            await ctx.send(" NoNegative Numbers !")
                            return
                        if info["boco"] < value:
                            em = discord.Embed(description="```diff\n- {}, don't have enough BoboCoin for {} potion(s)```".format(info["name"], answer3.content), color=discord.Color.red())
                            await ctx.send(embed=em)
                        else:
                            if element == "Fire":
                                info["boco"] = info["boco"] - value
                                info["ammo_fire_pot"] = info["ammo_fire_pot"] + int(answer3.content)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, bought {} FirePotion(s) for {} Bobocoins!\n```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                                await ctx.send(embed=em)
                            if element == "Water":
                                info["boco"] = info["boco"] - value
                                info["ammo_water_pot"] = info["ammo_water_pot"] + int(answer3.content)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, bought {} WaterPotion(s) for {} Bobocoins!\n```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                                await ctx.send(embed=em)
                            if element == "Wind":
                                info["boco"] = info["boco"] - value
                                info["ammo_wind_pot"] = info["ammo_wind_pot"] + int(answer3.content)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, bought {} WindPotion(s) for {} Bobocoins!\n```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                                await ctx.send(embed=em)
                            if element == "Earth":
                                info["boco"] = info["boco"] - value
                                info["ammo_earth_pot"] = info["ammo_earth_pot"] + int(answer3.content)
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                em = discord.Embed(description="```diff\n+ {}, bought {} EarthPotion(s) for {} Bobocoins!\n```".format(info["name"], answer3.content, value), color=discord.Color.blue())
                                await ctx.send(embed=em)
                    except:
                        em = discord.Embed(description="```diff\n- {}, please put a correct number value next timeAmnesi.```".format(info["name"]), color=discord.Color.red())
                        await ctx.send(embed=em)
                else:
                    return
            else:
                return
        else:
            em = discord.Embed(description="```diff\n- {}, don't forget to use !daily for your daily gift!```".format(info["name"]), color=discord.Color.red())
            await ctx.send(embed=em)
            return
    else:
        em = discord.Embed(description="```diff\n- {}, please put a correct value next timeLast...```".format(info["name"]), color=discord.Color.red())
        await ctx.send(embed=em)
        return
@bot.command(aliases=["i"])
async def inv(ctx):
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    em1 = discord.Embed(description="```diff\n!=====[Equipment]=====!\n```\n!=====[ {}skillinv ]=====!\n```\n+ {} ```\n \n**!=====[Skills Learned]=====!**\n```\n+ {} \n```\n \n**!=====[Tools you Own]=====!**\n```\n+ {} ```\n" .format(Prefix,"\n+ ".join(info["skill_inventory"]),"\n+ ".join(info["skills_learned"]), "\n+ ".join(info["all_inventory"]), color=discord.Color.blue()))
    await ctx.send(embed=em1)
    em2 = discord.Embed(description="```diff\n!=====[Slot's {}slot <0-25>]=====!\n\n Slot_0 : {}\n Slot_1 : {}\n SLot_2 : {}\n Slot_3 : {}\n Slot_4 : {}\n Slot_5 : {}\n Slot_6 : {}\n SLot_7 : {}\n Slot_8 : {}\n Slot_9 : {}\n Slot_10: {}\n Slot_11: {}\n SLot_12: {}\n Slot_13: {}\n Slot_14: {}\n Slot_15: {}\n Slot_16: {}\n SLot_17: {}\n Slot_18: {}\n Slot_19: {}\n Slot_20: {}\n Slot_21: {}\n SLot_22: {}\n Slot_23: {}\n Slot_24: {}\n Slot_25: {}```" .format(Prefix,info["zslot_0_inventory"],  info["zslot_1_inventory"], info["zslot_2_inventory"], info["zslot_3_inventory"], info["zslot_4_inventory"], info["zslot_5_inventory"], info["zslot_6_inventory"], info["zslot_7_inventory"], info["zslot_8_inventory"], info["zslot_9_inventory"], info["zslot_10_inventory"], info["zslot_11_inventory"], info["zslot_12_inventory"], info["zslot_13_inventory"], info["zslot_14_inventory"], info["zslot_15_inventory"], info["zslot_16_inventory"], info["zslot_17_inventory"], info["zslot_18_inventory"], info["zslot_19_inventory"], info["zslot_20_inventory"], info["zslot_21_inventory"], info["zslot_22_inventory"], info["zslot_23_inventory"], info["zslot_24_inventory"], info["zslot_25_inventory"]), color=discord.Color.blue())
    await ctx.send(embed=em2)
    dropcoincandy = info["bpfreecandy"] + info["bpfreecandylv52"] + info["bpfreecandytwitch3"]
    sponsorccc = info["bpbalcrit"] + info["bpccc"] + info["bpcclassic"] + info["bpcclean"] + info["bpcdirty"] + info["bpcretro"] + info["bpwhite"] + info["bpjacktick"] + info["bpramdonator"]
    bpacks = info["bppacksv1"] + info["bppacksv2"] + info["bppacksv4525"] + info["bppacksv4550"] + info["bppacksv4575"] + info["bppacksv51025"] + info["bppacksv51050"] + info["bppacksv51075"] + info["bppacksv6f"] + info["bppacksv71"] + info["bppacksv710"] + info["bppacksv75"] + info["bppacksv81"] + info["bppacksv825"]
    totalfakevalue = info["bpf0"]+info["bpf1"]+info["bpf2"]+info["bpf3"]+info["bpf4"]+info["bpf5"]+info["bpf6"]+info["bpf7"]+info["bpf8"]+info["bpf9"]+info["bpf10"]+info["bpf11"]+info["bpf12"]+info["bpf13"]+info["bpf14"]+info["bpf15"]+info["bpf16"]+info["bpf17"]+info["bpf18"]+info["bpf19"]+info["bpf20"]+info["bpf21"]+info["bpf22"]+info["bpf23"]+info["bpf24"]+info["bpf25"]
    em4 = discord.Embed(description="**!====[{}'s]====!\n!====[ Wallet ={}w ]====!\n```diff\n!====[ {}bals for updates ]====!\n\nBOPIXBO:  {}\nGOLD:     {}\nBOPIGOL:  {}\nWAXGOLI:  {}\nBOCO:     {}\nANTIMAT:  {}\nDEPTS:    {}\nKEY:      {}\nDOOR:     {}\nPEOPLE:   {}\nROCK:     {}\nSCISSOR:  {}\nPAPER:    {}\nMetal:    {}\nWOOD:     {}\nSTONE:    {}\nFOOD:     {}\n\nWOJAK:    {}\nPIXEL:    {}\nWAX:      {}\n```\n**!====[Open POCKET]====!\n**{}sell**\n```diff\n\nFood:     {} \nWood:     {} \nStone:    {} \nMetal:    {} \nGold:     {} \nBoboCoin: {} \nKey's:    {}\n```!===== [ {}pot ] =====!\n```diff\n\n\nsmallPot   : {} \nMediumPot  : {} \nBIGPOT     : {} \nSpeedPot   : {} \nAmnesiaPot : {} \nWindPot    : {} \nWaterPot   : {} \nFirePot    : {} \nEarthPot   : {}```\n!===== [ {}bag ] =====!\n```diff\n\n\nFood Bag   : {} \nWood Bag   : {} \nStone Bag  : {} \nMetal Bag  : {} \nGold Bag   : {} \nBoCo Bag   : {} \nKey Bag    : {}```\n".format(info["name"],Prefix,Prefix, info["bopiDict"]["balances_amount_BOPIXBO"], info["goldDict"]["balances_amount_GOLD"], info["bgoldDict"]["balances_amount_BOPIGOL"], info["wgoldDict"]["balances_amount_WAXGOLI"], info["bocoDict"]["balances_amount_BOCO"], info["antDict"]["balances_amount_ANTIMAT"], info["deptDict"]["balances_amount_DEPT"], info["keyDict"]["balances_amount_KEY"], info["doorDict"]["balances_amount_DOOR"], info["peoDict"]["balances_amount_PEOPLE"], info["rocDict"]["balances_amount_ROCK"], info["sciDict"]["balances_amount_SCISSOR"], info["papDict"]["balances_amount_PAPER"], info["metDict"]["balances_amount_METAL"], info["wooDict"]["balances_amount_WOOD"], info["stodDict"]["balances_amount_STONE"], info["fooDict"]["balances_amount_FOOD"], info["wojakDict"]["balances_amount_WOJAK"], info["pixelDict"]["balances_amount_PIXEL"], info["waxDict"]["balances_amount_WAX"],Prefix, info["food"], info["wood"], info["stone"], info["metal"], info["gold"], info["boco"], info["key"],Prefix, info["smallpot"], info["mediumpot"],info["bigpot"],info["speedpot"],info["amnesiapot"],info["ammo_wind_pot"], info["ammo_water_pot"], info["ammo_fire_pot"], info["ammo_earth_pot"],Prefix, info["bag_food"], info["bag_wood"], info["bag_stone"], info["bag_metal"], info["bag_gold"], info["bag_boco"], info["bag_key"], "\n+".join(info["inventory"])), color=discord.Color.blue())
    await ctx.send(embed=em4)
    #em4 = discord.Embed(description="```diff\n!==== [{}'s Inventory] ====!\n\n!==== [Supplies] ====!\n Food:\n+ {}\n Wood:\n+ {}\n Stone:\n+ {}\n Metal:\n+ {}\n Gold:\n+ {}\n BoboCoin:\n+ {}\n Key's :\n+ {}\n\n!===== [Pot] =====!\n+ smallPot   : {}\n+ MediumPot  : {}\n+ BIGPOT     : {}\n+ SpeedPot   : {}\n+ AmnesiaPot : {}\n+ WindPot    : {}\n+ WaterPot   : {}\n+ FirePot    : {}\n+ EarthPot   : {}\n\n!===== [Bag] =====!\n+ Food Bag   : {}\n+ Wood Bag   : {}\n+ Stone Bag  : {}\n+ Metal Bag  : {}\n+ Gold Bag   : {} \n+ BoCo Bag   : {} \n+ Key Bag    : {}\n```".format(info["name"], round(info["food"], 0), round(info["wood"], 0), round(info["stone"], 0), round(info["metal"], 0), round(info["gold"], 0), round(info["boco"], 0), round(info["key"], 0), info["smallpot"], info["mediumpot"],info["bigpot"],info["speedpot"],info["amnesiapot"],info["ammo_wind_pot"], info["waterpot"], info["firepot"], info["ammo_earth_pot"], info["bag_food"], info["bag_wood"], info["bag_stone"], info["bag_metal"], info["bag_gold"], info["bag_boco"], info["bag_key"], "\n+ ".join(info["inventory"])), color=discord.Color.blue())
    #await ctx.send(embed=em4)####
    return
@bot.command(aliases=["ban"])
async def banano(ctx):
    author = ctx.author
    message = ctx.message
    member = message.author
    channel = ctx.channel
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    account_ban = info["account_ban"]
    account_ban_seed = info["account_ban_seed"]
    account_ban_balance = info["account_ban_balance"]
    account_ban_balance_decimal_to_send = info["account_ban_balance_decimal_to_send"]
    account_ban_recive_check_time = info["account_ban_recive_check_time"]
    account_ban_recive_check = info["account_ban_recive_check"]
    account_ban_to_check = info["account_ban_to_check"]
    print("check_depts_int")
    print(account_ban)
    print(account_ban_seed)
    print(account_ban_balance)
    print(account_ban_balance_decimal_to_send)
    print(account_ban_recive_check_time)
    print(account_ban_to_check)
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    rpc = RPC("https://kaliumapi.appditto.com/api")
    assert whole_to_raw("492.2") == 49220000000000000000000000000000
    assert raw_to_whole(15*(10**BANANO_DECIMALS)) == 15.0
    my_account = Wallet(rpc, seed=account_ban_seed, index=0)
    if account_ban_to_check == True:
        # account_ban_seed = info["check_depts_int"]
        print("true")
        my_account.receive_all()
        try:
            print("No account_ban")
            account_ban = my_account.get_address()
        except:
            print("No account_ban")
    else:
        info["account_ban_to_check"] = True
        my_new_account = Wallet(rpc, index=0)
        seed_new = my_new_account.seed
        info["account_ban_seed"] = seed_new
        fileIO("players/{}/info.json".format(author.id), "save", info)
        channel = await member.create_dm()
        await channel.send(f' seed_new {seed_new}  ')
        await ctx.send(f'Check your DM ! IMPORTENT!!!')
        return new_wallet(ctx)
    try: #USER WHERE
        user = bot.get_user(int(ctx.message.author.id))
        #await ctx.send("{} is your id".format(ctx.message.author.id))
        data = {ctx.message.author.id}
        data1 = int(ctx.message.author.id)
        data2 = str(ctx.message.author.id)
        data3 = str(ctx.message.channel)
        print("ctx.message.author.id")
        print(data)
        print("channel")
        print(channel)
        print("int")
        print(data1)
        print("str")
        print(data2)
        print("datat3")
        print(data3)
        #await ctx.send(ctx.author.mention)
        #await message.channel.send(message.author.mention)
        #await message.channel.send(ctx.channel)
    except:
        print("NO data WHERE")
    #\n(4) aaa ( aaa )\n(5) aaa ( aaa )\n(6) aaa ( aaa )\n
    info["location"] = ctx.channel
    #if collection == "None":
    await ctx.send(" **BananoCoin https://banano.cc\n\nSelect by Number\n(1) deposit ( Shows your account address )\n(2) balance ( Shows your account balance )\n(3) balanceof ( Shows balance of... )\n(4) send ( Send BANANO to an external address. Or Ping )\n(5) history ( Shows the last 10 Transactions )\n\n".format(Prefix,Prefix))
    #    collection = "bobopixeloxo"
    options = ["1","2","3","4","5","deposit","balance","send"]
    #await ctx.send("**Do you looking for something specific?**\n\n 0 = AtomicHub, NeftyBlocks, NFTHive, WaxDao\n 1 = sell\n 2 = drop\n 3 = blend\n 4 = token\n 5 = swap\n 6 = On The Internet\n".format(Prefix,Prefix))
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer1 = await bot.wait_for("message", check=pred)
    if answer1.content in options:
        if answer1.content == "0" or answer1.content == "all" or answer1.content == "All":
            em = discord.Embed(description="**wax.atomichub.io**\n\nhttps://wax.atomichub.io/explorer/collection/{}\n\n**neftyblocks.com**\n\nhttps://neftyblocks.com/c/{}\n\n**nfthive.io**\n\nhttps://nfthive.io/collection/{}\n\n**waxdao.io**\n\nhttps://waxdao.io/\n\n".format(collection,collection,collection), color=discord.Color.blue())
            await ctx.send(embed=em)
        elif answer1.content == "1" or answer1.content == "deposit" or answer1.content == "Deposit":
            account_ban = my_account.get_address()
            await ctx.send(f' YOUR WALLET ADDRESS\n')
            await ctx.send(f'{account_ban}')
            return
        elif answer1.content == "2" or answer1.content == "balance" or answer1.content == "Balance":
            account_ban = my_account.get_address()
            get_balanceRAW = raw_to_whole(int(rpc.get_account_balance(account_ban)["balance"]))
            await ctx.send(f' Balance:\n {get_balanceRAW}  ')
            info["account_ban_balance"] = get_balanceRAW
            info["account_ban_balance_decimal_to_send"] = get_balanceRAW
            return
        elif answer1.content == "3" or answer1.content == "balanceof" or answer1.content == "Balanceof":
            await ctx.send(f' What is the Address? Starding with ban_  ')
            def pred1(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred1)
            who_to = str(answer2.content)
            get_balance = raw_to_whole(int(rpc.get_account_balance(who_to)["balance"]))
            #get_balance = my_account.get_balance()
            await ctx.send(f'{who_to} \nBalance: {get_balance}  ')
            return
        elif answer1.content == "4" or answer1.content == "send" or answer1.content == "Send":
            await ctx.send(f' Where to Send? ban_... ')
            def pred3(m):
                return m.author == message.author and m.channel == message.channel
            answer3 = await bot.wait_for("message", check=pred3)
            where_to = str(answer3.content)
            public_key_receiver = get_public_key_from_address(where_to)
            print("public_key_receiver")
            print(public_key_receiver)
            account_ban = my_account.get_address()
            get_balanceRAW = raw_to_whole(int(rpc.get_account_balance(account_ban)["balance"]))
            await ctx.send(f' Balance:\n {get_balanceRAW}  ')
            info["account_ban_balance"] = get_balanceRAW
            await ctx.send(f'Wallet:\n {account_ban}\nBalance: {get_balanceRAW} \n\n How much to send? ')
            def pred4(m):
                return m.author == message.author and m.channel == message.channel
            answer4 = await bot.wait_for("message", check=pred4)
            assert raw_to_whole(15*(10**BANANO_DECIMALS)) == 15.0
            assert whole_to_raw("492.2") == 49220000000000000000000000000000
            print("raw_to_whole")
            print(raw_to_whole)
            print("whole_to_raw")
            print(whole_to_raw)
            if float(answer4.content) > 0:
                amount_toFloat = float(answer4.content)
                print("amount_toFloat")
                print(amount_toFloat)
                amount_to = amount_toFloat
                amount_toSTR = amount_toFloat
            elif int(answer4.content) > 0:
                amount_toINT = int(answer4.content)
                print("amount_toINT")
                print(amount_toINT)
                amount_to = amount_toINT
                amount_toSTR = amount_toINT
            elif str(answer4.content) > len(0):
                amount_toSTR = str(answer4.content)
                print("amount_toSTR")
                print(amount_toSTR)
                amount_to = amount_toSTR
            amount_toRRraw_to_whole = raw_to_whole(amount_to)
            print("amount_toRRraw_to_whole")
            print(amount_toRRraw_to_whole)
            amount_to = amount_toRRraw_to_whole
            amount_toRRwhole_to_raw = whole_to_raw(amount_to)
            print("amount_toRRwhole_to_raw")
            print(amount_toRRwhole_to_raw)
            print(amount_to)
            await ctx.send(f' Amount:\n```{amount_to}``` To:\n```{where_to}```\n\n Write "OK" to send...\n')
            def pred5(m):
                return m.author == message.author and m.channel == message.channel
            answer5 = await bot.wait_for("message", check=pred5)
            where_to = str(answer5.content)
            options = ["OK"]
            if answer5.content in options:
                if answer5.content == "OK":
                    #assert whole_to_raw("492.2") == 49220000000000000000000000000000
                    #assert raw_to_whole(15*(10**BANANO_DECIMALS)) == 15.0
                    print("OK")
                    print(my_account.send(where_to, amount_to))
                    #send_HASE = my_account.send(where_to, amount_toRRraw_to_whole)
                    send_HASE = my_account.send(where_to, amount_toRRraw_to_whole)
                    await ctx.send(f' send_DONE_HASH {send_HASE} \n [creeper.banano.cc](https://creeper.banano.cc/hash/send_HASE)')
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    # https://creeper.banano.cc/hash/D46CF7BD65BB715C239FE83C909CBD363C55C6D6D1ECF66A7994CB2E3A00FAAF
        elif answer1.content == "5" or answer1.content == "history" or answer1.content == "History":
            count = rpc.get_block_count()["count"]
            history = rpc.get_account_history(account_ban, count=10)["history"][0]
            await ctx.send(f' history {history}  ')
        try:
            account_ban = my_account.get_address()
            info["account_ban"] = account_ban
        except:
            print(" Except account_ban ")
        try:
            account_ban_seed = my_account.seed
            info["account_ban_seed"] = account_ban_seed
        except:
            print(" Except account_ban_seed ")
        try:
            account_ban_balance = my_account.get_balance()
            info["account_ban_balance"] = account_ban_balance
        except:
            print(" Except account_ban_balance "  )
        try:
            info["account_ban_balance_decimal_to_send"] = account_ban_balance_decimal_to_send
        except:
            print(" Except account_ban_balance_decimal_to_send "  )
        try:
            info["account_ban_recive_check_time"] = account_ban_recive_check_time
        except:
            print(" Except account_ban_recive_check_time "  )
        try:
            info["account_ban_recive_check"] = account_ban_recive_check
        except:
            print(" Except account_ban_recive_check " )
            assert my_account.get_address()
            send_HASE = my_account.send(where_to, raw_to_whole(int(amount_to)))
            await ctx.send(f' send_DONE_HASH {send_HASE} \n [creeper.banano.cc](https://creeper.banano.cc/hash/send_HASE)')
            fileIO("players/{}/info.json".format(author.id), "save", info)
        fileIO("players/{}/info.json".format(author.id), "save", info)
    fileIO("players/{}/info.json".format(author.id), "save", info)
@bot.command(aliases=["nw"])
async def new_wallet(ctx):
    author = ctx.author
    message = ctx.message
    member = message.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    account_ban = info["account_ban"]
    account_ban_seed = info["account_ban_seed"]
    account_ban_balance = info["account_ban_balance"]
    account_ban_balance_decimal_to_send = info["account_ban_balance_decimal_to_send"]
    account_ban_recive_check_time = info["account_ban_recive_check_time"]
    account_ban_recive_check = info["account_ban_recive_check"]
    account_ban_to_check = info["account_ban_to_check"]
    print("check_depts_int")
    print(account_ban)
    print(account_ban_seed)
    print(account_ban_balance)
    print(account_ban_balance_decimal_to_send)
    print(account_ban_recive_check_time)
    print(account_ban_to_check)
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if account_ban_to_check == True:
        # account_ban_seed = info["check_depts_int"]
        print("true")
    else:
        info["account_ban_to_check"] = True
        my_new_account = Wallet(rpc, index=0)
        seed_new = my_new_account.seed
        info["account_ban_seed"] = seed_new
        fileIO("players/{}/info.json".format(author.id), "save", info)
        channel = await member.create_dm()
        await channel.send(f' seed_new {seed_new}  ')
        await ctx.send(f'Check your DM ! IMPORTENT!!!')
        return new_wallet(ctx)
    rpc = RPC("https://kaliumapi.appditto.com/api")
    #await ctx.send(f'raw_to_whole(int(rpc.get_account_balance("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7")["balance"]))')
    balance_who = raw_to_whole(int(rpc.get_account_balance("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7")["balance"]))
    await ctx.send(f' balance_who {balance_who}  ')
    #rpc = RPC("https://kaliumapi.appditto.com/api")
    print("RPC and utils test")
    #check current blockcount
    #await ctx.send(f'rpc.get_block_count()["count"]')
    count = rpc.get_block_count()["count"]
    #get last 10 transactions of JungleTV
    #await ctx.send(f'rpc.get_account_history("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7", count=10)["history"][0]')
    history = rpc.get_account_history("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7", count=10)["history"][0]
    await ctx.send(f' history {history}  ')
    #check balance of JungleTV
    ctx.send(f'(raw_to_whole(int(rpc.get_account_balance("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7")["balance"]))')
    balance = raw_to_whole(int(rpc.get_account_balance("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7")["balance"]))
    await ctx.send(f' balance raw_to_whole {balance}  ')
    assert whole_to_raw("492.2") == 49220000000000000000000000000000
    assert raw_to_whole(15*(10**BANANO_DECIMALS)) == 15.0
    #print("Wallets test")
    my_account = Wallet(rpc, seed="c294abc12358f41c7162fd51135d056c10fe95a66e780a2cb0b000c55eb041eb", index=0)
    await ctx.send(f' my_account {my_account}  ')
    #or generate a new one
    my_new_account = Wallet(rpc, index=0)
    seed_new = my_new_account.seed
    #await ctx.send(f' seed_new {seed_new}  ')
    channel = await member.create_dm()
    await channel.send(f' seed_new {seed_new}  ')
    await ctx.send(f'Check your DM ! IMPORTENT!!!')
    #get address of self
    #assert my_account.get_address() == my_new_account
    assert my_account.get_address() == "ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7"
    #get balance of self
    get_balance = my_account.get_balance()
    await ctx.send(f' get_balance {get_balance}  ')
    #receive all transactions
    #print("Receive test")
    receive_all = my_account.receive_all()
    await ctx.send(f' receive_all {receive_all} ')
    #send 1 banano to the faucet development fund
    #print("Send test")
    send_HASE = my_account.send("ban_1t75c6g1y1ahzpe8e3k6gw97qpa835kuwbdaym6qcxpknn57mrt19hzdhifw", "0.0001")
    await ctx.send(f' send_HASE {send_HASE} ')
    #receive funds
    #print("Change test")
    #print(my_account.change_rep("ban_16kihk9cmt5yx8dbzq6nphkw8u5dn8wqgsbyuu3hzfe5xn13gc7hdreewfg7"))
    fileIO("players/{}/info.json".format(author.id), "save", info)
    return
@bot.command(aliases=["w"])
async def wallet(ctx):
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    em3 = discord.Embed(description="**\n!====[{}'s]====!\n!====[WALLET TOKEN]====!**```diff\n BOPIXBO: {}\nGOLD:{}\nBOPIGOL:{}\nWAXGOLI:{}\nBOCO:{}\nANTIMAT:{}\nDEPTS:{}\nKEY:{}\nDOOR:{}\nPEOPLE:{}\nROCK:{}\nSCISSOR:{}\nPAPER:{}\nMetal:{}\nWOOD:{}\nSTONE:{}\nFOOD:{}\n\nWOJAK:{}\nPIXEL:{}\nWAX:{}```\n\n".format(info["name"], info["bopiDict"]["balances_amount_BOPIXBO"], info["goldDict"]["balances_amount_GOLD"], info["bgoldDict"]["balances_amount_BOPIGOL"], info["wgoldDict"]["balances_amount_WAXGOLI"], info["bocoDict"]["balances_amount_BOCO"], info["antDict"]["balances_amount_ANTIMAT"], info["deptDict"]["balances_amount_DEPT"], info["keyDict"]["balances_amount_KEY"], info["doorDict"]["balances_amount_DOOR"], info["peoDict"]["balances_amount_PEOPLE"], info["rocDict"]["balances_amount_ROCK"], info["sciDict"]["balances_amount_SCISSOR"], info["papDict"]["balances_amount_PAPER"], info["metDict"]["balances_amount_METAL"], info["wooDict"]["balances_amount_WOOD"], info["stodDict"]["balances_amount_STONE"], info["fooDict"]["balances_amount_FOOD"], info["wojakDict"]["balances_amount_WOJAK"], info["pixelDict"]["balances_amount_PIXEL"], info["waxDict"]["balances_amount_WAX"]), color=discord.Color.blue())
    await ctx.send(embed=em3)
    #em4 = discord.Embed(description="**\n!====[{}'s]====!\n!====[WALLET TOKEN]====!**```diff\n\n**!wallet & !w**```\nBOPIXBO: ```{}```\nGOLD:```{}```\nBOPIGOL:```{}```\nWAXGOLI:```{}```\nBOCO:```{}```\nANTIMAT:```{}```\nDEPTS:```{}```\nKEY:```{}```\nDOOR:```{}```\nPEOPLE:```{}```\nROCK:```{}```\nSCISSOR:```{}```\nPAPER:```{}```\nMetal:```{}```\nWOOD:```{}```\nSTONE:```{}```\nFOOD:```{}```\n\n WOJAK:```{}```\nPIXEL:```{}```\nWAX:```{}```\n\n".format(info["name"], info["bopiDict"]["balances_amount_BOPIXBO"], info["goldDict"]["balances_amount_GOLD"], info["bgoldDict"]["balances_amount_BOPIGOL"], info["wgoldDict"]["balances_amount_WAXGOLI"], info["bocoDict"]["balances_amount_BOCO"], info["antDict"]["balances_amount_ANTIMAT"], info["deptDict"]["balances_amount_DEPT"], info["keyDict"]["balances_amount_KEY"], info["doorDict"]["balances_amount_DOOR"], info["peoDict"]["balances_amount_PEOPLE"], info["rocDict"]["balances_amount_ROCK"], info["sciDict"]["balances_amount_SCISSOR"], info["papDict"]["balances_amount_PAPER"], info["metDict"]["balances_amount_METAL"], info["wooDict"]["balances_amount_WOOD"], info["stodDict"]["balances_amount_STONE"], info["fooDict"]["balances_amount_FOOD"], info["wojakDict"]["balances_amount_WOJAK"], info["pixelDict"]["balances_amount_PIXEL"], info["waxDict"]["balances_amount_WAX"]), color=discord.Color.blue())
    #await ctx.send(embed=em4)
    return
@bot.command(aliases=["bpi"])
async def boboinv(ctx):
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    totalfakevalue = info["bpf0"]+info["bpf1"]+info["bpf2"]+info["bpf3"]+info["bpf4"]+info["bpf5"]+info["bpf6"]+info["bpf7"]+info["bpf8"]+info["bpf9"]+info["bpf10"]+info["bpf11"]+info["bpf12"]+info["bpf13"]+info["bpf14"]+info["bpf15"]+info["bpf16"]+info["bpf17"]+info["bpf18"]+info["bpf19"]+info["bpf20"]+info["bpf21"]+info["bpf22"]+info["bpf23"]+info["bpf24"]+info["bpf25"]
    dropcoincandy = info["bpfreecandy"] + info["bpfreecandylv52"] + info["bpfreecandytwitch3"]
    sponsorccc = info["bpbalcrit"] + info["bpccc"] + info["bpcclassic"] + info["bpcclean"] + info["bpcdirty"] + info["bpcretro"]+ info["bpcbwhite"] + info["bpwhite"] + info["bpjacktick"] + info["bpramdonator"]
    bpacks = info["bppacksv1"] + info["bppacksv2"] + info["bppacksv4525"] + info["bppacksv4550"] + info["bppacksv4575"] + info["bppacksv51025"] + info["bppacksv51050"] + info["bppacksv51075"] + info["bppacksv6f"] + info["bppacksv71"] + info["bppacksv710"] + info["bppacksv75"] + info["bppacksv81"] + info["bppacksv825"]
    #em = discord.Embed(description="```diff\n!=== [{}'s BoboPixel0x0Inventory] ===!\n\n+ BP0x0-0  : {}\n+ BP0x0-1  : {}\n+ BP0x0-2  : {}\n+ BP0x0-3  : {}\n+ BP0x0-4  : {}\n+ BP0x0-5  : {}\n+ BP0x0-6  : {}\n+ BP0x0-7  : {}\n+ BP0x0-8  : {}\n+ BP0x0-9  : {}\n+ BP0x0-10 : {}\n+ BP0x0-11 : {}\n+ BP0x0-12 : {}\n+ BP0x0-13 : {}\n+ BP0x0-14 : {}\n+ BP0x0-15 : {}\n+ BP0x0-16 : {}\n+ BP0x0-17 : {}\n+ BP0x0-18 : {}\n+ BP0x0-19 : {}\n+ BP0x0-20 : {}\n+ BP0x0-21 : {}\n+ BP0x0-22 : {}\n+ BP0x0-23 : {}\n+ BP0x0-24 : {}\n+ BP0x0-25 : {}\n+ BP0x0FREECANDY : {}\n+ BP0x0Pack : {}\n Total NFTs : {} ```".format(info["name"], info["bp0"], info["bp1"], info["bp2"], info["bp3"], info["bp4"], info["bp5"], info["bp6"], info["bp7"], info["bp8"], info["bp9"], info["bp10"], info["bp11"], info["bp12"], info["bp13"], info["bp14"], info["bp15"], info["bp16"], info["bp17"], info["bp18"], info["bp19"], info["bp20"], info["bp21"],  info["bp22"], info["bp23"], info["bp24"], info["bp25"], info["bpfreecandy"], bpacks, info["assets"], ), color=discord.Color.blue())
    #await ctx.send(embed=em)
    em3333 = discord.Embed(description="\n+ <:BP0X0_0:930385899223679009> X {} X 1\n+ <:BP0X0_1:930386090584600596> X {} X 2\n+ <:BP0X0_2:930413178398060594>  X {} X 4\n+ <:BP0X0_3:930413407230894080> X {} X 8\n+ <:BP0X0_4:930413442525958154> X {} X 16\n+ <:bp0x0_5:930413478596968468> X {} X 32\n+ <:bp0x0_6:930413516161187890> X {} X 64\n+ <:bp0x0_7:930413574894014464> X {} X 128\n+ <:bp0x0_8:930413605759901697> X {} X 256\n+ <:bp0x0_9:930413636533510204> X {} X 512\n+ <:bp0x0_10:930413669018374184> X {} X 1024\n+ <:bp0x0_11:930413701746532352> X {} X 2048\n+ <:bp0x0_12:930413740531273768> X {} X 4096\n+ <:bp0x0_13:930413770520526888> X {} X 8192\n+ <:bp0x0_14:930413883796119552> X {} X 16284\n+ <:bp0x0_15:930413914775240765> X {} X 32768\n-  <:bp0x0_16:930413947083980800> 0 {} X 65536\n-  <:bp0x0_17:930413992319549460> 0 {} X 131072\n-  <:bp0x0_18:930414228257509376> 0 {} X 262144\n-  <:bp0x0_19:930414274726199317> 0 {} X 524288\n-  <:bp0x0_20:930414311921311764> 0 {} X 1048576\n-  <:bp0x0_21:930414346100690955> 0 {} X 2097152\n-  <:bp0x0_22:930414378229039124> 0 {} X 4194304\n-  <:bp0x0_23:930414471376146472> 0 {} X 8388608\n-  <:bp0x0_24:930414504657944597> 0 {} X 16777216\n-  <:bp0x0_25:930414534794027028> 0 {} X *33554432*\n\n+ ```!c++``` <:cpp_p:964511717772128267> X {} NFT\n BoboValue {} \n+ ```!free``` <:freecandy_f:964515187329757235> / {} (t)    \n\n+ :BPacks           :{}\n\n+ :BoboValue    : {} \n Total NFTs : {} \n\n```!b```\n Total 1x1 FTs : {}\n+ :BoboValue    : {} \n Total Clicks : {} \n".format(info["bp0"], info["bp1"], info["bp2"], info["bp3"], info["bp4"], info["bp5"], info["bp6"], info["bp7"], info["bp8"], info["bp9"], info["bp10"], info["bp11"], info["bp12"], info["bp13"], info["bp14"], info["bp15"], info["bp16"], info["bp17"], info["bp18"], info["bp19"], info["bp20"], info["bp21"], info["bp22"], info["bp23"], info["bp24"], info["bp25"], sponsorccc, info["bpcccValue"], dropcoincandy, bpacks,  info["bbvalue_total_stats"], info["assets"], totalfakevalue, info["bbvaluef"], info["count_click"]), color=discord.Color.blue())
    await ctx.send(embed=em3333)
    #em3 = discord.Embed(description="\n+ <:BP0X0_0:930385899223679009> X {} X 1\n+ <:BP0X0_1:930386090584600596> X {} X 2\n+ <:BP0X0_2:930413178398060594>  X {} X 4\n+ <:BP0X0_3:930413407230894080> X {} X 8\n+ <:BP0X0_4:930413442525958154> X {} X 16\n+ <:bp0x0_5:930413478596968468> X {} X 32\n+ <:bp0x0_6:930413516161187890> X {} X 64\n+ <:bp0x0_7:930413574894014464> X {} X 128\n+ <:bp0x0_8:930413605759901697> X {} X 256\n+ <:bp0x0_9:930413636533510204> X {} X 512\n+ <:bp0x0_10:930413669018374184> X {} X 1024\n+ <:bp0x0_11:930413701746532352> X {} X 2048\n+ <:bp0x0_12:930413740531273768> X {} X 4096\n+ <:bp0x0_13:930413770520526888> X {} X 8192\n+ <:bp0x0_14:930413883796119552> X {} X 16284\n+ <:bp0x0_15:930413914775240765> X {} X 32768\n -  <:bp0x0_16:930413947083980800> 0 {} X 65536\n -  <:bp0x0_17:930413992319549460> 0 {} X 131072\n -  <:bp0x0_18:930414228257509376> 0 {} X 262144\n -  <:bp0x0_19:930414274726199317> 0 {} X 524288\n -  <:bp0x0_20:930414311921311764> 0 {} X 1048576\n -  <:bp0x0_21:930414346100690955> 0 {} X 2097152\n -  <:bp0x0_22:930414378229039124> 0 {} X 4194304\n -  <:bp0x0_23:930414471376146472> 0 {} X 8388608\n -  <:bp0x0_24:930414504657944597> 0 {} X 16777216\n -  <:bp0x0_25:930414534794027028> 0 {} X *33554432*\n\n+ :BoboValue    : {} \n+ :Sponsors      : {} \n+ :DropCoins's : {}\n+ :BPacks           :{}\n\n Total NFTs : {} \n".format(info["bp0"], info["bp1"], info["bp2"], info["bp3"], info["bp4"], info["bp5"], info["bp6"], info["bp7"], info["bp8"], info["bp9"], info["bp10"], info["bp11"], info["bp12"], info["bp13"], info["bp14"], info["bp15"], info["bp16"], info["bp17"], info["bp18"], info["bp19"], info["bp20"], info["bp21"], info["bp22"], info["bp23"], info["bp24"], info["bp25"], info["bbvalue_stats"], sponsorccc, dropcoincandy, bpacks, info["assets"]), color=discord.Color.blue())
    #await ctx.send(embed=em3)
    em2 = discord.Embed(description="```diff\n!=====[Equipment]=====!\n\n Slot_0 : {}\n Slot_1 : {}\n SLot_2 : {}\n Slot_3 : {}\n Slot_4 : {}\n Slot_5 : {}\n Slot_6 : {}\n SLot_7 : {}\n Slot_8 : {}\n Slot_9 : {}\n Slot_10: {}\n Slot_11: {}\n SLot_12: {}\n Slot_13: {}\n Slot_14: {}\n Slot_15: {}\n Slot_16: {}\n SLot_17: {}\n Slot_18: {}\n Slot_19: {}\n Slot_20: {}\n Slot_21: {}\n SLot_22: {}\n Slot_23: {}\n Slot_24: {}\n Slot_25: {}```" .format(info["zslot_0_inventory"],  info["zslot_1_inventory"], info["zslot_2_inventory"], info["zslot_3_inventory"], info["zslot_4_inventory"], info["zslot_5_inventory"], info["zslot_6_inventory"], info["zslot_7_inventory"], info["zslot_8_inventory"], info["zslot_9_inventory"], info["zslot_10_inventory"], info["zslot_11_inventory"], info["zslot_12_inventory"], info["zslot_13_inventory"], info["zslot_14_inventory"], info["zslot_15_inventory"], info["zslot_16_inventory"], info["zslot_17_inventory"], info["zslot_18_inventory"], info["zslot_19_inventory"], info["zslot_20_inventory"], info["zslot_21_inventory"], info["zslot_22_inventory"], info["zslot_23_inventory"], info["zslot_24_inventory"], info["zslot_25_inventory"]), color=discord.Color.blue())
    await ctx.send(embed=em2)
    return
@bot.command(aliases=["sc"])
async def statscastle(ctx):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    ginfo = fileIO("global/info.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_setBoboValue(ctx)
    await _check_setCastleValue(ctx)
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    #Levels
    ################Open########## DATABASE
    name = info["name"]
    wallet = info["account"]
    assets = info["assets"]
    assets_fg = info["assets_fg"]
    discordid =info["discordid"]
    password = info["password"]
    status = info["status"]
    lv = info["lvl"]
    sklv = info["sklvl"]
    bobovalue = info["bbvalue"]
    atk = info["all_total_base_attack"]
    deff = info["all_total_base_defence"]
    drop = info["all_total_base_drop"]
    classs =info["class"]
    race = info["race"]
    count_click = info["count_click"]
    count_draw = info["count_draw"]
    count_lose = info["count_lose"]
    count_played = info["count_played"]
    count_pvp_draw = info["count_pvp_draw"]
    count_pvp_lose = info["count_pvp_lose"]
    count_pvp_played = info["count_pvp_played"]
    count_pvp_win = info["count_pvp_win"]
    count_titlenum = info["count_titlenum"]
    count_treue = info["count_treue"]
    count_win = info["count_win"]
    count_wincry = info["count_wincry"]
    runaways = info["runaways"]
    score = info["score"]
    hp = info["health"]
    sp = info["stamina"]
    mp = info["mana"]
    castle_all_attack = info["castle_all_attack"] + info["all_total_base_attack"]
    castle_all_defence = info["castle_all_defence"] + info["all_total_base_defence"]
    castle_all_attack_drop = info["castle_all_attack_drop"] + info["all_total_base_drop"]
    castle_all_defence_drop = info["castle_all_defence_drop"] + info["all_total_base_drop"]
    castle_all_attack_lvl = info["castle_all_attack_lvl"]
    castle_all_defence_lvl = info["castle_all_defence_lvl"]
    castle_food = info["castle_food"]
    castle_wood = info["castle_wood"]
    castle_stone = info["castle_stone"]
    castle_metal = info["castle_metal"]
    castle_gold = info["castle_gold"]
    castle_people = info["castle_people"]
    castle_door = info["castle_door"]
    castle_antimat = info["castle_antimat"]
    castle_dept = info["castle_dept"]
    castle_army = info["castle_army"] #+ info["castle_army"]
    castle_boco = info["castle_boco"] #+ info["castle_boco"]
    ############Closed##########  Player WALLET
    ############Closed##########  Guild WALLET
    castle_guild_drop_exp = info["castle_guild_drop_exp"]
    castle_guild_drop_skexp = info["castle_guild_drop_skexp"]
    castle_guild_tower = info["castle_guild_tower"]
    castle_guild_guard = info["castle_guild_guard"]
    castle_guild_people = info["castle_guild_people"]
    castle_guild_key = info["castle_guild_key"]
    castle_guild_door = info["castle_guild_door"]
    nameGuild = info["castle_guild_name"]
    castle_guild_lvl = info["castle_guild_lvl"]
    castle_guild_sklvl = info["castle_guild_sklvl"]
    castle_guild_attack_lvl = info["castle_guild_attack_lvl"]
    castle_guild_defense_lvl = info["castle_guild_defense_lvl"]
    castle_guild_tower_lvl = info["castle_guild_tower_lvl"]
    castle_guild_attack = info["castle_guild_attack"]
    #castle_guild_attack_lvl = info["castle_guild_attack_lvl"]
    castle_guild_defence = info["castle_guild_defense"]
    castle_guild_guard_lvl = info["castle_guild_guard_lvl"]
    castle_guild_drop_people = info["castle_guild_drop_people"] #+ info["people"]
    castle_guild_drop_key = info["castle_guild_drop_key"] #+ info["all_total_base_key"]
    castle_guild_drop_food = info["castle_guild_drop_food"] #+ info["all_total_base_food"]
    castle_guild_drop_wood = info["castle_guild_drop_wood"] #+ info["all_total_base_wood"]
    castle_guild_drop_stone = info["castle_guild_drop_stone"] #+ info["all_total_base_stone"]
    castle_guild_drop_metal = info["castle_guild_drop_metal"] #+ info["all_total_base_metal"]
    castle_guild_drop_gold = info["castle_guild_drop_gold"] #+ info["all_total_base_gold"]
    castle_guild_drop_boco = info["castle_guild_drop_boco"] #+ info["all_total_base_boco"]
    balances_amount_PEOPLE = info["peoDict"]["balances_amount_PEOPLE"]
    balances_amount_ROCK = info["rocDict"]["balances_amount_ROCK"]
    balances_amount_PAPER = info["papDict"]["balances_amount_PAPER"]
    balances_amount_SCISSOR = info["sciDict"]["balances_amount_SCISSOR"]
    balances_amount_FOOD = info["fooDict"]["balances_amount_FOOD"]
    balances_amount_WOOD = info["wooDict"]["balances_amount_WOOD"]
    balances_amount_STONE = info["stodDict"]["balances_amount_STONE"]
    balances_amount_METAL = info["metDict"]["balances_amount_METAL"]
    balances_amount_GOLD = info["goldDict"]["balances_amount_GOLD"]
    balances_amount_BOCO = info["bocoDict"]["balances_amount_BOCO"]
    balances_amount_KEY = info["keyDict"]["balances_amount_KEY"]
    balances_amount_DOOR = info["doorDict"]["balances_amount_DOOR"]
    balances_amount_ANTIMAT = info["antDict"]["balances_amount_ANTIMAT"]
    balances_amount_DEPT = info["deptDict"]["balances_amount_DEPT"]
    castle_guild_army_rock = int(info["castle_guild_army_rock"])
    castle_guild_army_paper = int(info["castle_guild_army_paper"])
    castle_guild_army_scissor = int(info["castle_guild_army_scissor"])
    ##############Player Direct#############
    name = info["name"]
    owner = info["castle_owner"]
    castle_guild_lvl = round(info["castle_guild_lvl"],2)
    Player_In = info["Player_In"]
    #castle_guild_defense_lvl = info["castle_guild_defense_lvl"]
    castle_tower = info["castle_tower_lvl"]
    castle_guard = info["castle_guard_lvl"]
    castle_wall = info["castle_wall_lvl"]
    #castle_people = ginfo["Rock_Castle"]["castle_people"]
    #nameinfo["Wallets"]["Response"]["name_list"][name]["id"] = id
    castle_ali = info["castle_ali"]
    #castle_army = info["castle_army_scissor"] + info["castle_army_paper"] + info["castle_army_rock"]
    castle_army_lvl = info["castle_army_lvl"]
    castle_army_paper = info["castle_army_paper"]
    castle_army_paper_lvl = info["castle_army_paper_lvl"]
    castle_army_rock = info["castle_army_rock"]
    castle_army_rock_lvl = info["castle_army_rock_lvl"]
    castle_army_scissor = info["castle_army_scissor"]
    castle_army_scissor_lvl = info["castle_army_scissor_lvl"]
    #castle_armym = info["castle_army_scissor"] + info["castle_army_paper"] + info["castle_army_rock"]
    castle_boco = info["castle_boco"]
    castle_bocom = info["castle_bocom"]
    castle_bopixbo = info["castle_bopixbo"]
    castle_box_lvl = info["castle_box_lvl"]
    castle_def = info["castle_def"]
    castle_drop_rate = info["castle_drop_rate"]
    castle_food = info["castle_food"]
    castle_foodm = info["castle_foodm"]
    castle_gold = info["castle_gold"]
    castle_goldm = info["castle_goldm"]
    castle_guard = info["castle_guard"]
    castle_key = info["castle_key"]
    castle_inventory = info["castle_inventory"]
    castle_guard_lvl = info["castle_guard_lvl"]
    castle_invv_space = info["castle_invv_space"]
    castle_metal = info["castle_metal"]
    castle_metalm = info["castle_metalm"]
    castle_name = info["castle_name"]
    castle_owner = info["castle_owner"]
    castle_people = info["people"]
    castle_peoplem = info["castle_peoplem"]
    castle_stone = info["castle_stone"]
    castle_rank = round(info["castle_rank"],2)
    castle_exp = info["castle_guild_exp"]
    castle_skexp = info["castle_guild_skexp"]
    castle_stonem = info["castle_stonem"]
    castle_tower_lvl = info["castle_tower_lvl"]
    castle_tower = info["castle_tower"]
    castle_wall_lvl = info["castle_wall_lvl"]
    castle_wall_hp = info["castle_wall_hp"]
    castle_wall_hpmax = info["castle_wall_hpmax"]
    castle_wood = info["castle_wood"]
    castle_woodm = info["castle_woodm"]
    castle_img = info["castle_img"]
    print(castle_img)
    print("castle_army_rock")
    print(castle_army_rock)
    print("castle_army_paper")
    print(castle_army_paper)
    print("castle_army_scissor")
    print(castle_army_scissor)
    castle_army_total = round(castle_army_rock,10) + round(castle_army_paper,10) + round(castle_army_scissor,10)
    castle_guild_army_total = castle_guild_army_rock + castle_guild_army_paper + castle_guild_army_scissor
    ############Wall Health:\n+ {}/{}\n\n  castle_guild_wall_lvl  BoCo ########
    em = discord.Embed(title="Guild Castle", description="```diff\n!===[{}  Stats]===!\n\n Guild Level:\n+ {}\n Attack Level:\n+ {}\n Defence Level:\n+ {}\n Tower Level:\n+ {}\n Guard Level:\n+ {}\n\n!=====[Guild Drop Stats]=====!\n\n BoCo Drop:\n+ {}\n Gold Drop\n+ {}\n Key Drop:\n+ {}\n People Drop:\n+ {}\n Metal Drop:\n+ {}\n Stone Drop:\n+ {}\n Wood Drop:\n+ {}\n ExpDrop:\n+ {}\n SkillExpDrop:\n+ {}\n\n!=====[Guild Open Pocket]=====!\n\n Tower      : {}\n Guard      : {}\n\n People     : {}\n ArmyRock   : {}\n ArmyPaper  : {}\n ArmyScissor: {}\n\n ArmyTotal  : {}\n\n Key        : {}\n Door       : {}\n AntiMater  : {}\n Depts      : {}\n Food       : {}\n Wood       : {}\n Stone      : {}\n Metal      : {}\n Gold       : {}\n BoCo       : {}\n BOPIXBO    : {}\n EXP        : {}\n SkillEXP   : {}\n\n PlayerInn  : {}\n\n```".format(nameGuild, castle_guild_lvl, castle_guild_attack_lvl, castle_guild_defense_lvl, castle_guild_tower_lvl, castle_guild_guard_lvl, castle_guild_drop_boco, castle_guild_drop_gold, castle_guild_drop_key, castle_guild_drop_people, castle_guild_drop_metal, castle_guild_drop_stone, castle_guild_drop_wood, castle_guild_drop_exp, castle_guild_drop_skexp, castle_guild_tower, castle_guild_guard, castle_guild_people, castle_guild_army_rock, castle_guild_army_paper, castle_guild_army_scissor, castle_guild_army_total, castle_key, castle_door, castle_antimat, castle_dept, castle_food, castle_wood, castle_stone, castle_metal, castle_gold, castle_boco, castle_bopixbo, castle_exp, castle_skexp, Player_In), color=0x00ff00)
    em.add_field(name="GuildName", value=nameGuild, inline=False)
    em.add_field(name="CastleOwner", value=castle_owner, inline=False)
    em.add_field(name="Level", value=castle_guild_lvl, inline=True)
    em.add_field(name="Attack", value=castle_guild_attack, inline=True)
    em.add_field(name="Defence", value=castle_guild_defence, inline=True)
    em.add_field(name="Members", value=Player_In, inline=False)
    em.add_field(name="Rank", value=castle_rank, inline=True)
    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(castle_img))
    await ctx.send(embed=em)
    em2 = discord.Embed(description="\n!=====[{}Castle stats]=====!\n```diff\nName: {} \nCastleName: {}\nCastleOwner: {}\nLevel: {} \nWall: {} MAX {} \nAttack: {} \nDefence: {}\nTower: {} \nGuard: {}\nPeople: {} ```\n ```diff\nArmyTotal:{}```\n```diff\nArmyRock:\n {}\nArmyPaper:\n {}\nArmyScissor:\n {} ```\n Castle Pocket:```diff\n\n Food    : {}\n Wood    : {}\n Stone   : {}\n Metal   : {}\n Gold    : {}\n BoCo    : {}\n```".format(info["name"],info["name"], info["name_castle_owner"], info["castle_name"], info["castle_lvl"], castle_wall_hp, castle_wall_hpmax, info["castle_all_attack"], info["castle_all_defence"], info["castle_tower"], info["castle_guard"],balances_amount_PEOPLE, castle_army, balances_amount_ROCK, balances_amount_PAPER, balances_amount_SCISSOR, balances_amount_FOOD, balances_amount_WOOD, balances_amount_STONE, balances_amount_METAL, balances_amount_GOLD, balances_amount_BOCO), color=discord.Color.blue())
    #em2.add_field(name="You did it", value="[This is All Yours](https://ipfs.atomichub.io/ipfs/(castle_img)")
    em2.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(castle_img))
    await ctx.send(embed=em2)
    ##
    ##
    castle_guild_drop_exp = info["castle_guild_drop_exp"] #sklvl
    castle_guild_drop_skexp = info["castle_guild_drop_skexp"]
    castle_guild_drop_people = info["castle_guild_drop_people"] #+ info["people"]
    castle_guild_drop_key = info["castle_guild_drop_key"] #+ info["all_total_base_key"]
    castle_guild_drop_food = info["castle_guild_drop_food"] #+ info["all_total_base_food"]
    castle_guild_drop_wood = info["castle_guild_drop_wood"] #+ info["all_total_base_wood"]
    castle_guild_drop_stone = info["castle_guild_drop_stone"] #+ info["all_total_base_stone"]
    castle_guild_drop_metal = info["castle_guild_drop_metal"] #+ info["all_total_base_metal"]
    castle_guild_drop_gold = info["castle_guild_drop_gold"] #+ info["all_total_base_gold"]
    castle_guild_drop_boco = info["castle_guild_drop_boco"] #+ info["all_total_base_boco"]
    em10 = discord.Embed(title="Guild Drop", description="```diff\n!===[{} Drop Stats]===!\n\n Guild Level:\n+ {} \n SkillLv:\n+ {}\n+ EXPericence:\n+ {}\n+ SkillEXP:\n+ {}\n+ People:\n+ {}\n Key:\n+ {}\n+ Food:\n+ {}\n Wood:\n+ {}\n+ Metal:\n+ {}\n Stone:\n+ {}\n+ BoCo:\n+ {}\n Gold:\n+ {}\n\n```".format(nameGuild, castle_guild_lvl, castle_guild_sklvl, castle_guild_drop_exp, castle_guild_drop_skexp, castle_guild_drop_people, castle_guild_drop_key, castle_guild_drop_food, castle_guild_drop_wood, castle_guild_drop_metal, castle_guild_drop_stone, castle_guild_drop_boco, castle_guild_drop_gold), color=0x00ff00)
    #em11 = discord.Embed(title="Guild Open", description="```diff\n!===[{}  Stats]===!\n\n!=====[Guild Open Pocket]=====!\n\n Tower      : {}\n Guard      : {}\n\n People     : {}\n ArmyRock   : {}\n ArmyPaper  : {}\n ArmyScissor: {}\n\n ArmyTotal  : {}\n\n Key        : {}\n Door       : {}\n AntiMater  : {}\n Depts      : {}\n Food       : {}\n Wood       : {}\n Stone      : {}\n Metal      : {}\n Gold       : {}\n BoCo       : {}\n BOPIXBO    : {}\n EXP        : {}\n SkillEXP   : {}\n\n```".format(nameGuild, castle_guild_lvl, castle_guild_attack_lvl, castle_guild_defense_lvl, castle_guild_tower_lvl, castle_guild_guard_lvl, castle_guild_drop_boco, castle_guild_drop_gold, castle_guild_drop_key, castle_guild_drop_people, castle_guild_drop_metal, castle_guild_drop_stone, castle_guild_drop_wood, castle_guild_drop_exp, castle_guild_drop_skexp), color=0x00ff00)
    em12 = discord.Embed(title="Guild Closed ", description="```diff\n!===[{}  Stats]===!\n\n Guild Level:\n+ {}\n Attack Level:\n+ {}\n Defence Level:\n+ {}\n Tower Level:\n+ {}\n Guard Level:\n+ {}\n\n!=====[Guild Drop Stats]=====!\n\n BoCo Drop:\n+ {}\n Gold Drop\n+ {}\n Key Drop:\n+ {}\n People Drop:\n+ {}\n Metal Drop:\n+ {}\n Stone Drop:\n+ {}\n Wood Drop:\n+ {}\n ExpDrop:\n+ {}\n SkillExpDrop:\n+ {}\n\n!=====[Guild Open Pocket]=====!\n\n Tower      : {}\n Guard      : {}\n\n People     : {}\n ArmyRock   : {}\n ArmyPaper  : {}\n ArmyScissor: {}\n\n ArmyTotal  : {}\n\n Key        : {}\n Door       : {}\n AntiMater  : {}\n Depts      : {}\n Food       : {}\n Wood       : {}\n Stone      : {}\n Metal      : {}\n Gold       : {}\n BoCo       : {}\n BOPIXBO    : {}\n EXP        : {}\n SkillEXP   : {}\n\n PlayerInn  : {}\n\n```".format(nameGuild, castle_guild_lvl, castle_guild_attack_lvl, castle_guild_defense_lvl, castle_guild_tower_lvl, castle_guild_guard_lvl, castle_guild_drop_boco, castle_guild_drop_gold, castle_guild_drop_key, castle_guild_drop_people, castle_guild_drop_metal, castle_guild_drop_stone, castle_guild_drop_wood, castle_guild_drop_exp, castle_guild_drop_skexp, castle_guild_tower, castle_guild_guard, castle_guild_people, castle_guild_army_rock, castle_guild_army_paper, castle_guild_army_scissor, castle_guild_army_total, castle_key, castle_door, castle_antimat, castle_dept, castle_food, castle_wood, castle_stone, castle_metal, castle_gold, castle_boco, castle_bopixbo, castle_exp, castle_skexp, Player_In), color=0x00ff00)
    em13 = discord.Embed(title="Player Castle", description="```diff\n!===[{}  Stats]===!\n\n Guild Level:\n+ {}\n Attack Level:\n+ {}\n Defence Level:\n+ {}\n Tower Level:\n+ {}\n Guard Level:\n+ {}\n\n!=====[Guild Drop Stats]=====!\n\n BoCo Drop:\n+ {}\n Gold Drop\n+ {}\n Key Drop:\n+ {}\n People Drop:\n+ {}\n Metal Drop:\n+ {}\n Stone Drop:\n+ {}\n Wood Drop:\n+ {}\n ExpDrop:\n+ {}\n SkillExpDrop:\n+ {}\n\n!=====[Guild Open Pocket]=====!\n\n Tower      : {}\n Guard      : {}\n\n People     : {}\n ArmyRock   : {}\n ArmyPaper  : {}\n ArmyScissor: {}\n\n ArmyTotal  : {}\n\n Key        : {}\n Door       : {}\n AntiMater  : {}\n Depts      : {}\n Food       : {}\n Wood       : {}\n Stone      : {}\n Metal      : {}\n Gold       : {}\n BoCo       : {}\n BOPIXBO    : {}\n EXP        : {}\n SkillEXP   : {}\n\n PlayerInn  : {}\n\n```".format(nameGuild, info["castle_lvl"], info["castle_all_attack_lvl"], info["castle_all_defence_lvl"], info["castle_tower_lvl"], info["castle_guard_lvl"], info["castle_drop_boco"], info["castle_drop_gold"], info["castle_drop_key"], info["castle_drop_people"], info["castle_metal"], info["castle_drop_stone"], info["castle_drop_wood"], info["castle_guild_drop_exp"], info["castle_drop_skexp"], info["castle_tower"], info["castle_guard"], info["castle_people"], info["castle_army_rock"], info["castle_army_paper"], info["castle_army_scissor"], info["castle_army_total"], info["castle_key"], info["castle_door"], info["castle_antimat"], info["castle_dept"], info["castle_food"], info["castle_wood"], info["castle_stone"], info["castle_metal"], info["castle_gold"], info["castle_boco"], info["castle_bopixbo"], info["castle_guild_exp"], info["castle_guild_skexp"], info["Player_In"]), color=0x00ff00)
    em.add_field(name="GuildName", value=nameGuild, inline=False)
    em.add_field(name="CastleOwner", value=castle_owner, inline=False)
    em.add_field(name="Level", value=castle_guild_lvl, inline=True)
    em.add_field(name="SkillLv", value=castle_guild_sklvl, inline=True)
    em.add_field(name="Attack", value=castle_guild_attack, inline=True)
    em.add_field(name="Defence", value=castle_guild_defence, inline=True)
    em.add_field(name="Members", value=Player_In, inline=False)
    em.add_field(name="Status", value=castle_rank, inline=True)##
    em.add_field(name="GuildNameT", value=nameGuild, inline=False)
    em.add_field(name="CastleOwnerT", value=castle_owner, inline=False)
    em.add_field(name="LevelT", value=castle_guild_lvl, inline=True)
    em.add_field(name="Rank", value=castle_guild_lvl, inline=True)
    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(castle_img))
    #em = discord.Embed(title="Guild Drop", description="```diff\n!===[{} Drop Stats]===!\n\n Guild Level:\n+ {} \n SkillLv:\n+ {}\n+ Attack Level:\n+ {}\n+ Defence Level:\n+ {}\n+ Tower Level:\n+ {}\n Guard Level:\n+
    await ctx.send(embed=em)
    em2 = discord.Embed(description="\n!=====[{}Castle stats]=====!\n```diff\nName: {} \nCastleName: {}\nCastleOwner: {}\nLevel: {} \nWall: {} MAX {} \nAttack: {} \nDefence: {}\nTower: {} \nGuard: {}\nPeople: {} ```\n ```diff\nArmyTotal:{}```\n```diff\nArmyRock:\n {}\nArmyPaper:\n {}\nArmyScissor:\n {} ```\n Castle Pocket:```diff\n\n Food    : {}\n Wood    : {}\n Stone   : {}\n Metal   : {}\n Gold    : {}\n BoCo    : {}\n```".format(info["name"],info["name"], info["name_castle_owner"], info["castle_name"], info["castle_lvl"], castle_wall_hp, castle_wall_hpmax, info["castle_all_attack"], info["castle_all_defence"], info["castle_tower"], info["castle_guard"],balances_amount_PEOPLE, castle_army, balances_amount_ROCK, balances_amount_PAPER, balances_amount_SCISSOR, balances_amount_FOOD, balances_amount_WOOD, balances_amount_STONE, balances_amount_METAL, balances_amount_GOLD, balances_amount_BOCO), color=discord.Color.blue())
    #em2.add_field(name="You did it", value="[This is All Yours](https://ipfs.atomichub.io/ipfs/(castle_img)")
    em2.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(castle_img))
    await ctx.send(embed=em2)
@bot.command(aliases=["global"])
async def globalstats(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    #get_user_age1()
    #get = get_user_age1()
    #print(get)
    try:
        return _ggff_(author.id)
        #get = get_user_age1()
        #print(get)
    except ValueError:
        print("That's not a valid value for your age jo!")
    try:
        get_user_age()
    except ValueError:
        print("That's not a valid value for your age!")
    #print("\n add : ", Add.Add(num1,num2))
    #print(view.add())
    #print(view.sub())
    #print("\n sub : ", Sub.Sub(arg1,arg2))
    #await Check_555_out_1.check_555_out_1(self, ctx)
    #print("\n add : ", add.add(arg1, arg2))
    #print("\n mul : ", _check_555_out())
    #await ctx.send("<@{}> Done {}".format(author.id,Add(arg1, arg2)))
    #await vol18i(ctx)
#class MyCog(bot.cogs):
#    def __init__(self, bot):
 #       self.bot = bot
 #   @bot.command()
 #   def baz(self, ctx):
#        #await ctx.send("something")
#        pass
#bot.add_cog(MyCog(bot))
@bot.command(aliases=["local"])
async def localstats(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_4(ctx)
    await ctx.send("<@{}> Done".format(author.id))
    await vol18i(ctx)
@bot.command(aliases=["stst"])
async def statsstats(ctx):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    ginfo = fileIO("global/info.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_setBoboValue(ctx)
    status_ddos = info["status_ddos"]
    status_confuse = info["status_confuse"]
    status_crack = info["status_crack"]
    status_hide = info["status_hide"]
    status_install = info["status_install"]
    status_install_who = info["status_install_who"]
    status_jump = info["status_jump"]
    status_scan = info["status_scan"]
    status_trap = info["status_trap"]
    zombie_kill_count_total = info["zombie_kill_count_total"]
    cinfo = fileIO("global/info.json".format(author.id), "load")
    castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
    castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
    castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
    castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
    GuildAttacker = info["castle_guild_name"]
    Rock_Castle = cinfo["Rock_Castle"]["castle_guild_lvl"]
    Scissor_Castle = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    Paper_Castle = cinfo["Paper_Castle"]["castle_guild_lvl"]
    print("go CastleCheck")
    em1 = discord.Embed(description="StreetsBOCOBalance", color=discord.Color.green())

    # Iterate over street keys and add fields to the embed
    for street_key, street_value in cinfo.items():
        if street_key.startswith("street_"):
            em1.add_field(name=street_key, value=street_value, inline=True)

    # Add the "jackPot" field to the embed
    em1.add_field(name="jackPot", value=cinfo["streets_pot"], inline=True)

    # Send the embed
    await ctx.send(embed=em1)
    em = discord.Embed(description="STATUS", color=discord.Color.blue())
    status_text = (
        "status_ddos: + {}\n"
        "status_confuse: + {}\n"
        "status_crack: + {}\n"
        "status_hide: + {}\n"
        "status_install: + {}\n"
        "status_jump: + {}\n"
        "status_scan: + {}\n"
        "status_trap: + {}\n"
        "** {} ZOMBIE KILLS **"
    ).format(
        status_ddos, status_confuse, status_crack, status_hide,
        status_install, status_jump, status_scan, status_trap,
        zombie_kill_count_total
    )
    em.description = "```diff\n\n!=====[STATUS]=====!\n\n{}\n```".format(status_text)

    em.add_field(name="Paper_Castle", value=round(Paper_Castle, 3), inline=False)
    em.add_field(name="Scissor_Castle", value=round(Scissor_Castle, 3), inline=False)
    em.add_field(name="Rock_Castle", value=round(Rock_Castle, 3), inline=False)
    em.add_field(name="zombie_kill_count_total", value=info["zombie_kill_count_total"], inline=True)
    em.add_field(name="Your Level", value=info["lvl"], inline=True)

    await ctx.send(embed=em)
    
@bot.command(aliases=["st"])
async def stats(ctx):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    ginfo = fileIO("global/info.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_setBoboValue(ctx)
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    name = ginfo["Rock_Castle"]["name"]
    owner = ginfo["Rock_Castle"]["name"]
    castle_lvl = ginfo["Rock_Castle"]["castle_lvl"]
    Player_In = ginfo["Rock_Castle"]["Player_In"]
    castle_atk = ginfo["Rock_Castle"]["castle_atk"]
    castle_def = ginfo["Rock_Castle"]["castle_def"]
    castle_tower = ginfo["Rock_Castle"]["castle_tower_lvl"]
    castle_guard = ginfo["Rock_Castle"]["castle_guard_lvl"]
    castle_wall = ginfo["Rock_Castle"]["castle_wall_lvl"]
    castle_people = info["people"]
    castle_army = info["castle_army_scissor"] + info["castle_army_paper"] + info["castle_army_rock"]
    castle_food = ginfo["Rock_Castle"]["castle_food"]
    castle_wood = ginfo["Rock_Castle"]["castle_wood"]
    castle_stone = ginfo["Rock_Castle"]["castle_stone"]
    castle_metal = ginfo["Rock_Castle"]["castle_metal"]
    castle_gold = ginfo["Rock_Castle"]["castle_gold"]
    castle_boco = ginfo["Rock_Castle"]["castle_boco"]
    #nameinfo["Wallets"]["Response"]["name_list"][name]["id"] = id
    all_drop_exp = ginfo["Rock_Castle"]["all_drop_exp"]
    all_drop_key = ginfo["Rock_Castle"]["all_drop_key"]
    drop_food = ginfo["Rock_Castle"]["all_drop_food"]
    drop_wood = ginfo["Rock_Castle"]["all_drop_wood"]
    drop_stone = ginfo["Rock_Castle"]["all_drop_stone"]
    drop_metal = ginfo["Rock_Castle"]["all_drop_metal"]
    drop_gold = ginfo["Rock_Castle"]["all_drop_gold"]
    drop_boco = ginfo["Rock_Castle"]["all_drop_boco"]
    if info["health"] < 0:
        info["health"] = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
    sp = info["stamina"]
    mp = info["mana"]
    hp = info["health"]
    attacko = round(info["all_total_base_attack"], 2)
    defenceo = round(info["all_total_base_defence"], 2)
    #attacko = round(attacko, 2)
    #defenceo = round(defenceo, 2)
    #info["all_total_base_attack"] = attacko * info["lvl"]
    #info["all_defence"] = defenceo * info["lvl"]
    all_drop_boco = round(info["all_total_base_boco"], 0)
    all_drop_food = round(info["all_total_base_food"], 0)
    all_drop_wood = round(info["all_total_base_wood"], 0)
    all_drop_metal = round(info["all_total_base_metal"], 0)
    all_drop_stone = round(info["all_total_base_stone"], 0)
    all_drop_gold = round(info["all_total_base_gold"], 0)
    all_drop_key = round(info["all_total_base_key"], 0)
    all_drop_exp = round(info["all_total_base_exp"], 0)
    all_drop_hp = round(info["all_total_base_hp"], 0)
    all_drop_sp = round(info["all_total_base_sp"], 0)
    all_drop_mp = round(info["all_total_base_mp"], 0)
    #info["all_drop_attack"]=attacko
    #info["all_drop_defence"]=defenceo
    #info["all_drop_boco"]=all_drop_boco
    #info["all_drop_food"]=all_drop_food
    #info["all_drop_wood"]=all_drop_wood
    #info["all_drop_metal"]=all_drop_metal
    #info["all_drop_stone"]=all_drop_stone
    #info["all_drop_gold"]=all_drop_gold
    #info["all_drop_key"]=all_drop_key
    #info["all_drop_exp"]=all_drop_exp
    #info["all_drop_hp"]=all_drop_hp
    #info["all_drop_sp"]=all_drop_sp
    #(info["all_drop_mp"]=all_drop_mp
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    bbvalue = info["bbvalue"]
    hp = round(hp, 0)
    healthmax = round(info["healthmax"], 0)
    sp = round(sp, 0)
    staminamax = round(info["staminamax"], 0)
    mp = round(mp, 0)
    manamax = round(info["manamax"], 0)
    cinfo = fileIO("global/info.json".format(author.id), "load")
    castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
    castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
    castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
    castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
    GuildAttacker = info["castle_guild_name"]
    print("go CastleCheck")
    await _check_setCastleValue(ctx)
    print("back")
    print("GuildAttacker")
    print(GuildAttacker)
    if GuildAttacker == "RockCastle":
        print("r")
        #await _check_setCastleValue(ctx)
        #GuildCastleLVl= cinfo["Rock_Castle"]["castle_guild_lvl"]
        castle_guild_lvl = cinfo["Rock_Castle"]["castle_guild_lvl"]
    if GuildAttacker == "ScissorCastle":
        print("s")
        castle_guild_lvl = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    if GuildAttacker == "PaperCastle":
        print("p")
        castle_guild_lvl = cinfo["Paper_Castle"]["castle_guild_lvl"]
    if not GuildAttacker == "PaperCastle" or not GuildAttacker == "RockCastle" or not GuildAttacker == "ScissorCastle" :
        print("nop")
        castle_guild_lvl = 1
    em = discord.Embed(description="Drop Stats and Player Stats", color=discord.Color.blue())
    drop_stats_text = (
        "Attack Drop:\n+ {}\n"
        "Defence Drop:\n+ {}\n\n"
        "BoCo Drop:\n+ {}\n"
        "Food Drop\n+ {}\n"
        "Wood Drop:\n+ {}\n"
        "Metal Drop:\n+ {}\n"
        "Stone Drop:\n+ {}\n"
        "Gold Drop:\n+ {}\n"
        "Key Drop:\n+ {}\n\n"
        "ExpDropX:\n+ {}\n"
        "HP_Drop:\n+ {}\n"
        "SP Drop:\n+ {}\n"
        "MP Drop:\n+ {}\n\n"
        "Player Stats:\n\n"
        "HP:\n+ {} / {}\n"
        "SP:\n+ {} / {}\n"
        "MP:\n+ {} / {}\n\n"
        "Attack:\n+ {}\n"
        "Defence:\n+ {}"
    ).format(
        attacko, defenceo, all_drop_boco, all_drop_food,
        all_drop_wood, all_drop_metal, all_drop_stone, all_drop_gold,
        all_drop_key, all_drop_exp, all_drop_hp, all_drop_sp,
        all_drop_mp, hp, healthmax, sp, staminamax, mp, manamax,
        round(attacko, 2), round(defenceo, 2)
    )
    em.description = "```diff\n\n!=====[Drop Stats]=====!\n\n{}\n```".format(drop_stats_text)

    em.add_field(name="Guild Name", value=info["castle_guild_name"], inline=True)
    em.add_field(name="Guild Level", value=round(castle_guild_lvl, 2), inline=True)
    em.add_field(name="Player Name", value=info["name"], inline=False)
    em.add_field(name="Race", value=info["race"], inline=True)
    em.add_field(name="Level", value=info["lvl"], inline=True)
    em.add_field(name="Status", value=info["status"], inline=False)
    em.add_field(name="Class", value=info["class"], inline=True)
    em.add_field(name="JobLv", value=info["sklvl"], inline=True)
    em.add_field(name="BoboValue", value=info["bbvalue_stats"], inline=True)
    em.add_field(name="Rank", value=info["count_click"], inline=True)
    em.add_field(name="Wallet", value=info["account"], inline=False)
    em.add_field(name="NFTs", value=info["assets"], inline=True)
    em.add_field(name="Zombie Kills", value=info["zombie_kill_count_total"], inline=True)

    await ctx.send(embed=em)
@bot.command(aliases=["sw"])
async def statss(ctx):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #ginfo = fileIO("global/info.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_totalshow(ctx)
    await _check_setBoboValue(ctx)
    all_drop_attack = round(info["all_drop_attack"], 2)
    all_defence = round(info["all_defence"], 2)
    all_drop_defence = round(info["all_drop_defence"], 2)
    all_drop = round(info["all_drop"], 2)
    all_drop_boco = round(info["all_drop_boco"], 2)
    all_drop_exp = round(info["all_drop_exp"], 2)
    all_drop_food = round(info["all_drop_food"], 2)
    all_drop_gold = round(info["all_drop_gold"], 2)
    all_drop_hp = round(info["all_drop_hp"], 2)
    all_drop_key = round(info["all_drop_key"], 2)
    all_drop_metal = round(info["all_drop_metal"], 2)
    all_drop_mp = round(info["all_drop_mp"], 2)
    all_drop_pot = round(info["all_drop_pot"], 2)
    all_drop_skexp = round(info["all_drop_skexp"], 2)
    all_drop_sp = round(info["all_drop_sp"], 2)
    all_drop_stone = round(info["all_drop_stone"], 2)
    all_drop_wood = round(info["all_drop_wood"], 2)
    all_drop_people = round(info["all_drop_people"], 2)
    all_drop_door = round(info["all_drop_door"]  , 2)
    em = discord.Embed(description="Drop Stats", color=discord.Color.blue())
    drop_stats_text = (
        "Attack Drop:\n```diff\n{}\n```\n"
        "Defence Drop:\n```diff\n{}\n```\n"
        "BoCo Drop:\n```diff\n{}\n```\n"
        "Food Drop:\n```diff\n{}\n```\n"
        "Wood Drop:\n```diff\n{}\n```\n"
        "Metal Drop:\n```diff\n{}\n```\n"
        "Stone Drop:\n```diff\n{}\n```\n"
        "Gold Drop:\n```diff\n{}\n```\n"
        "Key Drop:\n```diff\n{}\n```\n"
        "ExpDropX:\n```diff\n{}\n```\n"
        "HP Drop:\n```diff\n{}\n```\n"
        "SP Drop:\n```diff\n{}\n```\n"
        "MP Drop:\n```diff\n{}\n```\n"
    ).format(
        all_drop_attack, all_drop_defence, all_drop_boco, all_drop_food,
        all_drop_wood, all_drop_metal, all_drop_stone, all_drop_gold,
        all_drop_key, all_drop_exp, all_drop_hp, all_drop_sp, all_drop_mp
    )
    em.description = "```diff\n!=====[All Drop]=====!\n\n{}\n```".format(drop_stats_text)

    await ctx.send(embed=em)
    # Drop = weaponStats X BBvalue
    # slot x BBvalue x assets = bpv = bobovalue
    all_base_attack = round(info["all_base_attack"], 2)
    all_base_defence = round(info["all_base_defence"], 2)
    all_base_drop = round(info["all_base_drop"], 2)
    all_base_boco = round(info["all_base_boco"], 2)
    all_base_exp = round(info["all_base_exp"], 2)
    all_base_food = round(info["all_base_food"], 2)
    all_base_gold = round(info["all_base_gold"], 2)
    all_base_hp = round(info["all_base_hp"], 2)
    all_base_key = round(info["all_base_key"], 2)
    all_base_metal = round(info["all_base_metal"], 2)
    all_base_mp = round(info["all_base_mp"], 2)
    all_base_pot = round(info["all_base_pot"], 2)
    all_base_skexp = round(info["all_base_skexp"], 2)
    all_base_sp = round(info["all_base_sp"], 2)
    all_base_stone = round(info["all_base_stone"], 2)
    all_base_people = round(info["all_base_people"], 2)
    all_base_wood = round(info["all_base_wood"]  , 2)
    all_base_door = round(info["all_base_door"]  , 2)
    em = discord.Embed(description="All Base Stats", color=discord.Color.blue())
    all_base_stats_text = (
        "Attack Base:\n```diff\n{}\n```\n"
        "Defence Base:\n```diff\n{}\n```\n"
        "Drop Base:\n```diff\n{}\n```\n"
        "Exp Base:\n```diff\n{}\n```\n"
        "SKexp Base:\n```diff\n{}\n```\n"
        "BoCo Base:\n```diff\n{}\n```\n"
        "Food Base:\n```diff\n{}\n```\n"
        "Gold Base:\n```diff\n{}\n```\n"
        "Metal Base:\n```diff\n{}\n```\n"
        "Stone Base:\n```diff\n{}\n```\n"
        "Wood Base:\n```diff\n{}\n```\n"
        "HP Base:\n```diff\n{}\n```\n"
        "MP Base:\n```diff\n{}\n```\n"
        "SP Base:\n```diff\n{}\n```\n"
        "Pot Base:\n```diff\n{}\n```\n"
        "Key Base:\n```diff\n{}\n```\n"
        "People Base:\n```diff\n{}\n```\n"
        "Door Base:\n```diff\n{}\n```\n"
    ).format(
        all_base_attack, all_base_defence, all_base_drop, all_base_exp,
        all_base_skexp, all_base_boco, all_base_food, all_base_gold,
        all_base_metal, all_base_stone, all_base_wood, all_base_hp,
        all_base_mp, all_base_sp, all_base_pot, all_base_key,
        all_base_people, all_base_door
    )
    em.description = "```diff\n!=====[All Base]=====!\n\n{}\n```".format(all_base_stats_text)

    await ctx.send(embed=em)
    all_attack = round(info["all_total_base_attack"], 2)
    all_total_base_attack = round(info["all_total_base_attack"], 2)
    all_defence = round(info["all_total_base_defence"], 2)
    all_total_base_defence = round(info["all_total_base_defence"], 2)
    all_total_base_drop = round(info["all_total_base_drop"] , 2)
    all_total_base_boco = round(info["all_total_base_boco"] , 2)
    all_total_base_exp = round(info["all_total_base_exp"], 2)
    all_total_base_food = round(info["all_total_base_food"], 2)
    all_total_base_gold = round(info["all_total_base_gold"], 2)
    all_total_base_hp = round(info["all_total_base_hp"], 2)
    all_total_base_key = round(info["all_total_base_key"], 2)
    all_total_base_metal = round(info["all_total_base_metal"], 2)
    all_total_base_mp = round(info["all_total_base_mp"], 2)
    all_total_base_pot = round(info["all_total_base_pot"], 2)
    all_total_base_skexp = round(info["all_total_base_skexp"], 2)
    all_total_base_sp = round(info["all_total_base_sp"], 2)
    all_total_base_stone = round(info["all_total_base_stone"], 2)
    all_total_base_people = round(info["all_total_base_people"], 2)
    all_total_base_wood = round(info["all_total_base_wood"]  , 2)
    all_total_base_door = round(info["all_total_base_door"]  , 2)
    em = discord.Embed(description="All Total Stats", color=discord.Color.blue())
    all_total_stats_text = (
        "Total Attack Base:\n```diff\n{}\n```\n"
        "Total Defence Base:\n```diff\n{}\n```\n"
        "Total Drop Base:\n```diff\n{}\n```\n"
        "Total SKexp Base:\n```diff\n{}\n```\n"
        "Total Exp Base:\n```diff\n{}\n```\n"
        "Total BoCo Base:\n```diff\n{}\n```\n"
        "Total Food Base:\n```diff\n{}\n```\n"
        "Total Gold Base:\n```diff\n{}\n```\n"
        "Total Metal Base:\n```diff\n{}\n```\n"
        "Total Stone Base:\n```diff\n{}\n```\n"
        "Total Wood Base:\n```diff\n{}\n```\n"
        "Total HP Base:\n```diff\n{}\n```\n"
        "Total MP Base:\n```diff\n{}\n```\n"
        "Total SP Base:\n```diff\n{}\n```\n"
        "Total Pot Base:\n```diff\n{}\n```\n"
        "Total Key Base:\n```diff\n{}\n```\n"
        "Total People Base:\n```diff\n{}\n```\n"
        "Total Door Base:\n```diff\n{}\n```\n"
    ).format(
        all_total_base_attack, all_total_base_defence, all_total_base_drop,
        all_total_base_skexp, all_total_base_exp, all_total_base_boco,
        all_total_base_food, all_total_base_gold, all_total_base_metal,
        all_total_base_stone, all_total_base_wood, all_total_base_hp,
        all_total_base_mp, all_total_base_sp, all_total_base_pot,
        all_total_base_key, all_total_base_people, all_total_base_door
    )
    em.description = "```diff\n!=====[All Total]=====!\n\n{}\n```".format(all_total_stats_text)

    await ctx.send(embed=em)
@bot.command(aliases=["sa"])
async def statsall(ctx):
    author = ctx.author
    await _create_user(author)
    #await _check_set1(ctx)
    #await _check_set2(ctx)
    #await _check_levelup(ctx)
    await _check_totalshow(ctx)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_setCalcDroptoTotal(ctx)
    await _check_setBoboValue(ctx)
    attack = round(info["all_drop_attack"], 0) * info["lvl"]
    defence = round(info["all_drop_defence"], 0) * info["lvl"]
    hp = round(info["all_drop_hp"], 0) * info["lvl"]
    mp = round(info["all_drop_mp"], 0) * info["lvl"]
    sp = round(info["all_drop_sp"], 0) * info["lvl"]
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    dropcoincandy = info["bpfreecandy"] + info["bpfreecandylv52"] + info["bpfreecandytwitch3"]
    sponsorccc = info["bpbalcrit"] + info["bpccc"] + info["bpcclassic"] + info["bpcclean"] + info["bpcdirty"] + info["bpcretro"] +info["bpcbwhite"] + info["bpwhite"] + info["bpjacktick"] + info["bpramdonator"]
    bpacks = info["bppacksv1"] + info["bppacksv2"] + info["bppacksv4525"] + info["bppacksv4550"] + info["bppacksv4575"] + info["bppacksv51025"] + info["bppacksv51050"] + info["bppacksv51075"] + info["bppacksv6f"] + info["bppacksv71"] + info["bppacksv710"] + info["bppacksv75"] + info["bppacksv81"] + info["bppacksv825"]
    #all_attack = round(info["all_attack"], 2)
    all_drop_attack = round(info["all_drop_attack"], 2)
    all_defence = round(info["all_defence"], 2)
    all_drop_defence = round(info["all_drop_defence"], 2)
    all_drop = round(info["all_drop"], 2)
    all_drop_boco = round(info["all_drop_boco"], 2)
    all_drop_exp = round(info["all_drop_exp"], 2)
    all_drop_food = round(info["all_drop_food"], 2)
    all_drop_gold = round(info["all_drop_gold"], 2)
    all_drop_hp = round(info["all_drop_hp"], 2)
    all_drop_key = round(info["all_drop_key"], 2)
    all_drop_metal = round(info["all_drop_metal"], 2)
    all_drop_mp = round(info["all_drop_mp"], 2)
    all_drop_pot = round(info["all_drop_pot"], 2)
    all_drop_skexp = round(info["all_drop_skexp"], 2)
    all_drop_sp = round(info["all_drop_sp"], 2)
    all_drop_stone = round(info["all_drop_stone"], 2)
    all_drop_wood = round(info["all_drop_wood"], 2)
    all_drop_people = round(info["all_drop_people"], 2)
    all_drop_door = round(info["all_drop_door"]  , 2)
    em8888 = discord.Embed(description="All Drop Stats", color=discord.Color.blue())
    all_drop_stats_text = (
        "Attack:\n```diff\n{}\n```\n"
        "Defence:\n```diff\n{}\n```\n"
        "All Drop:\n```diff\n{}\n```\n"
        "BoCo:\n```diff\n{}\n```\n"
        "Exp:\n```diff\n{}\n```\n"
        "Food:\n```diff\n{}\n```\n"
        "Gold:\n```diff\n{}\n```\n"
        "HP:\n```diff\n{}\n```\n"
        "Key:\n```diff\n{}\n```\n"
        "Metal:\n```diff\n{}\n```\n"
        "MP:\n```diff\n{}\n```\n"
        "Pot:\n```diff\n{}\n```\n"
        "SKexp:\n```diff\n{}\n```\n"
        "SP:\n```diff\n{}\n```\n"
        "Stone:\n```diff\n{}\n```\n"
        "Wood:\n```diff\n{}\n```\n"
        "People:\n```diff\n{}\n```\n"
        "Door:\n```diff\n{}\n```\n"
    ).format(
        all_drop_attack, all_drop_defence, all_drop, all_drop_boco,
        all_drop_exp, all_drop_food, all_drop_gold, all_drop_hp,
        all_drop_key, all_drop_metal, all_drop_mp, all_drop_pot,
        all_drop_skexp, all_drop_sp, all_drop_stone, all_drop_wood,
        all_drop_people, all_drop_door
    )
    em8888.description = "```diff\n!=====[All Drop]=====!\n\n{}\n```".format(all_drop_stats_text)

    await ctx.send(embed=em8888)
    # Drop = weaponStats X BBvalue
    # slot x BBvalue x assets = bpv = bobovalue
    all_base_attack = round(info["all_base_attack"], 2)
    all_base_defence = round(info["all_base_defence"], 2)
    all_base_drop = round(info["all_base_drop"], 2)
    all_base_boco = round(info["all_base_boco"], 2)
    all_base_exp = round(info["all_base_exp"], 2)
    all_base_food = round(info["all_base_food"], 2)
    all_base_gold = round(info["all_base_gold"], 2)
    all_base_hp = round(info["all_base_hp"], 2)
    all_base_key = round(info["all_base_key"], 2)
    all_base_metal = round(info["all_base_metal"], 2)
    all_base_mp = round(info["all_base_mp"], 2)
    all_base_pot = round(info["all_base_pot"], 2)
    all_base_skexp = round(info["all_base_skexp"], 2)
    all_base_sp = round(info["all_base_sp"], 2)
    all_base_stone = round(info["all_base_stone"], 2)
    all_base_people = round(info["all_base_people"], 2)
    all_base_wood = round(info["all_base_wood"]  , 2)
    all_base_door = round(info["all_base_door"]  , 2)
    em888 = discord.Embed(description="All Base Stats", color=discord.Color.blue())
    all_base_stats_text = (
        "Attack:\n```diff\n{}\n```\n"
        "Defence:\n```diff\n{}\n```\n"
        "Drop:\n```diff\n{}\n```\n"
        "BoCo:\n```diff\n{}\n```\n"
        "Exp:\n```diff\n{}\n```\n"
        "Food:\n```diff\n{}\n```\n"
        "Gold:\n```diff\n{}\n```\n"
        "HP:\n```diff\n{}\n```\n"
        "Key:\n```diff\n{}\n```\n"
        "Metal:\n```diff\n{}\n```\n"
        "MP:\n```diff\n{}\n```\n"
        "Pot:\n```diff\n{}\n```\n"
        "SKexp:\n```diff\n{}\n```\n"
        "SP:\n```diff\n{}\n```\n"
        "Stone:\n```diff\n{}\n```\n"
        "People:\n```diff\n{}\n```\n"
        "Wood:\n```diff\n{}\n```\n"
        "Door:\n```diff\n{}\n```\n"
    ).format(
        all_base_attack, all_base_defence, all_base_drop, all_base_boco,
        all_base_exp, all_base_food, all_base_gold, all_base_hp,
        all_base_key, all_base_metal, all_base_mp, all_base_pot,
        all_base_skexp, all_base_sp, all_base_stone, all_base_people,
        all_base_wood, all_base_door
    )
    em888.description = "```diff\n!=====[All Base]=====!\n\n{}\n```".format(all_base_stats_text)

    await ctx.send(embed=em888)
    all_attack = round(info["all_total_base_attack"], 2)
    all_total_base_attack = round(info["all_total_base_attack"], 2)
    all_defence = round(info["all_total_base_defence"], 2)
    all_total_base_defence = round(info["all_total_base_defence"], 2)
    all_total_base_drop = round(info["all_total_base_drop"] , 2)
    all_total_base_boco = round(info["all_total_base_boco"] , 2)
    all_total_base_exp = round(info["all_total_base_exp"], 2)
    all_total_base_food = round(info["all_total_base_food"], 2)
    all_total_base_gold = round(info["all_total_base_gold"], 2)
    all_total_base_hp = round(info["all_total_base_hp"], 2)
    all_total_base_key = round(info["all_total_base_key"], 2)
    all_total_base_metal = round(info["all_total_base_metal"], 2)
    all_total_base_mp = round(info["all_total_base_mp"], 2)
    all_total_base_pot = round(info["all_total_base_pot"], 2)
    all_total_base_skexp = round(info["all_total_base_skexp"], 2)
    all_total_base_sp = round(info["all_total_base_sp"], 2)
    all_total_base_stone = round(info["all_total_base_stone"], 2)
    all_total_base_people = round(info["all_total_base_people"], 2)
    all_total_base_wood = round(info["all_total_base_wood"]  , 2)
    all_total_base_door = round(info["all_total_base_door"]  , 2)
    em = discord.Embed(description="All Total Stats", color=discord.Color.blue())
    all_total_stats_text = (
        "Attack:\n```diff\n{}\n```\n"
        "Defence:\n```diff\n{}\n```\n"
        "Drop:\n```diff\n{}\n```\n"
        "BoCo:\n```diff\n{}\n```\n"
        "Exp:\n```diff\n{}\n```\n"
        "Food:\n```diff\n{}\n```\n"
        "Gold:\n```diff\n{}\n```\n"
        "HP:\n```diff\n{}\n```\n"
        "Key:\n```diff\n{}\n```\n"
        "Metal:\n```diff\n{}\n```\n"
        "MP:\n```diff\n{}\n```\n"
        "Pot:\n```diff\n{}\n```\n"
        "SKexp:\n```diff\n{}\n```\n"
        "SP:\n```diff\n{}\n```\n"
        "Stone:\n```diff\n{}\n```\n"
        "People:\n```diff\n{}\n```\n"
        "Wood:\n```diff\n{}\n```\n"
        "Door:\n```diff\n{}\n```\n"
    ).format(
        all_total_base_attack, all_total_base_defence, all_total_base_drop,
        all_total_base_boco, all_total_base_exp, all_total_base_food,
        all_total_base_gold, all_total_base_hp, all_total_base_key,
        all_total_base_metal, all_total_base_mp, all_total_base_pot,
        all_total_base_skexp, all_total_base_sp, all_total_base_stone,
        all_total_base_people, all_total_base_wood, all_total_base_door
    )
    em.description = "```diff\n!=====[All Total]=====!\n\n{}\n```".format(all_total_stats_text)

    await ctx.send(embed=em)
    # Total = base X lvl
    aralvl1 = info["castle_boco"]
    aralvl2 = info["castle_metal"]
    aralvl3 = info["castle_gold"]
    aralvl4 = info["castle_stone"]
    aralvl5 = info["castle_wood"]
    aralvl6 = info["castle_food"]
    castle_people = info["people"]
    castle_army_total = info["castle_army_total"]
    count_win = info["castle_count_win"]
    count_lose = info["castle_count_lose"]
    count_played = info["castle_count_played"]
    count_draw = info["castle_count_draw"]
    count_wina = info["count_pvp_win"]
    count_losea = info["count_pvp_lose"]
    count_playeda = info["count_pvp_played"]
    count_drawa = info["count_pvp_draw"]
    count_winb = info["count_win"]
    count_loseb = info["count_lose"]
    count_playedb = info["count_played"]
    count_drawb = info["count_draw"]
    aralvl8 = info["castle_wood"]
    aralvl9 = info["castle_food"]
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    castle_army = info["castle_army_scissor"] + info["castle_army_paper"] + info["castle_army_rock"]
    castle_lvl = info["castle_lvl"]
    castle_guild_lvl = info["castle_guild_lvl"]
    info["castle_army_total"] = castle_army_total
    # ORIGINAL em88 = discord.Embed(description="\n!=====[{}'s Base Castle]=====! \n```diff\n!=====[{} Castle]=====!```\n\n CastleName:\n```diff\n {} ``` CastleOwner:\n```diff\n {} ``` CaslteLevel:\n```diff\n {} ``` PlayerInn:\n```diff\n {} ```\n\n Attacklvl:\n```diff\n {} ``` Defencelvl:\n```diff\n {} ```\n Tower:\n```diff\n {} ``` Towerlvl:\n```diff\n {} ```\n Guard:\n```diff\n {} ``` Guardlvl:\n```diff\n {} ```\n People:\n```diff\n {} ``` ArmyPaper:\n```diff\n {} ``` ArmyRock:\n```diff\n {} ``` ArmyScissor:\n```diff\n {} ```\n\n ArmyTotal:\n```diff\n {} ```\n\n!**==CastleInv==!**\n\n```diff\n {} ```\n\n!=====[{}'s]=====!\n!=====[KillStats]=====!\n !===============!\n\n+Name 	    :\n```diff\n {} ```\n+BaseLv:\n```diff\n {} ```\n+castle_status:\n```diff\n {} ```\n+castle_guild_name:\n```diff\n {} ```\n+Wallet:\n```diff\n {} ```\n+NFTS:\n```diff\n {} ```\n+Class:\n```diff\n {} ```\n+Castlelvl:\n```diff\n {} ```\n\n+CastleType:\n```diff\n {} ```\n+Guildlvl:\n```diff\n {} ```\n\n!==========CvC=========!\n\n! count_win    : {}\n- count_lose   : {}\n= count_played : {}\n# count_draw   : {}\n?\n\n!===================!\n\n!==========PvP=========!\n\n! count_win    : {}\n- count_lose   : {}\n= count_played : {}\n# count_draw   : {}\n?\n\n!===================!\n\n!==========PvM=========!\n\n! count_win    : {}\n- count_lose   : {}\n= count_played : {}\n# count_draw   : {}\n\n!===================! ```".format(info["name"], info["castle_status"], info["castle_name"], info["castle_owner"], info["castle_lvl"], info["Player_In"], info["castle_all_attack_lvl"], info["castle_all_defence_lvl"], info["castle_tower"], info["castle_tower_lvl"], info["castle_guard"], info["castle_guard_lvl"], info["people"], info["castle_army_paper"], info["castle_army_rock"], info["castle_army_scissor"], castle_army, info["castle_inventory"], info["name"],info["name"],info["lvl"], info["castle_status"], info["castle_guild_name"], info["account"], info["assets"], info["class"], castle_lvl, info["castle_guild_name"], castle_guild_lvl, count_win, count_lose, count_played, count_draw, count_wina, count_losea, count_playeda, count_drawa, count_winb, count_loseb, count_playedb, count_drawb), color=discord.Color.blue())
    #await ctx.send(embed=em88)
    em88 = discord.Embed(
        description="\n!=====[{}'s Base Castle]=====! \n```diff\n!=====[{} Castle]=====!```\n\n CastleName:\n```diff\n {} ``` CastleOwner:\n```diff\n {} ``` CaslteLevel:\n```diff\n {} ``` PlayerInn:\n```diff\n {} ```\n\n Attacklvl:\n```diff\n {} ``` Defencelvl:\n```diff\n {} ```\n Tower:\n```diff\n {} ``` Towerlvl:\n```diff\n {} ```\n Guard:\n```diff\n {} ``` Guardlvl:\n```diff\n {} ```\n People:\n```diff\n {} ``` ArmyPaper:\n```diff\n {} ``` ArmyRock:\n```diff\n {} ``` ArmyScissor:\n```diff\n {} ```\n\n ArmyTotal:\n```diff\n {} ```\n\n!**==CastleInv==!**\n\n```diff\n {} ```\n\n!=====[{}'s]=====!\n!=====[KillStats]=====!\n !===============!\n\n+Name     :\n```diff\n {} ```\n+BaseLv:\n```diff\n {} ```\n+castle_status:\n```diff\n {} ```\n+castle_guild_name:\n```diff\n {} ```\n+Wallet:\n```diff\n {} ```\n+NFTS:\n```diff\n {} ```\n+Class:\n```diff\n {} ```\n+Castlelvl:\n```diff\n {} ```\n\n+CastleType:\n```diff\n {} ```\n+Guildlvl:\n```diff\n {} ```\n\n!==========CvC=========!\n\n! count_win    : {}\n- count_lose   : {}\n= count_played : {}\n# count_draw   : {}\n?\n\n!===================!\n\n!==========PvP=========!\n\n! count_win    : {}\n- count_lose   : {}\n= count_played : {}\n# count_draw   : {}\n?\n\n!===================!\n\n!==========PvM=========!\n\n! count_win    : {}\n- count_lose   : {}\n= count_played : {}\n# count_draw   : {}\n\n!===================! ```".format(
            info["name"], info["castle_status"], info["castle_name"], info["castle_owner"], info["castle_lvl"], info["Player_In"], info["castle_all_attack_lvl"], info["castle_all_defence_lvl"], info["castle_tower"], info["castle_tower_lvl"], info["castle_guard"], info["castle_guard_lvl"], info["people"], info["castle_army_paper"], info["castle_army_rock"], info["castle_army_scissor"], castle_army, info["castle_inventory"], info["name"], info["name"], info["lvl"], info["castle_status"], info["castle_guild_name"], info["account"], info["assets"], info["class"], castle_lvl, info["castle_guild_name"], castle_guild_lvl, count_win, count_lose, count_played, count_draw, count_wina, count_losea, count_playeda, count_drawa, count_winb, count_loseb, count_playedb, count_drawb
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em88)
    em2 = discord.Embed(
        description="```diff\n!===== [Equipment] =====!\n\n Slot_0 : {}\n Slot_1 : {}\n SLot_2 : {}\n Slot_3 : {}\n Slot_4 : {}\n Slot_5 : {}\n Slot_6 : {}\n SLot_7 : {}\n Slot_8 : {}\n Slot_9 : {}\n Slot_10: {}\n Slot_11: {}\n SLot_12: {}\n Slot_13: {}\n Slot_14: {}\n Slot_15: {}\n Slot_16: {}\n SLot_17: {}\n Slot_18: {}\n Slot_19: {}\n Slot_20: {}\n Slot_21: {}\n SLot_22: {}\n Slot_23: {}\n Slot_24: {}\n Slot_25: {}```".format(
            info["zslot_0_inventory"], info["zslot_1_inventory"], info["zslot_2_inventory"], info["zslot_3_inventory"], info["zslot_4_inventory"], info["zslot_5_inventory"], info["zslot_6_inventory"], info["zslot_7_inventory"], info["zslot_8_inventory"], info["zslot_9_inventory"], info["zslot_10_inventory"], info["zslot_11_inventory"], info["zslot_12_inventory"], info["zslot_13_inventory"], info["zslot_14_inventory"], info["zslot_15_inventory"], info["zslot_16_inventory"], info["zslot_17_inventory"], info["zslot_18_inventory"], info["zslot_19_inventory"], info["zslot_20_inventory"], info["zslot_21_inventory"], info["zslot_22_inventory"], info["zslot_23_inventory"], info["zslot_24_inventory"], info["zslot_25_inventory"]
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em2)
    em7 = discord.Embed(
        description="```diff\n!=== [BoboValue] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:bp0x0_0:>  : {}\n+ <:bp0x0_1:>  : {}\n+ <:bp0x0_2:>  : {}\n+ <:bp0x0_3:>  : {}\n+ <:bp0x0_4:>  : {}\n+ <:bp0x0_5:>  : {}\n+ <:bp0x0_6:>  : {}\n+ <:bp0x0_7:>  : {}\n+ <:bp0x0_8:>  : {}\n+ <:bp0x0_9:>  : {}\n+ <:bp0x0_10:> : {}\n+ <:bp0x0_11:> : {}\n+ <:bp0x0_12:> : {}\n+ <:bp0x0_13:> : {}\n+ <:bp0x0_14:> : {}\n+ <:bp0x0_15:> : {}\n+ <:bp0x0_16:> : {}\n+ <:bp0x0_17:> : {}\n+ <:bp0x0_18:> : {}\n+ <:bp0x0_19:> : {}\n+ <:bp0x0_20:> : {}\n+ <:bp0x0_21:> : {}\n+ <:bp0x0_22:> : {}\n+ <:bp0x0_23:> : {}\n+ <:bp0x0_24:> : {}\n+ <:bp0x0_25:> : {}\n+ <:FreeCandy:>: {}\n\n Total NFTs   : {} ```".format(
            info["bpv0"], info["bpv1"], info["bpv2"], info["bpv3"], info["bpv4"], info["bpv5"], info["bpv6"], info["bpv7"], info["bpv8"], info["bpv9"], info["bpv10"], info["bpv11"], info["bpv12"], info["bpv13"], info["bpv14"], info["bpv15"], info["bpv16"], info["bpv17"], info["bpv18"], info["bpv19"], info["bpv20"], info["bpv21"], info["bpv22"], info["bpv23"], info["bpv24"], info["bpv25"], info["bpfreecandy"], info["bbvalue_total_stats"], "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em7)
    #em = discord.Embed(description="```diff\n!=== [BoboValue] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:bp0x0_0:>  : {}\n+ <:bp0x0_1:>  : {}\n+ <:bp0x0_2:>  : {}\n+ <:bp0x0_3:>  : {}\n+ <:bp0x0_4:>  : {}\n+ <:bp0x0_5:>  : {}\n+ <:bp0x0_6:>  : {}\n+ <:bp0x0_7:>  : {}\n+ <:bp0x0_8:>  : {}\n+ <:bp0x0_9:>  : {}\n+ <:bp0x0_10:> : {}\n+ <:bp0x0_11:> : {}\n+ <:bp0x0_12:> : {}\n+ <:bp0x0_13:> : {}\n+ <:bp0x0_14:> : {}\n+ <:bp0x0_15:> : {}\n+ <:bp0x0_16:> : {}\n+ <:bp0x0_17:> : {}\n+ <:bp0x0_18:> : {}\n+ <:bp0x0_19:> : {}\n+ <:bp0x0_20:> : {}\n+ <:bp0x0_21:> : {}\n+ <:bp0x0_22:> : {}\n+ <:bp0x0_23:> : {}\n+ <:bp0x0_24:> : {}\n+ <:bp0x0_25:> : {}\n\n Total BoboValue : {} \n ```".format(info["bpf0"], info["bpf1"], info["bpf2"], info["bpf3"], info["bpf4"], info["bpf5"], info["bpf6"], info["bpf7"], info["bpf8"], info["bpf9"], info["bpf10"], info["bpf11"], info["bpf12"], info["bpf13"], info["bpf14"], info["bpf15"], info["bpf16"], info["bpf17"], info["bpf18"], info["bpf19"], info["bpf20"], info["bpf21"], info["bpf22"], info["bpf23"], info["bpf24"], info["bpf25"], info["assets"], "\n".join(info["inventory"])), color=discord.Color.blue())
    #await ctx.send(embed=em)
    em3 = discord.Embed(
        description="\n+ <:BP0X0_0:930385899223679009> X {} X 1\n+ <:BP0X0_1:930386090584600596> X {} X 2\n+ <:BP0X0_2:930413178398060594>  X {} X 4\n+ <:BP0X0_3:930413407230894080> X {} X 8\n+ <:BP0X0_4:930413442525958154> X {} X 16\n+ <:bp0x0_5:930413478596968468> X {} X 32\n+ <:bp0x0_6:930413516161187890> X {} X 64\n+ <:bp0x0_7:930413574894014464> X {} X 128\n+ <:bp0x0_8:930413605759901697> X {} X 256\n+ <:bp0x0_9:930413636533510204> X {} X 512\n+ <:bp0x0_10:930413669018374184> X {} X 1024\n+ <:bp0x0_11:930413701746532352> X {} X 2048\n+ <:bp0x0_12:930413740531273768> X {} X 4096\n+ <:bp0x0_13:930413770520526888> X {} X 8192\n+ <:bp0x0_14:930413883796119552> X {} X 16284\n+ <:bp0x0_15:930413914775240765> X {} X 32768\n- <:bp0x0_16:930413947083980800> 0 {} X 65536\n- <:bp0x0_17:930413992319549460> 0 {} X 131072\n- <:bp0x0_18:930414228257509376> 0 {} X 262144\n- <:bp0x0_19:930414274726199317> 0 {} X 524288\n- <:bp0x0_20:930414311921311764> 0 {} X 1048576\n- <:bp0x0_21:930414346100690955> 0 {} X 2097152\n- <:bp0x0_22:930414378229039124> 0 {} X 4194304\n- <:bp0x0_23:930414471376146472> 0 {} X 8388608\n- <:bp0x0_24:930414504657944597> 0 {} X 16777216\n- <:bp0x0_25:930414534794027028> 0 {} X *33554432*\n\n+ :BoboValue     : {} \n+ :Sponsors        : {} \n+ :DropCoins's : {}\n+ :BPacks               :{}\n\n Total NFTs    : {} \n".format(
            info["bp0"], info["bp1"], info["bp2"], info["bp3"], info["bp4"], info["bp5"], info["bp6"], info["bp7"], info["bp8"], info["bp9"], info["bp10"], info["bp11"], info["bp12"], info["bp13"], info["bp14"], info["bp15"], info["bp16"], info["bp17"], info["bp18"], info["bp19"], info["bp20"], info["bp21"], info["bp22"], info["bp23"], info["bp24"], info["bp25"], info["bbvalue_stats"], sponsorccc, dropcoincandy, bpacks, info["assets"]
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em3)
    totalfakevalue = info["bpf0"]+info["bpf1"]+info["bpf2"]+info["bpf3"]+info["bpf4"]+info["bpf5"]+info["bpf6"]+info["bpf7"]+info["bpf8"]+info["bpf9"]+info["bpf10"]+info["bpf11"]+info["bpf12"]+info["bpf13"]+info["bpf14"]+info["bpf15"]+info["bpf16"]+info["bpf17"]+info["bpf18"]+info["bpf19"]+info["bpf20"]+info["bpf21"]+info["bpf22"]+info["bpf23"]+info["bpf24"]+info["bpf25"]
    em4 = discord.Embed(
        description="```diff\n!========[{}'s Stats **!sw** ]========!\n\n+ CastleName : {}\n+ CastleNFT  : {}\n+ CastleLevel: {}\n+ GuildLevel : {}\n+ Rank       : {}\n+ Race       : {}\n+ Class      : {}\n+ Wallet     : {}\n+ NFTs       : {}\n+ NO NFTS    : {}\n+ BoboValue  : {}\n+ Level      : {}\n+ Exp        : {}\n+ ExpMax     : {}\n+ JobLevel   : {}\n+ JobExp     : {}\n+ JobExpMax  : {}\n+ Attack     : {}\n+ Defence    : {}\n+ Health     : ({}/{})\n+ Stamina    : ({}/{})\n+ Mana       : ({}/{})\n ```".format(
            info["name"],
            info["castle_name"],
            info["castle_owner"],
            info["castle_lvl"],
            info["castle_guild_lvl"],
            info["status"],
            info["race"],
            info["class"],
            info["account"],
            info["assets"],
            totalfakevalue,
            round(info["lvl"], 0),
            round(info["exp"], 0),
            maxexp,
            round(info["sklvl"], 0),
            round(info["skexp"], 0),
            maxskexp,
            attack,
            defence,
            round(info["health"], 0),
            round(info["healthmax"], 0),
            round(info["stamina"], 0),
            round(info["staminamax"], 0),
            round(info["mana"], 0),
            round(info["manamax"], 0)
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em4)
    em5 = discord.Embed(
        description="```diff\n!==== [{}'s Skills] ====!\n {}\n ```\n ```diff\n!==== [OPEN POCKET] ====!\n\n Food:\n+ {}\n Wood:\n+ {}\n Stone:\n+ {}\n Metal:\n+ {}\n Gold:\n+ {}\n BoboCoin:\n+ {}\n Key's :\n+ {}\n ```\n! Inventory !\n ```diff\n {} ```\n\n!====[Closed POCKET]====!\n ```diff\n Food:\n+ {}\n Wood:\n+ {}\n Stone:\n+ {}\n Metal:\n+ {}\n Gold:\n+ {}\n BoboCoin:\n+ {}\n Key's :\n+ {}\n ```\n! CastleInv !\n ```diff\n {} ```\n\n```diff\n!===== [Pot] =====!\n+ smallPot   : {}\n+ MediumPot  : {}\n+ BIGPOT     : {}\n+ SpeedPot   : {}\n+ AmnesiaPot : {}\n+ WindPot    : {}\n+ WaterPot   : {}\n+ FirePot    : {}\n+ EarthPot   : {}\n\n!===== [Bag] =====!\n+ Food Bag   : {}\n+ Wood Bag   : {}\n+ Stone Bag  : {}\n+ Metal Bag  : {}\n+ Gold Bag   : {} \n+ BoCo Bag   : {} \n+ Key Bag    : {}\n```".format(
            info["name"],
            info["skills_learned"],
            round(info["food"], 0),
            round(info["wood"], 0),
            round(info["stone"], 0),
            round(info["metal"], 0),
            round(info["gold"], 0),
            round(info["boco"], 0),
            round(info["key"], 0),
            "\n ".join(info["all_inventory"]),
            info["castle_food"],
            info["castle_wood"],
            info["castle_stone"],
            info["castle_metal"],
            info["castle_gold"],
            info["castle_boco"],
            info["castle_key"],
            "\n ".join(info["castle_inventory"]),
            info["smallpot"],
            info["mediumpot"],
            info["bigpot"],
            info["speedpot"],
            info["amnesiapot"],
            info["ammo_wind_pot"],
            info["ammo_water_pot"],
            info["ammo_fire_pot"],
            info["ammo_earth_pot"],
            info["bag_food"],
            info["bag_wood"],
            info["bag_stone"],
            info["bag_metal"],
            info["bag_gold"],
            info["bag_boco"],
            info["bag_key"]
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em5)
    return
@bot.command(aliases=["bpinv"])
async def bp0x0inv(ctx):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_setBoboValue(ctx)
    em = discord.Embed(
        description="```diff\n!===== [Equipment] =====!\n\n* Slot_0: {}\n* Slot_1: {}\n* Slot_2: {}\n* Slot_3: {}\n* Slot_4: {}\n* Slot_5: {}\n* Slot_6: {}\n* Slot_7: {}\n* Slot_8: {}\n* Slot_9: {}\n* Slot_10: {}\n* Slot_11: {}\n* Slot_12: {}\n* Slot_13: {}\n* Slot_14: {}\n* Slot_15: {}\n* Slot_16: {}\n* Slot_17: {}\n* Slot_18: {}\n* Slot_19: {}\n* Slot_20: {}\n* Slot_21: {}\n* Slot_22: {}\n* Slot_23: {}\n* Slot_24: {}\n* Slot_25: {}```".format(
            info["zslot0_equip"],
            info["zslot1_equip"],
            info["zslot_2_inventory"],
            info["zslot3_equip"],
            info["zslot_4_inventory"],
            info["zslot5_equip"],
            info["zslot_6_inventory"],
            info["zslot7_equip"],
            info["zslot_8_inventory"],
            info["zslot9_equip"],
            info["zslot_10_inventory"],
            info["zslot11_equip"],
            info["zslot_12_inventory"],
            info["zslot13_equip"],
            info["zslot_14_inventory"],
            info["zslot15_equip"],
            info["zslot_16_inventory"],
            info["zslot17_equip"],
            info["zslot_18_inventory"],
            info["zslot19_equip"],
            info["zslot_20_inventory"],
            info["zslot21_equip"],
            info["zslot_22_inventory"],
            info["zslot23_equip"],
            info["zslot_24_inventory"],
            info["zslot25_equip"]
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em)
    em = discord.Embed(
        description="```diff\n!=== [Assets] ===!\n!=== [BoboPixel0x0NFTS] ===!\n\n+ <:bp0x0_0:>  : {}\n+ <:bp0x0_1:>  : {}\n+ <:bp0x0_2:>  : {}\n+ <:bp0x0_3:>  : {}\n+ <:bp0x0_4:>  : {}\n+ <:bp0x0_5:>  : {}\n+ <:bp0x0_6:>  : {}\n+ <:bp0x0_7:>  : {}\n+ <:bp0x0_8:>  : {}\n+ <:bp0x0_9:>  : {}\n+ <:bp0x0_10:> : {}\n+ <:bp0x0_11:> : {}\n+ <:bp0x0_12:> : {}\n+ <:bp0x0_13:> : {}\n+ <:bp0x0_14:> : {}\n+ <:bp0x0_15:> : {}\n+ <:bp0x0_16:> : {}\n+ <:bp0x0_17:> : {}\n+ <:bp0x0_18:> : {}\n+ <:bp0x0_19:> : {}\n+ <:bp0x0_20:> : {}\n+ <:bp0x0_21:> : {}\n+ <:bp0x0_22:> : {}\n+ <:bp0x0_23:> : {}\n+ <:bp0x0_24:> : {}\n+ <:bp0x0_25:> : {}\n+ :FreeCandy: : {}\n\n Total NFTs : {} \n```".format(
            info["bp0"],
            info["bp1"],
            info["bp2"],
            info["bp3"],
            info["bp4"],
            info["bp5"],
            info["bp6"],
            info["bp7"],
            info["bp8"],
            info["bp9"],
            info["bp10"],
            info["bp11"],
            info["bp12"],
            info["bp13"],
            info["bp14"],
            info["bp15"],
            info["bp16"],
            info["bp17"],
            info["bp18"],
            info["bp19"],
            info["bp20"],
            info["bp21"],
            info["bp22"],
            info["bp23"],
            info["bp24"],
            info["bp25"],
            info["bpfreecandy"],
            info["assets"],
            "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em)
    em5 = discord.Embed(
        description="```diff\n!=== [BoboValue1x1] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:bp0x0_0:>  : {}\n+ <:bp0x0_1:>  : {}\n+ <:bp0x0_2:>  : {}\n+ <:bp0x0_3:>  : {}\n+ <:bp0x0_4:>  : {}\n+ <:bp0x0_5:>  : {}\n+ <:bp0x0_6:>  : {}\n+ <:bp0x0_7:>  : {}\n+ <:bp0x0_8:>  : {}\n+ <:bp0x0_9:>  : {}\n+ <:bp0x0_10:> : {}\n+ <:bp0x0_11:> : {}\n+ <:bp0x0_12:> : {}\n+ <:bp0x0_13:> : {}\n+ <:bp0x0_14:> : {}\n+ <:bp0x0_15:> : {}\n+ <:bp0x0_16:> : {}\n+ <:bp0x0_17:> : {}\n+ <:bp0x0_18:> : {}\n+ <:bp0x0_19:> : {}\n+ <:bp0x0_20:> : {}\n+ <:bp0x0_21:> : {}\n+ <:bp0x0_22:> : {}\n+ <:bp0x0_23:> : {}\n+ <:bp0x0_24:> : {}\n+ <:bp0x0_25:> : {}\n\n Total FakeNFTs   : {} ```".format(
            info["bpf0"],
            info["bpf1"],
            info["bpf2"],
            info["bpf3"],
            info["bpf4"],
            info["bpf5"],
            info["bpf6"],
            info["bpf7"],
            info["bpf8"],
            info["bpf9"],
            info["bpf10"],
            info["bpf11"],
            info["bpf12"],
            info["bpf13"],
            info["bpf14"],
            info["bpf15"],
            info["bpf16"],
            info["bpf17"],
            info["bpf18"],
            info["bpf19"],
            info["bpf20"],
            info["bpf21"],
            info["bpf22"],
            info["bpf23"],
            info["bpf24"],
            info["bpf25"],
            info["bbvaluef"],
            "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em5)

    totalfakevalue = info["bpf0"]+info["bpf1"]+info["bpf2"]+info["bpf3"]+info["bpf4"]+info["bpf5"]+info["bpf6"]+info["bpf7"]+info["bpf8"]+info["bpf9"]+info["bpf10"]+info["bpf11"]+info["bpf12"]+info["bpf13"]+info["bpf14"]+info["bpf15"]+info["bpf16"]+info["bpf17"]+info["bpf18"]+info["bpf19"]+info["bpf20"]+info["bpf21"]+info["bpf22"]+info["bpf23"]+info["bpf24"]+info["bpf25"]
    em45 = discord.Embed(
        description="```diff\n!=== [BoboPixel1x1Value] ===!\n\n+ <:1x1_0:>  : {} x1 ={}\n+ <:1x1_1:>  : {} x2 ={}\n+ <:1x1_2:>  : {} x4 ={}\n+ <:1x1_3:>  : {} x8 ={}\n+ <:1x1_4:>  : {} x16 ={}\n+ <:1x1_5:>  : {} x32 ={}\n+ <:1x1_6:>  : {} x64 ={}\n+ <:1x1_7:>  : {} x128 ={}\n+ <:1x1_8:>  : {} x256 ={}\n+ <:1x1_9:>  : {} x512 ={}\n+ <:1x1_10:> : {} x1024 ={}\n+ <:1x1_11:> : {} x2048 ={}\n+ <:1x1_12:> : {} x4096 ={}\n+ <:1x1_13:> : {} x8196 ={}\n+ <:1x1_14:> : {} x16k ={}\n+ <:1x1_15:> : {} x32k ={}\n+ <:1x1_16:> : {} x65k ={}\n+ <:1x1_17:> : {} x131k ={}\n+ <:1x1_18:> : {} x262k ={}\n+ <:1x1_19:> : {} x524k ={}\n+ <:1x1_20:> : {} x1M ={}\n+ <:1x1_21:> : {} x2M ={}\n+ <:1x1_22:> : {} x4M ={}\n+ <:1x1_23:> : {} x8M ={}\n+ <:1x1_24:> : {} x16M ={}\n+ <:1x1_25:> : {} x33M ={}\n\n Total BoboValue1x1   : {}\n Total BoboPixel1x1   : {} ```".format(
            round(info["bpf0"], 0),
            info["bpvf0"],
            round(info["bpf1"], 0),
            info["bpvf1"],
            round(info["bpf2"], 0),
            info["bpvf2"],
            round(info["bpf3"], 0),
            info["bpvf3"],
            round(info["bpf4"], 0),
            info["bpvf4"],
            round(info["bpf5"], 0),
            info["bpvf5"],
            round(info["bpf6"], 0),
            info["bpvf6"],
            round(info["bpf7"], 0),
            info["bpvf7"],
            round(info["bpf8"], 0),
            info["bpvf8"],
            round(info["bpf9"], 0),
            info["bpvf9"],
            round(info["bpf10"], 0),
            info["bpvf10"],
            round(info["bpf11"], 0),
            info["bpvf11"],
            round(info["bpf12"], 0),
            info["bpvf12"],
            round(info["bpf13"], 0),
            info["bpvf13"],
            round(info["bpf14"], 0),
            info["bpvf14"],
            round(info["bpf15"], 0),
            info["bpvf15"],
            round(info["bpf16"], 0),
            info["bpvf16"],
            round(info["bpf17"], 0),
            info["bpvf17"],
            round(info["bpf18"], 0),
            info["bpvf18"],
            round(info["bpf19"], 0),
            info["bpvf19"],
            round(info["bpf20"], 0),
            info["bpvf20"],
            round(info["bpf21"], 0),
            info["bpvf21"],
            round(info["bpf22"], 0),
            info["bpvf22"],
            round(info["bpf23"], 0),
            info["bpvf23"],
            round(info["bpf24"], 0),
            info["bpvf24"],
            round(info["bpf25"], 0),
            info["bpvf25"],
            info["bbvaluef"],
            totalfakevalue,
            "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em45)
    em56 = discord.Embed(
        description="```diff\n!=== [BoboValue0x0] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:bp0x0_0:>  : {}\n+ <:bp0x0_1:>  : {}\n+ <:bp0x0_2:>  : {}\n+ <:bp0x0_3:>  : {}\n+ <:bp0x0_4:>  : {}\n+ <:bp0x0_5:>  : {}\n+ <:bp0x0_6:>  : {}\n+ <:bp0x0_7:>  : {}\n+ <:bp0x0_8:>  : {}\n+ <:bp0x0_9:>  : {}\n+ <:bp0x0_10:> : {}\n+ <:bp0x0_11:> : {}\n+ <:bp0x0_12:> : {}\n+ <:bp0x0_13:> : {}\n+ <:bp0x0_14:> : {}\n+ <:bp0x0_15:> : {}\n+ <:bp0x0_16:> : {}\n+ <:bp0x0_17:> : {}\n+ <:bp0x0_18:> : {}\n+ <:bp0x0_19:> : {}\n+ <:bp0x0_20:> : {}\n+ <:bp0x0_21:> : {}\n+ <:bp0x0_22:> : {}\n+ <:bp0x0_23:> : {}\n+ <:bp0x0_24:> : {}\n+ <:bp0x0_25:> : {}\n+ <:FreeCandy:> : {}\n\n Total BoboValue : {}\n```".format(
            info["bpv0"],
            info["bpv1"],
            info["bpv2"],
            info["bpv3"],
            info["bpv4"],
            info["bpv5"],
            info["bpv6"],
            info["bpv7"],
            info["bpv8"],
            info["bpv9"],
            info["bpv10"],
            info["bpv11"],
            info["bpv12"],
            info["bpv13"],
            info["bpv14"],
            info["bpv15"],
            info["bpv16"],
            info["bpv17"],
            info["bpv18"],
            info["bpv19"],
            info["bpv20"],
            info["bpv21"],
            info["bpv22"],
            info["bpv23"],
            info["bpv24"],
            info["bpv25"],
            info["bpfreecandy"],
            info["bbvalue_total_stats"],
            "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em56)
    totalrealvalue = info["bpv0"]+info["bpv1"]+info["bpv2"]+info["bpv3"]+info["bpv4"]+info["bpv5"]+info["bpv6"]+info["bpv7"]+info["bpv8"]+info["bpv9"]+info["bpv10"]+info["bpv11"]+info["bpv12"]+info["bpv13"]+info["bpv14"]+info["bpv15"]+info["bpv16"]+info["bpv17"]+info["bpv18"]+info["bpv19"]+info["bpv20"]+info["bpv21"]+info["bpv22"]+info["bpv23"]+info["bpv24"]+info["bpv25"]
    totalfakevalue = info["bpf0"]+info["bpf1"]+info["bpf2"]+info["bpf3"]+info["bpf4"]+info["bpf5"]+info["bpf6"]+info["bpf7"]+info["bpf8"]+info["bpf9"]+info["bpf10"]+info["bpf11"]+info["bpf12"]+info["bpf13"]+info["bpf14"]+info["bpf15"]+info["bpf16"]+info["bpf17"]+info["bpf18"]+info["bpf19"]+info["bpf20"]+info["bpf21"]+info["bpf22"]+info["bpf23"]+info["bpf24"]+info["bpf25"]
    dropcoincandy = info["bpfreecandy"] + info["bpfreecandylv52"] + info["bpfreecandytwitch3"]
    sponsorccc = info["bpbalcrit"] + info["bpccc"] + info["bpcclassic"] + info["bpcclean"] + info["bpcdirty"] + info["bpcretro"]+ info["bpcbwhite"] + info["bpwhite"] + info["bpjacktick"] + info["bpramdonator"]
    bpacks = info["bppacksv1"] + info["bppacksv2"] + info["bppacksv4525"] + info["bppacksv4550"] + info["bppacksv4575"] + info["bppacksv51025"] + info["bppacksv51050"] + info["bppacksv51075"] + info["bppacksv6f"] + info["bppacksv71"] + info["bppacksv710"] + info["bppacksv75"] + info["bppacksv81"] + info["bppacksv825"]
    em3333 = discord.Embed(
        description="\n+ <:BP0X0_0:930385899223679009> X {} X 1\n+ <:BP0X0_1:930386090584600596> X {} X 2\n+ <:BP0X0_2:930413178398060594>  X {} X 4\n+ <:BP0X0_3:930413407230894080> X {} X 8\n+ <:BP0X0_4:930413442525958154> X {} X 16\n+ <:bp0x0_5:930413478596968468> X {} X 32\n+ <:bp0x0_6:930413516161187890> X {} X 64\n+ <:bp0x0_7:930413574894014464> X {} X 128\n+ <:bp0x0_8:930413605759901697> X {} X 256\n+ <:bp0x0_9:930413636533510204> X {} X 512\n+ <:bp0x0_10:930413669018374184> X {} X 1024\n+ <:bp0x0_11:930413701746532352> X {} X 2048\n+ <:bp0x0_12:930413740531273768> X {} X 4096\n+ <:bp0x0_13:930413770520526888> X {} X 8192\n+ <:bp0x0_14:930413883796119552> X {} X 16284\n+ <:bp0x0_15:930413914775240765> X {} X 32768\n- <:bp0x0_16:930413947083980800> X {} X 65536\n- <:bp0x0_17:930413992319549460> X {} X 131072\n- <:bp0x0_18:930414228257509376> X {} X 262144\n- <:bp0x0_19:930414274726199317> X {} X 524288\n- <:bp0x0_20:930414311921311764> X {} X 1048576\n- <:bp0x0_21:930414346100690955> X {} X 2097152\n- <:bp0x0_22:930414378229039124> X {} X 4194304\n- <:bp0x0_23:930414471376146472> X {} X 8388608\n- <:bp0x0_24:930414504657944597> X {} X 16777216\n- <:bp0x0_25:930414534794027028> 0 {} X *33554432*\n\n+ ```{}c++``` <:cpp_p:964511717772128267> X {} NFT\n BoboValue {} \n+ ```{}free``` <:freecandy_f:964515187329757235> / {} =(-t)ime   \n\n :BPacks           :{}\n\n :BoboValue    : {} \n Total NFTs : {} \n\n```{}b```\n Total 1x1 FTs : {}\n :BoboValue    : {} \n Total Clicks : {} \n".format(
            info["bp0"],
            info["bp1"],
            info["bp2"],
            info["bp3"],
            info["bp4"],
            info["bp5"],
            info["bp6"],
            info["bp7"],
            info["bp8"],
            info["bp9"],
            info["bp10"],
            info["bp11"],
            info["bp12"],
            info["bp13"],
            info["bp14"],
            info["bp15"],
            info["bp16"],
            info["bp17"],
            info["bp18"],
            info["bp19"],
            info["bp20"],
            info["bp21"],
            info["bp22"],
            info["bp23"],
            info["bp24"],
            info["bp25"],
            Prefix,
            sponsorccc,
            info["bpcccValue"],
            Prefix,
            dropcoincandy,
            bpacks,
            info["bbvalue_total_stats"],
            info["assets"],
            Prefix,
            totalfakevalue,
            info["bbvaluef"],
            info["count_click"]
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em3333)
    ccccheck = info["check_ccc"]
    print("ccccheck")
    print(ccccheck)
    if ccccheck >= 1:
        cccValue = info["bpccc"] * 6
        ccdirtyV = info["bpcdirty"] * 24
        ccClasic = info["bpcclassic"] * 96
        ccclean = info["bpcclean"] * 384
        ccccbw = info["bpcbwhite"] * 1536
        cccwhit = info["bpwhite"] * 6144
        cccretro = info["bpcretro"] * 24576
        cccticket = info["bpjacktick"] * 1
        totalBOBOvalue = cccValue + ccdirtyV + ccClasic + ccclean + ccccbw + cccwhit + cccretro + cccticket
        totalrealvalue1 = info["bpccc"] + info["bpcdirty"] + info["bpcclassic"] + info["bpcclean"] + info["bpcbwhite"] + info["bpwhite"] + info["bpcretro"] + info["bpjacktick"]
        info["bpcccValue"] = totalBOBOvalue
        em10 = discord.Embed(
            description="```diff\n!=== [Assets] ===!\n!=== [BoboPixel0x0NFTS\n C++Coin] ===!\n\n+ <:bp0x0_212:>  : {} = {}\n+ <:bp0x0_213:>  : {} = {}\n+ <:bp0x0_214:>  : {} = {}\n+ <:bp0x0_215:>  : {} = {}\n+ <:bp0x0_216:>  : {} = {}\n+ <:bp0x0_217:>  : {} = {}\n+ <:bp0x0_218:>  : {} = {}\n+ <:bp0x0_219:>  : {} = {}\n\n Total C++ NFTs : {} \n Total BoboValue : {}\n ```".format(
                info["bpccc"],
                cccValue,
                info["bpcdirty"],
                ccdirtyV,
                info["bpcclassic"],
                ccClasic,
                info["bpcclean"],
                ccclean,
                info["bpcbwhite"],
                ccccbw,
                info["bpwhite"],
                cccwhit,
                info["bpcretro"],
                cccretro,
                info["bpjacktick"],
                cccticket,
                totalrealvalue1,
                totalBOBOvalue
            ),
            color=discord.Color.blue()
        )
        await ctx.send(embed=em10)
        fileIO("players/{}/info.json".format(author.id), "save", info)
    em = discord.Embed(
        description="```diff\n!=== [Assets] ===!\n!=== [BoboPixel0x0NFTS\n C++Coin] ===!\n\n+ <:bp0x0_26:>  : {} = {}\n+ <:bp0x0_27:>  : {} = {}\n+ <:bp0x0_28:>  : {} = {}\n+ <:bp0x0_29:>  : {} = {}\n+ <:bp0x0_30:>  : {} = {}\n+ <:bp0x0_31:>  : {} = {}\n+ <:bp0x0_32:>  : {} = {}\n+ <:bp0x0_34:>  : {} = {}\n+ <:bp0x0_35:>  : {} = {}\n+ <:bp0x0_36:>  : {} = {}\n+ <:bp0x0_37:> : {} = {}\n+ <:bp0x0_38:> : {} = {}\n\n Total NFTs : {} \n Total BoboValue : {}\n ```".format(
            info["bp0"],
            info["bpv0"],
            info["bp1"],
            info["bpv1"],
            info["bp2"],
            info["bpv2"],
            info["bp3"],
            info["bpv3"],
            info["bp4"],
            info["bpv4"],
            info["bp5"],
            info["bpv5"],
            info["bp6"],
            info["bpv6"],
            info["bp7"],
            info["bpv7"],
            info["bp8"],
            info["bpv8"],
            info["bp9"],
            info["bpv9"],
            info["bp10"],
            info["bpv10"],
            info["bp11"],
            info["bpv11"],
            info["bp12"],
            info["bpv12"],
            info["bp13"],
            info["bpv13"],
            info["bp14"],
            info["bpv14"],
            info["bp15"],
            info["bpv15"],
            info["bp16"],
            info["bpv16"],
            info["bp17"],
            info["bpv17"],
            info["bp18"],
            info["bpv18"],
            info["bp19"],
            info["bpv19"],
            info["bp20"],
            info["bpv20"],
            info["bp21"],
            info["bpv21"],
            info["bp22"],
            info["bpv22"],
            info["bp23"],
            info["bpv23"],
            info["bp24"],
            info["bpv24"],
            info["bp25"],
            info["bpv25"],
            info["bpfreecandy"],
            info["assets"],
            totalrealvalue,
            "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )
    await ctx.send(embed=em)
    return
@bot.command(aliases=["skih"])
async def skillinvhelp(ctx):
    prefix = "!"  # Replace with your desired prefix
    em = discord.Embed(
        title="Skill Inventory Help",
        description=f"**Usage:** `{prefix}skillinv <slot_num>`",
        color=discord.Color.blue()
    )
    em.add_field(
        name="Description:",
        value="Equip a skill from your skill inventory to a specific slot.",
        inline=False
    )
    em.add_field(
        name="Note:",
        value="This command is case-sensitive and requires a valid slot number.",
        inline=False
    )
    em.add_field(
        name="Examples:",
        value=f"`{prefix}skillinv 0` - Equip a skill to slot 0\n"
              f"`{prefix}skillinv 1` - Equip a skill to slot 1\n"
              f"`{prefix}skillinv 2` - Equip a skill to slot 2\n"
              f"`{prefix}skillinv 3` - Equip a skill to slot 3",
        inline=False
    )
    await ctx.send(embed=em)
@bot.command(aliases=["ski"])
async def skillinv(ctx, num=None):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    skillname = fileIO("core/enemies/skills.json", "load")

    # Check if the user has started their character
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return

    inv_list = [i for i in info["skill_inventory"]]
    equip0 = info["equip_skills0"]
    equip1 = info["equip_skills1"]
    equip2 = info["equip_skills2"]
    equip3 = info["equip_skills3"]

    if len(inv_list) == 0:
        em = discord.Embed(description="```diff\n- You don't have anything else to equip!\n- USE COMMAND !help <command>```", color=discord.Color.red())
        await ctx.send(embed=em)
        return

        if num == "0" :
            choices.append(inv_list)
            em = discord.Embed(description="```diff\n- Note\n+ This is Uppercase and Lowercase Sensitive.\n\n+ In your Skill Inventory is...\n\n{}\n\n+ You Put in Slot_{}?\n\n You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n```".format("\n".join(map(str, inv_list)), num, equip0, equip1, equip2, equip3), color=discord.Color.blue())
            await ctx.send(embed=em)
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in inv_list:
                em = discord.Embed(description="```diff\n+ You equip the {}!```".format(answer1.content), color=discord.Color.blue())
                await ctx.send(embed=em)
                if equip0 == []:
                    info["equip_skills0"] = answer1.content
                    info["skills_learned"].append(answer1.content)
                    info["skill_inventory"].remove(answer1.content)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                else:
                    forget = info["equip_skills0"]
                    info["skill_inventory"].append(info["equip_skills0"])
                    info["equip_skills0"] = "None"
                    info["equip_skills0"] = answer1.content
                    info["skill_inventory"].remove(answer1.content)
                    info["skills_learned"].append(answer1.content)
                    info["skills_learned"].remove(forget)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            else:
                await ctx.send("<@{}> please choose a valid ITEM NAME next time.".format(author.id))
                await ctx.send("BoB Out")
                return
        #else:
        elif num == "1":
            choices.append(inv_list)
            em = discord.Embed(description="```diff\n- Note\n+ This is Uppercase and Lowercase Sensitive.\n\n+ In your Skill Inventory is...\n\n{}\n\n+ You Put in Slot_{}?\n\n You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n```".format("\n".join(map(str, inv_list)), num, equip0, equip1, equip2, equip3), color=discord.Color.blue())
            await ctx.send(embed=em)
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in inv_list :
                em = discord.Embed(description="```diff\n+ You equip the {}!```".format(answer1.content), color=discord.Color.blue())
                await ctx.send(embed=em)
                if equip1 == []:
                    info["equip_skills1"] = answer1.content
                    info["skills_learned"].append(answer1.content)
                    info["skill_inventory"].remove(answer1.content)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                else:
                    forget = info["equip_skills1"]
                    info["skill_inventory"].append(info["equip_skills1"])
                    info["equip_skills1"] = "None"
                    info["equip_skills1"] = answer1.content
                    info["skill_inventory"].remove(answer1.content)
                    info["skills_learned"].append(answer1.content)
                    info["skills_learned"].remove(forget)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            else:
                await ctx.send("<@{}> please choose a valid item next time.\n Or cheack your inventory !inv \n".format(author.id))
        elif num == "2":
            choices.append(inv_list)
            em = discord.Embed(description="```diff\n- Note\n+ This is Uppercase and Lowercase Sensitive.\n\n+ In your Skill Inventory is...\n\n{}\n\n+ You Put in Slot_{}?\n\n You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n```".format("\n".join(map(str, inv_list)), num, equip0, equip1, equip2, equip3), color=discord.Color.blue())
            await ctx.send(embed=em)
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in inv_list :
                em = discord.Embed(description="```diff\n+ You equip the {}!```".format(answer1.content), color=discord.Color.blue())
                await ctx.send(embed=em)
                if equip2 == []:
                    info["equip_skills2"] = answer1.content
                    info["skills_learned"].append(answer1.content)
                    info["skill_inventory"].remove(answer1.content)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                else:
                    forget = info["equip_skills2"]
                    info["skill_inventory"].append(info["equip_skills2"])
                    info["equip_skills2"] = "None"
                    info["equip_skills2"] = answer1.content
                    info["skill_inventory"].remove(answer1.content)
                    info["skills_learned"].append(answer1.content)
                    info["skills_learned"].remove(forget)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            else:
                await ctx.send("<@{}> please choose a valid item next time.\n Or cheack your inventory !inv \n".format(author.id))
        elif num == "3":
            choices.append(inv_list)
            em = discord.Embed(description="```diff\n- Note\n+ This is Uppercase and Lowercase Sensitive.\n\n+ In your Skill Inventory is...\n\n{}\n\n+ You Put in Slot_{}?\n\n You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n```".format("\n".join(map(str, inv_list)), num, equip0, equip1, equip2, equip3), color=discord.Color.blue())
            await ctx.send(embed=em)
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in inv_list :
                em = discord.Embed(description="```diff\n+ You equip the {}!```".format(answer1.content), color=discord.Color.blue())
                await ctx.send(embed=em)
                if equip3 == []:
                    info["equip_skills3"] = answer1.content
                    info["skills_learned"].append(answer1.content)
                    info["skill_inventory"].remove(answer1.content)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                else:
                    forget = info["equip_skills3"]
                    info["skill_inventory"].append(info["equip_skills3"])
                    info["equip_skills3"] = "None"
                    info["equip_skills3"] = answer1.content
                    info["skill_inventory"].remove(answer1.content)
                    info["skills_learned"].append(answer1.content)
                    info["skills_learned"].remove(forget)
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            else:
                await ctx.send("<@{}> please choose a valid item next time.\n Or cheack your inventory !inv \n".format(author.id))
        else:
            em = discord.Embed(description="```diff\n+\n+ USE COMMAND\n+\n {}skillinv <slot_num>\n\n- Note\n- this is Uppercase and Lowercase Number and Space sensitive.\n\n In your Inventory is...\n\n{}\n\n You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n```".format(Prefix,"\n".join(map(str, inv_list)), equip0, equip1, equip2, equip3), color=discord.Color.blue())
            await ctx.send(embed=em)
            await ctx.send("<@{}> please choose a valid SLOT NUMBER next timekkkkkk.".format(author.id))

            em = discord.Embed(description="```diff\n+\n+ USE COMMAND\n+\n {}skillinv <slot_num>\n\n- Note\n- this is Uppercase and Lowercase Number and Space sensitive.\n\n In your Inventory is...\n\n{}\n\n You Equipped:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n```".format(Prefix,"\n".join(map(str, inv_list)), equip0, equip1, equip2, equip3), color=discord.Color.blue())
            await ctx.send(embed=em)
            await ctx.send("<@{}> please choose a valid SLOT NUMBER next time.".format(author.id))@bot.command(aliases=["slot"])

@bot.command(aliases=["slot"])
async def bp0x0(ctx, num=None):
    print(">>>>>>>>Start<<<<<<<")
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    itemname = fileIO("core/enemies/allNFTS.json", "load")
    ainfo = fileIO("core/enemies/allNFTS.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
        try:
            bp0amount = info["bp0"]
            bbvalue_total_stats = info["bbvalue_total_stats"]
            bbvalue_stats = info["bbvalue_stats"]
            bbvalue = info["bbvalue"]
            all_attack = info["all_total_base_attack"]
            all_drop_attack = info["all_drop_attack"]
            all_defence = info["all_defence"]
            all_drop_defence = info["all_drop_defence"]
            all_drop = info["all_drop"]
            all_drop_boco = info["all_drop_boco"]
            all_drop_exp = int(info["all_drop_exp"])
            all_drop_food = info["all_drop_food"]
            all_drop_gold = info["all_drop_gold"]
            all_drop_hp = info["all_drop_hp"]
            all_drop_key = info["all_drop_key"]
            all_drop_metal = info["all_drop_metal"]
            all_drop_mp = info["all_drop_mp"]
            all_drop_pot = info["all_drop_pot"]
            all_drop_skexp = info["all_drop_skexp"]
            all_drop_sp = info["all_drop_sp"]
            all_drop_stone = info["all_drop_stone"]
            all_drop_wood = info["all_drop_wood"]
            all_drop_people = info["all_drop_people"]
            all_drop_door = info["all_drop_door"]
            all_base_attack = info["all_base_attack"]
            all_base_defence = info["all_base_defence"]
            all_base_drop = info["all_base_drop"]
            all_base_boco = info["all_base_boco"]
            all_base_exp = int(info["all_base_exp"])
            all_base_food = info["all_base_food"]
            all_base_gold = info["all_base_gold"]
            all_base_hp = info["all_base_hp"]
            all_base_key = info["all_base_key"]
            all_base_metal = info["all_base_metal"]
            all_base_mp = info["all_base_mp"]
            all_base_pot = info["all_base_pot"]
            all_base_skexp = info["all_base_skexp"]
            all_base_sp = info["all_base_sp"]
            all_base_stone = info["all_base_stone"]
            all_base_people = info["all_base_people"]
            all_base_wood = info["all_base_wood"]
            all_base_door = info["all_base_door"]
            all_attack = info["all_total_base_attack"]
            all_total_base_attack = info["all_total_base_attack"]
            all_defence = info["all_defence"]
            all_total_base_defence = info["all_total_base_defence"]
            all_total_base_drop = info["all_total_base_drop"]
            all_total_base_boco = info["all_total_base_boco"]
            all_total_base_exp = int(info["all_total_base_exp"])
            all_total_base_food = info["all_total_base_food"]
            all_total_base_gold = info["all_total_base_gold"]
            all_total_base_hp = info["all_total_base_hp"]
            all_total_base_key = info["all_total_base_key"]
            all_total_base_metal = info["all_total_base_metal"]
            all_total_base_mp = info["all_total_base_mp"]
            all_total_base_pot = info["all_total_base_pot"]
            all_total_base_skexp = info["all_total_base_skexp"]
            all_total_base_sp = info["all_total_base_sp"]
            all_total_base_stone = info["all_total_base_stone"]
            all_total_base_people = info["all_total_base_people"]
            all_total_base_wood = info["all_total_base_wood"]
            all_total_base_door = info["all_total_base_door"]
            print("all_drop_expall_drop_expall_drop_expall_drop_exp")
            print("all_drop_exp")
            print(all_drop_exp)
            print("all_total_base_exp")
            print(all_total_base_exp)
            print("sall_total_base_exp")
            print(all_total_base_exp)
            print("all_base_exp")
            print(all_base_exp)
            print("all_drop_exp * all_base_exp + bbvalue_total_stats BBValue")
            ccccc1 = all_drop_exp * all_base_exp + bbvalue_total_stats
            print("ccccc1")
            print(ccccc1)
            print("all_drop_exp + all_base_exp * bbvalue_total_stats BBValue")
            ccccc2 = all_drop_exp + all_base_exp * bbvalue_total_stats
            print("ccccc2")
            print(ccccc2)
            print("all_drop_exp + all_base_exp + bbvalue_total_stats BBValue")
            ccccc3 = all_drop_exp + all_base_exp + bbvalue_total_stats
            print("ccccc3")
            print(ccccc3)
            print("all_drop_exp * all_base_exp * bbvalue_total_stats BBValue")
            ccccc4 = all_drop_exp * all_base_exp * bbvalue_total_stats
            print("ccccc4")
            print(ccccc4)
            print("all_drop_exp")
            print(all_drop_exp)
            print("all_total_base_exp")
            print(all_total_base_exp)
            print("sall_total_base_exp")
            print(all_total_base_exp)
            print("all_base_exp")
            print(all_base_exp)
            print("all_drop_expall_drop_expall_drop_expall_drop_exp")
            print("bp0amount")
            print(bp0amount)
            bbvalue = info["bbvalue"]
            print("bbvalue")
            print(bbvalue)
            multyfactor = bp0amount * info["bbvalue"]
            info["bbvalue"] = multyfactor
            info["bpv0"] = multyfactor
            #info["bpvf0"] = multyfactorf
            print("multyfactor")
            print(multyfactor)
        except Error:
            return
    await _check_setBoboValue(ctx)
    lvl = info["lvl"]
    newitemname = "None"
    all_attack = info["all_total_base_attack"]
    all_drop_attack = info["all_drop_attack"]
    all_defence = info["all_total_base_defence"]
    all_drop_defence = info["all_drop_defence"]
    all_drop = info["all_drop"]
    all_drop_boco = info["all_drop_boco"]
    all_drop_exp = int(info["all_drop_exp"])
    all_drop_food = info["all_drop_food"]
    all_drop_gold = info["all_drop_gold"]
    all_drop_hp = info["all_drop_hp"]
    all_drop_key = info["all_drop_key"]
    all_drop_metal = info["all_drop_metal"]
    all_drop_mp = info["all_drop_mp"]
    all_drop_pot = info["all_drop_pot"]
    all_drop_skexp = info["all_drop_skexp"]
    all_drop_sp = info["all_drop_sp"]
    all_drop_stone = info["all_drop_stone"]
    all_drop_wood = info["all_drop_wood"]
    all_drop_people = info["all_drop_people"]
    all_drop_door = info["all_drop_door"]
    #await _check_setAssetsXdrop(ctx)
    choices = []
    inv_list = [i for i in info["all_inventory"]]
    bp0_slot = info["zslot_0_inventory"]
    bp1_slot = info["zslot_1_inventory"]
    bp2_slot = info["zslot_2_inventory"]
    bp3_slot = info["zslot_3_inventory"]
    bp4_slot = info["zslot_4_inventory"]
    bp5_slot = info["zslot_5_inventory"]
    bp6_slot = info["zslot_6_inventory"]
    bp7_slot = info["zslot_7_inventory"]
    bp8_slot = info["zslot_8_inventory"]
    bp9_slot = info["zslot_9_inventory"]
    bp10_slot = info["zslot_10_inventory"]
    bp11_slot = info["zslot_11_inventory"]
    bp12_slot = info["zslot_12_inventory"]
    bp13_slot = info["zslot_13_inventory"]
    bp14_slot = info["zslot_14_inventory"]
    bp15_slot = info["zslot_15_inventory"]
    bp16_slot = info["zslot_16_inventory"]
    bp17_slot = info["zslot_17_inventory"]
    bp18_slot = info["zslot_18_inventory"]
    bp19_slot = info["zslot_19_inventory"]
    bp20_slot = info["zslot_20_inventory"]
    bp21_slot = info["zslot_21_inventory"]
    bp22_slot = info["zslot_22_inventory"]
    bp23_slot = info["zslot_23_inventory"]
    bp24_slot = info["zslot_24_inventory"]
    bp25_slot = info["zslot_25_inventory"]
    a00 = info["bpv0"]
    a00f = info["bpf0"]
    info["slotnum"] = num
    fileIO("players/{}/info.json".format(author.id), "save", info)
    if len(inv_list) == 0:
        em = discord.Embed(
            description="```diff\n- You don't have anything else to equip!\n USE COMMAND !help <command>```",
            color=discord.Color.red()
        )
        await ctx.send(embed=em)

    if num is None:
        await ctx.send(
            f"Please select one of the 26 slots (0-25).\n"
            f"If you own BoboPixel0x0 NFT (BP0x0-0), use the command `{Prefix}bp0x0 0-25` or `{Prefix}slot 0-25`."
        )

    if num == "0":
        fileIO(f"players/{author.id}/info.json", "save", info)
        
        if info["wallet"] is None or info["assets"] == "None":
            await ctx.send(f"Please start your wallet using `{Prefix}setwallet`.")
            return

        if info["zslot_0_inventory"] in ["None", None, []]:
            await ctx.send(f"Nothing in slot 0. Use `{Prefix}bp0x0 <SlotNR>`.")
            return

        a00 = info["bpv0"]
        a00f = info["bpf0"]
        gain2x = int(a00) + int(a00f)

        info["bpvf0"] = a00f * 1

        choices.append(inv_list)

        em = discord.Embed(
            description=f"```diff\n"
                        f"- Note\n"
                        f" This is case-sensitive.\n\n"
                        f"+ In your inventory:\n{', '.join(map(str, inv_list))}\n\n"
                        f"- You put in:\n"
                        f"! Slot_0 with BoboValue0x0 x{a00} + x{a00f} BoboValue1x1\n\n"
                        f"+ You equipped:\n"
                        f"+ slot_0 {bp0_slot}\n"
                        f"+ slot_1 {bp1_slot}\n"
                        f"+ slot_2 {bp2_slot}\n"
                        f"+ slot_3 {bp3_slot}\n"
                        f"+ slot_4 {bp4_slot}\n"
                        f"+ slot_5 {bp5_slot}\n"
                        f"+ slot_6 {bp6_slot}\n"
                        f"+ slot_7 {bp7_slot}\n"
                        f"+ slot_8 {bp8_slot}\n"
                        f"+ slot_9 {bp9_slot}\n\n"
                        f"What would you like to put in?\n```",
            color=discord.Color.blue()
        )
        await ctx.send(embed=em)

        def pred(m):
            return m.author == message.author and m.channel == message.channel

        answer1 = await bot.wait_for("message", check=pred)
        wallet_to_check_new = str(answer1.content)

        if answer1.content not in inv_list:
            await ctx.send(
                f"<@{author.id}>, please choose a valid item name from your inventory list next time."
                f" You have to start all over again!\n"
                f"+ Use command `{Prefix}slot 0` for example."
            )
            return

        selected_item = str(answer1.content)
        info["selected_item"] = selected_item
        angezogen = info["zslot_0_inventory"]
        fileIO(f"players/{author.id}/info.json", "save", info)
        info = fileIO("players/{}/info.json".format(author.id), "load")
        inv_list = info["all_inventory"]
    ##################### von hier ab all 1 ########################
    if num == "1":
        fileIO("players/{}/info.json".format(author.id), "save", info)
        
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        
        if info["zslot_1_inventory"] == "None" or info["zslot_1_inventory"] is None or info["zslot_1_inventory"] == []:
            await ctx.send("Nothing in 1 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack1 = 0
            defence1 = 0
            expdropp1 = 0
            dropdrop1 = 0
            skexpdropp1 = 0
            fooddropp1 = 0
            wooddropp1 = 0
            stonedropp1 = 0
            metaldropp1 = 0
            golddropp1 = 0
            bocodropp1 = 0
            keydropp1 = 0
            mpdrop1 = 0
            hpdrop1 = 0
            spdrop1 = 0
            rabbat1 = 0
            people1 = info["people1"]
            door1 = info["door1"]
            pot1 = info["pot1"]
            pass

        a01 = info["bpv1"]
        a01f = info["bpf1"] * 2
        gain2x = int(a01) + int(a01f)
        info["bpvf1"] = a01f
        choices.append(inv_list)

        em = discord.Embed(
            description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1\n\n+ You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format(
                "\n".join(map(str, inv_list)), num, a01, a01f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot,
                bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())

        await ctx.send(embed=em)

        def pred(m):
            return m.author == message.author and m.channel == message.channel

        answer1 = await bot.wait_for("message", check=pred)

        if answer1.content in inv_list:
            if answer1.content == "None":
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return

            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_1_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")

            em = discord.Embed(
                description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)

            anziehn = info["selected_item"]
            newitemname = info["selected_item"]
            info["zslot_1_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_1_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_1_inventory"] = anziehn
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type

            if selected_item_type == "Castle":
                newitemname = itemname[newitemname]["material"]
                attack1 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                defence1 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp1 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop1 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp1 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp1 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp1 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp1 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp1 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp1 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp1 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp1 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop1 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop1 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop1 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat1 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people1 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door1 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot1 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x

                info["attack1"] = attack1
                info["defence1"] = defence1
                info["expdropp1"] = expdropp1
                info["dropdrop1"] = dropdrop1
                info["skexpdropp1"] = skexpdropp1
                info["fooddropp1"] = fooddropp1
                info["wooddropp1"] = wooddropp1
                info["stonedropp1"] = stonedropp1
                info["metaldropp1"] = metaldropp1
                info["golddropp1"] = golddropp1
                info["bocodropp1"] = bocodropp1
                info["keydropp1"] = keydropp1
                info["mpdrop1"] = mpdrop1
                info["hpdrop1"] = hpdrop1
                info["spdrop1"] = spdrop1
                info["rabbat1"] = rabbat1
                info["people1"] = people1
                info["door1"] = door1
                info["pot1"] = pot1
            else:
                attack1 = itemname[newitemname]["max_dmg"] * gain2x
                defence1 = itemname[newitemname]["max_def"] * gain2x
                expdropp1 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop1 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp1 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp1 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp1 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp1 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp1 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp1 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp1 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp1 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop1 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop1 = itemname[newitemname]["all_drop_hp"] * gain2x
                spdrop1 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat1 = itemname[newitemname]["rabbat"] * gain2x
                people1 = itemname[newitemname]["all_drop_people"] * gain2x
                door1 = itemname[newitemname]["all_drop_door"] * gain2x
                pot1 = itemname[newitemname]["all_drop_pot"] * gain2x

                info["attack1"] = attack1
                info["defence1"] = defence1
                info["expdropp1"] = expdropp1
                info["dropdrop1"] = dropdrop1
                info["skexpdropp1"] = skexpdropp1
                info["fooddropp1"] = fooddropp1
                info["wooddropp1"] = wooddropp1
                info["stonedropp1"] = stonedropp1
                info["metaldropp1"] = metaldropp1
                info["golddropp1"] = golddropp1
                info["bocodropp1"] = bocodropp1
                info["keydropp1"] = keydropp1
                info["mpdrop1"] = mpdrop1
                info["hpdrop1"] = hpdrop1
                info["spdrop1"] = spdrop1
                info["rabbat1"] = rabbat1
                info["people1"] = people1
                info["door1"] = door1
                info["pot1"] = pot1

            fileIO("players/{}/info.json".format(author.id), "save", info)
            print(":bp1 save castle or item after if else!!!")
        else:
            await ctx.send("<@{}> please choose a valid ITEM NAME next time.".format(author.id))
            return
    #The code above updates the player's inventory and equips the selected item. If the item type is "Castle", it retrieves the corresponding attributes from the `ainfo` dictionary. Otherwise, it retrieves the attributes from the `itemname` dictionary. The attributes are then multiplied by `gain2x` and assigned to the respective variables. Finally, the updated information is saved and the execution continues.

    #Note: The code assumes that the required variables and dictionaries (`ainfo`, `itemname`, `bp0_slot`, `bp1_slot`, etc.) are properly defined and initialized before this code snippet. Make sure to include the necessary imports and ensure that the variables and dictionaries have valid values before executing this code.

  ##################### von hier ab all 2 ########################
    if num == "2":
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] is None or info["assets"] is None:
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return

        if info["zslot_2_inventory"] in [None, "None", []]:
            await ctx.send("Nothing in 2 `{}bp0x0 <SlotNR>`".format(Prefix))
            # Reset all attributes
            attributes = ["attack2", "defence2", "expdropp2", "dropdrop2", "skexpdropp2",
                          "fooddropp2", "wooddropp2", "stonedropp2", "metaldropp2", "golddropp2",
                          "bocodropp2", "keydropp2", "mpdrop2", "hpdrop2", "spdrop2",
                          "rabbat2", "people2", "door2", "pot2"]
            for attr in attributes:
                info[attr] = 0
        else:
            a02 = info["bpv2"]
            a02f = info["bpf2"] * 4
            gain2x = int(a02) + int(a02f)
            info["bpvf2"] = a02f
            choices.append(inv_list)
            em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipped:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a02, a02f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())
            await ctx.send(embed=em)

            def pred(m):
                return m.author == ctx.author and m.channel == ctx.channel

            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in inv_list:
                if answer1.content == "None":
                    await ctx.send("None is Nothing")
                    await ctx.send("BoB Out!")
                    return

                selected_item = str(answer1.content)
                info["selected_item"] = selected_item
                angezogen = info["zslot_2_inventory"]
                fileIO("players/{}/info.json".format(author.id), "save", info)
                info = fileIO("players/{}/info.json".format(author.id), "load")
                em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
                await ctx.send(embed=em)
                anziehn = info["selected_item"]
                info["zslot_2_inventory"] = anziehn
                info["all_inventory"].append(str(info["zslot_2_inventory"]))
                info["all_inventory"].append(str(angezogen))
                inv_list.remove(str(answer1.content))

                if info["selected_item"] == "Castle":
                    info["attack2"] = ainfo[anziehn]["attack"]
                    info["defence2"] = ainfo[anziehn]["defence"]
                    info["expdropp2"] = ainfo[anziehn]["expdrop"]
                    info["dropdrop2"] = ainfo[anziehn]["dropdrop"]
                    info["skexpdropp2"] = ainfo[anziehn]["skexpdrop"]
                    info["fooddropp2"] = ainfo[anziehn]["fooddrop"]
                    info["wooddropp2"] = ainfo[anziehn]["wooddrop"]
                    info["stonedropp2"] = ainfo[anziehn]["stonedrop"]
                    info["metaldropp2"] = ainfo[anziehn]["metaldrop"]
                    info["golddropp2"] = ainfo[anziehn]["golddrop"]
                    info["bocodropp2"] = ainfo[anziehn]["bocodrop"]
                    info["keydropp2"] = ainfo[anziehn]["keydrop"]
                    info["mpdrop2"] = ainfo[anziehn]["mpdrop"]
                    info["hpdrop2"] = ainfo[anziehn]["hpdrop"]
                    info["spdrop2"] = ainfo[anziehn]["spdrop"]
                    info["rabbat2"] = ainfo[anziehn]["rabbat"]
                    info["people2"] = ainfo[anziehn]["people"]
                    info["door2"] = ainfo[anziehn]["door"]
                    info["pot2"] = ainfo[anziehn]["pot"]
                else:
                    info["attack2"] = itemname[anziehn]["attack"] * gain2x
                    info["defence2"] = itemname[anziehn]["defence"] * gain2x
                    info["expdropp2"] = itemname[anziehn]["expdrop"] * gain2x
                    info["dropdrop2"] = itemname[anziehn]["dropdrop"] * gain2x
                    info["skexpdropp2"] = itemname[anziehn]["skexpdrop"] * gain2x
                    info["fooddropp2"] = itemname[anziehn]["fooddrop"] * gain2x
                    info["wooddropp2"] = itemname[anziehn]["wooddrop"] * gain2x
                    info["stonedropp2"] = itemname[anziehn]["stonedrop"] * gain2x
                    info["metaldropp2"] = itemname[anziehn]["metaldrop"] * gain2x
                    info["golddropp2"] = itemname[anziehn]["golddrop"] * gain2x
                    info["bocodropp2"] = itemname[anziehn]["bocodrop"] * gain2x
                    info["keydropp2"] = itemname[anziehn]["keydrop"] * gain2x
                    info["mpdrop2"] = itemname[anziehn]["mpdrop"] * gain2x
                    info["hpdrop2"] = itemname[anziehn]["hpdrop"] * gain2x
                    info["spdrop2"] = itemname[anziehn]["spdrop"] * gain2x
                    info["rabbat2"] = itemname[anziehn]["rabbat"] * gain2x
                    info["people2"] = itemname[anziehn]["people"] * gain2x
                    info["door2"] = itemname[anziehn]["door"] * gain2x
                    info["pot2"] = itemname[anziehn]["pot"] * gain2x
            else:
                await ctx.send("This item is not in your inventory.")

        fileIO("players/{}/info.json".format(author.id), "save", info)
        info = fileIO("players/{}/info.json".format(author.id), "load")
        inv_list = info["all_inventory"]
  ##################### von hier ab all 3 ########################
    if num == "3":
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_3_inventory"] in ["None", None, []]:
            await ctx.send("Nothing in 3 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack3 = defence3 = expdropp3 = dropdrop3 = skexpdropp3 = fooddropp3 = wooddropp3 = stonedropp3 = metaldropp3 = golddropp3 = bocodropp3 = keydropp3 = mpdrop3 = hpdrop3 = spdrop3 = rabbat3 = people3 = door3 = pot3 = 0
        a03 = info["bpv3"]
        a03f = info["bpf3"] * 8
        gain2x = int(a03) + int(a03f)
        info["bpvf3"] = a03f
        choices.append(inv_list)
        em = discord.Embed(
            description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipped:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format(
                "\n".join(map(str, inv_list)), num, a03, a03f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)

        def pred(m):
            return m.author == message.author and m.channel == message.channel

        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None":
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_3_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_3_inventory"] = anziehn
  ##################### von hier ab all 4 ########################
    if num == "4":
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_4_inventory"] in ["None", None, []]:
            await ctx.send("Nothing in 4 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack4 = defence4 = expdropp4 = dropdrop4 = skexpdropp4 = fooddropp4 = wooddropp4 = stonedropp4 = metaldropp4 = golddropp4 = bocodropp4 = keydropp4 = mpdrop4 = hpdrop4 = spdrop4 = rabbat4 = people4 = door4 = pot4 = 0
        a04 = info["bpv4"]
        a04f = info["bpf4"] * 16
        gain2x = int(a04) + int(a04f)
        info["bpvf4"] = a04f
        choices.append(inv_list)
        em = discord.Embed(
            description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipped:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format(
                "\n".join(map(str, inv_list)), num, a04, a04f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)

        def pred(m):
            return m.author == message.author and m.channel == message.channel

        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None":
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_4_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_4_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_4_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_4_inventory"] = anziehn
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            print(";;;;;;;/;lselected_item_type save 4444")
            print(selected_item_type)
            newitemname = info["selected_item"]
            if selected_item_type == "Castle":
                attack4 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                defence4 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp4 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop4 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp4 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp4 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp4 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp4 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp4 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp4 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp4 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp4 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop4 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop4 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop4 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat4 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people4 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door4 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot44 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack4 = itemname[newitemname]["max_dmg"] * gain2x
                defence4 = itemname[newitemname]["max_def"] * gain2x
                expdropp4 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop4 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp4 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp4 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp4 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp4 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp4 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp4 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp4 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp4 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop4 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop4 = itemname[newitemname]["all_drop_hp"] * gain2x
                spdrop4 = itemname[newitemname]["all_drop_sp"] * gain2x
                people4 = itemname[newitemname]["all_drop_people"] * gain2x
                door4 = itemname[newitemname]["all_drop_door"] * gain2x
                pot4 = itemname[newitemname]["all_drop_pot"] * gain2x
                rabbat4 = itemname[newitemname]["rabbat"] * gain2x
            info["attack4"] = attack4
            info["defence4"] = defence4
            info["expdropp4"] = expdropp4
            info["dropdrop4"] = dropdrop4
            info["skexpdropp4"] = skexpdropp4
            info["fooddropp4"] = fooddropp4
            info["wooddropp4"] = wooddropp4
            info["stonedropp4"] = stonedropp4
            info["metaldropp4"] = metaldropp4
            info["golddropp4"] = golddropp4
            info["bocodropp4"] = bocodropp4
            info["keydropp4"] = keydropp4
            info["mpdrop4"] = mpdrop4
            info["hpdrop4"] = hpdrop4
            info["spdrop4"] = spdrop4
            info["rabbat4"] = rabbat4
            info["people4"] = people4
            info["door4"] = door4
            info["pot4"] = pot4
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 5 ########################
    if num == "5" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_5_inventory"] == "None" or info["zslot_5_inventory"] == None or info["zslot_5_inventory"] == []:
            await ctx.send("Nothing in 5 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack5 = 0
            defence5 = 0
            expdropp5 = 0
            dropdrop5 = 0
            skexpdropp5 = 0
            fooddropp5 = 0
            wooddropp5 = 0
            stonedropp5 = 0
            metaldropp5 = 0
            golddropp5 = 0
            bocodropp5 = 0
            keydropp5 = 0
            mpdrop5 = 0
            hpdrop5 = 0
            spdrop5 = 0
            rabbat5 = 0
            people5 = 0
            door5 = 0
            pot5 = 0
        a05 = info["bpv5"]
        a05f = info["bpf5"]*32
        gain2x = int(a05)  + int(a05f)
        info["bpvf5"] = a05f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a05, a05f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_5_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_5_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_5_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_5_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                print("------5555---------------NEwItemName-----------")
                #newitemname = itemname[newitemname]["material"]
                print("------5555---------------NEwItemName-----zslot_5_inventory------")
                print("newitemname")
                print(newitemname)
                attack5 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                defence5 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp5 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop5 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp5 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp5 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp5 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp5 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp5 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp5 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp5 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp5 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop5 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop5 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop5 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat5 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people5 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door5 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot5 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack5 = itemname[newitemname]["max_dmg"] * gain2x
                defence5 = itemname[newitemname]["max_def"] * gain2x
                expdropp5 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop5 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp5 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp5 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp5 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp5 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp5 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp5 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp5 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp5 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop5 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop5 = itemname[newitemname]["all_drop_hp"] * gain2x
                spdrop5 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat5 = itemname[newitemname]["rabbat"] * gain2x
                people5 = itemname[newitemname]["all_drop_people"] * gain2x
                door5 = itemname[newitemname]["all_drop_door"] * gain2x
                pot5 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack5"] = attack5
            info["defence5"] = defence5
            info["expdropp5"] = expdropp5
            info["dropdrop5"] = dropdrop5
            info["skexpdropp5"] = skexpdropp5
            info["fooddropp5"] = fooddropp5
            info["wooddropp5"] = wooddropp5
            info["stonedropp5"] = stonedropp5
            info["metaldropp5"] = metaldropp5
            info["golddropp5"] = golddropp5
            info["bocodropp5"] = bocodropp5
            info["keydropp5"] = keydropp5
            info["mpdrop5"] = mpdrop5
            info["hpdrop5"] = hpdrop5
            info["spdrop5"] = spdrop5
            info["rabbat5"] = rabbat5
            info["people5"] = people5
            info["door5"] = door5
            info["pot5"] = pot5
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 6 ########################
    if num == "6" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_6_inventory"] == "None" or info["zslot_6_inventory"] == None or info["zslot_6_inventory"] == []:
            await ctx.send("Nothing in 6 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack6 = 0
            defence6 = 0
            expdropp6 = 0
            dropdrop6 = 0
            skexpdropp6 = 0
            fooddropp6 = 0
            wooddropp6 = 0
            stonedropp6 = 0
            metaldropp6 = 0
            golddropp6 = 0
            bocodropp6 = 0
            keydropp6 = 0
            mpdrop6 = 0
            hpdrop6 = 0
            spdrop6 = 0
            rabbat6 = 0
            people6 = 0
            door6 = 0
            pot6 = 0
        a06 = info["bpv6"]
        a06f = info["bpf6"]*64
        gain2x = int(a06)  + int(a06f)
        info["bpvf6"] = a06f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a06, a06f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_6_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_6_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_6_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_6_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack6 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack6")
                print(attack6)
                print("gain2x")
                print(gain2x)
                defence6 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp6 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop6 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp6 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp6 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp6 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp6 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp6 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp6 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp6 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp6 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop6 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop6 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop6 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat6 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people6 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door6 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot6 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack6 = itemname[newitemname]["max_dmg"] * gain2x
                defence6 = itemname[newitemname]["max_def"] * gain2x
                expdropp6 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop6 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp6 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp6 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp6 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp6 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp6 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp6 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp6 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp6 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop6 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop6 = itemname[newitemname]["all_drop_hp"]
                spdrop6 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat6 = itemname[newitemname]["rabbat"] * gain2x
                people6 = itemname[newitemname]["all_drop_people"] * gain2x
                door6 = itemname[newitemname]["all_drop_door"] * gain2x
                pot6 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack6"] = attack6
            info["defence6"] = defence6
            info["expdropp6"] = expdropp6
            info["dropdrop6"] = dropdrop6
            info["skexpdropp6"] = skexpdropp6
            info["fooddropp6"] = fooddropp6
            info["wooddropp6"] = wooddropp6
            info["stonedropp6"] = stonedropp6
            info["metaldropp6"] = metaldropp6
            info["golddropp6"] = golddropp6
            info["bocodropp6"] = bocodropp6
            info["keydropp6"] = keydropp6
            info["mpdrop6"] = mpdrop6
            info["hpdrop6"] = hpdrop6
            info["spdrop6"] = spdrop6
            info["rabbat6"] = rabbat6
            info["people6"] = people6
            info["doo6"] = door6
            info["pot6"] = pot6
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 7 ########################
    if num == "7" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_7_inventory"] == "None" or info["zslot_7_inventory"] == None or info["zslot_7_inventory"] == []:
            await ctx.send("Nothing in 7 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack7 = 0
            defence7 = 0
            expdropp7 = 0
            dropdrop7 = 0
            skexpdropp7 = 0
            fooddropp7 = 0
            wooddropp7 = 0
            stonedropp7 = 0
            metaldropp7 = 0
            golddropp7 = 0
            bocodropp7 = 0
            keydropp7 = 0
            mpdrop7 = 0
            hpdrop7 = 0
            spdrop7 = 0
            rabbat7 = 0
            people7 = 0
            door7 = 0
            pot7 = 0
        a07 = info["bpv7"]
        a07f = info["bpf7"]*128
        gain2x = int(a07)  + int(a07f)
        info["bpvf7"] = a07f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a07, a07f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_7_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_7_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_7_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_7_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack7 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence7 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp7 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop7 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp7 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp7 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp7 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp7 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp7 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp7 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp7 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp7 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop7 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop7 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop7 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat7 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people7 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door7 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot7 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack7 = itemname[newitemname]["max_dmg"] * gain2x
                defence7 = itemname[newitemname]["max_def"] * gain2x
                expdropp7 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop7 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp7 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp7 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp7 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp7 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp7 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp7 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp7 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp7 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop7 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop7 = itemname[newitemname]["all_drop_hp"] * gain2x
                spdrop7 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat7 = itemname[newitemname]["rabbat"] * gain2x
                people7 = itemname[newitemname]["all_drop_people"] * gain2x
                door7 = itemname[newitemname]["all_drop_door"] * gain2x
                pot7 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack7"] = attack7
            info["defence7"] = defence7
            info["expdropp7"] = expdropp7
            info["dropdrop7"] = dropdrop7
            info["skexpdropp7"] = skexpdropp7
            info["fooddropp7"] = fooddropp7
            info["wooddropp7"] = wooddropp7
            info["stonedropp7"] = stonedropp7
            info["metaldropp7"] = metaldropp7
            info["golddropp7"] = golddropp7
            info["bocodropp7"] = bocodropp7
            info["keydropp7"] = keydropp7
            info["mpdrop7"] = mpdrop7
            info["hpdrop7"] = hpdrop7
            info["spdrop7"] = spdrop7
            info["rabbat7"] = rabbat7
            info["people7"] = people7
            info["door7"] = door7
            info["pot7"] = pot7
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 8 ########################
    if num == "8" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_8_inventory"] == "None" or info["zslot_8_inventory"] == None or info["zslot_8_inventory"] == []:
            await ctx.send("Nothing in 8 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack8 = 0
            defence8 = 0
            expdropp8 = 0
            dropdrop8 = 0
            skexpdropp8 = 0
            fooddropp8 = 0
            wooddropp8 = 0
            stonedropp8 = 0
            metaldropp8 = 0
            golddropp8 = 0
            bocodropp8 = 0
            keydropp8 = 0
            mpdrop8 = 0
            hpdrop8 = 0
            spdrop8 = 0
            rabbat8 = 0
            people8 = 0
            door8 = 0
            pot8 = 0
            pass
        a08 = info["bpv8"]
        a08f = info["bpf8"]*256
        gain2x = int(a08)  + int(a08f)
        info["bpvf8"] = a08f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a08, a08f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_8_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_8_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_8_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_8_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack8 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("gain2x")
                print(gain2x)
                defence8 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp8 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop8 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp8 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp8 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp8 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp8 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp8 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp8 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp8 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp8 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop8 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop8 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop8 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat8 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people8 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door8 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot8 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack8 = itemname[newitemname]["max_dmg"] * gain2x
                defence8 = itemname[newitemname]["max_def"] * gain2x
                expdropp8 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop8 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp8 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp8 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp8 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp8 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp8 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp8 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp8 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp8 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop8 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop8 = itemname[newitemname]["all_drop_hp"]
                spdrop8 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat8 = itemname[newitemname]["rabbat"] * gain2x
                people8 = itemname[newitemname]["all_drop_people"] * gain2x
                door8 = itemname[newitemname]["all_drop_door"] * gain2x
                pot8 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack8"] = attack8
            info["defence8"] = defence8
            info["expdropp8"] = expdropp8
            info["dropdrop8"] = dropdrop8
            info["skexpdropp8"] = skexpdropp8
            info["fooddropp8"] = fooddropp8
            info["wooddropp8"] = wooddropp8
            info["stonedropp8"] = stonedropp8
            info["metaldropp8"] = metaldropp8
            info["golddropp8"] = golddropp8
            info["bocodropp8"] = bocodropp8
            info["keydropp8"] = keydropp8
            info["mpdrop8"] = mpdrop8
            info["hpdrop8"] = hpdrop8
            info["spdrop8"] = spdrop8
            info["rabbat8"] = rabbat8
            info["people8"] = people8
            info["door8"] = door8
            info["pot8"] = pot8
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 9 ########################
    if num == "9" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_9_inventory"] == "None" or info["zslot_9_inventory"] == None or info["zslot_9_inventory"] == []:
            await ctx.send("Nothing in 9 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack9 = 0
            defence9 = 0
            expdropp9 = 0
            dropdrop9 = 0
            skexpdropp9 = 0
            fooddropp9 = 0
            wooddropp9 = 0
            stonedropp9 = 0
            metaldropp9 = 0
            golddropp9 = 0
            bocodropp9 = 0
            keydropp9 = 0
            mpdrop9 = 0
            hpdrop9 = 0
            spdrop9 = 0
            rabbat9 = 0
            people9 = 0
            door9 = 0
            pot9 = 0
        a09 = info["bpv9"]
        a09f = info["bpf9"]*512
        gain2x = int(a09)  + int(a09f)
        info["bpvf9"] = a09f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_0 {}\n+ slot_1 {}\n+ slot_2 {}\n+ slot_3 {}\n+ slot_4 {}\n+ slot_5 {}\n+ slot_6 {}\n+ slot_7 {}\n+ slot_8 {}\n+ slot_9 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a09, a09f, bp0_slot, bp1_slot, bp2_slot, bp3_slot, bp4_slot, bp5_slot, bp6_slot, bp7_slot, bp8_slot, bp9_slot), color=discord.Color.blue())
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_9_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_9_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_9_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_9_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack6 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence9 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp9 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop9 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp9 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp9 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp9 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp9 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp9 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp9 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp9 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp9 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop9 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop9 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop9 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat9 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people9 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door9 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot9 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack9 = itemname[newitemname]["max_dmg"] * gain2x
                defence9 = itemname[newitemname]["max_def"] * gain2x
                expdropp9 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop9 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp9 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp9 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp9 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp9 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp9 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp9 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp9 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp9 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop9 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop9 = itemname[newitemname]["all_drop_hp"]
                spdrop9 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat9 = itemname[newitemname]["rabbat"] * gain2x
                people9 = itemname[newitemname]["all_drop_people"] * gain2x
                door9 = itemname[newitemname]["all_drop_door"] * gain2x
                pot9 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack9"] = attack9
            info["defence9"] = defence9
            info["expdropp9"] = expdropp9
            info["dropdrop9"] = dropdrop9
            info["skexpdropp9"] = skexpdropp9
            info["fooddropp9"] = fooddropp9
            info["wooddropp9"] = wooddropp9
            info["stonedropp9"] = stonedropp9
            info["metaldropp9"] = metaldropp9
            info["golddropp9"] = golddropp9
            info["bocodropp9"] = bocodropp9
            info["keydropp9"] = keydropp9
            info["mpdrop9"] = mpdrop9
            info["hpdrop9"] = hpdrop9
            info["spdrop9"] = spdrop9
            info["rabbat9"] = rabbat9
            info["people9"] = people9
            info["door9"] = door9
            info["pot9"] = pot9
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 10 ########################
    if num == "10" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_10_inventory"] == "None" or info["zslot_10_inventory"] == None or info["zslot_10_inventory"] == []:
            await ctx.send("Nothing in 10 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a10 = info["bpv10"]
        a10f = info["bpf10"]*1024
        gain2x = int(a10)  + int(a10f)
        info["bpvf10"] = a10f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a10, a10f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_10_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_10_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_10_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_10_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack10 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence10 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp10 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop10 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp10 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp10 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp10 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp10 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp10 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp10 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp10 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp10 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop10 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop10 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop10 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat10 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people10 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door10 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot10 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack10 = itemname[newitemname]["max_dmg"] * gain2x
                defence10 = itemname[newitemname]["max_def"] * gain2x
                expdropp10 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop10 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp10 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp10 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp10 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp10 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp10 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp10 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp10 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp10 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop10 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop10 = itemname[newitemname]["all_drop_hp"]
                spdrop10 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat10 = itemname[newitemname]["rabbat"] * gain2x
                people10 = itemname[newitemname]["all_drop_people"] * gain2x
                door10 = itemname[newitemname]["all_drop_door"] * gain2x
                pot10 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack10"] = attack10
            info["defence10"] = defence10
            info["expdropp10"] = expdropp10
            info["dropdrop10"] = dropdrop10
            info["skexpdropp10"] = skexpdropp10
            info["fooddropp10"] = fooddropp10
            info["wooddropp10"] = wooddropp10
            info["stonedropp10"] = stonedropp10
            info["metaldropp10"] = metaldropp10
            info["golddropp10"] = golddropp10
            info["bocodropp10"] = bocodropp10
            info["keydropp10"] = keydropp10
            info["mpdrop10"] = mpdrop10
            info["hpdrop10"] = hpdrop10
            info["spdrop10"] = spdrop10
            info["rabbat10"] = rabbat10
            info["people10"] = people10
            info["door10"] = door10
            info["pot10"] = pot10
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 11 ########################
    if num == "11" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_11_inventory"] == "None" or info["zslot_11_inventory"] == None or info["zslot_11_inventory"] == []:
            await ctx.send("Nothing in 11 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a11 = info["bpv11"]
        a11f = info["bpf11"]*2048
        gain2x = int(a11)  + int(a11f)
        info["bpvf11"] = a11f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a11, a11f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_11_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_11_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_11_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_11_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack11 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence11 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp11 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop11 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp11 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp11 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp11 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp11 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp11 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp11 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp11 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp11 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop11 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop11 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop11 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat11 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people11 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door11 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot11 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack11 = itemname[newitemname]["max_dmg"] * gain2x
                defence11 = itemname[newitemname]["max_def"] * gain2x
                expdropp11 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop11 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp11 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp11 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp11 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp11 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp11 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp11 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp11 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp11 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop11 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop11 = itemname[newitemname]["all_drop_hp"]
                spdrop11 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat11 = itemname[newitemname]["rabbat"] * gain2x
                people11 = itemname[newitemname]["all_drop_people"] * gain2x
                door11 = itemname[newitemname]["all_drop_door"] * gain2x
                pot11 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack11"] = attack11
            info["defence11"] = defence11
            info["expdropp11"] = expdropp11
            info["dropdrop11"] = dropdrop11
            info["skexpdropp11"] = skexpdropp11
            info["fooddropp11"] = fooddropp11
            info["wooddropp11"] = wooddropp11
            info["stonedropp11"] = stonedropp11
            info["metaldropp11"] = metaldropp11
            info["golddropp11"] = golddropp11
            info["bocodropp11"] = bocodropp11
            info["keydropp11"] = keydropp11
            info["mpdrop11"] = mpdrop11
            info["hpdrop11"] = hpdrop11
            info["spdrop11"] = spdrop11
            info["rabbat11"] = rabbat11
            info["people11"] = people11
            info["door11"] = door11
            info["pot11"] = pot11
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 12 ########################
    if num == "12" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_12_inventory"] == "None" or info["zslot_12_inventory"] == None or info["zslot_12_inventory"] == []:
            await ctx.send("Nothing in 12 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a12 = info["bpv12"]
        a12f = info["bpf12"]*4096
        gain2x = int(a12)  + int(a12f)
        info["bpvf12"] = a12f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a12, a12f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_12_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_12_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_12_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_12_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack12 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence12 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp12 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop12 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp12 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp12 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp12 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp12 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp12 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp12 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp12 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp12 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop12 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop12 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop12 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat12 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people12 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door12 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot12 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack12 = itemname[newitemname]["max_dmg"] * gain2x
                defence12 = itemname[newitemname]["max_def"] * gain2x
                expdropp12 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop12 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp12 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp12 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp12 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp12 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp12 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp12 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp12 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp12 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop12 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop12 = itemname[newitemname]["all_drop_hp"]
                spdrop12 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat12 = itemname[newitemname]["rabbat"] * gain2x
                people12 = itemname[newitemname]["all_drop_people"] * gain2x
                door12 = itemname[newitemname]["all_drop_door"] * gain2x
                pot12 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack12"] = attack12
            info["defence12"] = defence12
            info["expdropp12"] = expdropp12
            info["dropdrop12"] = dropdrop12
            info["skexpdropp12"] = skexpdropp12
            info["fooddropp12"] = fooddropp12
            info["wooddropp12"] = wooddropp12
            info["stonedropp12"] = stonedropp12
            info["metaldropp12"] = metaldropp12
            info["golddropp12"] = golddropp12
            info["bocodropp12"] = bocodropp12
            info["keydropp12"] = keydropp12
            info["mpdrop12"] = mpdrop12
            info["hpdrop12"] = hpdrop12
            info["spdrop12"] = spdrop12
            info["rabbat12"] = rabbat12
            info["people12"] = people12
            info["door12"] = door12
            info["pot12"] = pot12
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 13 ########################
    if num == "13" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_13_inventory"] == "None" or info["zslot_13_inventory"] == None or info["zslot_13_inventory"] == []:
            await ctx.send("Nothing in 13 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a13 = info["bpv13"]
        a13f = info["bpf13"]*8192
        gain2x = int(a13)  + int(a13f)
        info["bpvf13"] = a13f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a13, a13f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_13_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_13_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_13_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_13_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack13 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence13 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp13 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop13 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp13 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp13 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp13 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp13 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp13 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp13 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp13 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp13 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop13 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop13 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop13 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat13 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people13 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door13 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot13 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack13 = itemname[newitemname]["max_dmg"] * gain2x
                defence13 = itemname[newitemname]["max_def"] * gain2x
                expdropp13 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop13 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp13 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp13 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp13 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp13 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp13 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp13 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp13 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp13 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop13 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop13 = itemname[newitemname]["all_drop_hp"]
                spdrop13 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat13 = itemname[newitemname]["rabbat"] * gain2x
                people13 = itemname[newitemname]["all_drop_people"] * gain2x
                door13 = itemname[newitemname]["all_drop_door"] * gain2x
                pot13 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack13"] = attack13
            info["defence13"] = defence13
            info["expdropp13"] = expdropp13
            info["dropdrop13"] = dropdrop13
            info["skexpdropp13"] = skexpdropp13
            info["fooddropp13"] = fooddropp13
            info["wooddropp13"] = wooddropp13
            info["stonedropp13"] = stonedropp13
            info["metaldropp13"] = metaldropp13
            info["golddropp13"] = golddropp13
            info["bocodropp13"] = bocodropp13
            info["keydropp13"] = keydropp13
            info["mpdrop13"] = mpdrop13
            info["hpdrop13"] = hpdrop13
            info["spdrop13"] = spdrop13
            info["rabbat13"] = rabbat13
            info["people13"] = people13
            info["door13"] = door13
            info["pot13"] = pot13
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 14 ########################
    if num == "14" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_14_inventory"] == "None" or info["zslot_14_inventory"] == None or info["zslot_14_inventory"] == []:
            await ctx.send("Nothing in 14 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a14 = info["bpv14"]
        a14f = info["bpf14"]*16384
        gain2x = int(a14)  + int(a14f)
        info["bpvf14"] = a14f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a14, a14f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_14_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_14_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_14_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_14_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack14 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence14 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp14 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop14 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp14 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp14 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp14 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp14 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp14 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp14 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp14 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp14 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop14 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop14 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop14 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat14 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people14 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door14 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot14 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack14 = itemname[newitemname]["max_dmg"] * gain2x
                defence14 = itemname[newitemname]["max_def"] * gain2x
                expdropp14 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop14 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp14 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp14 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp14 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp14 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp14 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp14 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp14 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp14 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop14 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop14 = itemname[newitemname]["all_drop_hp"]
                spdrop14 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat14 = itemname[newitemname]["rabbat"] * gain2x
                people14 = itemname[newitemname]["all_drop_people"] * gain2x
                door14 = itemname[newitemname]["all_drop_door"] * gain2x
                pot14 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack14"] = attack14
            info["defence14"] = defence14
            info["expdropp14"] = expdropp14
            info["dropdrop14"] = dropdrop14
            info["skexpdropp14"] = skexpdropp14
            info["fooddropp14"] = fooddropp14
            info["wooddropp14"] = wooddropp14
            info["stonedropp14"] = stonedropp14
            info["metaldropp14"] = metaldropp14
            info["golddropp14"] = golddropp14
            info["bocodropp14"] = bocodropp14
            info["keydropp14"] = keydropp14
            info["mpdrop14"] = mpdrop14
            info["hpdrop14"] = hpdrop14
            info["spdrop14"] = spdrop14
            info["rabbat14"] = rabbat14
            info["people14"] = people14
            info["door14"] = door14
            info["pot14"] = pot14
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 15 ########################
    if num == "15" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_15_inventory"] == "None" or info["zslot_15_inventory"] == None or info["zslot_15_inventory"] == []:
            await ctx.send("Nothing in 15 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a15 = info["bpv15"]
        a15f = info["bpf15"]*32768
        gain2x = int(a15)  + int(a15f)
        info["bpvf15"] = a15f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a15, a15f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_15_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_15_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_15_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_15_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack15 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence15 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp15 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop15 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp15 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp15 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp15 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp15 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp15 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp15 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp15 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp15 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop15 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop15 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop15 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat15 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people15 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door15 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot15 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack15 = itemname[newitemname]["max_dmg"] * gain2x
                defence15 = itemname[newitemname]["max_def"] * gain2x
                expdropp15 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop15 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp15 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp15 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp15 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp15 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp15 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp15 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp15 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp15 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop15 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop15 = itemname[newitemname]["all_drop_hp"]
                spdrop15 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat15 = itemname[newitemname]["rabbat"] * gain2x
                people15 = itemname[newitemname]["all_drop_people"] * gain2x
                door15 = itemname[newitemname]["all_drop_door"] * gain2x
                pot15 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack15"] = attack15
            info["defence15"] = defence15
            info["expdropp15"] = expdropp15
            info["dropdrop15"] = dropdrop15
            info["skexpdropp15"] = skexpdropp15
            info["fooddropp15"] = fooddropp15
            info["wooddropp15"] = wooddropp15
            info["stonedropp15"] = stonedropp15
            info["metaldropp15"] = metaldropp15
            info["golddropp15"] = golddropp15
            info["bocodropp15"] = bocodropp15
            info["keydropp15"] = keydropp15
            info["mpdrop15"] = mpdrop15
            info["hpdrop15"] = hpdrop15
            info["spdrop15"] = spdrop15
            info["rabbat15"] = rabbat15
            info["people15"] = people15
            info["door15"] = door15
            info["pot15"] = pot15
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 16 ########################
    if num == "16" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_16_inventory"] == "None" or info["zslot_16_inventory"] == None or info["zslot_16_inventory"] == []:
            await ctx.send("Nothing in 16 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a16 = info["bpv16"]
        a16f = info["bpf16"]*65536
        gain2x = int(a16)  + int(a16f)
        info["bpvf16"] = a16f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a16, a16f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_16_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_16_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_16_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_16_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack16 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence16 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp16 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop16 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp16 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp16 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp16 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp16 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp16 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp16 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp16 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp16 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop16 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop16 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop16 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat16 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people16 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door16 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot16 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack16 = itemname[newitemname]["max_dmg"] * gain2x
                defence16 = itemname[newitemname]["max_def"] * gain2x
                expdropp16 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop16 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp16 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp16 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp16 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp16 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp16 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp16 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp16 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp16 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop16 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop16 = itemname[newitemname]["all_drop_hp"]
                spdrop16 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat16 = itemname[newitemname]["rabbat"] * gain2x
                people16 = itemname[newitemname]["all_drop_people"] * gain2x
                door16 = itemname[newitemname]["all_drop_door"] * gain2x
                pot16 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack16"] = attack16
            info["defence16"] = defence16
            info["expdropp16"] = expdropp16
            info["dropdrop16"] = dropdrop16
            info["skexpdropp16"] = skexpdropp16
            info["fooddropp16"] = fooddropp16
            info["wooddropp16"] = wooddropp16
            info["stonedropp16"] = stonedropp16
            info["metaldropp16"] = metaldropp16
            info["golddropp16"] = golddropp16
            info["bocodropp16"] = bocodropp16
            info["keydropp16"] = keydropp16
            info["mpdrop16"] = mpdrop16
            info["hpdrop16"] = hpdrop16
            info["spdrop16"] = spdrop16
            info["rabbat16"] = rabbat16
            info["people16"] = people16
            info["door16"] = door16
            info["pot16"] = pot16
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 17 ########################
    if num == "17" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_17_inventory"] == "None" or info["zslot_17_inventory"] == None or info["zslot_17_inventory"] == []:
            await ctx.send("Nothing in 17 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a17 = info["bpv17"]
        a17f = info["bpf17"]*131072
        gain2x = int(a17)  + int(a17f)
        info["bpvf17"] = a17f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a17, a17f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_17_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_17_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_17_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_17_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack17 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence17 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp17 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop17 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp17 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp17 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp17 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp17 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp17 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp17 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp17 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp17 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop17 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop17 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop17 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat17 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people17 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door17 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot17 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack17 = itemname[newitemname]["max_dmg"] * gain2x
                defence17 = itemname[newitemname]["max_def"] * gain2x
                expdropp17 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop17 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp17 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp17 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp17 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp17 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp17 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp17 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp17 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp17 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop17 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop17 = itemname[newitemname]["all_drop_hp"]
                spdrop17 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat17 = itemname[newitemname]["rabbat"] * gain2x
                people17 = itemname[newitemname]["all_drop_people"] * gain2x
                door17 = itemname[newitemname]["all_drop_door"] * gain2x
                pot17 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack17"] = attack17
            info["defence17"] = defence17
            info["expdropp17"] = expdropp17
            info["dropdrop17"] = dropdrop17
            info["skexpdropp17"] = skexpdropp17
            info["fooddropp17"] = fooddropp17
            info["wooddropp17"] = wooddropp17
            info["stonedropp17"] = stonedropp17
            info["metaldropp17"] = metaldropp17
            info["golddropp17"] = golddropp17
            info["bocodropp17"] = bocodropp17
            info["keydropp17"] = keydropp17
            info["mpdrop17"] = mpdrop17
            info["hpdrop17"] = hpdrop17
            info["spdrop17"] = spdrop17
            info["rabbat17"] = rabbat17
            info["people17"] = people17
            info["door17"] = door17
            info["pot17"] = pot17
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 18 ########################
    if num == "18" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_18_inventory"] == "None" or info["zslot_18_inventory"] == None or info["zslot_18_inventory"] == []:
            await ctx.send("Nothing in 18 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a18 = info["bpv18"]
        a18f = info["bpf18"]*262144
        gain2x = int(a18)  + int(a18f)
        info["bpvf18"] = a18f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_9 {}\n+ slot_10 {}\n+ slot_11 {}\n+ slot_12 {}\n+ slot_13 {}\n+ slot_14 {}\n+ slot_15 {}\n+ slot_16 {}\n+ slot_17 {}\n+ slot_18 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a18, a18f, bp9_slot, bp10_slot, bp11_slot, bp12_slot, bp13_slot, bp14_slot, bp15_slot, bp16_slot, bp17_slot, bp18_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_18_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_18_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_18_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_18_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack18 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence18 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp18 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop18 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp18 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp18 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp18 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp18 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp18 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp18 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp18 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp18 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop18 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop18 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop18 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat18 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people18 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door18 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot18 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack18 = itemname[newitemname]["max_dmg"] * gain2x
                defence18 = itemname[newitemname]["max_def"] * gain2x
                expdropp18 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop18 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp18 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp18 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp18 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp18 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp18 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp18 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp18 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp18 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop18 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop18 = itemname[newitemname]["all_drop_hp"]
                spdrop18 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat18 = itemname[newitemname]["rabbat"] * gain2x
                people18 = itemname[newitemname]["all_drop_people"] * gain2x
                door18 = itemname[newitemname]["all_drop_door"] * gain2x
                pot18 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack18"] = attack18
            info["defence18"] = defence18
            info["expdropp18"] = expdropp18
            info["dropdrop18"] = dropdrop18
            info["skexpdropp18"] = skexpdropp18
            info["fooddropp18"] = fooddropp18
            info["wooddropp18"] = wooddropp18
            info["stonedropp18"] = stonedropp18
            info["metaldropp18"] = metaldropp18
            info["golddropp18"] = golddropp18
            info["bocodropp18"] = bocodropp18
            info["keydropp18"] = keydropp18
            info["mpdrop18"] = mpdrop18
            info["hpdrop18"] = hpdrop18
            info["spdrop18"] = spdrop18
            info["rabbat18"] = rabbat18
            info["people18"] = people18
            info["door18"] = door18
            info["pot18"] = pot18
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 19 ########################
    if num == "19" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_19_inventory"] == "None" or info["zslot_19_inventory"] == None or info["zslot_19_inventory"] == []:
            await ctx.send("Nothing in 19 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a19 = info["bpv19"]
        a19f = info["bpf19"]*524288
        gain2x = int(a19)  + int(a19f)
        info["bpvf19"] = a19f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a19, a19f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_19_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_19_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_19_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_19_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack19 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence19 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp19 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop19 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp19 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp19 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp19 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp19 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp19 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp19 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp19 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp19 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop19 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop19 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop19 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat19 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people19 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door19 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot19 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack19 = itemname[newitemname]["max_dmg"] * gain2x
                defence19 = itemname[newitemname]["max_def"] * gain2x
                expdropp19 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop19 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp19 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp19 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp19 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp19 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp19 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp19 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp19 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp19 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop19 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop19 = itemname[newitemname]["all_drop_hp"]
                spdrop19 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat19 = itemname[newitemname]["rabbat"] * gain2x
                people19 = itemname[newitemname]["all_drop_people"] * gain2x
                door19 = itemname[newitemname]["all_drop_door"] * gain2x
                pot19 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack19"] = attack19
            info["defence19"] = defence19
            info["expdropp19"] = expdropp19
            info["dropdrop19"] = dropdrop19
            info["skexpdropp19"] = skexpdropp19
            info["fooddropp19"] = fooddropp19
            info["wooddropp19"] = wooddropp19
            info["stonedropp19"] = stonedropp19
            info["metaldropp19"] = metaldropp19
            info["golddropp19"] = golddropp19
            info["bocodropp19"] = bocodropp19
            info["keydropp19"] = keydropp19
            info["mpdrop19"] = mpdrop19
            info["hpdrop19"] = hpdrop19
            info["spdrop19"] = spdrop19
            info["rabbat19"] = rabbat19
            info["people19"] = people19
            info["door19"] = door19
            info["pot19"] = pot19
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 20 ########################
    if num == "20" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_20_inventory"] == "None" or info["zslot_20_inventory"] == None or info["zslot_20_inventory"] == []:
            await ctx.send("Nothing in 20 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a20 = info["bpv20"]
        a20f = info["bpf20"]*1048576
        gain2x = int(a20)  + int(a20f)
        info["bpvf20"] = a20f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a20, a20f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_20_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_20_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_20_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_20_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack20 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence20 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp20 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop20 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp20 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp20 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp20 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp20 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp20 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp20 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp20 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp20 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop20 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop20 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop20 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat20 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people20 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door20 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot20 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack20 = itemname[newitemname]["max_dmg"] * gain2x
                defence20 = itemname[newitemname]["max_def"] * gain2x
                expdropp20 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop20 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp20 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp20 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp20 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp20 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp20 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp20 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp20 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp20 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop20 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop20 = itemname[newitemname]["all_drop_hp"]
                spdrop20 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat20 = itemname[newitemname]["rabbat"] * gain2x
                people20 = itemname[newitemname]["all_drop_people"] * gain2x
                door20 = itemname[newitemname]["all_drop_door"] * gain2x
                pot20 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack20"] = attack20
            info["defence20"] = defence20
            info["expdropp20"] = expdropp20
            info["dropdrop20"] = dropdrop20
            info["skexpdropp20"] = skexpdropp20
            info["fooddropp20"] = fooddropp20
            info["wooddropp20"] = wooddropp20
            info["stonedropp20"] = stonedropp20
            info["metaldropp20"] = metaldropp20
            info["golddropp20"] = golddropp20
            info["bocodropp20"] = bocodropp20
            info["keydropp20"] = keydropp20
            info["mpdrop20"] = mpdrop20
            info["hpdrop20"] = hpdrop20
            info["spdrop20"] = spdrop20
            info["rabbat20"] = rabbat20
            info["people20"] = people20
            info["door20"] = door20
            info["pot20"] = pot20
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 21 ########################
    if num == "21" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_21_inventory"] == "None" or info["zslot_21_inventory"] == None or info["zslot_21_inventory"] == []:
            await ctx.send("Nothing in 21 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a21 = info["bpv21"]
        a21f = info["bpf21"]*2097152
        gain2x = int(a21)  + int(a21f)
        info["bpvf21"] = a21f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a21, a21f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_21_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_21_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_21_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_21_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack21 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence21 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp21 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop21 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp21 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp21 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp21 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp21 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp21 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp21 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp21 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp21 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop21 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop21 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop21 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat21 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people21 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door21 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot21 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack21 = itemname[newitemname]["max_dmg"] * gain2x
                defence21 = itemname[newitemname]["max_def"] * gain2x
                expdropp21 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop21 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp21 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp21 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp21 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp21 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp21 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp21 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp21 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp21 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop21 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop21 = itemname[newitemname]["all_drop_hp"]
                spdrop21 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat21 = itemname[newitemname]["rabbat"] * gain2x
                people21 = itemname[newitemname]["all_drop_people"] * gain2x
                door21 = itemname[newitemname]["all_drop_door"] * gain2x
                pot21 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack21"] = attack21
            info["defence21"] = defence21
            info["expdropp21"] = expdropp21
            info["dropdrop21"] = dropdrop21
            info["skexpdropp21"] = skexpdropp21
            info["fooddropp21"] = fooddropp21
            info["wooddropp21"] = wooddropp21
            info["stonedropp21"] = stonedropp21
            info["metaldropp21"] = metaldropp21
            info["golddropp21"] = golddropp21
            info["bocodropp21"] = bocodropp21
            info["keydropp21"] = keydropp21
            info["mpdrop21"] = mpdrop21
            info["hpdrop21"] = hpdrop21
            info["spdrop21"] = spdrop21
            info["rabbat21"] = rabbat21
            info["people21"] = people21
            info["door21"] = door21
            info["pot21"] = pot21
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 22 ########################
    if num == "22" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_22_inventory"] == "None" or info["zslot_22_inventory"] == None or info["zslot_22_inventory"] == []:
            await ctx.send("Nothing in 22 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a22 = info["bpv22"]
        a22f = info["bpf22"]*4194304
        gain2x = int(a22)  + int(a22f)
        info["bpvf22"] = a22f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a22, a22f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_22_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_22_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_22_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_22_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack22 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence22 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp22 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop22 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp22 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp22 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp22 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp22 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp22 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp22 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp22 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp22 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop22 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop22 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop22 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat22 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people22 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door22 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot22 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack22 = itemname[newitemname]["max_dmg"] * gain2x
                defence22 = itemname[newitemname]["max_def"] * gain2x
                expdropp22 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop22 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp22 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp22 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp22 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp22 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp22 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp22 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp22 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp22 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop22 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop22 = itemname[newitemname]["all_drop_hp"]
                spdrop22 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat22 = itemname[newitemname]["rabbat"] * gain2x
                people22 = itemname[newitemname]["all_drop_people"] * gain2x
                door22 = itemname[newitemname]["all_drop_door"] * gain2x
                pot22 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack22"] = attack22
            info["defence22"] = defence22
            info["expdropp22"] = expdropp22
            info["dropdrop22"] = dropdrop22
            info["skexpdropp22"] = skexpdropp22
            info["fooddropp22"] = fooddropp22
            info["wooddropp22"] = wooddropp22
            info["stonedropp22"] = stonedropp22
            info["metaldropp22"] = metaldropp22
            info["golddropp22"] = golddropp22
            info["bocodropp22"] = bocodropp22
            info["keydropp22"] = keydropp22
            info["mpdrop22"] = mpdrop22
            info["hpdrop22"] = hpdrop22
            info["spdrop22"] = spdrop22
            info["rabbat22"] = rabbat22
            info["people22"] = people22
            info["door22"] = door22
            info["pot22"] = pot22
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 23 ########################
    if num == "23" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_23_inventory"] == "None" or info["zslot_23_inventory"] == None or info["zslot_23_inventory"] == []:
            await ctx.send("Nothing in 23 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a23 = info["bpv23"]
        a23f = info["bpf23"]*8388608
        gain2x = int(a23)  + int(a23f)
        info["bpvf23"] = a23f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a23, a23f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_23_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_23_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_23_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_23_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack23 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence23 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp23 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop23 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp23 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp23 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp23 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp23 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp23 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp23 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp23 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp23 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop23 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop23 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop23 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat23 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people23 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door23 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot23 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack23 = itemname[newitemname]["max_dmg"] * gain2x
                defence23 = itemname[newitemname]["max_def"] * gain2x
                expdropp23 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop23 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp23 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp23 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp23 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp23 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp23 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp23 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp23 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp23 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop23 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop23 = itemname[newitemname]["all_drop_hp"]
                spdrop23 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat23 = itemname[newitemname]["rabbat"] * gain2x
                people23 = itemname[newitemname]["all_drop_people"] * gain2x
                door23 = itemname[newitemname]["all_drop_door"] * gain2x
                pot23 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack23"] = attack23
            info["defence23"] = defence23
            info["expdropp23"] = expdropp23
            info["dropdrop23"] = dropdrop23
            info["skexpdropp23"] = skexpdropp23
            info["fooddropp23"] = fooddropp23
            info["wooddropp23"] = wooddropp23
            info["stonedropp23"] = stonedropp23
            info["metaldropp23"] = metaldropp23
            info["golddropp23"] = golddropp23
            info["bocodropp23"] = bocodropp23
            info["keydropp23"] = keydropp23
            info["mpdrop23"] = mpdrop23
            info["hpdrop23"] = hpdrop23
            info["spdrop23"] = spdrop23
            info["rabbat23"] = rabbat23
            info["people23"] = people23
            info["door23"] = door23
            info["pot23"] = pot23
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 24 ########################
    if num == "24" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_24_inventory"] == "None" or info["zslot_24_inventory"] == None or info["zslot_24_inventory"] == []:
            await ctx.send("Nothing in 24 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a24 = info["bpv24"]
        a24f = info["bpf24"]*16777216
        gain2x = int(a24)  + int(a24f)
        info["bpvf24"] = a24f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a24, a24f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_24_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_24_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_24_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_24_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack24 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence24 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp24 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop24 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp24 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp24 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp24 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp24 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp24 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp24 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp24 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp24 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop24 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop24 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop24 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat24 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people24 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door24 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot24 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack24 = itemname[newitemname]["max_dmg"] * gain2x
                defence24 = itemname[newitemname]["max_def"] * gain2x
                expdropp24 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop24 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp24 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp24 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp24 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp24 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp24 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp24 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp24 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp24 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop24 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop24 = itemname[newitemname]["all_drop_hp"]
                spdrop24 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat24 = itemname[newitemname]["rabbat"] * gain2x
                people24 = itemname[newitemname]["all_drop_people"] * gain2x
                door24 = itemname[newitemname]["all_drop_door"] * gain2x
                pot24 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack24"] = attack24
            info["defence24"] = defence24
            info["expdropp24"] = expdropp24
            info["dropdrop24"] = dropdrop24
            info["skexpdropp24"] = skexpdropp24
            info["fooddropp24"] = fooddropp24
            info["wooddropp24"] = wooddropp24
            info["stonedropp24"] = stonedropp24
            info["metaldropp24"] = metaldropp24
            info["golddropp24"] = golddropp24
            info["bocodropp24"] = bocodropp24
            info["keydropp24"] = keydropp24
            info["mpdrop24"] = mpdrop24
            info["hpdrop24"] = hpdrop24
            info["spdrop24"] = spdrop24
            info["rabbat24"] = rabbat24
            info["people24"] = people24
            info["door24"] = door24
            info["pot24"] = pot24
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
  ##################### von hier ab all 25 ########################
    if num == "25" :
        #info["slotnum"] = 0
        #info["bbvalue"] = 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        if info["zslot_25_inventory"] == "None" or info["zslot_25_inventory"] == None or info["zslot_25_inventory"] == []:
            await ctx.send("Nothing in 25 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        a25 = info["bpv25"]
        a25f = info["bpf25"] * 33554432
        gain2x = int(a25)  + int(a25f)
        info["bpvf25"] = a25f
        choices.append(inv_list)
        em = discord.Embed(description="```diff\n- Note\n This is Uppercase and Lowercase Sensitive.\n\n+ In your Inventory is...\n{}\n\n- You Put in\n! Slot_{} with BoboValue0x0 x{} + x{} BoboValue1x1 \n\n+ You Equipted:\n\n+ slot_19 {}\n+ slot_20 {}\n+ slot_21 {}\n+ slot_22 {}\n+ slot_23 {}\n+ slot_24 {}\n+ slot_25 {}\n\n What would you like to Put in?\n```".format("\n".join(map(str, inv_list)), num, a25, a25f, bp19_slot, bp20_slot, bp21_slot, bp22_slot, bp23_slot, bp24_slot, bp25_slot), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in inv_list:
            if answer1.content == "None" :
                await ctx.send("None is Nothing")
                await ctx.send("BoB Out!")
                return
            selected_item = str(answer1.content)
            info["selected_item"] = selected_item
            angezogen = info["zslot_25_inventory"]
            fileIO("players/{}/info.json".format(author.id), "save", info)
            info = fileIO("players/{}/info.json".format(author.id), "load")
            em = discord.Embed(description="```diff\n+ You equip the {}!```".format(selected_item), color=discord.Color.blue())
            await ctx.send(embed=em)
            anziehn = info["selected_item"]
            info["zslot_25_inventory"] = anziehn
            info["all_inventory"].append(str(info["zslot_25_inventory"]))
            info["all_inventory"].append(str(angezogen))
            info["all_inventory"].remove(str(info["selected_item"]))
            info["all_inventory"].remove(str(anziehn))
            info["zslot_25_inventory"] = anziehn
            newitemname = info["selected_item"]
            selected_item_type = itemname[anziehn]["material"]
            info["selected_item_type"] = selected_item_type
            if selected_item_type == "Castle":
                attack25 = ainfo[newitemname]["castle_drop_atk"] * gain2x
                print("attack7")
                print(attack7)
                print("gain2x")
                print(gain2x)
                defence25 = ainfo[newitemname]["castle_drop_def"] * gain2x
                expdropp25 = ainfo[newitemname]["castle_drop_exp"] * gain2x
                dropdrop25 = ainfo[newitemname]["castle_drop_max"] * gain2x
                skexpdropp25 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
                fooddropp25 = ainfo[newitemname]["castle_drop_food"] * gain2x
                wooddropp25 = ainfo[newitemname]["castle_drop_wood"] * gain2x
                stonedropp25 = ainfo[newitemname]["castle_drop_stone"] * gain2x
                metaldropp25 = ainfo[newitemname]["castle_drop_metal"] * gain2x
                golddropp25 = ainfo[newitemname]["castle_drop_gold"] * gain2x
                bocodropp25 = ainfo[newitemname]["castle_drop_boco"] * gain2x
                keydropp25 = ainfo[newitemname]["castle_drop_key"] * gain2x
                mpdrop25 = ainfo[newitemname]["castle_drop_mp"] * gain2x
                hpdrop25 = ainfo[newitemname]["castle_drop_hp"] * gain2x
                spdrop25 = ainfo[newitemname]["castle_drop_sp"] * gain2x
                rabbat25 = ainfo[newitemname]["castle_drop_rabbat"] * gain2x
                people25 = ainfo[newitemname]["castle_drop_people"] * gain2x
                door25 = ainfo[newitemname]["castle_drop_door"] * gain2x
                pot25 = ainfo[newitemname]["castle_drop_smallpot"] * gain2x
            else:
                attack25 = itemname[newitemname]["max_dmg"] * gain2x
                defence25 = itemname[newitemname]["max_def"] * gain2x
                expdropp25 = itemname[newitemname]["max_exp"] * gain2x
                dropdrop25 = itemname[newitemname]["max_drop"] * gain2x
                skexpdropp25 = itemname[newitemname]["max_skexp"] * gain2x
                fooddropp25 = itemname[newitemname]["food_drop"] * gain2x
                wooddropp25 = itemname[newitemname]["wood_drop"] * gain2x
                stonedropp25 = itemname[newitemname]["stone_drop"] * gain2x
                metaldropp25 = itemname[newitemname]["metal_drop"] * gain2x
                golddropp25 = itemname[newitemname]["gold_drop"] * gain2x
                bocodropp25 = itemname[newitemname]["boco_drop"] * gain2x
                keydropp25 = itemname[newitemname]["key_drop"] * gain2x
                mpdrop25 = itemname[newitemname]["all_drop_mp"] * gain2x
                hpdrop25 = itemname[newitemname]["all_drop_hp"]
                spdrop25 = itemname[newitemname]["all_drop_sp"] * gain2x
                rabbat25 = itemname[newitemname]["rabbat"] * gain2x
                people25 = itemname[newitemname]["all_drop_people"] * gain2x
                door25 = itemname[newitemname]["all_drop_door"] * gain2x
                pot25 = itemname[newitemname]["all_drop_pot"] * gain2x
            info["attack25"] = attack25
            info["defence25"] = defence25
            info["expdropp25"] = expdropp25
            info["dropdrop25"] = dropdrop25
            info["skexpdropp25"] = skexpdropp25
            info["fooddropp25"] = fooddropp25
            info["wooddropp25"] = wooddropp25
            info["stonedropp25"] = stonedropp25
            info["metaldropp25"] = metaldropp25
            info["golddropp25"] = golddropp25
            info["bocodropp25"] = bocodropp25
            info["keydropp25"] = keydropp25
            info["mpdrop25"] = mpdrop25
            info["hpdrop25"] = hpdrop25
            info["spdrop25"] = spdrop25
            info["rabbat25"] = rabbat25
            info["people25"] = people25
            info["door25"] = door25
            info["pot25"] = pot25
            fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("<@{}> please choose a valid\n ITEM NAME next time.".format(author.id))
            return
    if num == "0" and info["bpv0"] == 0 or info["zslot_0_inventory"] == []:
        print("bpv0 !!!!!! if num ==  0  == [] !!!!!")
        attack0 = 0
        defence0 = 0
        expdropp0 = 0
        dropdrop0 = 0
        skexpdropp0 = 0
        fooddropp0 = 0
        wooddropp0 = 0
        stonedropp0 = 0
        metaldropp0 = 0
        golddropp0 = 0
        bocodropp0 = 0
        keydropp0 = 0
        mpdrop0 = 0
        hpdrop0 = 0
        spdrop0 = 0
        rabbat0 = 0
        people0 = 0
        door0 = 0
        pot0 = 0
        gain2x = int(a00)  + int(a00f)
        selected_item_type = info["selected_item_type"]
        print("selected_item_type")
        print(selected_item_type)
        if selected_item_type == "Castle":
            print("---------------------NEwItemName-------000----")
            print(newitemname)
            selected_item_type = info["selected_item_type"]
            selected_item = info["selected_item"]
            print("selected_item")
            print(selected_item)
            print("a00 x 1 bpv0")
            print(a00)
            print("a00f x 1 bpf0")
            print(a00f)
            print(gain2x)
            print("in else if material true castle NEWNEWNEW")
            newitemname = info["selected_item"]
            attack011 = ainfo[newitemname]["castle_drop_atk"]
            print("attack011**")
            print(attack011)
            attack0 = ainfo[newitemname]["castle_drop_atk"] * gain2x
            print("inthere ATK_attack0+**")
            print(attack0)
            defence0 = ainfo[newitemname]["castle_drop_def"] * gain2x
            expdropp0 = ainfo[newitemname]["castle_drop_exp"] * gain2x
            total0 = expdropp0
            #info["castle_drop_exp"] = expdropp0 + castle_drop_exp
            dropdrop0 = ainfo[newitemname]["castle_drop_max"] * gain2x
            skexpdropp0 = ainfo[newitemname]["castle_drop_skexp"] * gain2x
            #expdropp0 = 0
            fooddropp0 = ainfo[newitemname]["castle_drop_food"] * gain2x
            wooddropp0 = ainfo[newitemname]["castle_drop_wood"] * gain2x
            stonedropp0 = ainfo[newitemname]["castle_drop_stone"] * gain2x
            metaldropp0 = ainfo[newitemname]["castle_drop_metal"] * gain2x
            golddropp0 = ainfo[newitemname]["castle_drop_gold"] * gain2x
            bocodropp0 = ainfo[newitemname]["castle_drop_boco"] * gain2x
            keydropp0 = ainfo[newitemname]["castle_drop_key"] * gain2x
            mpdrop0 = ainfo[newitemname]["castle_drop_mp"] * gain2x
            hpdrop0 = ainfo[newitemname]["castle_drop_hp"] * gain2x
            spdrop0 = ainfo[newitemname]["castle_drop_sp"] * gain2x
            rabbat0 = ainfo["Castle"][newitemname]["castle_drop_rabbat"] * gain2x
            people0 = ainfo["Castle"][newitemname]["castle_drop_people"] * gain2x
            door0 = ainfo["Castle"][newitemname]["castle_drop_door"] * gain2x
            pot0 = ainfo["Castle"][newitemname]["castle_drop_smallpot"] * gain2x
            #fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            print("a00 x 1 bpv0")
            print(a00)
            print("a00f x 1 bpf0")
            print(a00f)
            print("in else if NOT material true NOT Castle NEWNEWNEW")
            #newitemname = info["zslot_0_inventory"]
            #attack0 = itemname[newitemname]["max_dmg"]* int(info["bpv0"])
            #attack0 = itemname[newitemname]["max_dmg"]* int(info["bpv0"])
            #print("bpv0 = 0 []     else     max_dmg * bpv0")
            #print(attack0)
            #attack0111 = itemname[newitemname]["max_dmg"] * int(a00)  + int(a00f)
            #print("bpv0 = 0 []  TTTTTEEEEEESSSSSTTTTT   else     max_dmg * bpv0")
            #print(attack0111)
            print("--------0000-------------NEwItemName-----------")
            print(newitemname)
            newitemname = info["selected_item"]
            print("-------0000--------------NEwItemName---zslot_0_inventory--------")
            print(newitemname)
            print("gain2x  int(a00)  + int(a00f)")
            print(gain2x)
            attack0 = itemname[newitemname]["max_dmg"] * gain2x
            print("bpv0 = 0 []     else Item    max_dmg * * gain2x bpv00000")
            print(attack0)
            attack0111 = itemname[newitemname]["max_dmg"] * int(a00)  + int(a00f)
            #print("bpv0 = 0 []  TTTTTEEEEEESSSSSTTTTT   else     max_dmg * bpv01212121212121")
            #print(attack0111)
            defence0 = itemname[newitemname]["max_def"] * gain2x
            print("DEFENCE x gain")
            print(defence0)
            expdropp0 = itemname[newitemname]["max_exp"] * gain2x
            dropdrop0 = itemname[newitemname]["max_drop"] * gain2x
            skexpdropp0 = itemname[newitemname]["max_skexp"] * gain2x
            fooddropp0 = itemname[newitemname]["food_drop"] * gain2x
            wooddropp0 = itemname[newitemname]["wood_drop"] * gain2x
            stonedropp0 = itemname[newitemname]["stone_drop"] * gain2x
            metaldropp0 = itemname[newitemname]["metal_drop"] * gain2x
            golddropp0 = itemname[newitemname]["gold_drop"] * gain2x
            bocodropp0 = itemname[newitemname]["boco_drop"] * gain2x
            keydropp0 = itemname[newitemname]["key_drop"] * gain2x
            mpdrop0 = itemname[newitemname]["all_drop_mp"] * gain2x
            hpdrop0 = itemname[newitemname]["all_drop_hp"] * gain2x
            spdrop0 = itemname[newitemname]["all_drop_sp"] * gain2x
            rabbat0 = itemname[newitemname]["rabbat"] * gain2x
            people0 = itemname[newitemname]["all_drop_people"] * gain2x
            door0 = itemname[newitemname]["all_drop_door"] * gain2x
            pot0 = itemname[newitemname]["all_drop_pot"] * gain2x
            #fileIO("players/{}/info.json".format(author.id), "save", info)
        info["attack0"] = attack0
        print("attack0")
        print(attack0)
        info["defence0"] = defence0
        info["expdropp0"] = expdropp0
        info["dropdrop0"] = dropdrop0
        info["skexpdropp0"] = skexpdropp0
        info["fooddropp0"] = fooddropp0
        info["wooddropp0"] = wooddropp0
        info["stonedropp0"] = stonedropp0
        info["metaldropp0"] = metaldropp0
        info["golddropp0"] = golddropp0
        info["bocodropp0"] = bocodropp0
        info["keydropp0"] = keydropp0
        info["mpdrop0"] = mpdrop0
        info["hpdrop0"] = hpdrop0
        info["spdrop0"] = spdrop0
        info["rabbat0"] = rabbat0
        info["people0"] = people0
        info["door0"] = door0
        info["pot0"] = pot0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print(":bp0 save castle or itemTHE END!")
    if num == "1" and info["bpv1"] == 0 or info["zslot_1_inventory"] == []:
        print("bpv1 !!!!!! if num ==  0  == [] !!!!!")
        attack1 = 0
        defence1 = 0
        expdropp1 = 0
        dropdrop1 = 0
        skexpdropp1 = 0
        fooddropp1 = 0
        wooddropp1 = 0
        stonedropp1 = 0
        metaldropp1 = 0
        golddropp1 = 0
        bocodropp1 = 0
        keydropp1 = 0
        mpdrop1 = 0
        hpdrop1 = 0
        spdrop1 = 0
        rabbat1 = 0
        people1 = 0
        door1 = 0
        pot1 = 0
        a01 = info["bpv1"]
        a01f = info["bpf1"]
        gain2x = int(a01)  + int(a01f)
        selected_item_type = info["selected_item_type"]
    if num == "2" and info["bpv2"] == 0 or info["zslot_2_inventory"] == []:
        attack2 = 0
        defence2 = 0
        expdropp2 = 0
        dropdrop2 = 0
        skexpdropp2 = 0
        fooddropp2 = 0
        wooddropp2 = 0
        stonedropp2 = 0
        metaldropp2 = 0
        golddropp2 = 0
        bocodropp2 = 0
        keydropp2 = 0
        mpdrop2 = 0
        hpdrop2 = 0
        spdrop2 = 0
        rabbat2 = 0
        people2 = 0
        door2 = 0
        pot2 = 0
        a02 = info["bpv2"]
        a02f = info["bpf2"]
        gain2x = int(a02)  + int(a02f)
        if selected_item_type == "Castle":
            print("------2222---------------NEwItemName----------if num == 2 and info[bpv2] == 0 or info[zslot_2_inventory] == []:-   if selected_item_type == Castle:if selected_item_type == Castle:if selected_item_type == Castle:if selected_item_type == Castle:if selected_item_type == Castle:if selected_item_type == Castle:if selected_item_type == Castle:")
        try:
            newitemname = info["zslot_2_inventory"]
            #fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "3" and info["bpv3"] == 0 or info["zslot_3_inventory"] == []:
        attack3 = 0
        defence3 = 0
        expdropp3 = 0
        dropdrop3 = 0
        skexpdropp3 = 0
        fooddropp3 = 0
        wooddropp3 = 0
        stonedropp3 = 0
        metaldropp3 = 0
        golddropp3 = 0
        bocodropp3 = 0
        keydropp3 = 0
        mpdrop3 = 0
        hpdrop3 = 0
        spdrop3 = 0
        rabbat3 = 0
        people3 = 0
        door3 = 0
        pot3 = 0
    else:
        a03 = info["bpv3"]
    if num == "4" and info["bpv4"] == 0 or info["zslot_4_inventory"] == []:
        attack4 = 0
        defence4 = 0
        expdropp4 = 0
        dropdrop4 = 0
        skexpdropp4 = 0
        fooddropp4 = 0
        wooddropp4 = 0
        stonedropp4 = 0
        metaldropp4 = 0
        golddropp4 = 0
        bocodropp4 = 0
        keydropp4 = 0
        mpdrop4 = 0
        hpdrop4 = 0
        spdrop4 = 0
        rabbat4 = 0
        people4 = 0
        door4 = 0
        pot4 = 0
    else:
        a04 = info["bpv4"]
        a04f = info["bpf4"]
        gain2x = int(a04)  + int(a04f)
        try:
            newitemname = info["zslot_4_inventory"]
            attack4= itemname[newitemname]["max_dmg"]* int(info["bpv4"])
            defence4 = itemname[newitemname]["max_def"] * int(info["bpv4"])
            expdropp4 = itemname[newitemname]["max_exp"] * int(info["bpv4"])
            dropdrop4= itemname[newitemname]["max_drop"] * int(info["bpv4"])
            skexpdropp4 = itemname[newitemname]["max_skexp"]* int(info["bpv4"])
            fooddropp4 = itemname[newitemname]["food_drop"] * int(info["bpv4"])
            wooddropp4 = itemname[newitemname]["wood_drop"] * int(info["bpv4"])
            stonedropp4 = itemname[newitemname]["stone_drop"] * int(info["bpv4"])
            metaldropp4 = itemname[newitemname]["metal_drop"] * int(info["bpv4"])
            golddropp4 = itemname[newitemname]["gold_drop"] * int(info["bpv4"])
            bocodropp4 = itemname[newitemname]["boco_drop"] * int(info["bpv4"])
            keydropp4 = itemname[newitemname]["key_drop"] * int(info["bpv4"])
            mpdrop4 = itemname[newitemname]["all_drop_mp"] * int(info["bpv4"])
            hpdrop4 = itemname[newitemname]["all_drop_hp"] * int(info["bpv4"])
            spdrop4 = itemname[newitemname]["all_drop_sp"] * int(info["bpv4"])
            rabbat4 = itemname[newitemname]["rabbat"] * int(info["bpv4"])
            people4 = 0
            door4 = 0
            pot4 = 0
            info["attack4"] = attack4
            info["defence4"] = defence4
            info["expdropp4"] = expdropp4
            info["dropdrop4"] = dropdrop4
            info["skexpdropp4"] = skexpdropp4
            info["fooddropp4"] = fooddropp4
            info["wooddropp4"] = wooddropp4
            info["stonedropp4"] = stonedropp4
            info["metaldropp4"] = metaldropp4
            info["golddropp4"] = golddropp4
            info["bocodropp4"] = bocodropp4
            info["keydropp4"] = keydropp4
            info["mpdrop4"] = mpdrop4
            info["hpdrop4"] = hpdrop4
            info["spdrop4"] = spdrop4
            info["rabbat4"] = rabbat4
            info["people4"] = people4
            info["door4"] = door4
            info["pot4"] = pot4
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "5" and info["bpv5"] == 0 or info["zslot_5_inventory"] == []:
        attack5 = 0
        defence5 = 0
        expdropp5 = 0
        dropdrop5 = 0
        skexpdropp5 = 0
        fooddropp5 = 0
        wooddropp5 = 0
        stonedropp5 = 0
        metaldropp5 = 0
        golddropp5 = 0
        bocodropp5 = 0
        keydropp5 = 0
        mpdrop5 = 0
        hpdrop5 = 0
        spdrop5 = 0
        rabbat5 = 0
        people5 = 0
        door5 = 0
        pot5 = 0
    else:
        a05 = info["bpv5"]
    if num == "6" and info["bpv6"] == 0 or info["zslot_6_inventory"] == []:
        attack6 = 0
        defence6 = 0
        expdropp6 = 0
        dropdrop6 = 0
        skexpdropp6 = 0
        fooddropp6 = 0
        wooddropp6 = 0
        stonedropp6 = 0
        metaldropp6 = 0
        golddropp6 = 0
        bocodropp6 = 0
        keydropp6 = 0
        mpdrop6 = 0
        hpdrop6 = 0
        spdrop6 = 0
        rabbat6 = 0
        people6 = 0
        door6 = 0
        pot6 = 0
    else:
        a06 = info["bpv6"]
    if num == "7" and info["bpv7"] == 0 or info["zslot_7_inventory"] == []:
        attack7 = 0
        defence7 = 0
        expdropp7 = 0
        dropdrop7 = 0
        skexpdropp7 = 0
        fooddropp7 = 0
        wooddropp7 = 0
        stonedropp7 = 0
        metaldropp7 = 0
        golddropp7 = 0
        bocodropp7 = 0
        keydropp7 = 0
        mpdrop7 = 0
        hpdrop7 = 0
        spdrop7 = 0
        rabbat7 = 0
        people7 = 0
        door7 = 0
        pot7 = 0
    else:
        a07 = info["bpv7"]
    if num == "8" and info["bpv8"] == 0 or info["zslot_8_inventory"] == []:
        attack8 = 0
        defence8 = 0
        expdropp8 = 0
        dropdrop8 = 0
        skexpdropp8 = 0
        fooddropp8 = 0
        wooddropp8 = 0
        stonedropp8 = 0
        metaldropp8 = 0
        golddropp8 = 0
        bocodropp8 = 0
        keydropp8 = 0
        mpdrop8 = 0
        hpdrop8 = 0
        spdrop8 = 0
        rabbat8 = 0
        people8 = 0
        door8 = 0
        pot8 = 0
    else:
        a08 = info["bpv8"]
        a08f = info["bpf8"]
        gain2x = int(a08)  + int(a08f)
        try:
            newitemname = info["zslot_8_inventory"]
            attack8 = itemname[newitemname]["max_dmg"]* int(info["bpv8"])
            defence8 = itemname[newitemname]["max_def"] * int(info["bpv8"])
            expdropp8 = itemname[newitemname]["max_exp"] * int(info["bpv8"])
            dropdrop8 = itemname[newitemname]["max_drop"] * int(info["bpv8"])
            skexpdropp8 = itemname[newitemname]["max_skexp"]* int(info["bpv8"])
            fooddropp8 = itemname[newitemname]["food_drop"] * int(info["bpv8"])
            wooddropp8 = itemname[newitemname]["wood_drop"] * int(info["bpv8"])
            stonedropp8 = itemname[newitemname]["stone_drop"] * int(info["bpv8"])
            metaldropp8 = itemname[newitemname]["metal_drop"] * int(info["bpv8"])
            golddropp8 = itemname[newitemname]["gold_drop"] * int(info["bpv8"])
            bocodropp8 = itemname[newitemname]["boco_drop"] * int(info["bpv8"])
            keydropp8 = itemname[newitemname]["key_drop"] * int(info["bpv8"])
            mpdrop8 = itemname[newitemname]["all_drop_mp"] * int(info["bpv8"])
            hpdrop8 = itemname[newitemname]["all_drop_hp"] * int(info["bpv8"])
            spdrop8 = itemname[newitemname]["all_drop_sp"] * int(info["bpv8"])
            rabbat8 = itemname[newitemname]["rabbat"] * int(info["bpv8"])
            people8 = 0
            door8 = 0
            pot8 = 0
            info["attack8"] = attack8
            info["defence8"] = defence8
            info["expdropp8"] = expdropp8
            info["dropdrop8"] = dropdrop8
            info["skexpdropp8"] = skexpdropp8
            info["fooddropp8"] = fooddropp8
            info["wooddropp8"] = wooddropp8
            info["stonedropp8"] = stonedropp8
            info["metaldropp8"] = metaldropp8
            info["golddropp8"] = golddropp8
            info["bocodropp8"] = bocodropp8
            info["keydropp8"] = keydropp8
            info["mpdrop8"] = mpdrop8
            info["hpdrop8"] = hpdrop8
            info["spdrop8"] = spdrop8
            info["rabbat8"] = rabbat8
            info["people8"] = people8
            info["door8"] = door8
            info["pot8"] = pot8
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "9" and info["bpv9"] == 0 or info["zslot_9_inventory"] == []:
        attack9 = 0
        defence9 = 0
        expdropp9 = 0
        dropdrop9 = 0
        skexpdropp9 = 0
        fooddropp9 = 0
        wooddropp9 = 0
        stonedropp9 = 0
        metaldropp9 = 0
        golddropp9 = 0
        bocodropp9 = 0
        keydropp9 = 0
        mpdrop9 = 0
        hpdrop9 = 0
        spdrop9 = 0
        rabbat9 = 0
        people9 = 0
        door9 = 0
        pot9 = 0
    else:
        a09 = info["bpv9"]
        a09f = info["bpf9"]
        gain2x = int(a09)  + int(a09f)
        try:
            newitemname = info["zslot_9_inventory"]
            attack9 = itemname[newitemname]["max_dmg"]* int(info["bpv9"])
            defence9 = itemname[newitemname]["max_def"] * int(info["bpv9"])
            expdropp9 = itemname[newitemname]["max_exp"] * int(info["bpv9"])
            dropdrop9 = itemname[newitemname]["max_drop"] * int(info["bpv9"])
            skexpdropp9 = itemname[newitemname]["max_skexp"]* int(info["bpv9"])
            fooddropp9 = itemname[newitemname]["food_drop"] * int(info["bpv9"])
            wooddropp9 = itemname[newitemname]["wood_drop"] * int(info["bpv9"])
            stonedropp9 = itemname[newitemname]["stone_drop"] * int(info["bpv9"])
            metaldropp9 = itemname[newitemname]["metal_drop"] * int(info["bpv9"])
            golddropp9 = itemname[newitemname]["gold_drop"] * int(info["bpv9"])
            bocodropp9 = itemname[newitemname]["boco_drop"] * int(info["bpv9"])
            keydropp9 = itemname[newitemname]["key_drop"] * int(info["bpv9"])
            mpdrop9 = itemname[newitemname]["all_drop_mp"] * int(info["bpv9"])
            hpdrop9 = itemname[newitemname]["all_drop_hp"] * int(info["bpv9"])
            spdrop9 = itemname[newitemname]["all_drop_sp"] * int(info["bpv9"])
            rabbat9 = itemname[newitemname]["rabbat"] * int(info["bpv9"])
            people9 = 0
            door9 = 0
            pot9 = 0
            info["attack9"] = attack9
            info["defence9"] = defence9
            info["expdropp9"] = expdropp9
            info["dropdrop9"] = dropdrop9
            info["skexpdropp9"] = skexpdropp9
            info["fooddropp9"] = fooddropp9
            info["wooddropp9"] = wooddropp9
            info["stonedropp9"] = stonedropp9
            info["metaldropp9"] = metaldropp9
            info["golddropp9"] = golddropp9
            info["bocodropp9"] = bocodropp9
            info["keydropp9"] = keydropp9
            info["mpdrop9"] = mpdrop9
            info["hpdrop9"] = hpdrop9
            info["spdrop9"] = spdrop9
            info["rabbat9"] = rabbat9
            info["people9"] = people9
            info["door9"] = door9
            info["pot9"] = pot9
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "10" and info["bpv10"] == 0 or info["zslot_10_inventory"] == []:
        attack10 = 0
        defence10 = 0
        expdropp10 = 0
        dropdrop10 = 0
        skexpdropp10 = 0
        fooddropp10 = 0
        wooddropp10 = 0
        stonedropp10 = 0
        metaldropp10 = 0
        golddropp10 = 0
        bocodropp10 = 0
        keydropp10 = 0
        mpdrop10 = 0
        hpdrop10 = 0
        spdrop10 = 0
        rabbat10 = 0
        people10 = 0
        door10 = 0
        pot10 = 0
    else:
        a10 = info["bpv10"]
        a10f = info["bpf10"]
        gain2x = int(a10)  + int(a10f)
        try:
            newitemname = info["zslot_10_inventory"]
            attack10 = itemname[newitemname]["max_dmg"]* int(info["bpv10"])
            defence10 = itemname[newitemname]["max_def"] * int(info["bpv10"])
            expdropp10 = itemname[newitemname]["max_exp"] * int(info["bpv10"])
            dropdrop10 = itemname[newitemname]["max_drop"] * int(info["bpv10"])
            skexpdropp10 = itemname[newitemname]["max_skexp"]* int(info["bpv10"])
            fooddropp10 = itemname[newitemname]["food_drop"] * int(info["bpv10"])
            wooddropp10 = itemname[newitemname]["wood_drop"] * int(info["bpv10"])
            stonedropp10 = itemname[newitemname]["stone_drop"] * int(info["bpv10"])
            metaldropp10 = itemname[newitemname]["metal_drop"] * int(info["bpv10"])
            golddropp10 = itemname[newitemname]["gold_drop"] * int(info["bpv10"])
            bocodropp10 = itemname[newitemname]["boco_drop"] * int(info["bpv10"])
            keydropp10 = itemname[newitemname]["key_drop"] * int(info["bpv10"])
            mpdrop10 = itemname[newitemname]["all_drop_mp"] * int(info["bpv10"])
            hpdrop10 = itemname[newitemname]["all_drop_hp"] * int(info["bpv10"])
            spdrop10 = itemname[newitemname]["all_drop_sp"] * int(info["bpv10"])
            rabbat10 = itemname[newitemname]["rabbat"] * int(info["bpv10"])
            people10 = 0
            door10 = 0
            pot10 = 0
            info["attack10"] = attack10
            info["defence10"] = defence10
            info["expdropp10"] = expdropp10
            info["dropdrop10"] = dropdrop10
            info["skexpdropp10"] = skexpdropp10
            info["fooddropp10"] = fooddropp10
            info["wooddropp10"] = wooddropp10
            info["stonedropp10"] = stonedropp10
            info["metaldropp10"] = metaldropp10
            info["golddropp10"] = golddropp10
            info["bocodropp10"] = bocodropp10
            info["keydropp10"] = keydropp10
            info["mpdrop10"] = mpdrop10
            info["hpdrop10"] = hpdrop10
            info["spdrop10"] = spdrop10
            info["rabbat10"] = rabbat10
            info["people10"] = people10
            info["door10"] = door10
            info["pot10"] = pot10
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "11" and info["bpv11"] == 0 or info["zslot_11_inventory"] == []:
        attack11 = 0
        defence11 = 0
        expdropp11 = 0
        dropdrop11 = 0
        skexpdropp11 = 0
        fooddropp11 = 0
        wooddropp11 = 0
        stonedropp11 = 0
        metaldropp11 = 0
        golddropp11 = 0
        bocodropp11 = 0
        keydropp11 = 0
        mpdrop11 = 0
        hpdrop11 = 0
        spdrop11 = 0
        rabbat11 = 0
        people11 = 0
        door11 = 0
        pot11 = 0
    else:
        a11 = info["bpv11"]
        a11f = info["bpf11"]
        gain2x = int(a11)  + int(a11f)
        try:
            newitemname = info["zslot_11_inventory"]
            attack11 = itemname[newitemname]["max_dmg"]* int(info["bpv11"])
            defence11 = itemname[newitemname]["max_def"] * int(info["bpv11"])
            expdropp11 = itemname[newitemname]["max_exp"] * int(info["bpv11"])
            dropdrop11 = itemname[newitemname]["max_drop"] * int(info["bpv11"])
            skexpdropp11 = itemname[newitemname]["max_skexp"]* int(info["bpv11"])
            fooddropp11 = itemname[newitemname]["food_drop"] * int(info["bpv11"])
            wooddropp11 = itemname[newitemname]["wood_drop"] * int(info["bpv11"])
            stonedropp11 = itemname[newitemname]["stone_drop"] * int(info["bpv11"])
            metaldropp11 = itemname[newitemname]["metal_drop"] * int(info["bpv11"])
            golddropp11 = itemname[newitemname]["gold_drop"] * int(info["bpv11"])
            bocodropp11 = itemname[newitemname]["boco_drop"] * int(info["bpv11"])
            keydropp11 = itemname[newitemname]["key_drop"] * int(info["bpv11"])
            mpdrop11 = itemname[newitemname]["all_drop_mp"] * int(info["bpv11"])
            hpdrop11 = itemname[newitemname]["all_drop_hp"] * int(info["bpv11"])
            spdrop11 = itemname[newitemname]["all_drop_sp"] * int(info["bpv11"])
            rabbat11 = itemname[newitemname]["rabbat"] * int(info["bpv11"])
            people11 = 0
            door11 = 0
            pot11 = 0
            info["attack11"] = attack11
            info["defence11"] = defence11
            info["expdropp11"] = expdropp11
            info["dropdrop11"] = dropdrop11
            info["skexpdropp11"] = skexpdropp11
            info["fooddropp11"] = fooddropp11
            info["wooddropp11"] = wooddropp11
            info["stonedropp11"] = stonedropp11
            info["metaldropp11"] = metaldropp11
            info["golddropp11"] = golddropp11
            info["bocodropp11"] = bocodropp11
            info["keydropp11"] = keydropp11
            info["mpdrop11"] = mpdrop11
            info["hpdrop11"] = hpdrop11
            info["spdrop11"] = spdrop11
            info["rabbat11"] = rabbat11
            info["people11"] = people11
            info["door11"] = door11
            info["pot11"] = pot11
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "12" and info["bpv12"] == 0 or info["zslot_12_inventory"] == []:
        attack12 = 0
        defence12 = 0
        expdropp12 = 0
        dropdrop12 = 0
        skexpdropp12 = 0
        fooddropp12 = 0
        wooddropp12 = 0
        stonedropp12 = 0
        metaldropp12 = 0
        golddropp12 = 0
        bocodropp12 = 0
        keydropp12 = 0
        mpdrop12 = 0
        hpdrop12 = 0
        spdrop12 = 0
        rabbat12 = 0
        people12 = 0
        door12 = 0
        pot12 = 0
    else:
        a12 = info["bpv12"]
        a12f = info["bpf12"]
        gain2x = int(a12)  + int(a12f)
        try:
            newitemname = info["zslot_12_inventory"]
            attack12 = itemname[newitemname]["max_dmg"]* int(info["bpv12"])
            defence12 = itemname[newitemname]["max_def"] * int(info["bpv12"])
            expdropp12 = itemname[newitemname]["max_exp"] * int(info["bpv12"])
            dropdrop12 = itemname[newitemname]["max_drop"] * int(info["bpv12"])
            skexpdropp12 = itemname[newitemname]["max_skexp"]* int(info["bpv12"])
            fooddropp12 = itemname[newitemname]["food_drop"] * int(info["bpv12"])
            wooddropp12 = itemname[newitemname]["wood_drop"] * int(info["bpv12"])
            stonedropp12 = itemname[newitemname]["stone_drop"] * int(info["bpv12"])
            metaldropp12 = itemname[newitemname]["metal_drop"] * int(info["bpv12"])
            golddropp12 = itemname[newitemname]["gold_drop"] * int(info["bpv12"])
            bocodropp12 = itemname[newitemname]["boco_drop"] * int(info["bpv12"])
            keydropp12 = itemname[newitemname]["key_drop"] * int(info["bpv12"])
            mpdrop12 = itemname[newitemname]["all_drop_mp"] * int(info["bpv12"])
            hpdrop12 = itemname[newitemname]["all_drop_hp"] * int(info["bpv12"])
            spdrop12 = itemname[newitemname]["all_drop_sp"] * int(info["bpv12"])
            rabbat12 = itemname[newitemname]["rabbat"] * int(info["bpv12"])
            people12 = 0
            door12 = 0
            pot12 = 0
            info["attack12"] = attack12
            info["defence12"] = defence12
            info["expdropp12"] = expdropp12
            info["dropdrop12"] = dropdrop12
            info["skexpdropp12"] = skexpdropp12
            info["fooddropp12"] = fooddropp12
            info["wooddropp12"] = wooddropp12
            info["stonedropp12"] = stonedropp12
            info["metaldropp12"] = metaldropp12
            info["golddropp12"] = golddropp12
            info["bocodropp12"] = bocodropp12
            info["keydropp12"] = keydropp12
            info["mpdrop12"] = mpdrop12
            info["hpdrop12"] = hpdrop12
            info["spdrop12"] = spdrop12
            info["rabbat12"] = rabbat12
            info["people12"] = people12
            info["door12"] = door12
            info["pot12"] = pot12
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "13" and info["bpv13"] == 0 or info["zslot_13_inventory"] == []:
        attack13 = 0
        defence13 = 0
        expdropp13 = 0
        dropdrop13 = 0
        skexpdropp13 = 0
        fooddropp13 = 0
        wooddropp13 = 0
        stonedropp13 = 0
        metaldropp13 = 0
        golddropp13 = 0
        bocodropp13 = 0
        keydropp13 = 0
        mpdrop13 = 0
        hpdrop13 = 0
        spdrop13 = 0
        rabbat13 = 0
        people13 = 0
        door13 = 0
        pot13 = 0
    else:
        a13 = info["bpv13"]
        a13f = info["bpf13"]
        gain2x = int(a13)  + int(a13f)
        try:
            newitemname = info["zslot_13_inventory"]
            attack13 = itemname[newitemname]["max_dmg"]* int(info["bpv13"])
            defence13 = itemname[newitemname]["max_def"] * int(info["bpv13"])
            expdropp13 = itemname[newitemname]["max_exp"] * int(info["bpv13"])
            dropdrop13 = itemname[newitemname]["max_drop"] * int(info["bpv13"])
            skexpdropp13 = itemname[newitemname]["max_skexp"]* int(info["bpv13"])
            fooddropp13 = itemname[newitemname]["food_drop"] * int(info["bpv13"])
            wooddropp13 = itemname[newitemname]["wood_drop"] * int(info["bpv13"])
            stonedropp13 = itemname[newitemname]["stone_drop"] * int(info["bpv13"])
            metaldropp13 = itemname[newitemname]["metal_drop"] * int(info["bpv13"])
            golddropp13 = itemname[newitemname]["gold_drop"] * int(info["bpv13"])
            bocodropp13 = itemname[newitemname]["boco_drop"] * int(info["bpv13"])
            keydropp13 = itemname[newitemname]["key_drop"] * int(info["bpv13"])
            mpdrop13 = itemname[newitemname]["all_drop_mp"] * int(info["bpv13"])
            hpdrop13 = itemname[newitemname]["all_drop_hp"] * int(info["bpv13"])
            spdrop13 = itemname[newitemname]["all_drop_sp"] * int(info["bpv13"])
            rabbat13 = itemname[newitemname]["rabbat"] * int(info["bpv13"])
            people13 = 0
            door13 = 0
            pot13 = 0
            info["attack13"] = attack13
            info["defence13"] = defence13
            info["expdropp13"] = expdropp13
            info["dropdrop13"] = dropdrop13
            info["skexpdropp13"] = skexpdropp13
            info["fooddropp13"] = fooddropp13
            info["wooddropp13"] = wooddropp13
            info["stonedropp13"] = stonedropp13
            info["metaldropp13"] = metaldropp13
            info["golddropp13"] = golddropp13
            info["bocodropp13"] = bocodropp13
            info["keydropp13"] = keydropp13
            info["mpdrop13"] = mpdrop13
            info["hpdrop13"] = hpdrop13
            info["spdrop13"] = spdrop13
            info["rabbat13"] = rabbat13
            info["people13"] = people13
            info["door13"] = door13
            info["pot13"] = pot13
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "14" and info["bpv14"] == 0 or info["zslot_14_inventory"] == []:
        attack14 = 0
        defence14 = 0
        expdropp14 = 0
        dropdrop14 = 0
        skexpdropp14 = 0
        fooddropp14 = 0
        wooddropp14 = 0
        stonedropp14 = 0
        metaldropp14 = 0
        golddropp14 = 0
        bocodropp14 = 0
        keydropp14 = 0
        mpdrop14 = 0
        hpdrop14 = 0
        spdrop14 = 0
        rabbat14 = 0
        people14 = 0
        door14 = 0
        pot14 = 0
    else:
        a14 = info["bpv14"]
        a14f = info["bpf14"]
        gain2x = int(a14)  + int(a14f)
        try:
            newitemname = info["zslot_14_inventory"]
            attack14 = itemname[newitemname]["max_dmg"]* int(info["bpv14"])
            defence14 = itemname[newitemname]["max_def"] * int(info["bpv14"])
            expdropp14 = itemname[newitemname]["max_exp"] * int(info["bpv14"])
            dropdrop14 = itemname[newitemname]["max_drop"] * int(info["bpv14"])
            skexpdropp14 = itemname[newitemname]["max_skexp"]* int(info["bpv14"])
            fooddropp14 = itemname[newitemname]["food_drop"] * int(info["bpv14"])
            wooddropp14 = itemname[newitemname]["wood_drop"] * int(info["bpv14"])
            stonedropp14 = itemname[newitemname]["stone_drop"] * int(info["bpv14"])
            metaldropp14 = itemname[newitemname]["metal_drop"] * int(info["bpv14"])
            golddropp14 = itemname[newitemname]["gold_drop"] * int(info["bpv14"])
            bocodropp14 = itemname[newitemname]["boco_drop"] * int(info["bpv14"])
            keydropp14 = itemname[newitemname]["key_drop"] * int(info["bpv14"])
            mpdrop14 = itemname[newitemname]["all_drop_mp"] * int(info["bpv14"])
            hpdrop14 = itemname[newitemname]["all_drop_hp"] * int(info["bpv14"])
            spdrop14 = itemname[newitemname]["all_drop_sp"] * int(info["bpv14"])
            rabbat14 = itemname[newitemname]["rabbat"] * int(info["bpv14"])
            people14 = 0
            door14 = 0
            pot14 = 0
            info["attack14"] = attack14
            info["defence14"] = defence14
            info["expdropp14"] = expdropp14
            info["dropdrop14"] = dropdrop14
            info["skexpdropp14"] = skexpdropp14
            info["fooddropp14"] = fooddropp14
            info["wooddropp14"] = wooddropp14
            info["stonedropp14"] = stonedropp14
            info["metaldropp14"] = metaldropp14
            info["golddropp14"] = golddropp14
            info["bocodropp14"] = bocodropp14
            info["keydropp14"] = keydropp14
            info["mpdrop14"] = mpdrop14
            info["hpdrop14"] = hpdrop14
            info["spdrop14"] = spdrop14
            info["rabbat14"] = rabbat14
            info["people14"] = people14
            info["door14"] = door14
            info["pot14"] = pot14
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "15" and info["bpv15"] == 0 or info["zslot_15_inventory"] == []:
        attack15 = 0
        defence15 = 0
        expdropp15 = 0
        dropdrop15 = 0
        skexpdropp15 = 0
        fooddropp15 = 0
        wooddropp15 = 0
        stonedropp15 = 0
        metaldropp15 = 0
        golddropp15 = 0
        bocodropp15 = 0
        keydropp15 = 0
        mpdrop15 = 0
        hpdrop15 = 0
        spdrop15 = 0
        rabbat15 = 0
        people15 = 0
        door15 = 0
        pot15 = 0
    else:
        a15 = info["bpv15"]
        a15f = info["bpf15"]
        gain2x = int(a15)  + int(a15f)
        try:
            newitemname = info["zslot_15_inventory"]
            attack15 = itemname[newitemname]["max_dmg"]* int(info["bpv15"])
            defence15 = itemname[newitemname]["max_def"] * int(info["bpv15"])
            expdropp15 = itemname[newitemname]["max_exp"] * int(info["bpv15"])
            dropdrop15 = itemname[newitemname]["max_drop"] * int(info["bpv15"])
            skexpdropp15 = itemname[newitemname]["max_skexp"]* int(info["bpv15"])
            fooddropp15 = itemname[newitemname]["food_drop"] * int(info["bpv15"])
            wooddropp15 = itemname[newitemname]["wood_drop"] * int(info["bpv15"])
            stonedropp15 = itemname[newitemname]["stone_drop"] * int(info["bpv15"])
            metaldropp15 = itemname[newitemname]["metal_drop"] * int(info["bpv15"])
            golddropp15 = itemname[newitemname]["gold_drop"] * int(info["bpv15"])
            bocodropp15 = itemname[newitemname]["boco_drop"] * int(info["bpv15"])
            keydropp15 = itemname[newitemname]["key_drop"] * int(info["bpv15"])
            mpdrop15 = itemname[newitemname]["all_drop_mp"] * int(info["bpv15"])
            hpdrop15 = itemname[newitemname]["all_drop_hp"] * int(info["bpv15"])
            spdrop15 = itemname[newitemname]["all_drop_sp"] * int(info["bpv15"])
            rabbat15 = itemname[newitemname]["rabbat"] * int(info["bpv15"])
            people15 = 0
            door15 = 0
            pot15 = 0
            info["attack15"] = attack15
            info["defence15"] = defence15
            info["expdropp15"] = expdropp15
            info["dropdrop15"] = dropdrop15
            info["skexpdropp15"] = skexpdropp15
            info["fooddropp15"] = fooddropp15
            info["wooddropp15"] = wooddropp15
            info["stonedropp15"] = stonedropp15
            info["metaldropp15"] = metaldropp15
            info["golddropp15"] = golddropp15
            info["bocodropp15"] = bocodropp15
            info["keydropp15"] = keydropp15
            info["mpdrop15"] = mpdrop15
            info["hpdrop15"] = hpdrop15
            info["spdrop15"] = spdrop15
            info["rabbat15"] = rabbat15
            info["people15"] = people15
            info["door15"] = door15
            info["pot15"] = pot15
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "16" and info["bpv16"] == 0 or info["zslot_16_inventory"] == []:
        attack16 = 0
        defence16 = 0
        expdropp16 = 0
        dropdrop16 = 0
        skexpdropp16 = 0
        fooddropp16 = 0
        wooddropp16 = 0
        stonedropp16 = 0
        metaldropp16 = 0
        golddropp16 = 0
        bocodropp16 = 0
        keydropp16 = 0
        mpdrop16 = 0
        hpdrop16 = 0
        spdrop16 = 0
        rabbat16 = 0
        people16 = 0
        door16 = 0
        pot16 = 0
    else:
        a16 = info["bpv16"]
        a16f = info["bpf16"]
        gain2x = int(a16)  + int(a16f)
        try:
            newitemname = info["zslot_16_inventory"]
            attack16 = itemname[newitemname]["max_dmg"]* int(info["bpv16"])
            defence16 = itemname[newitemname]["max_def"] * int(info["bpv16"])
            expdropp16 = itemname[newitemname]["max_exp"] * int(info["bpv16"])
            dropdrop16 = itemname[newitemname]["max_drop"] * int(info["bpv16"])
            skexpdropp16 = itemname[newitemname]["max_skexp"]* int(info["bpv16"])
            fooddropp16 = itemname[newitemname]["food_drop"] * int(info["bpv16"])
            wooddropp16 = itemname[newitemname]["wood_drop"] * int(info["bpv16"])
            stonedropp16 = itemname[newitemname]["stone_drop"] * int(info["bpv16"])
            metaldropp16 = itemname[newitemname]["metal_drop"] * int(info["bpv16"])
            golddropp16 = itemname[newitemname]["gold_drop"] * int(info["bpv16"])
            bocodropp16 = itemname[newitemname]["boco_drop"] * int(info["bpv16"])
            keydropp16 = itemname[newitemname]["key_drop"] * int(info["bpv16"])
            mpdrop16 = itemname[newitemname]["all_drop_mp"] * int(info["bpv16"])
            hpdrop16 = itemname[newitemname]["all_drop_hp"] * int(info["bpv16"])
            spdrop16 = itemname[newitemname]["all_drop_sp"] * int(info["bpv16"])
            rabbat16 = itemname[newitemname]["rabbat"] * int(info["bpv16"])
            people16 = 0
            door16 = 0
            pot16 = 0
            info["attack16"] = attack16
            info["defence16"] = defence16
            info["expdropp16"] = expdropp16
            info["dropdrop16"] = dropdrop16
            info["skexpdropp16"] = skexpdropp16
            info["fooddropp16"] = fooddropp16
            info["wooddropp16"] = wooddropp16
            info["stonedropp16"] = stonedropp16
            info["metaldropp16"] = metaldropp16
            info["golddropp16"] = golddropp16
            info["bocodropp16"] = bocodropp16
            info["keydropp16"] = keydropp16
            info["mpdrop16"] = mpdrop16
            info["hpdrop16"] = hpdrop16
            info["spdrop16"] = spdrop16
            info["rabbat16"] = rabbat16
            info["people16"] = people16
            info["door16"] = door16
            info["pot16"] = pot16
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "17" and info["bpv17"] == 0 or info["zslot_17_inventory"] == []:
        attack17 = 0
        defence17 = 0
        expdropp17 = 0
        dropdrop17 = 0
        skexpdropp17 = 0
        fooddropp17 = 0
        wooddropp17 = 0
        stonedropp17 = 0
        metaldropp17 = 0
        golddropp17 = 0
        bocodropp17 = 0
        keydropp17 = 0
        mpdrop17 = 0
        hpdrop17 = 0
        spdrop17 = 0
        rabbat17 = 0
        people17 = 0
        door17 = 0
        pot17 = 0
    else:
        a17 = info["bpv17"]
        a17f = info["bpf17"]
        gain2x = int(a17)  + int(a17f)
        try:
            newitemname = info["zslot_17_inventory"]
            attack17 = itemname[newitemname]["max_dmg"]* int(info["bpv17"])
            defence17 = itemname[newitemname]["max_def"] * int(info["bpv17"])
            expdropp17 = itemname[newitemname]["max_exp"] * int(info["bpv17"])
            dropdrop17 = itemname[newitemname]["max_drop"] * int(info["bpv17"])
            skexpdropp17 = itemname[newitemname]["max_skexp"]* int(info["bpv17"])
            fooddropp17 = itemname[newitemname]["food_drop"] * int(info["bpv17"])
            wooddropp17 = itemname[newitemname]["wood_drop"] * int(info["bpv17"])
            stonedropp17 = itemname[newitemname]["stone_drop"] * int(info["bpv17"])
            metaldropp17 = itemname[newitemname]["metal_drop"] * int(info["bpv17"])
            golddropp17 = itemname[newitemname]["gold_drop"] * int(info["bpv17"])
            bocodropp17 = itemname[newitemname]["boco_drop"] * int(info["bpv17"])
            keydropp17 = itemname[newitemname]["key_drop"] * int(info["bpv17"])
            mpdrop17 = itemname[newitemname]["all_drop_mp"] * int(info["bpv17"])
            hpdrop17 = itemname[newitemname]["all_drop_hp"] * int(info["bpv17"])
            spdrop17 = itemname[newitemname]["all_drop_sp"] * int(info["bpv17"])
            rabbat17 = itemname[newitemname]["rabbat"] * int(info["bpv17"])
            people17 = 0
            door17 = 0
            pot17 = 0
            info["attack17"] = attack17
            info["defence17"] = defence17
            info["expdropp17"] = expdropp17
            info["dropdrop17"] = dropdrop17
            info["skexpdropp17"] = skexpdropp17
            info["fooddropp17"] = fooddropp17
            info["wooddropp17"] = wooddropp17
            info["stonedropp17"] = stonedropp17
            info["metaldropp17"] = metaldropp17
            info["golddropp17"] = golddropp17
            info["bocodropp17"] = bocodropp17
            info["keydropp17"] = keydropp17
            info["mpdrop17"] = mpdrop17
            info["hpdrop17"] = hpdrop17
            info["spdrop17"] = spdrop17
            info["rabbat17"] = rabbat17
            info["people17"] = people17
            info["door17"] = door17
            info["pot17"] = pot17
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "18" and info["bpv18"] == 0 or info["zslot_18_inventory"] == []:
        attack18 = 0
        defence18 = 0
        expdropp18 = 0
        dropdrop18 = 0
        skexpdropp18 = 0
        fooddropp18 = 0
        wooddropp18 = 0
        stonedropp18 = 0
        metaldropp18 = 0
        golddropp18 = 0
        bocodropp18 = 0
        keydropp18 = 0
        mpdrop18 = 0
        hpdrop18 = 0
        spdrop18 = 0
        rabbat18 = 0
        people18 = 0
        door18 = 0
        pot18 = 0
    else:
        a18 = info["bpv18"]
        a18f = info["bpf18"]
        gain2x = int(a18)  + int(a18f)
        try:
            newitemname = info["zslot_18_inventory"]
            attack18 = itemname[newitemname]["max_dmg"]* int(info["bpv18"])
            defence18 = itemname[newitemname]["max_def"] * int(info["bpv18"])
            expdropp18 = itemname[newitemname]["max_exp"] * int(info["bpv18"])
            dropdrop18 = itemname[newitemname]["max_drop"] * int(info["bpv18"])
            skexpdropp18 = itemname[newitemname]["max_skexp"]* int(info["bpv18"])
            fooddropp18 = itemname[newitemname]["food_drop"] * int(info["bpv18"])
            wooddropp18 = itemname[newitemname]["wood_drop"] * int(info["bpv18"])
            stonedropp18 = itemname[newitemname]["stone_drop"] * int(info["bpv18"])
            metaldropp18 = itemname[newitemname]["metal_drop"] * int(info["bpv18"])
            golddropp18 = itemname[newitemname]["gold_drop"] * int(info["bpv18"])
            bocodropp18 = itemname[newitemname]["boco_drop"] * int(info["bpv18"])
            keydropp18 = itemname[newitemname]["key_drop"] * int(info["bpv18"])
            mpdrop18 = itemname[newitemname]["all_drop_mp"] * int(info["bpv18"])
            hpdrop18 = itemname[newitemname]["all_drop_hp"] * int(info["bpv18"])
            spdrop18 = itemname[newitemname]["all_drop_sp"] * int(info["bpv18"])
            rabbat18 = itemname[newitemname]["rabbat"] * int(info["bpv18"])
            people18 = 0
            door18 = 0
            pot18 = 0
            info["attack18"] = attack18
            info["defence18"] = defence18
            info["expdropp18"] = expdropp18
            info["dropdrop18"] = dropdrop18
            info["skexpdropp18"] = skexpdropp18
            info["fooddropp18"] = fooddropp18
            info["wooddropp18"] = wooddropp18
            info["stonedropp18"] = stonedropp18
            info["metaldropp18"] = metaldropp18
            info["golddropp18"] = golddropp18
            info["bocodropp18"] = bocodropp18
            info["keydropp18"] = keydropp18
            info["mpdrop18"] = mpdrop18
            info["hpdrop18"] = hpdrop18
            info["spdrop18"] = spdrop18
            info["rabbat18"] = rabbat18
            info["people18"] = people18
            info["door18"] = door18
            info["pot18"] = pot18
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "19" and info["bpv19"] == 0 or info["zslot_19_inventory"] == []:
        attack19 = 0
        defence19 = 0
        expdropp19 = 0
        dropdrop19 = 0
        skexpdropp19 = 0
        fooddropp19 = 0
        wooddropp19 = 0
        stonedropp19 = 0
        metaldropp19 = 0
        golddropp19 = 0
        bocodropp19 = 0
        keydropp19 = 0
        mpdrop19 = 0
        hpdrop19 = 0
        spdrop19 = 0
        rabbat19 = 0
        people19 = 0
        door19 = 0
        pot19 = 0
    else:
        a19 = info["bpv19"]
        a19f = info["bpf19"]
        gain2x = int(a19)  + int(a19f)
        try:
            newitemname = info["zslot_19_inventory"]
            attack19 = itemname[newitemname]["max_dmg"]* int(info["bpv19"])
            defence19 = itemname[newitemname]["max_def"] * int(info["bpv19"])
            expdropp19 = itemname[newitemname]["max_exp"] * int(info["bpv19"])
            dropdrop19 = itemname[newitemname]["max_drop"] * int(info["bpv19"])
            skexpdropp19 = itemname[newitemname]["max_skexp"]* int(info["bpv19"])
            fooddropp19 = itemname[newitemname]["food_drop"] * int(info["bpv19"])
            wooddropp19 = itemname[newitemname]["wood_drop"] * int(info["bpv19"])
            stonedropp19 = itemname[newitemname]["stone_drop"] * int(info["bpv19"])
            metaldropp19 = itemname[newitemname]["metal_drop"] * int(info["bpv19"])
            golddropp19 = itemname[newitemname]["gold_drop"] * int(info["bpv19"])
            bocodropp19 = itemname[newitemname]["boco_drop"] * int(info["bpv19"])
            keydropp19 = itemname[newitemname]["key_drop"] * int(info["bpv19"])
            mpdrop19 = itemname[newitemname]["all_drop_mp"] * int(info["bpv19"])
            hpdrop19 = itemname[newitemname]["all_drop_hp"] * int(info["bpv19"])
            spdrop19 = itemname[newitemname]["all_drop_sp"] * int(info["bpv19"])
            rabbat19 = itemname[newitemname]["rabbat"] * int(info["bpv19"])
            people19 = 0
            door19 = 0
            pot19 = 0
            info["attack19"] = attack19
            info["defence19"] = defence19
            info["expdropp19"] = expdropp19
            info["dropdrop19"] = dropdrop19
            info["skexpdropp19"] = skexpdropp19
            info["fooddropp19"] = fooddropp19
            info["wooddropp19"] = wooddropp19
            info["stonedropp19"] = stonedropp19
            info["metaldropp19"] = metaldropp19
            info["golddropp19"] = golddropp19
            info["bocodropp19"] = bocodropp19
            info["keydropp19"] = keydropp19
            info["mpdrop19"] = mpdrop19
            info["hpdrop19"] = hpdrop19
            info["spdrop19"] = spdrop19
            info["rabbat19"] = rabbat19
            info["people19"] = people19
            info["door19"] = door19
            info["pot19"] = pot19
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "20" and info["bpv20"] == 0 or info["zslot_20_inventory"] == []:
        attack20 = 0
        defence20 = 0
        expdropp20 = 0
        dropdrop20 = 0
        skexpdropp20 = 0
        fooddropp20 = 0
        wooddropp20 = 0
        stonedropp20 = 0
        metaldropp20 = 0
        golddropp20 = 0
        bocodropp20 = 0
        keydropp20 = 0
        mpdrop20 = 0
        hpdrop20 = 0
        spdrop20 = 0
        rabbat20 = 0
        people20 = 0
        door20 = 0
        pot20 = 0
    else:
        a20 = info["bpv20"]
        a20f = info["bpf20"]
        gain2x = int(a20)  + int(a20f)
        try:
            newitemname = info["zslot_20_inventory"]
            attack20 = itemname[newitemname]["max_dmg"]* int(info["bpv20"])
            defence20 = itemname[newitemname]["max_def"] * int(info["bpv20"])
            expdropp20 = itemname[newitemname]["max_exp"] * int(info["bpv20"])
            dropdrop20 = itemname[newitemname]["max_drop"] * int(info["bpv20"])
            skexpdropp20 = itemname[newitemname]["max_skexp"]* int(info["bpv20"])
            fooddropp20 = itemname[newitemname]["food_drop"] * int(info["bpv20"])
            wooddropp20 = itemname[newitemname]["wood_drop"] * int(info["bpv20"])
            stonedropp20 = itemname[newitemname]["stone_drop"] * int(info["bpv20"])
            metaldropp20 = itemname[newitemname]["metal_drop"] * int(info["bpv20"])
            golddropp20 = itemname[newitemname]["gold_drop"] * int(info["bpv20"])
            bocodropp20 = itemname[newitemname]["boco_drop"] * int(info["bpv20"])
            keydropp20 = itemname[newitemname]["key_drop"] * int(info["bpv20"])
            mpdrop20 = itemname[newitemname]["all_drop_mp"] * int(info["bpv20"])
            hpdrop20 = itemname[newitemname]["all_drop_hp"] * int(info["bpv20"])
            spdrop20 = itemname[newitemname]["all_drop_sp"] * int(info["bpv20"])
            rabbat20 = itemname[newitemname]["rabbat"] * int(info["bpv20"])
            people20 = 0
            door20 = 0
            pot20 = 0
            info["attack20"] = attack20
            info["defence20"] = defence20
            info["expdropp20"] = expdropp20
            info["dropdrop20"] = dropdrop20
            info["skexpdropp20"] = skexpdropp20
            info["fooddropp20"] = fooddropp20
            info["wooddropp20"] = wooddropp20
            info["stonedropp20"] = stonedropp20
            info["metaldropp20"] = metaldropp20
            info["golddropp20"] = golddropp20
            info["bocodropp20"] = bocodropp20
            info["keydropp20"] = keydropp20
            info["mpdrop20"] = mpdrop20
            info["hpdrop20"] = hpdrop20
            info["spdrop20"] = spdrop20
            info["rabbat20"] = rabbat20
            info["people20"] = people20
            info["door20"] = door20
            info["pot20"] = pot20
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "21" and info["bpv21"] == 0 or info["zslot_21_inventory"] == []:
        attack21 = 0
        defence21 = 0
        expdropp21 = 0
        dropdrop21 = 0
        skexpdropp21 = 0
        fooddropp21 = 0
        wooddropp21 = 0
        stonedropp21 = 0
        metaldropp21 = 0
        golddropp21 = 0
        bocodropp21 = 0
        keydropp21 = 0
        mpdrop21 = 0
        hpdrop21 = 0
        spdrop21 = 0
        rabbat21 = 0
        people21 = 0
        door21 = 0
        pot21 = 0
    else:
        a21 = info["bpv21"]
        a21f = info["bpf21"]
        gain2x = int(a21)  + int(a21f)
        try:
            newitemname = info["zslot_21_inventory"]
            attack21 = itemname[newitemname]["max_dmg"]* int(info["bpv21"])
            defence21 = itemname[newitemname]["max_def"] * int(info["bpv21"])
            expdropp21 = itemname[newitemname]["max_exp"] * int(info["bpv21"])
            dropdrop21 = itemname[newitemname]["max_drop"] * int(info["bpv21"])
            skexpdropp21 = itemname[newitemname]["max_skexp"]* int(info["bpv21"])
            fooddropp21 = itemname[newitemname]["food_drop"] * int(info["bpv21"])
            wooddropp21 = itemname[newitemname]["wood_drop"] * int(info["bpv21"])
            stonedropp21 = itemname[newitemname]["stone_drop"] * int(info["bpv21"])
            metaldropp21 = itemname[newitemname]["metal_drop"] * int(info["bpv21"])
            golddropp21 = itemname[newitemname]["gold_drop"] * int(info["bpv21"])
            bocodropp21 = itemname[newitemname]["boco_drop"] * int(info["bpv21"])
            keydropp21 = itemname[newitemname]["key_drop"] * int(info["bpv21"])
            mpdrop21 = itemname[newitemname]["all_drop_mp"] * int(info["bpv21"])
            hpdrop21 = itemname[newitemname]["all_drop_hp"] * int(info["bpv21"])
            spdrop21 = itemname[newitemname]["all_drop_sp"] * int(info["bpv21"])
            rabbat21 = itemname[newitemname]["rabbat"] * int(info["bpv21"])
            people21 = 0
            door21 = 0
            pot21 = 0
            info["attack21"] = attack21
            info["defence21"] = defence21
            info["expdropp21"] = expdropp21
            info["dropdrop21"] = dropdrop21
            info["skexpdropp21"] = skexpdropp21
            info["fooddropp21"] = fooddropp21
            info["wooddropp21"] = wooddropp21
            info["stonedropp21"] = stonedropp21
            info["metaldropp21"] = metaldropp21
            info["golddropp21"] = golddropp21
            info["bocodropp21"] = bocodropp21
            info["keydropp21"] = keydropp21
            info["mpdrop21"] = mpdrop21
            info["hpdrop21"] = hpdrop21
            info["spdrop21"] = spdrop21
            info["rabbat21"] = rabbat21
            info["people21"] = people21
            info["door21"] = door21
            info["pot21"] = pot21
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "22" and info["bpv22"] == 0 or info["zslot_22_inventory"] == []:
        attack22 = 0
        defence22 = 0
        expdropp22 = 0
        dropdrop22 = 0
        skexpdropp22 = 0
        fooddropp22 = 0
        wooddropp22 = 0
        stonedropp22 = 0
        metaldropp22 = 0
        golddropp22 = 0
        bocodropp22 = 0
        keydropp22 = 0
        mpdrop22 = 0
        hpdrop22 = 0
        spdrop22 = 0
        rabbat22 = 0
        people22 = 0
        door22 = 0
        pot22 = 0
    else:
        a22 = info["bpv22"]
        a22f = info["bpf22"]
        gain2x = int(a22)  + int(a22f)
        try:
            newitemname = info["zslot_22_inventory"]
            attack22 = itemname[newitemname]["max_dmg"]* int(info["bpv22"])
            defence22 = itemname[newitemname]["max_def"] * int(info["bpv22"])
            expdropp22 = itemname[newitemname]["max_exp"] * int(info["bpv22"])
            dropdrop22 = itemname[newitemname]["max_drop"] * int(info["bpv22"])
            skexpdropp22 = itemname[newitemname]["max_skexp"]* int(info["bpv22"])
            fooddropp22 = itemname[newitemname]["food_drop"] * int(info["bpv22"])
            wooddropp22 = itemname[newitemname]["wood_drop"] * int(info["bpv22"])
            stonedropp22 = itemname[newitemname]["stone_drop"] * int(info["bpv22"])
            metaldropp22 = itemname[newitemname]["metal_drop"] * int(info["bpv22"])
            golddropp22 = itemname[newitemname]["gold_drop"] * int(info["bpv22"])
            bocodropp22 = itemname[newitemname]["boco_drop"] * int(info["bpv22"])
            keydropp22 = itemname[newitemname]["key_drop"] * int(info["bpv22"])
            mpdrop22 = itemname[newitemname]["all_drop_mp"] * int(info["bpv22"])
            hpdrop22 = itemname[newitemname]["all_drop_hp"] * int(info["bpv22"])
            spdrop22 = itemname[newitemname]["all_drop_sp"] * int(info["bpv22"])
            rabbat22 = itemname[newitemname]["rabbat"] * int(info["bpv22"])
            people22 = 0
            door22 = 0
            pot22 = 0
            info["attack22"] = attack22
            info["defence22"] = defence22
            info["expdropp22"] = expdropp22
            info["dropdrop22"] = dropdrop22
            info["skexpdropp22"] = skexpdropp22
            info["fooddropp22"] = fooddropp22
            info["wooddropp22"] = wooddropp22
            info["stonedropp22"] = stonedropp22
            info["metaldropp22"] = metaldropp22
            info["golddropp22"] = golddropp22
            info["bocodropp22"] = bocodropp22
            info["keydropp22"] = keydropp22
            info["mpdrop22"] = mpdrop22
            info["hpdrop22"] = hpdrop22
            info["spdrop22"] = spdrop22
            info["rabbat22"] = rabbat22
            info["people22"] = people22
            info["door22"] = door22
            info["pot22"] = pot22
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "23" and info["bpv23"] == 0 or info["zslot_23_inventory"] == []:
        attack23 = 0
        defence23 = 0
        expdropp23 = 0
        dropdrop23 = 0
        skexpdropp23 = 0
        fooddropp23 = 0
        wooddropp23 = 0
        stonedropp23 = 0
        metaldropp23 = 0
        golddropp23 = 0
        bocodropp23 = 0
        keydropp23 = 0
        mpdrop23 = 0
        hpdrop23 = 0
        spdrop23 = 0
        rabbat23 = 0
        people23 = 0
        door23 = 0
        pot23 = 0
    else:
        a23 = info["bpv23"]
        a23f = info["bpf23"]
        gain2x = int(a23)  + int(a23f)
        try:
            newitemname = info["zslot_23_inventory"]
            attack23 = itemname[newitemname]["max_dmg"]* int(info["bpv23"])
            defence23 = itemname[newitemname]["max_def"] * int(info["bpv23"])
            expdropp23 = itemname[newitemname]["max_exp"] * int(info["bpv23"])
            dropdrop23 = itemname[newitemname]["max_drop"] * int(info["bpv23"])
            skexpdropp23 = itemname[newitemname]["max_skexp"]* int(info["bpv23"])
            fooddropp23 = itemname[newitemname]["food_drop"] * int(info["bpv23"])
            wooddropp23 = itemname[newitemname]["wood_drop"] * int(info["bpv23"])
            stonedropp23 = itemname[newitemname]["stone_drop"] * int(info["bpv23"])
            metaldropp23 = itemname[newitemname]["metal_drop"] * int(info["bpv23"])
            golddropp23 = itemname[newitemname]["gold_drop"] * int(info["bpv23"])
            bocodropp23 = itemname[newitemname]["boco_drop"] * int(info["bpv23"])
            keydropp23 = itemname[newitemname]["key_drop"] * int(info["bpv23"])
            mpdrop23 = itemname[newitemname]["all_drop_mp"] * int(info["bpv23"])
            hpdrop23 = itemname[newitemname]["all_drop_hp"] * int(info["bpv23"])
            spdrop23 = itemname[newitemname]["all_drop_sp"] * int(info["bpv23"])
            rabbat23 = itemname[newitemname]["rabbat"] * int(info["bpv23"])
            people23 = 0
            door23 = 0
            pot23 = 0
            info["attack23"] = attack23
            info["defence23"] = defence23
            info["expdropp23"] = expdropp23
            info["dropdrop23"] = dropdrop23
            info["skexpdropp23"] = skexpdropp23
            info["fooddropp23"] = fooddropp23
            info["wooddropp23"] = wooddropp23
            info["stonedropp23"] = stonedropp23
            info["metaldropp23"] = metaldropp23
            info["golddropp23"] = golddropp23
            info["bocodropp23"] = bocodropp23
            info["keydropp23"] = keydropp23
            info["mpdrop23"] = mpdrop23
            info["hpdrop23"] = hpdrop23
            info["spdrop23"] = spdrop23
            info["rabbat23"] = rabbat23
            info["people23"] = people23
            info["door23"] = door23
            info["pot23"] = pot23
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    if num == "24" and info["bpv24"] == 0 or info["zslot_24_inventory"] == []:
        attack24 = 0
        defence24 = 0
        expdropp24 = 0
        dropdrop24 = 0
        skexpdropp24 = 0
        fooddropp24 = 0
        wooddropp24 = 0
        stonedropp24 = 0
        metaldropp24 = 0
        golddropp24 = 0
        bocodropp24 = 0
        keydropp24 = 0
        mpdrop24 = 0
        hpdrop24 = 0
        spdrop24 = 0
        rabbat24 = 0
        people24 = 0
        door24 = 0
        pot24 = 0
    else:
        a24 = info["bpv24"]
        a24f = info["bpf24"]
        gain2x = int(a24)  + int(a24f)
        try:
            newitemname = info["zslot_24_inventory"]
            attack24 = itemname[newitemname]["max_dmg"]* int(info["bpv24"])
            defence24 = itemname[newitemname]["max_def"] * int(info["bpv24"])
            expdropp24 = itemname[newitemname]["max_exp"] * int(info["bpv24"])
            dropdrop24 = itemname[newitemname]["max_drop"] * int(info["bpv24"])
            skexpdropp24 = itemname[newitemname]["max_skexp"]* int(info["bpv24"])
            fooddropp24 = itemname[newitemname]["food_drop"] * int(info["bpv24"])
            wooddropp24 = itemname[newitemname]["wood_drop"] * int(info["bpv24"])
            stonedropp24 = itemname[newitemname]["stone_drop"] * int(info["bpv24"])
            metaldropp24 = itemname[newitemname]["metal_drop"] * int(info["bpv24"])
            golddropp24 = itemname[newitemname]["gold_drop"] * int(info["bpv24"])
            bocodropp24 = itemname[newitemname]["boco_drop"] * int(info["bpv24"])
            keydropp24 = itemname[newitemname]["key_drop"] * int(info["bpv24"])
            mpdrop24 = itemname[newitemname]["all_drop_mp"] * int(info["bpv24"])
            hpdrop24v = itemname[newitemname]["all_drop_hp"] * int(info["bpv24"])
            spdrop24 = itemname[newitemname]["all_drop_sp"] * int(info["bpv24"])
            rabbat24 = itemname[newitemname]["rabbat"] * int(info["bpv24"])
            people24 = 0
            door24 = 0
            pot24 = 0
            info["attack24"] = attack24
            info["defence24"] = defence24
            info["expdropp24"] = expdropp24
            info["dropdrop24"] = dropdrop24
            info["skexpdropp24"] = skexpdropp24
            info["fooddropp24"] = fooddropp24
            info["wooddropp24"] = wooddropp24
            info["stonedropp24"] = stonedropp24
            info["metaldropp24"] = metaldropp24
            info["golddropp24"] = golddropp24
            info["bocodropp24"] = bocodropp24
            info["keydropp24"] = keydropp24
            info["mpdrop24"] = mpdrop24
            info["hpdrop24"] = hpdrop24
            info["spdrop24"] = spdrop24
            info["rabbat24"] = rabbat24
            info["people24"] = people24
            info["door24"] = door24
            info["pot24"] = pot24
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            pass
    if num == "25" and info["bpv25"] == 0 or info["zslot_25_inventory"] == []:
        attack25 = 0
        defence25 = 0
        expdropp25 = 0
        dropdrop25 = 0
        skexpdropp25 = 0
        fooddropp25 = 0
        wooddropp25 = 0
        stonedropp25 = 0
        metaldropp25 = 0
        golddropp25 = 0
        bocodropp25 = 0
        keydropp25 = 0
        mpdrop25 = 0
        hpdrop25 = 0
        spdrop25 = 0
        rabbat25 = 0
        people25 = 0
        door25 = 0
        pot25 = 0
    else:
        a25 = info["bpv25"]
        a25f = info["bpf25"]
        gain2x = int(a25)  + int(a25f)
        try:
            newitemname = info["zslot_25_inventory"]
            attack25 = itemname[newitemname]["max_dmg"]* int(info["bpv25"])
            defence25 = itemname[newitemname]["max_def"] * int(info["bpv25"])
            expdropp25 = itemname[newitemname]["max_exp"] * int(info["bpv25"])
            dropdrop25 = itemname[newitemname]["max_drop"] * int(info["bpv25"])
            skexpdropp25 = itemname[newitemname]["max_skexp"]* int(info["bpv25"])
            fooddropp25 = itemname[newitemname]["food_drop"] * int(info["bpv25"])
            wooddropp25 = itemname[newitemname]["wood_drop"] * int(info["bpv25"])
            stonedropp25 = itemname[newitemname]["stone_drop"] * int(info["bpv25"])
            metaldropp25 = itemname[newitemname]["metal_drop"] * int(info["bpv25"])
            golddropp25 = itemname[newitemname]["gold_drop"] * int(info["bpv25"])
            bocodropp25 = itemname[newitemname]["boco_drop"] * int(info["bpv25"])
            keydropp25 = itemname[newitemname]["key_drop"] * int(info["bpv25"])
            mpdrop25 = itemname[newitemname]["all_drop_mp"] * int(info["bpv25"])
            hpdrop25 = itemname[newitemname]["all_drop_hp"] * int(info["bpv25"])
            spdrop25 = itemname[newitemname]["all_drop_sp"] * int(info["bpv25"])
            rabbat25 = itemname[newitemname]["rabbat"] * int(info["bpv25"])
            people25 = 0
            door25 = 0
            pot25 = 0
            info["attack25"] = attack25
            info["defence25"] = defence25
            info["expdropp25"] = expdropp25
            info["dropdrop25"] = dropdrop25
            info["skexpdropp25"] = skexpdropp25
            info["fooddropp25"] = fooddropp25
            info["wooddropp25"] = wooddropp25
            info["stonedropp25"] = stonedropp25
            info["metaldropp25"] = metaldropp25
            info["golddropp25"] = golddropp25
            info["bocodropp25"] = bocodropp25
            info["keydropp25"] = keydropp25
            info["mpdrop25"] = mpdrop25
            info["hpdrop25"] = hpdrop25
            info["spdrop25"] = spdrop25
            info["rabbat25"] = rabbat25
            info["people25"] = people25
            info["door25"] = door25
            info["pot25"] = pot25
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except Error:
            pass
    attack0 = info["attack0"]
    defence0 = info["defence0"]
    expdropp0 = info["expdropp0"]
    dropdrop0 = info["dropdrop0"]
    skexpdropp0 = info["skexpdropp0"]
    fooddropp0 = info["fooddropp0"]
    wooddropp0 = info["wooddropp0"]
    stonedropp0 = info["stonedropp0"]
    metaldropp0 = info["metaldropp0"]
    golddropp0 = info["golddropp0"]
    bocodropp0 = info["bocodropp0"]
    keydropp0 = info["keydropp0"]
    mpdrop0 = info["mpdrop0"]
    hpdrop0 = info["hpdrop0"]
    spdrop0 = info["spdrop0"]
    rabbat0 = info["rabbat0"]
    people0 = info["people0"]
    door0 = info["door0"]
    pot0 = info["pot0"]
    attack1 = info["attack1"]
    defence1 = info["defence1"]
    expdropp1 = info["expdropp1"]
    dropdrop1 = info["dropdrop1"]
    skexpdropp1 = info["skexpdropp1"]
    fooddropp1 = info["fooddropp1"]
    wooddropp1 = info["wooddropp1"]
    stonedropp1 = info["stonedropp1"]
    metaldropp1 = info["metaldropp1"]
    golddropp1 = info["golddropp1"]
    bocodropp1 = info["bocodropp1"]
    keydropp1 = info["keydropp1"]
    mpdrop1 = info["mpdrop1"]
    hpdrop1 = info["hpdrop1"]
    spdrop1 = info["spdrop1"]
    rabbat1 = info["rabbat1"]
    people1 = info["people1"]
    door1 = info["door1"]
    pot1 = info["pot1"]
    attack2 = info["attack2"]
    defence2 = info["defence2"]
    expdropp2 = info["expdropp2"]
    dropdrop2 = info["dropdrop2"]
    skexpdropp2 = info["skexpdropp2"]
    fooddropp2 = info["fooddropp2"]
    wooddropp2 = info["wooddropp2"]
    stonedropp2 = info["stonedropp2"]
    metaldropp2 = info["metaldropp2"]
    golddropp2 = info["golddropp2"]
    bocodropp2 = info["bocodropp2"]
    keydropp2 = info["keydropp2"]
    mpdrop2 = info["mpdrop2"]
    hpdrop2 = info["hpdrop2"]
    spdrop2 = info["spdrop2"]
    rabbat2 = info["rabbat2"]
    people2 = info["people2"]
    door2 = info["door2"]
    pot2 = info["pot2"]
    attack3 = info["attack3"]
    defence3 = info["defence3"]
    expdropp3 = info["expdropp3"]
    dropdrop3 = info["dropdrop3"]
    skexpdropp3 = info["skexpdropp3"]
    fooddropp3 = info["fooddropp3"]
    wooddropp3 = info["wooddropp3"]
    stonedropp3 = info["stonedropp3"]
    metaldropp3 = info["metaldropp3"]
    golddropp3 = info["golddropp3"]
    bocodropp3 = info["bocodropp3"]
    keydropp3 = info["keydropp3"]
    mpdrop3 = info["mpdrop3"]
    hpdrop3 = info["hpdrop3"]
    spdrop3 = info["spdrop3"]
    rabbat3 = info["rabbat3"]
    people3 = info["people3"]
    door3 = info["door3"]
    pot3 = info["pot3"]
    attack4 = info["attack4"]
    defence4 = info["defence4"]
    expdropp4 = info["expdropp4"]
    dropdrop4 = info["dropdrop4"]
    skexpdropp4 = info["skexpdropp4"]
    fooddropp4 = info["fooddropp4"]
    wooddropp4 = info["wooddropp4"]
    stonedropp4 = info["stonedropp4"]
    metaldropp4 = info["metaldropp4"]
    golddropp4 = info["golddropp4"]
    bocodropp4 = info["bocodropp4"]
    keydropp4 = info["keydropp4"]
    mpdrop4 = info["mpdrop4"]
    hpdrop4 = info["hpdrop4"]
    spdrop4 = info["spdrop4"]
    rabbat4 = info["rabbat4"]
    people4 = info["people4"]
    door4 = info["door4"]
    pot4 = info["pot4"]
    attack5 = info["attack5"]
    defence5 = info["defence5"]
    expdropp5 = info["expdropp5"]
    dropdrop5 = info["dropdrop5"]
    skexpdropp5 = info["skexpdropp5"]
    fooddropp5 = info["fooddropp5"]
    wooddropp5 = info["wooddropp5"]
    stonedropp5 = info["stonedropp5"]
    metaldropp5 = info["metaldropp5"]
    golddropp5 = info["golddropp5"]
    bocodropp5 = info["bocodropp5"]
    keydropp5 = info["keydropp5"]
    mpdrop5 = info["mpdrop5"]
    hpdrop5 = info["hpdrop5"]
    spdrop5 = info["spdrop5"]
    rabbat5= info["rabbat5"]
    people5 = info["people5"]
    door5 = info["door5"]
    pot5 = info["pot5"]
    attack6 = info["attack6"]
    defence6 = info["defence6"]
    expdropp6 = info["expdropp6"]
    dropdrop6 = info["dropdrop6"]
    skexpdropp6 = info["skexpdropp6"]
    fooddropp6 = info["fooddropp6"]
    wooddropp6 = info["wooddropp6"]
    stonedropp6 = info["stonedropp6"]
    metaldropp6 = info["metaldropp6"]
    golddropp6 = info["golddropp6"]
    bocodropp6 = info["bocodropp6"]
    keydropp6 = info["keydropp6"]
    mpdrop6 = info["mpdrop6"]
    hpdrop6 = info["hpdrop6"]
    spdrop6 = info["spdrop6"]
    rabbat6 = info["rabbat6"]
    people6 = info["people6"]
    door6 = info["door6"]
    pot6 = info["pot6"]
    attack7 = info["attack7"]
    defence7 = info["defence7"]
    expdropp7 = info["expdropp7"]
    dropdrop7 = info["dropdrop7"]
    skexpdropp7 = info["skexpdropp7"]
    fooddropp7 = info["fooddropp7"]
    wooddropp7 = info["wooddropp7"]
    stonedropp7 = info["stonedropp7"]
    metaldropp7 = info["metaldropp7"]
    golddropp7 = info["golddropp7"]
    bocodropp7 = info["bocodropp7"]
    keydropp7 = info["keydropp7"]
    mpdrop7 = info["mpdrop7"]
    hpdrop7 = info["hpdrop7"]
    spdrop7 = info["spdrop7"]
    rabbat7 = info["rabbat7"]
    people7 = info["people7"]
    door7 = info["door7"]
    pot7 = info["pot7"]
    attack8 = info["attack8"]
    defence8 = info["defence8"]
    expdropp8 = info["expdropp8"]
    dropdrop8 = info["dropdrop8"]
    skexpdropp8 = info["skexpdropp8"]
    fooddropp8 = info["fooddropp8"]
    wooddropp8 = info["wooddropp8"]
    stonedropp8 = info["stonedropp8"]
    metaldropp8 = info["metaldropp8"]
    golddropp8 = info["golddropp8"]
    bocodropp8 = info["bocodropp8"]
    keydropp8 = info["keydropp8"]
    mpdrop8 = info["mpdrop8"]
    hpdrop8 = info["hpdrop8"]
    spdrop8 = info["spdrop8"]
    rabbat8 = info["rabbat8"]
    people8 = info["people8"]
    door8 = info["door8"]
    pot8 = info["pot8"]
    attack9 = info["attack9"]
    defence9 = info["defence9"]
    expdropp9 = info["expdropp9"]
    dropdrop9 = info["dropdrop9"]
    skexpdropp9 = info["skexpdropp9"]
    fooddropp9 = info["fooddropp9"]
    wooddropp9 = info["wooddropp9"]
    stonedropp9 = info["stonedropp9"]
    metaldropp9 = info["metaldropp9"]
    golddropp9 = info["golddropp9"]
    bocodropp9 = info["bocodropp9"]
    keydropp9 = info["keydropp9"]
    mpdrop9 = info["mpdrop9"]
    hpdrop9 = info["hpdrop9"]
    spdrop9 = info["spdrop9"]
    rabbat9 = info["rabbat9"]
    people9 = info["people9"]
    door9 = info["door9"]
    pot9 = info["pot9"]
    attack10 = info["attack10"]
    defence10 = info["defence10"]
    expdropp10 = info["expdropp10"]
    dropdrop10 = info["dropdrop10"]
    skexpdropp10 = info["skexpdropp10"]
    fooddropp10 = info["fooddropp10"]
    wooddropp10 = info["wooddropp10"]
    stonedropp10 = info["stonedropp10"]
    metaldropp10 = info["metaldropp10"]
    golddropp10 = info["golddropp10"]
    bocodropp10 = info["bocodropp10"]
    keydropp10 = info["keydropp10"]
    mpdrop10 = info["mpdrop10"]
    hpdrop10 = info["hpdrop10"]
    spdrop10 = info["spdrop10"]
    rabbat10 = info["rabbat10"]
    people10 = info["people10"]
    door10 = info["door10"]
    pot10 = info["pot10"]
    attack11 = info["attack11"]
    defence11 = info["defence11"]
    expdropp11 = info["expdropp11"]
    dropdrop11 = info["dropdrop11"]
    skexpdropp11 = info["skexpdropp11"]
    fooddropp11 = info["fooddropp11"]
    wooddropp11 = info["wooddropp11"]
    stonedropp11 = info["stonedropp11"]
    metaldropp11 = info["metaldropp11"]
    golddropp11 = info["golddropp11"]
    bocodropp11 = info["bocodropp11"]
    keydropp11 = info["keydropp11"]
    mpdrop11 = info["mpdrop11"]
    hpdrop11 = info["hpdrop11"]
    spdrop11 = info["spdrop11"]
    rabbat11 = info["rabbat11"]
    people11 = info["people11"]
    door11 = info["door11"]
    pot11 = info["pot11"]
    attack12 = info["attack12"]
    defence12 = info["defence12"]
    expdropp12 = info["expdropp12"]
    dropdrop12 = info["dropdrop12"]
    skexpdropp12 = info["skexpdropp12"]
    fooddropp12 = info["fooddropp12"]
    wooddropp12 = info["wooddropp12"]
    stonedropp12 = info["stonedropp12"]
    metaldropp12 = info["metaldropp12"]
    golddropp12 = info["golddropp12"]
    bocodropp12 = info["bocodropp12"]
    keydropp12 = info["keydropp12"]
    mpdrop12 = info["mpdrop12"]
    hpdrop12 = info["hpdrop12"]
    spdrop12 = info["spdrop12"]
    rabbat12 = info["rabbat12"]
    people12 = info["people12"]
    door12 = info["door12"]
    pot12 = info["pot12"]
    attack13 = info["attack13"]
    defence13 = info["defence13"]
    expdropp13 = info["expdropp13"]
    dropdrop13 = info["dropdrop13"]
    skexpdropp13 = info["skexpdropp13"]
    fooddropp13 = info["fooddropp13"]
    wooddropp13 = info["wooddropp13"]
    stonedropp13 = info["stonedropp13"]
    metaldropp13 = info["metaldropp13"]
    golddropp13 = info["golddropp13"]
    bocodropp13 = info["bocodropp13"]
    keydropp13 = info["keydropp13"]
    mpdrop13 = info["mpdrop13"]
    hpdrop13 = info["hpdrop13"]
    spdrop13 = info["spdrop13"]
    rabbat13 = info["rabbat13"]
    people13 = info["people13"]
    door13 = info["door13"]
    pot13 = info["pot13"]
    attack14 = info["attack14"]
    defence14 = info["defence14"]
    expdropp14 = info["expdropp14"]
    dropdrop14 = info["dropdrop14"]
    skexpdropp14 = info["skexpdropp14"]
    fooddropp14 = info["fooddropp14"]
    wooddropp14 = info["wooddropp14"]
    stonedropp14 = info["stonedropp14"]
    metaldropp14 = info["metaldropp14"]
    golddropp14 = info["golddropp14"]
    bocodropp14 = info["bocodropp14"]
    keydropp14 = info["keydropp14"]
    mpdrop14 = info["mpdrop14"]
    hpdrop14 = info["hpdrop14"]
    spdrop14 = info["spdrop14"]
    rabbat14 = info["rabbat14"]
    people14 = info["people14"]
    door14 = info["door14"]
    pot14 = info["pot14"]
    attack15 = info["attack15"]
    defence15 = info["defence15"]
    expdropp15 = info["expdropp15"]
    dropdrop15 = info["dropdrop15"]
    skexpdropp15 = info["skexpdropp15"]
    fooddropp15 = info["fooddropp15"]
    wooddropp15 = info["wooddropp15"]
    stonedropp15 = info["stonedropp15"]
    metaldropp15 = info["metaldropp15"]
    golddropp15 = info["golddropp15"]
    bocodropp15 = info["bocodropp15"]
    keydropp15 = info["keydropp15"]
    mpdrop15 = info["mpdrop15"]
    hpdrop15 = info["hpdrop15"]
    spdrop15 = info["spdrop15"]
    rabbat15 = info["rabbat15"]
    people15 = info["people15"]
    door15 = info["door15"]
    pot15 = info["pot15"]
    attack16 = info["attack16"]
    defence16 = info["defence16"]
    expdropp16 = info["expdropp16"]
    dropdrop16 = info["dropdrop16"]
    skexpdropp16 = info["skexpdropp16"]
    fooddropp16 = info["fooddropp16"]
    wooddropp16 = info["wooddropp16"]
    stonedropp16 = info["stonedropp16"]
    metaldropp16 = info["metaldropp16"]
    golddropp16 = info["golddropp16"]
    bocodropp16 = info["bocodropp16"]
    keydropp16 = info["keydropp16"]
    mpdrop16 = info["mpdrop16"]
    hpdrop16 = info["hpdrop16"]
    spdrop16 = info["spdrop16"]
    rabbat16 = info["rabbat16"]
    people16 = info["people16"]
    door16 = info["door16"]
    pot16 = info["pot16"]
    attack17 = info["attack17"]
    defence17 = info["defence17"]
    expdropp17 = info["expdropp17"]
    dropdrop17 = info["dropdrop17"]
    skexpdropp17 = info["skexpdropp17"]
    fooddropp17 = info["fooddropp17"]
    wooddropp17 = info["wooddropp17"]
    stonedropp17 = info["stonedropp17"]
    metaldropp17 = info["metaldropp17"]
    golddropp17 = info["golddropp17"]
    bocodropp17 = info["bocodropp17"]
    keydropp17 = info["keydropp17"]
    mpdrop17 = info["mpdrop17"]
    hpdrop17 = info["hpdrop17"]
    spdrop17 = info["spdrop17"]
    rabbat17 = info["rabbat17"]
    people17 = info["people17"]
    door17 = info["door17"]
    pot17 = info["pot17"]
    attack18 = info["attack18"]
    defence18 = info["defence18"]
    expdropp18 = info["expdropp18"]
    dropdrop18 = info["dropdrop18"]
    skexpdropp18 = info["skexpdropp18"]
    fooddropp18 = info["fooddropp18"]
    wooddropp18 = info["wooddropp18"]
    stonedropp18 = info["stonedropp18"]
    metaldropp18 = info["metaldropp18"]
    golddropp18 = info["golddropp18"]
    bocodropp18 = info["bocodropp18"]
    keydropp18 = info["keydropp18"]
    mpdrop18 = info["mpdrop18"]
    hpdrop18 = info["hpdrop18"]
    spdrop18 = info["spdrop18"]
    rabbat18 = info["rabbat18"]
    people18 = info["people18"]
    door18 = info["door18"]
    pot18 = info["pot18"]
    attack19 = info["attack19"]
    defence19 = info["defence19"]
    expdropp19 = info["expdropp19"]
    dropdrop19 = info["dropdrop19"]
    skexpdropp19 = info["skexpdropp19"]
    fooddropp19 = info["fooddropp19"]
    wooddropp19 = info["wooddropp19"]
    stonedropp19 = info["stonedropp19"]
    metaldropp19 = info["metaldropp19"]
    golddropp19 = info["golddropp19"]
    bocodropp19 = info["bocodropp19"]
    keydropp19 = info["keydropp19"]
    mpdrop19 = info["mpdrop19"]
    hpdrop19 = info["hpdrop19"]
    spdrop19 = info["spdrop19"]
    rabbat19 = info["rabbat19"]
    people19 = info["people19"]
    door19 = info["door19"]
    pot19 = info["pot19"]
    attack20 = info["attack20"]
    defence20 = info["defence20"]
    expdropp20 = info["expdropp20"]
    dropdrop20 = info["dropdrop20"]
    skexpdropp20 = info["skexpdropp20"]
    fooddropp20 = info["fooddropp20"]
    wooddropp20 = info["wooddropp20"]
    stonedropp20 = info["stonedropp20"]
    metaldropp20 = info["metaldropp20"]
    golddropp20 = info["golddropp20"]
    bocodropp20 = info["bocodropp20"]
    keydropp20 = info["keydropp20"]
    mpdrop20 = info["mpdrop20"]
    hpdrop20 = info["hpdrop20"]
    spdrop20 = info["spdrop20"]
    rabbat20 = info["rabbat20"]
    people20 = info["people20"]
    door20 = info["door20"]
    pot20 = info["pot20"]
    attack21 = info["attack21"]
    defence21 = info["defence21"]
    expdropp21 = info["expdropp21"]
    dropdrop21 = info["dropdrop21"]
    skexpdropp21 = info["skexpdropp21"]
    fooddropp21 = info["fooddropp21"]
    wooddropp21 = info["wooddropp21"]
    stonedropp21 = info["stonedropp21"]
    metaldropp21 = info["metaldropp21"]
    golddropp21 = info["golddropp21"]
    bocodropp21 = info["bocodropp21"]
    keydropp21 = info["keydropp21"]
    mpdrop21 = info["mpdrop21"]
    hpdrop21 = info["hpdrop21"]
    spdrop21 = info["spdrop21"]
    rabbat21 = info["rabbat21"]
    people21 = info["people21"]
    door21 = info["door21"]
    pot21 = info["pot21"]
    attack22 = info["attack22"]
    defence22 = info["defence22"]
    expdropp22 = info["expdropp22"]
    dropdrop22 = info["dropdrop22"]
    skexpdropp22 = info["skexpdropp22"]
    fooddropp22 = info["fooddropp22"]
    wooddropp22 = info["wooddropp22"]
    stonedropp22 = info["stonedropp22"]
    metaldropp22 = info["metaldropp22"]
    golddropp22 = info["golddropp22"]
    bocodropp22 = info["bocodropp22"]
    keydropp22 = info["keydropp22"]
    mpdrop22 = info["mpdrop22"]
    hpdrop22 = info["hpdrop22"]
    spdrop22 = info["spdrop22"]
    rabbat22 = info["rabbat22"]
    people22 = info["people22"]
    door22 = info["door22"]
    pot22 = info["pot22"]
    attack23 = info["attack23"]
    defence23 = info["defence23"]
    expdropp23 = info["expdropp23"]
    dropdrop23 = info["dropdrop23"]
    skexpdropp23 = info["skexpdropp23"]
    fooddropp23 = info["fooddropp23"]
    wooddropp23 = info["wooddropp23"]
    stonedropp23 = info["stonedropp23"]
    metaldropp23 = info["metaldropp23"]
    golddropp23 = info["golddropp23"]
    bocodropp23 = info["bocodropp23"]
    keydropp23 = info["keydropp23"]
    mpdrop23 = info["mpdrop23"]
    hpdrop23 = info["hpdrop23"]
    spdrop23 = info["spdrop23"]
    rabbat23 = info["rabbat23"]
    people23 = info["people23"]
    door23 = info["door23"]
    pot23 = info["pot23"]
    attack24 = info["attack24"]
    defence24 = info["defence24"]
    expdropp24 = info["expdropp24"]
    dropdrop24 = info["dropdrop24"]
    skexpdropp24 = info["skexpdropp24"]
    fooddropp24 = info["fooddropp24"]
    wooddropp24 = info["wooddropp24"]
    stonedropp24 = info["stonedropp24"]
    metaldropp24 = info["metaldropp24"]
    golddropp24 = info["golddropp24"]
    bocodropp24 = info["bocodropp24"]
    keydropp24 = info["keydropp24"]
    mpdrop24 = info["mpdrop24"]
    hpdrop24 = info["hpdrop24"]
    spdrop24 = info["spdrop24"]
    rabbat24 = info["rabbat24"]
    people24 = info["people24"]
    door24 = info["door24"]
    pot24 = info["pot24"]
    attack25 = info["attack25"]
    defence25 = info["defence25"]
    expdropp25 = info["expdropp25"]
    dropdrop25 = info["dropdrop25"]
    skexpdropp25 = info["skexpdropp25"]
    fooddropp25 = info["fooddropp25"]
    wooddropp25 = info["wooddropp25"]
    stonedropp25 = info["stonedropp25"]
    metaldropp25 = info["metaldropp25"]
    golddropp25 = info["golddropp25"]
    bocodropp25 = info["bocodropp25"]
    keydropp25 = info["keydropp25"]
    mpdrop25 = info["mpdrop25"]
    hpdrop25 = info["hpdrop25"]
    spdrop25 = info["spdrop25"]
    rabbat25 = info["rabbat25"]
    people25 = info["people25"]
    door25 = info["door25"]
    pot25 = info["pot25"]
    info["all_drop_attack"] = attack0+attack1+attack2+attack3+attack4+attack5+attack6+attack7+attack8+attack9+attack10+attack11+attack12+attack13+attack14+attack15+attack16+attack17+attack18+attack19+attack20+attack21+attack22+attack23+attack24+attack25
    info["all_drop_defence"] = defence0+defence1+defence2+defence3+defence4+defence5+defence6+defence7+defence8+defence9+defence10+defence11+defence12+defence13+defence14+defence15+defence16+defence17+defence18+defence19+defence20+defence21+defence22+defence23+defence24+defence25
    info["all_drop"] = dropdrop0+dropdrop1+dropdrop2+dropdrop3+dropdrop4+dropdrop5+dropdrop6+dropdrop7+dropdrop8+dropdrop9+dropdrop10+dropdrop11+dropdrop12+dropdrop13+dropdrop14+dropdrop15+dropdrop16+dropdrop17+dropdrop18+dropdrop19+dropdrop20+dropdrop21+dropdrop22+dropdrop23+dropdrop24+dropdrop25
    info["all_drop_boco"] = bocodropp0+bocodropp1+bocodropp2+bocodropp3+bocodropp4+bocodropp5+bocodropp6+bocodropp7+bocodropp8+bocodropp9+bocodropp10+bocodropp11+bocodropp12+bocodropp13+bocodropp14+bocodropp15+bocodropp16+bocodropp17+bocodropp18+bocodropp19+bocodropp20+bocodropp21+bocodropp22+bocodropp23+bocodropp24+bocodropp25
    info["all_drop_exp"] = expdropp0+expdropp1+expdropp2+expdropp3+expdropp4+expdropp5+expdropp6+expdropp7+expdropp8+expdropp9+expdropp10+expdropp11+expdropp12+expdropp13+expdropp14+expdropp15+expdropp16+expdropp17+expdropp18+expdropp19+expdropp20+expdropp21+expdropp22+expdropp23+expdropp24+expdropp25
    info["all_drop_food"] = fooddropp0+fooddropp1+fooddropp2+fooddropp3+fooddropp4+fooddropp5+fooddropp6+fooddropp7+fooddropp8+fooddropp9+fooddropp10+fooddropp11+fooddropp12+fooddropp13+fooddropp14+fooddropp15+fooddropp16+fooddropp17+fooddropp18+fooddropp19+fooddropp20+fooddropp21+fooddropp22+fooddropp23+fooddropp24+fooddropp25
    info["all_drop_gold"] = golddropp0+golddropp1+golddropp2+golddropp3+golddropp4+golddropp5+golddropp6+golddropp7+golddropp8+golddropp9+golddropp10+golddropp11+golddropp12+golddropp13+golddropp14+golddropp15+golddropp16+golddropp17+golddropp18+golddropp19+golddropp20+golddropp21+golddropp22+golddropp23+golddropp24+golddropp25
    info["all_drop_hp"] = hpdrop0+hpdrop1+hpdrop2+hpdrop3+hpdrop4+hpdrop5+hpdrop6+hpdrop7+hpdrop8+hpdrop9+hpdrop10+hpdrop11+hpdrop12+hpdrop13+hpdrop14+hpdrop15+hpdrop16+hpdrop17+hpdrop18+hpdrop19+hpdrop20+hpdrop21+hpdrop22+hpdrop23+hpdrop24+hpdrop25
    info["all_drop_key"] = keydropp0+keydropp1+keydropp2+keydropp3+keydropp4+keydropp5+keydropp6+keydropp7+keydropp8+keydropp9+keydropp10+keydropp11+keydropp12+keydropp13+keydropp14+keydropp15+keydropp16+keydropp17+keydropp18+keydropp19+keydropp20+keydropp21+keydropp22+keydropp23+keydropp24+keydropp25
    info["all_drop_metal"] = metaldropp0+metaldropp1+metaldropp2+metaldropp3+metaldropp4+metaldropp5+metaldropp6+metaldropp7+metaldropp8+metaldropp9+metaldropp10+metaldropp11+metaldropp12+metaldropp13+metaldropp14+metaldropp15+metaldropp16+metaldropp17+metaldropp18+metaldropp19+metaldropp20+metaldropp21+metaldropp22+metaldropp23+metaldropp24+metaldropp25
    info["all_drop_mp"] = mpdrop0+mpdrop1+mpdrop2+mpdrop3+mpdrop4+mpdrop5+mpdrop6+mpdrop7+mpdrop8+mpdrop9+mpdrop10+mpdrop11+mpdrop12+mpdrop13+mpdrop14+mpdrop15+mpdrop16+mpdrop17+mpdrop18+mpdrop19+mpdrop20+mpdrop21+mpdrop22+mpdrop23+mpdrop24+mpdrop25
    info["all_drop_skexp"] = skexpdropp0+skexpdropp1+skexpdropp2+skexpdropp3+skexpdropp4+skexpdropp5+skexpdropp6+skexpdropp7+skexpdropp8+skexpdropp9+skexpdropp10+skexpdropp11+skexpdropp12+skexpdropp13+skexpdropp14+skexpdropp15+skexpdropp16+skexpdropp17+skexpdropp18+skexpdropp19+skexpdropp20+skexpdropp21+skexpdropp22+skexpdropp23+skexpdropp24+skexpdropp25
    info["all_drop_sp"] = spdrop0+spdrop1+spdrop2+spdrop3+spdrop4+spdrop5+spdrop6+spdrop7+spdrop8+spdrop9+spdrop10+spdrop11+spdrop12+spdrop13+spdrop14+spdrop15+spdrop16+spdrop17+spdrop18+spdrop19+spdrop20+spdrop21+spdrop22+spdrop23+spdrop24+spdrop25
    info["all_drop_stone"] = stonedropp0+stonedropp1+stonedropp2+stonedropp3+stonedropp4+stonedropp5+stonedropp6+stonedropp7+stonedropp8+stonedropp9+stonedropp10+stonedropp11+stonedropp12+stonedropp13+stonedropp14+stonedropp15+stonedropp16+stonedropp17+stonedropp18+stonedropp19+stonedropp20+stonedropp21+stonedropp22+stonedropp23+stonedropp24+stonedropp25
    info["all_drop_wood"] = wooddropp0+wooddropp1+wooddropp2+wooddropp3+wooddropp4+wooddropp5+wooddropp6+wooddropp7+wooddropp8+wooddropp9+wooddropp10+wooddropp11+wooddropp12+wooddropp13+wooddropp14+wooddropp15+wooddropp16+wooddropp17+wooddropp18+wooddropp19+wooddropp20+wooddropp21+wooddropp22+wooddropp23+wooddropp24+wooddropp25
    info["rabbat"] = rabbat0+rabbat1+rabbat2+rabbat3+rabbat4+rabbat5+rabbat6+rabbat7+rabbat8+rabbat9+rabbat10+rabbat11+rabbat12+rabbat13+rabbat14+rabbat15+rabbat16+rabbat17+rabbat18+rabbat19+rabbat20+rabbat21+rabbat22+rabbat23+rabbat24+rabbat25
    info["all_drop_people"] = people0+people1+people2+people3+people4+people5+people6+people7+people8+people9+people10+people11+people12+people13+people14+people15+people16+people17+people18+people19+people20+people21+people22+people23+people24+people25
    info["all_drop_door"] = door0+door1+door2+door3+door4+door5+door6+door7+door8+door9+door10+door11+door12+door13+door14+door15+door16+door17+door18+door19+door20+door21+door22+door23+door24+door25
    info["all_drop_pot"] = pot0+pot1+pot2+pot3+pot4+pot5+pot6+pot7+pot8+pot9+pot10+pot11+pot12+pot13+pot14+pot15+pot16+pot17+pot18+pot19+pot20+pot21+pot22+pot23+pot24+pot25
    fileIO("players/{}/info.json".format(author.id), "save", info)
    await _check_setBoboValue(ctx)
    await _check_totalshow(ctx)
    await _check_setExpLVL(ctx)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    all_drop_attack = round(info["all_drop_attack"], 2)
    all_defence = round(info["all_defence"], 2)
    all_drop_defence = round(info["all_drop_defence"], 2)
    all_drop = round(info["all_drop"], 2)
    all_drop_boco = round(info["all_drop_boco"], 2)
    all_drop_exp = round(info["all_drop_exp"], 2)
    all_drop_food = round(info["all_drop_food"], 2)
    all_drop_gold = round(info["all_drop_gold"], 2)
    all_drop_hp = round(info["all_drop_hp"], 2)
    all_drop_key = round(info["all_drop_key"], 2)
    all_drop_metal = round(info["all_drop_metal"], 2)
    all_drop_mp = round(info["all_drop_mp"], 2)
    all_drop_pot = round(info["all_drop_pot"], 2)
    all_drop_skexp = round(info["all_drop_skexp"], 2)
    all_drop_sp = round(info["all_drop_sp"], 2)
    all_drop_stone = round(info["all_drop_stone"], 2)
    all_drop_wood = round(info["all_drop_wood"], 2)
    all_drop_people = round(info["all_drop_people"], 2)
    all_drop_door = round(info["all_drop_door"]  , 2)
    em445 = discord.Embed(
        description="```diff\n"
                    "!=== [BoboValue1x1] ===!\n"
                    "!=== [BoboPixel0x0Value] ===!\n\n"
                    "+ <:bp0x0_0:>  : {} x1 =\n{}\n"
                    "+ <:bp0x0_1:>  : {} x2 =\n{}\n"
                    "+ <:bp0x0_2:>  : {} x4 =\n{}\n"
                    "+ <:bp0x0_3:>  : {} x8 =\n{}\n"
                    "+ <:bp0x0_4:>  : {} x16 =\n{}\n"
                    "+ <:bp0x0_5:>  : {} x32 =\n{}\n"
                    "+ <:bp0x0_6:>  : {} x64 =\n{}\n"
                    "+ <:bp0x0_7:>  : {} x128 =\n{}\n"
                    "+ <:bp0x0_8:>  : {} x256 =\n{}\n"
                    "+ <:bp0x0_9:>  : {} x512 =\n{}\n"
                    "+ <:bp0x0_10:> : {} x1024 =\n{}\n"
                    "+ <:bp0x0_11:> : {} x2048 \n{}\n"
                    "+ <:bp0x0_12:> : {} x4096 =\n{}\n"
                    "+ <:bp0x0_13:> : {} x8196 =\n{}\n"
                    "+ <:bp0x0_14:> : {} x16392 =\n{}\n"
                    "+ <:bp0x0_15:> : {} x32784=\n{}\n"
                    "+ <:bp0x0_16:> : {} x65568 =\n{}\n"
                    "+ <:bp0x0_17:> : {} x131136 =\n{}\n"
                    "+ <:bp0x0_18:> : {} x262272 =\n{}\n"
                    "+ <:bp0x0_19:> : {} x524544 =\n{}\n"
                    "+ <:bp0x0_20:> : {} x1M =\n{}\n"
                    "+ <:bp0x0_21:> : {} x2M =\n{}\n"
                    "+ <:bp0x0_22:> : {} x4M =\n{}\n"
                    "+ <:bp0x0_23:> : {} x8M =\n{}\n"
                    "+ <:bp0x0_24:> : {} x16M =\n{}\n"
                    "+ <:bp0x0_25:> : {} x33M ={}\n\n"
                    " Total BoboValue1x1   : {} ```".format(
            round(info["bpf0"], 0), info["bpvf0"],
            round(info["bpf1"], 0), info["bpvf1"],
            round(info["bpf2"], 0), info["bpvf2"],
            round(info["bpf3"], 0), info["bpvf3"],
            round(info["bpf4"], 0), info["bpvf4"],
            round(info["bpf5"], 0), info["bpvf5"],
            round(info["bpf6"], 0), info["bpvf6"],
            round(info["bpf7"], 0), info["bpvf7"],
            round(info["bpf8"], 0), info["bpvf8"],
            round(info["bpf9"], 0), info["bpvf9"],
            round(info["bpf10"], 0), info["bpvf10"],
            round(info["bpf11"], 0), info["bpvf11"],
            round(info["bpf12"], 0), info["bpvf12"],
            round(info["bpf13"], 0), info["bpvf13"],
            round(info["bpf14"], 0), info["bpvf14"],
            round(info["bpf15"], 0), info["bpvf15"],
            round(info["bpf16"], 0), info["bpvf16"],
            round(info["bpf17"], 0), info["bpvf17"],
            round(info["bpf18"], 0), info["bpvf18"],
            round(info["bpf19"], 0), info["bpvf19"],
            round(info["bpf20"], 0), info["bpvf20"],
            round(info["bpf21"], 0), info["bpvf21"],
            round(info["bpf22"], 0), info["bpvf22"],
            round(info["bpf23"], 0), info["bpvf23"],
            round(info["bpf24"], 0), info["bpvf24"],
            round(info["bpf25"], 0), info["bpvf25"],
            info["bbvaluef"], "\n".join(info["inventory"])
        ),
        color=discord.Color.blue()
    )

    await ctx.send(embed=em445)
    # Original em445 = discord.Embed(description="```diff\n!=== [BoboValue1x1] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:bp0x0_0:>  : {} x1 =\n{}\n+ <:bp0x0_1:>  : {} x2 =\n{}\n+ <:bp0x0_2:>  : {} x4 =\n{}\n+ <:bp0x0_3:>  : {} x8 =\n{}\n+ <:bp0x0_4:>  : {} x16 =\n{}\n+ <:bp0x0_5:>  : {} x32 =\n{}\n+ <:bp0x0_6:>  : {} x64 =\n{}\n+ <:bp0x0_7:>  : {} x128 =\n{}\n+ <:bp0x0_8:>  : {} x256 =\n{}\n+ <:bp0x0_9:>  : {} x512 =\n{}\n+ <:bp0x0_10:> : {} x1024 =\n{}\n+ <:bp0x0_11:> : {} x2048 \n{}\n+ <:bp0x0_12:> : {} x4096 =\n{}\n+ <:bp0x0_13:> : {} x8196 =\n{}\n+ <:bp0x0_14:> : {} x16392 =\n{}\n+ <:bp0x0_15:> : {} x32784=\n{}\n+ <:bp0x0_16:> : {} x65568 =\n{}\n+ <:bp0x0_17:> : {} x131136 =\n{}\n+ <:bp0x0_18:> : {} x262272 =\n{}\n+ <:bp0x0_19:> : {} x524544 =\n{}\n+ <:bp0x0_20:> : {} x1M =\n{}\n+ <:bp0x0_21:> : {} x2M =\n{}\n+ <:bp0x0_22:> : {} x4M =\n{}\n+ <:bp0x0_23:> : {} x8M =\n{}\n+ <:bp0x0_24:> : {} x16M =\n{}\n+ <:bp0x0_25:> : {} x33M ={}\n\n Total BoboValue1x1   : {} ```".format(round(info["bpf0"], 0),info["bpvf0"], round(info["bpf1"], 0), info["bpvf1"], round(info["bpf2"], 0), info["bpvf2"], round(info["bpf3"], 0), info["bpvf3"], round(info["bpf4"], 0), info["bpvf4"], round(info["bpf5"], 0), info["bpvf5"], round(info["bpf6"], 0), info["bpvf6"], round(info["bpf7"], 0), info["bpvf7"], round(info["bpf8"], 0), info["bpvf8"], round(info["bpf9"], 0), info["bpvf9"], round(info["bpf10"], 0), info["bpvf10"], round(info["bpf11"], 0), info["bpvf11"], round(info["bpf12"], 0), info["bpvf12"], round(info["bpf13"], 0), info["bpvf13"], round(info["bpf14"], 0), info["bpvf14"], round(info["bpf15"], 0), info["bpvf15"], round(info["bpf16"], 0), info["bpvf16"], round(info["bpf17"], 0), info["bpvf17"], round(info["bpf18"], 0), info["bpvf18"], round(info["bpf19"], 0), info["bpvf19"], round(info["bpf20"], 0), info["bpvf20"], round(info["bpf21"], 0), info["bpvf21"], round(info["bpf22"], 0), info["bpvf22"], round(info["bpf23"], 0), info["bpvf23"], round(info["bpf24"], 0), info["bpvf24"], round(info["bpf25"], 0), info["bpvf25"], info["bbvaluef"], "\n".join(info["inventory"])), color=discord.Color.blue())
    #await ctx.send(embed=em445)
    em2 = discord.Embed(
        description="```diff\n"
                    "!=====[Equipmented]=====!\n\n"
                    " Slot_0 : {}\n"
                    " Slot_1 : {}\n"
                    " Slot_2 : {}\n"
                    " Slot_3 : {}\n"
                    " Slot_4 : {}\n"
                    " Slot_5 : {}\n"
                    " Slot_6 : {}\n"
                    " Slot_7 : {}\n"
                    " Slot_8 : {}\n"
                    " Slot_9 : {}\n"
                    " Slot_10: {}\n"
                    " Slot_11: {}\n"
                    " Slot_12: {}\n"
                    " Slot_13: {}\n"
                    " Slot_14: {}\n"
                    " Slot_15: {}\n"
                    " Slot_16: {}\n"
                    " Slot_17: {}\n"
                    " Slot_18: {}\n"
                    " Slot_19: {}\n"
                    " Slot_20: {}\n"
                    " Slot_21: {}\n"
                    " Slot_22: {}\n"
                    " Slot_23: {}\n"
                    " Slot_24: {}\n"
                    " Slot_25: {}```".format(
            info["zslot_0_inventory"],
            info["zslot_1_inventory"],
            info["zslot_2_inventory"],
            info["zslot_3_inventory"],
            info["zslot_4_inventory"],
            info["zslot_5_inventory"],
            info["zslot_6_inventory"],
            info["zslot_7_inventory"],
            info["zslot_8_inventory"],
            info["zslot_9_inventory"],
            info["zslot_10_inventory"],
            info["zslot_11_inventory"],
            info["zslot_12_inventory"],
            info["zslot_13_inventory"],
            info["zslot_14_inventory"],
            info["zslot_15_inventory"],
            info["zslot_16_inventory"],
            info["zslot_17_inventory"],
            info["zslot_18_inventory"],
            info["zslot_19_inventory"],
            info["zslot_20_inventory"],
            info["zslot_21_inventory"],
            info["zslot_22_inventory"],
            info["zslot_23_inventory"],
            info["zslot_24_inventory"],
            info["zslot_25_inventory"]
        ),
        color=discord.Color.blue()
    )

    await ctx.send(embed=em2)
    em3 = discord.Embed(
        description="```diff\n"
                    "!=====[All Drop]=====!\n\n"
                    " all_drop_attack \n:{}\n"
                    " all_drop_defence \n:{}\n"
                    " all_drop       \n:{}\n"
                    " all_drop_boco    \n:{}\n"
                    " all_drop_exp     \n:{}\n"
                    " all_drop_food    \n:{}\n"
                    " all_drop_gold    \n:{}\n"
                    " all_drop_hp      \n:{}\n"
                    " all_drop_key     \n:{}\n"
                    " all_drop_metal   \n:{}\n"
                    " all_drop_mp      \n:{}\n"
                    " all_drop_pot     \n:{}\n"
                    " all_drop_skexp   \n:{}\n"
                    " all_drop_sp      \n:{}\n"
                    " all_drop_stone \n:{}\n"
                    " all_drop_wood    \n:{}\n"
                    " all_drop_people \n:{}\n"
                    " all_drop_door    \n:{}\n"
                    "```".format(
            all_drop_attack,
            all_drop_defence,
            all_drop,
            all_drop_boco,
            all_drop_exp,
            all_drop_food,
            all_drop_gold,
            all_drop_hp,
            all_drop_key,
            all_drop_metal,
            all_drop_mp,
            all_drop_pot,
            all_drop_skexp,
            all_drop_sp,
            all_drop_stone,
            all_drop_wood,
            all_drop_people,
            all_drop_door
        ),
        color=discord.Color.blue()
    )

    await ctx.send(embed=em3)
    list.pop(info["all_inventory"])
 ##################### ALL ########################
    if num == "99" :
        #info["slotnum"] = 0
        info["bbvalue"] = 33554432
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["wallet"] and info["assets"] == "None":
            await ctx.send("Please start your wallet using `{}setwallet`".format(Prefix))
            return
        bp14amount = info["bp14"]
        print("bp14amount")
        print(bp14amount)
        bbvalue = info["bbvalue"]
        print("bbvalue")
        print(bbvalue)
        multyfactor = bp14amount * info["bbvalue"]
        info["bbvalue"] = multyfactor
        print("multyfactor")
        print(multyfactor)
        choices.append(inv_list)
        em = discord.Embed(
            description="```diff\n"
                        "- Note\n"
                        " This is Uppercase and Lowercase Sensitive.\n\n"
                        "+ In your Inventory is...\n{}\n\n"
                        "- You Put in Slot_{}\n\n"
                        "+ You Equipped:\n\n"
                        "+ slot_0 {}\n"
                        "+ slot_1 {}\n"
                        "+ slot_2 {}\n"
                        "+ slot_3 {}\n"
                        "+ slot_4 {}\n\n"
                        "+ slot_5 {}\n"
                        "+ slot_6 {}\n"
                        "+ slot_7 {}\n"
                        "+ slot_8 {}\n"
                        "+ slot_9 {}\n"
                        "+ slot_10 {}\n\n"
                        "+ slot_11 {}\n"
                        "+ slot_12 {}\n"
                        "+ slot_13 {}\n"
                        "+ slot_14 {}\n"
                        "+ slot_15 {}\n\n"
                        "+ slot_16 {}\n"
                        "+ slot_17 {}\n"
                        "+ slot_18 {}\n"
                        "+ slot_19 {}\n"
                        "+ slot_20 {}\n\n"
                        "+ slot_21 {}\n"
                        "+ slot_22 {}\n"
                        "+ slot_23 {}\n"
                        "+ slot_24 {}\n"
                        "+ slot_25 {}\n\n"
                        " What would you like to Put in?\n```".format(
                "\n".join(map(str, inv_list)),
                num,
                bp0_slot,
                bp1_slot,
                bp2_slot,
                bp3_slot,
                bp4_slot,
                bp5_slot,
                bp6_slot,
                bp7_slot,
                bp8_slot,
                bp9_slot,
                bp10_slot,
                bp11_slot,
                bp12_slot,
                bp13_slot,
                bp14_slot,
                bp15_slot,
                bp16_slot,
                bp17_slot,
                bp18_slot,
                bp19_slot,
                bp20_slot,
                bp21_slot,
                bp22_slot,
                bp23_slot,
                bp24_slot,
                bp25_slot
            ),
            color=discord.Color.blue()
        )

        await ctx.send(embed=em)
        info["all_inventory"].clear()
    else:
        return
@bot.command()
async def foodbag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_food"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 4)
        goldmul = random.randint(1, 4)
        goldgain = goldmul * info["all_drop_food"]
        num22 = random.randint(1, 2)
        
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Food```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["food"] = info["food"] + goldgain
            info["bag_food"] = info["bag_food"] - 1
            info["skexp"] = info["skexp"] + 100
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["emptybag"] = info["emptybag"] + 1
            info["skexp"] = info["skexp"] + 1
            info["bag_food"] = info["bag_food"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)@bot.command()

@bot.command()
async def woodbag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_wood"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 3)
        goldmul = random.randint(1, 3)
        goldgain = goldmul * info["all_drop_wood"]
        num22 = random.randint(1, 2)
        
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Wood```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["wood"] = info["wood"] + goldgain
            info["bag_wood"] = info["bag_wood"] - 1
            info["skexp"] = info["skexp"] + 100
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["emptybag"] = info["emptybag"] + 1
            info["skexp"] = info["skexp"] + 1
            info["bag_wood"] = info["bag_wood"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command()
async def stonebag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_stone"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 4)
        goldmul = random.randint(1, 3)
        num22 = random.randint(1, 2)
        
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        goldgain = goldmul * info["all_drop_stone"]
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Stone```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["stone"] = info["stone"] + goldgain
            info["bag_stone"] = info["bag_stone"] - 1
            info["skexp"] = info["skexp"] + 100
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["emptybag"] = info["emptybag"] + 1
            info["skexp"] = info["skexp"] + 1
            info["bag_stone"] = info["bag_stone"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command()
async def metalbag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_metal"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 4)
        goldmul = random.randint(1, 3)
        goldgain = goldmul * info["all_drop_metal"]
        num22 = random.randint(1, 2)
        
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Metal```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["metal"] = info["metal"] + goldgain
            info["bag_metal"] = info["bag_metal"] - 1
            info["skexp"] = info["skexp"] + 100
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["emptybag"] = info["emptybag"] + 1
            info["skexp"] = info["skexp"] + 1
            info["bag_metal"] = info["bag_metal"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
            
@bot.command()
async def goldbag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_gold"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 4)
        goldmul = random.randint(1, 3)
        goldgain = goldmul * info["all_drop_gold"]
        num22 = random.randint(1, 2)
        
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Gold```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["gold"] = info["gold"] + goldgain
            info["bag_gold"] = info["bag_gold"] - 1
            info["skexp"] = info["skexp"] + 100
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["skexp"] = info["skexp"] + 1
            info["emptybag"] = info["emptybag"] + 1
            info["bag_gold"] = info["bag_gold"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
            
@bot.command()
async def bocobag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_boco"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 4)
        goldmul = random.randint(1, 3)
        goldgain = goldmul * info["all_drop_boco"]
        num22 = random.randint(1, 2)
        
        if num22 == 2 or num22 == 75 or num22 == 84 or num22 == 57:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Bobocoins```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["boco"] = info["boco"] + goldgain
            info["bag_boco"] = info["bag_boco"] - 1
            info["skexp"] = info["skexp"] + 100
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["skexp"] = info["skexp"] + 10
            info["emptybag"] = info["emptybag"] + 1
            info["bag_boco"] = info["bag_boco"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command()
async def keybag(ctx):
    channel = ctx.channel
    author = ctx.author
    
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if info["bag_key"] == 0:
        em = discord.Embed(description="```diff\n- You don't have any bags!```", color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    else:
        em = discord.Embed(description="```diff\n+ {} Starts opening the bag. . .```".format(info["name"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        await asyncio.sleep(1)
        await ctx.send("One")
        await asyncio.sleep(1)
        await ctx.send("Two")
        await asyncio.sleep(1)
        await ctx.send("Three...")
        await asyncio.sleep(1)
        
        chance = random.randint(1, 4)
        goldmul = random.randint(1, 3)
        goldgain = goldmul * info["all_drop_key"]
        num22 = random.randint(1, 2)
        
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if goldgain == 0:
            await ctx.send("You Definitely Need NFTs to Get More Outcome!")
        
        if chance == 3 or 2:
            em = discord.Embed(description="```diff\n The bag contained\n+ {} Key```".format(round(goldgain, 0)), color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["key"] = info["key"] + goldgain
            info["skexp"] = info["skexp"] + 100
            info["bag_key"] = info["bag_key"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        else:
            em = discord.Embed(description="```diff\n- The bag didn't contain anything!\n\n You are left with an Empty Bag```", color=discord.Color.blue())
            await ctx.send(embed=em)
            
            info["emptybag"] = info["emptybag"] + 1
            info["skexp"] = info["skexp"] + 10
            info["bag_key"] = info["bag_key"] - 1
            
            fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command()
async def bag(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    else:
        em = discord.Embed(description="```diff\n!==== [{}'s BAGs] ====!\n\n+ (1) Food Bag  : {}\n+ (2) Wood Bag  : {}\n+ (3) Stone Bag : {}\n+ (4) Metal Bag : {}\n+ (5) Gold Bag  : {} \n+ (6) BoCo Bag  : {} \n+ (7) Key Bag   : {}\n```".format(info["name"], info["bag_food"], info["bag_wood"], info["bag_stone"], info["bag_metal"], info["bag_gold"], info["bag_boco"], info["bag_key"]), color=discord.Color.blue())
        await ctx.send(embed=em)
        bag_food = info["bag_food"]
        bag_wood = info["bag_wood"]
        bag_stone = info["bag_stone"]
        bag_metal = info["bag_metal"]
        bag_gold = info["bag_gold"]
        bag_boco = info["bag_boco"]
        bag_key = info["bag_key"]
        bag_people = info["bag_people"]
        bag_army = info["bag_army"]
        bag_small = info["bag_small"]
        em1 = discord.Embed(description="```diff\n\n Select a Bag to Open\n\n What Would you Like To Open \n```", color=discord.Color.blue())
        await ctx.send(embed=em1)
        options = ["Food", "food", "Wood", "wood", "Stone", "stone", "Gold", "gold", "Metal", "metal", "Boco", "BoCo", "boco", "Key", "key", "small", "Small", "small", "Army", "army", "People", "people", "1", "2", "3", "4", "5", "6", "7"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if str(answer1.content) in options:
            num22 = random.randint(1, 100)
            if num22 == 43 or num22 == 34:
                await ctx.send("NFTS Chance!")
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            if answer1.content.lower() in ["food", "1"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred1(m):
                    return m.author == message.author and m.channel == message.channel
                answer2 = await bot.wait_for("message", check=pred1)
                if answer2.content.lower() in ["yes", "y", "1"]:
                    all = info["bag_food"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_food"]
                    goldgainall = goldgain * all
                    em22 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em22)
                    em23 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em23)
                    info["bag_gold"] += goldgainall
                    info["bag_food"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em28 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em28)
                    return
                else:
                    pass
                while bag_food > 0:
                    em2 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em2)
                    foodgain = random.randint(info["min_drop_food"], info["max_drop_food"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * foodgain
                    em3 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n\n + You Gained  : {} Food\n\n + You Gained  : {} Gold\n```".format(foodgain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em3)
                    bag_food -= 1
                    info["bag_food"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["wood", "2"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred2(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred2)
                if answer3.content.lower() in ["yes", "y", "2"]:
                    all = info["bag_wood"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_wood"]
                    goldgainall = goldgain * all
                    em32 = discord.Embed(description="```diff\n\n + Opening ... Wood Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em32)
                    em33 = discord.Embed(description="```diff\n\n + Opening ... Wood Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em33)
                    info["bag_gold"] += goldgainall
                    info["bag_wood"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em34 = discord.Embed(description="```diff\n\n + Opening ... Wood Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em34)
                    return
                else:
                    pass
                while bag_wood > 0:
                    em4 = discord.Embed(description="```diff\n\n + Opening ... Wood Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em4)
                    woodgain = random.randint(info["min_drop_wood"], info["max_drop_wood"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * woodgain
                    em5 = discord.Embed(description="```diff\n\n + Opening ... Wood Bag\n\n + You Gained  : {} Wood\n\n + You Gained  : {} Gold\n```".format(woodgain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em5)
                    bag_wood -= 1
                    info["bag_wood"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["stone", "3"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer4 = await bot.wait_for("message", check=pred3)
                if answer4.content.lower() in ["yes", "y", "3"]:
                    all = info["bag_stone"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_stone"]
                    goldgainall = goldgain * all
                    em42 = discord.Embed(description="```diff\n\n + Opening ... Stone Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em42)
                    em43 = discord.Embed(description="```diff\n\n + Opening ... Stone Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em43)
                    info["bag_gold"] += goldgainall
                    info["bag_stone"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em44 = discord.Embed(description="```diff\n\n + Opening ... Stone Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em44)
                    return
                else:
                    pass
                while bag_stone > 0:
                    em6 = discord.Embed(description="```diff\n\n + Opening ... Stone Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em6)
                    stonegain = random.randint(info["min_drop_stone"], info["max_drop_stone"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * stonegain
                    em7 = discord.Embed(description="```diff\n\n + Opening ... Stone Bag\n\n + You Gained  : {} Stone\n\n + You Gained  : {} Gold\n```".format(stonegain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em7)
                    bag_stone -= 1
                    info["bag_stone"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["metal", "4"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred4(m):
                    return m.author == message.author and m.channel == message.channel
                answer5 = await bot.wait_for("message", check=pred4)
                if answer5.content.lower() in ["yes", "y", "4"]:
                    all = info["bag_metal"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_metal"]
                    goldgainall = goldgain * all
                    em52 = discord.Embed(description="```diff\n\n + Opening ... Metal Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em52)
                    em53 = discord.Embed(description="```diff\n\n + Opening ... Metal Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em53)
                    info["bag_gold"] += goldgainall
                    info["bag_metal"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em54 = discord.Embed(description="```diff\n\n + Opening ... Metal Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em54)
                    return
                else:
                    pass
                while bag_metal > 0:
                    em8 = discord.Embed(description="```diff\n\n + Opening ... Metal Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em8)
                    metalgain = random.randint(info["min_drop_metal"], info["max_drop_metal"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * metalgain
                    em9 = discord.Embed(description="```diff\n\n + Opening ... Metal Bag\n\n + You Gained  : {} Metal\n\n + You Gained  : {} Gold\n```".format(metalgain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em9)
                    bag_metal -= 1
                    info["bag_metal"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["gold", "5"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred5(m):
                    return m.author == message.author and m.channel == message.channel
                answer6 = await bot.wait_for("message", check=pred5)
                if answer6.content.lower() in ["yes", "y", "5"]:
                    all = info["bag_gold"]
                    em62 = discord.Embed(description="```diff\n\n + Opening ... Gold Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em62)
                    em63 = discord.Embed(description="```diff\n\n + Opening ... Gold Bag\n\n + You Gained  : {} Gold\n```".format(all), color=discord.Color.green())
                    await ctx.send(embed=em63)
                    info["bag_gold"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em64 = discord.Embed(description="```diff\n\n + Opening ... Gold Bag\n\n + You Gained  : {} Gold\n```".format(all), color=discord.Color.green())
                    await ctx.send(embed=em64)
                    return
                else:
                    pass
            if answer1.content.lower() in ["boco", "boco", "6"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred6(m):
                    return m.author == message.author and m.channel == message.channel
                answer7 = await bot.wait_for("message", check=pred6)
                if answer7.content.lower() in ["yes", "y", "6"]:
                    all = info["bag_boco"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_boco"]
                    goldgainall = goldgain * all
                    em72 = discord.Embed(description="```diff\n\n + Opening ... BoCo Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em72)
                    em73 = discord.Embed(description="```diff\n\n + Opening ... BoCo Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em73)
                    info["bag_gold"] += goldgainall
                    info["bag_boco"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em74 = discord.Embed(description="```diff\n\n + Opening ... BoCo Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em74)
                    return
                else:
                    pass
                while bag_boco > 0:
                    em10 = discord.Embed(description="```diff\n\n + Opening ... BoCo Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em10)
                    bocogain = random.randint(info["min_drop_boco"], info["max_drop_boco"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * bocogain
                    em11 = discord.Embed(description="```diff\n\n + Opening ... BoCo Bag\n\n + You Gained  : {} BoCo\n\n + You Gained  : {} Gold\n```".format(bocogain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em11)
                    bag_boco -= 1
                    info["bag_boco"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["key", "key", "7"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred7(m):
                    return m.author == message.author and m.channel == message.channel
                answer8 = await bot.wait_for("message", check=pred7)
                if answer8.content.lower() in ["yes", "y", "7"]:
                    all = info["bag_key"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_key"]
                    goldgainall = goldgain * all
                    em82 = discord.Embed(description="```diff\n\n + Opening ... Key Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em82)
                    em83 = discord.Embed(description="```diff\n\n + Opening ... Key Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em83)
                    info["bag_gold"] += goldgainall
                    info["bag_key"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em84 = discord.Embed(description="```diff\n\n + Opening ... Key Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em84)
                    return
                else:
                    pass
                while bag_key > 0:
                    em12 = discord.Embed(description="```diff\n\n + Opening ... Key Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em12)
                    keygain = random.randint(info["min_drop_key"], info["max_drop_key"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * keygain
                    em13 = discord.Embed(description="```diff\n\n + Opening ... Key Bag\n\n + You Gained  : {} Key\n\n + You Gained  : {} Gold\n```".format(keygain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em13)
                    bag_key -= 1
                    info["bag_key"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["gem", "gem", "8"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred8(m):
                    return m.author == message.author and m.channel == message.channel
                answer9 = await bot.wait_for("message", check=pred8)
                if answer9.content.lower() in ["yes", "y", "8"]:
                    all = info["bag_gem"]
                    chance = random.randint(1, 2)
                    goldgain = chance * info["all_drop_gem"]
                    goldgainall = goldgain * all
                    em92 = discord.Embed(description="```diff\n\n + Opening ... Gem Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em92)
                    em93 = discord.Embed(description="```diff\n\n + Opening ... Gem Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em93)
                    info["bag_gold"] += goldgainall
                    info["bag_gem"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em94 = discord.Embed(description="```diff\n\n + Opening ... Gem Bag\n\n + You Gained  : {} Gold\n```".format(goldgainall), color=discord.Color.green())
                    await ctx.send(embed=em94)
                    return
                else:
                    pass
                while bag_gem > 0:
                    em14 = discord.Embed(description="```diff\n\n + Opening ... Gem Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em14)
                    gemgain = random.randint(info["min_drop_gem"], info["max_drop_gem"])
                    goldgain = random.randint(1, 2)
                    goldgain = goldgain * gemgain
                    em15 = discord.Embed(description="```diff\n\n + Opening ... Gem Bag\n\n + You Gained  : {} Gem\n\n + You Gained  : {} Gold\n```".format(gemgain, goldgain), color=discord.Color.green())
                    await ctx.send(embed=em15)
                    bag_gem -= 1
                    info["bag_gem"] -= 1
                    info["bag_gold"] += goldgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["food", "food", "9"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred9(m):
                    return m.author == message.author and m.channel == message.channel
                answer10 = await bot.wait_for("message", check=pred9)
                if answer10.content.lower() in ["yes", "y", "9"]:
                    all = info["bag_food"]
                    em102 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em102)
                    em103 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n\n + You Gained  : {} Food\n```".format(all), color=discord.Color.green())
                    await ctx.send(embed=em103)
                    info["bag_food"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em104 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n\n + You Gained  : {} Food\n```".format(all), color=discord.Color.green())
                    await ctx.send(embed=em104)
                    return
                else:
                    pass
                while bag_food > 0:
                    em16 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em16)
                    foodgain = random.randint(info["min_drop_food"], info["max_drop_food"])
                    em17 = discord.Embed(description="```diff\n\n + Opening ... Food Bag\n\n + You Gained  : {} Food\n```".format(foodgain), color=discord.Color.green())
                    await ctx.send(embed=em17)
                    bag_food -= 1
                    info["bag_food"] -= 1
                    info["food"] += foodgain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
            if answer1.content.lower() in ["pickaxe", "pickaxe", "10"]:
                await ctx.send("Do you want to open all?\n\n+ Yes-No ?\n")
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred10(m):
                    return m.author == message.author and m.channel == message.channel
                answer11 = await bot.wait_for("message", check=pred10)
                if answer11.content.lower() in ["yes", "y", "10"]:
                    all = info["bag_pickaxe"]
                    em112 = discord.Embed(description="```diff\n\n + Opening ... Pickaxe Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em112)
                    em113 = discord.Embed(description="```diff\n\n + Opening ... Pickaxe Bag\n\n + You Gained  : {} Pickaxe\n```".format(all), color=discord.Color.green())
                    await ctx.send(embed=em113)
                    info["bag_pickaxe"] = 0
                    info["pickaxe"] += all
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em114 = discord.Embed(description="```diff\n\n + Opening ... Pickaxe Bag\n\n + You Gained  : {} Pickaxe\n```".format(all), color=discord.Color.green())
                    await ctx.send(embed=em114)
                    return
                else:
                    pass
                while bag_pickaxe > 0:
                    em18 = discord.Embed(description="```diff\n\n + Opening ... Pickaxe Bag\n```", color=discord.Color.green())
                    await ctx.send(embed=em18)
                    pickaxegain = random.randint(info["min_drop_pickaxe"], info["max_drop_pickaxe"])
                    em19 = discord.Embed(description="```diff\n\n + Opening ... Pickaxe Bag\n\n + You Gained  : {} Pickaxe\n```".format(pickaxegain), color=discord.Color.green())
                    await ctx.send(embed=em19)
                    bag_pickaxe -= 1
                    info["bag_pickaxe"] -= 1
                    info["pickaxe"] += pickaxegain
                    fileIO("players/{}/info.json".format(author.id), "save", info)
        else:
            await ctx.send("You don't have any bag to open.")
    else:
        await ctx.send("You need to join a guild first. Use `!join_guild` command to join a guild.")

@bot.command(aliases=["t"])
async def travel(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    location_name = info["location"]
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    options = []
    options2 = []
    travel_location = []
    if info["lvl"] > 0:
        options.append("(0) Newbe Training Ground")
        options2.append("0")
    if info["lvl"] > 2:
        options.append("(1) Rock Market I")
        options2.append("1")
    if info["lvl"] >= 20:
        options.append("(7) Forest")
        options2.append("7")
    if info["lvl"] >= 15:
        options.append("(8) Battle Field")
        options2.append("8")
    if info["lvl"] >= 25:
        options.append("(6) In The Wild")
        options2.append("6")
    if info["lvl"] >= 25:
        options.append("(9) Player Battle Field")
        options2.append("9")
    if info["lvl"] >= 4:
        options.append("(2) Rock Field II")
        options2.append("2")
    if info["lvl"] >= 14:
        options.append("(4) Rock Forest IV")
        options2.append("4")
    if info["lvl"] >= 9:
        options.append("(3) Rock Mine III")
        options2.append("3")
    if info["lvl"] >= 50:
        options.append("(5) Rock Dungon V")
        options2.append("5")
    em = discord.Embed(description="<@{}>\n```diff\n+ Where would you like to travel?\n\n- Type a location number in the chat.\n\n+ {}```".format(author.id, "\n+ ".join(options)), color=discord.Color.blue())
    await ctx.send(embed=em)

    def pred(m):
        return m.author == message.author and m.channel == message.channel

    answer1 = await bot.wait_for("message", check=pred)

    if answer1.content in options2:
        info["selected_enemy"] = "None"
        if answer1.content == "0":
            if info["location"] == "Newbe Training Ground":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Newbe Training Ground"
                info["location"] = "Newbe Training Ground"
        elif answer1.content == "7":
            if info["location"] == "Forest":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Forest"
                info["location"] = "Forest"
        elif answer1.content == "8":
            if info["location"] == "Battle Field":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Battle Field"
                info["location"] = "Battle Field"
        elif answer1.content == "9":
            if info["location"] == "Player Battle Field":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Player Battle Field"
                info["location"] = "Player Battle Field"
        elif answer1.content == "4":
            if info["location"] == "Rock Forest IV":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Rock Forest IV"
                info["location"] = "Rock Forest IV"
        elif answer1.content == "3":
            if info["location"] == "Rock Mine III":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Rock Mine III"
                info["location"] = "Rock Mine III"
        elif answer1.content == "6":
            if info["location"] == "In The Wild":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "In The Wild"
                info["location"] = "In The Wild"
        elif answer1.content == "2":
            if info["location"] == "Rock Field II":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Rock Field II"
                info["location"] = "Rock Field II"
        elif answer1.content == "1":
            if info["location"] == "Rock Market I":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Rock Market I"
                info["location"] = "Rock Market I"
        elif answer1.content == "5":
            if info["location"] == "Rock Dungon V":
                em = discord.Embed(description="<@{}>\n```diff\n- You're already at {}!```".format(author.id, info["location"]), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            else:
                location_name = "Rock Dungon V"
                info["location"] = "Rock Dungon V"

        em = discord.Embed(description="<@{}>\n```diff\n+ Traveling to {}...```".format(author.id, location_name), color=discord.Color.red())
        await ctx.send(embed=em)
        await asyncio.sleep(3)
        info["location"] = location_name
        info["selected_enemy"] = "None"
        info["selected_player"] = "None"
        info["selected_enemy"] = "None"
        info["infight_status"] = "False"
        fileIO("players/{}/info.json".format(author.id), "save", info)
        em = discord.Embed(description="<@{}>\n```diff\n+ You have arrived at {}```".format(author.id, location_name), color=discord.Color.red())
        await ctx.send(embed=em)
    else:
        await ctx.send("Please choose a correct location next time.")
        
@bot.command()
async def use(ctx, item=None, *, amount=None):
    author = ctx.author
    await _create_user(author)
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    dropinfo = fileIO("core/enemies/skills.json", "load")
    itemtouse = str(item)
    
    if item == 1:
        item = "small"
        itemtouse = "small"
    if item == 2:
        item = "medium"
        itemtouse = "medium"
    if item == 3:
        item = "big"
        itemtouse = "big"
    if item == 4:
        item = "speed"
        itemtouse = "speed"
    if item == 5:
        item = "amnesia"
        itemtouse = "amnesia"
    
    if info["race"] and info["class"] == None:
        await ctx.send("Please start your character using `{}`start`".format(Prefix))
        return
    
    if item == None:
        em111 = discord.Embed(description="!===== [Potion Effect] =====!\n```diff\n++ Restores HP SP MP ++```\n+ YourSkillLv `{}`\n**Prefix=`{}`** ex. `{}use 1 11` to use 11 smallPot\n\n `{}use smallpot` (for small health)\n `{}use 1 <amount>`\n\n `{}use Mediumpot`(=1-100)\n `{}use 2 <amount>`\n\n `{}use BIGpot`(=1-1000)\n `{}use 3 <amount>`\n\n `{}use Speedpot`\n (Reduce Time to Mine)\n\n `{}use 4 <amount>`\n `{}use Amnesiapot`\n+ What would you like to use?\n".format(info["sklvl"], Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em111)
        return
    
    else:
        if amount == None:
            em111 = discord.Embed(description="\n+!===== [Potion Effect] =====!\n\n+YourSkillLv = `{}`\n**Prefix= `{}`\n```diff\n++ Restors HP SP MP\n To set more than 1 pot```\n+ USE COMMAND \n`{}use <pot><amount>`\n** ex. `{} 2 11` \n (to use 11 smallPot)\n\n".format(info["sklvl"],Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix), color=discord.Color.blue())
            await ctx.send(embed=em111)
            amount = 1
        else:
            amount = int(amount)
            
        options = [1, 2, 3, 4, 5, 6, "2", "3", "4", "5", "6", "1", "small", "medium", "big", "speed", "amnesia"]
        answer1 = item
        
        if answer1 in options:
            if answer1 == "small" or answer1 == "{}use".format(Prefix) or answer1 == "Small" or answer1 == "{}use".format(Prefix) or answer1 == "1" or answer1 == "{}use".format(Prefix) or answer1 == "smallPot" or answer1 == "{}use".format(Prefix):
                cost = 1000
                what = "Potion"
                em111 = discord.Embed(description="!===== [Item Used] =====!\nYou've used a {}Potion\nTo Restore your Health\n**Amount Used:** x{}\n**Status Effect:** - 10\n\n**Type of Potion**: Small Potion\n\n".format(what, amount), color=discord.Color.blue())
                await ctx.send(embed=em111)
                if info["gold"] < int(amount) * int(cost):
                    em111 = discord.Embed(description="You don't have enough gold for that.\n**Cost**: x{}\n\nYou only have `{}` Gold\n".format(cost, info["gold"]), color=discord.Color.blue())
                    await ctx.send(embed=em111)
                    return
                info["gold"] -= int(amount) * int(cost)
                info["HP"] += 10
                info["HP"] = min(info["HP"], info["maxHP"])
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await level_up_check(ctx, amount)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                
            elif answer1 == "medium" or answer1 == "{}use".format(Prefix) or answer1 == "Medium" or answer1 == "{}use".format(Prefix) or answer1 == "2" or answer1 == "{}use".format(Prefix) or answer1 == "mediumPot" or answer1 == "{}use".format(Prefix):
                cost = 10000
                what = "Potion"
                em111 = discord.Embed(description="!===== [Item Used] =====!\nYou've used a {}Potion\nTo Restore your Health\n**Amount Used:** x{}\n**Status Effect:** - 100\n\n**Type of Potion**: Medium Potion\n\n".format(what, amount), color=discord.Color.blue())
                await ctx.send(embed=em111)
                if info["gold"] < int(amount) * int(cost):
                    em111 = discord.Embed(description="You don't have enough gold for that.\n**Cost**: x{}\n\nYou only have `{}` Gold\n".format(cost, info["gold"]), color=discord.Color.blue())
                    await ctx.send(embed=em111)
                    return
                info["gold"] -= int(amount) * int(cost)
                info["HP"] += 100
                info["HP"] = min(info["HP"], info["maxHP"])
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await level_up_check(ctx, amount)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                
            elif answer1 == "big" or answer1 == "{}use".format(Prefix) or answer1 == "Big" or answer1 == "{}use".format(Prefix) or answer1 == "3" or answer1 == "{}use".format(Prefix) or answer1 == "bigPot" or answer1 == "{}use".format(Prefix):
                cost = 100000
                what = "Potion"
                em111 = discord.Embed(description="!===== [Item Used] =====!\nYou've used a {}Potion\nTo Restore your Health\n**Amount Used:** x{}\n**Status Effect:** - 1000\n\n**Type of Potion**: Big Potion\n\n".format(what, amount), color=discord.Color.blue())
                await ctx.send(embed=em111)
                if info["gold"] < int(amount) * int(cost):
                    em111 = discord.Embed(description="You don't have enough gold for that.\n**Cost**: x{}\n\nYou only have `{}` Gold\n".format(cost, info["gold"]), color=discord.Color.blue())
                    await ctx.send(embed=em111)
                    return
                info["gold"] -= int(amount) * int(cost)
                info["HP"] += 1000
                info["HP"] = min(info["HP"], info["maxHP"])
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await level_up_check(ctx, amount)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                
            elif answer1 == "speed" or answer1 == "{}use".format(Prefix) or answer1 == "Speed" or answer1 == "{}use".format(Prefix) or answer1 == "4" or answer1 == "{}use".format(Prefix) or answer1 == "speedPot" or answer1 == "{}use".format(Prefix):
                cost = 1000000
                what = "Potion"
                em111 = discord.Embed(description="!===== [Item Used] =====!\nYou've used a {}Potion\nTo Speed up your Mining Time\n**Amount Used:** x{}\n**Status Effect:** - 10000\n\n**Type of Potion**: Speed Potion\n\n".format(what, amount), color=discord.Color.blue())
                await ctx.send(embed=em111)
                if info["gold"] < int(amount) * int(cost):
                    em111 = discord.Embed(description="You don't have enough gold for that.\n**Cost**: x{}\n\nYou only have `{}` Gold\n".format(cost, info["gold"]), color=discord.Color.blue())
                    await ctx.send(embed=em111)
                    return
                info["gold"] -= int(amount) * int(cost)
                info["HP"] += 10000
                info["HP"] = min(info["HP"], info["maxHP"])
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await level_up_check(ctx, amount)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                
            elif answer1 == "amnesia" or answer1 == "{}use".format(Prefix) or answer1 == "Amnesia" or answer1 == "{}use".format(Prefix) or answer1 == "5" or answer1 == "{}use".format(Prefix) or answer1 == "amnesiaPot" or answer1 == "{}use".format(Prefix):
                cost = 10000000
                what = "Potion"
                em111 = discord.Embed(description="!===== [Item Used] =====!\nYou've used a {}Potion\nTo forget all of your Skills and Start fresh\n**Amount Used:** x{}\n**Status Effect:** - All\n\n**Type of Potion**: Amnesia Potion\n\n".format(what, amount), color=discord.Color.blue())
                await ctx.send(embed=em111)
                if info["gold"] < int(amount) * int(cost):
                    em111 = discord.Embed(description="You don't have enough gold for that.\n**Cost**: x{}\n\nYou only have `{}` Gold\n".format(cost, info["gold"]), color=discord.Color.blue())
                    await ctx.send(embed=em111)
                    return
                info["gold"] -= int(amount) * int(cost)
                info["HP"] += 100000
                info["HP"] = min(info["HP"], info["maxHP"])
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await level_up_check(ctx, amount)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                
            else:
                em111 = discord.Embed(description="{}Potion not found!\n\n".format(what), color=discord.Color.blue())
                await ctx.send(embed=em111)
                return
        else:
            em111 = discord.Embed(description="{}Potion not found!\n\n".format(what), color=discord.Color.blue())
            await ctx.send(embed=em111)
            return
            
@bot.command()
async def daily(ctx):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    goldget = info["all_drop_gold"] * int(info["sklvl"])
    metalget = info["all_drop_metal"] * int(info["sklvl"])
    stoneget = info["all_drop_stone"] * int(info["sklvl"])
    bocoget = info["all_drop_boco"] * int(info["sklvl"])
    goldget = round(goldget, 0)
    metalget = round(metalget, 0)
    stoneget = round(stoneget, 0)
    bocoget = round(bocoget, 0)
    
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >= 22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except ZeroDivisionError:
        freecandy = 0.01
        timereduce = time1 - freecandy
    
    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    curr_time = time.time()
    delta = curr_time - info["daily_block"]
    print("curr_time")
    print(curr_time)
    print("delta")
    print(delta)
    
    if delta >= timereduce and delta > 0:
        info["metal"] += metalget
        info["stone"] += stoneget
        info["gold"] += goldget
        info["boco"] += bocoget
        info["daily_block"] = curr_time
        fileIO("players/{}/info.json".format(author.id), "save", info)
        em = discord.Embed(description="```diff\n+ You received your daily bonus of \n\n Metal = {}\n Stone = {}\n Gold = {}\n BoboCoins = {}```".format(metalget, stoneget, goldget, bocoget), color=discord.Color.blue())
        await ctx.send(embed=em)
        num22 = random.randint(1, 3)
        if num22 == 2:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't claim your reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some FreeCandys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)

@bot.command(aliases=["l"])
async def lucky(ctx):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >= 22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except ZeroDivisionError:
        freecandy = 0.01
        timereduce = time1 - freecandy
    
    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    curr_time = time.time()
    delta = curr_time - info["lucky_block"]
    
    if delta >= timereduce and delta > 0:
        number_random = random.randint(1, 10000)
        info["daily_block"] = curr_time
        em = discord.Embed(description="```diff\n+ LUCKY Number: {}\n\n     0 - 9885    4 Boco\n  9886 - 9985    43 Boco\n  9986 - 9993   429 Boco\n  9994 - 9997  4287 Boco\n  9998 - 9999 42871 Boco\n 10000        4287140 Boco \n\n BoboCoins = {}```".format(number_random, round(info["boco"], 0)), color=discord.Color.blue())
        await ctx.send(embed=em)
        info["lucky_block"] = curr_time
        num22 = random.randint(1, 10)
        if num22 == 3:
            await _ran(ctx)
        else:
            print("no NFTS Chance")
        
        if number_random >= 0 and number_random < 9885:
            num22 = random.randint(1, 6)
            if num22 == 3:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            info["boco"] += 4
            em = discord.Embed(description="```diff\n You win 4 Bobocoins!\n Congratulations!\n\n BoboCoins = {}```".format(round(info["boco"], 1)), color=discord.Color.blue())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        elif number_random >= 9885 and number_random < 9985:
            num22 = random.randint(1, 5)
            if num22 == 3:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            info["boco"] += 43
            em = discord.Embed(description="```diff\n You win 43 Bobocoins!\n Congratulations!\n\n BoboCoins = {}```".format(round(info["boco"], 1)), color=discord.Color.blue())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        elif number_random >= 9985 and number_random < 9993:
            num22 = random.randint(1, 4)
            if num22 == 3:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            info["boco"] += 429
            em = discord.Embed(description="```diff\n You win 429 Bobocoins!\n Congratulations!\n\n BoboCoins = {}```".format(round(info["boco"], 1)), color=discord.Color.blue())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        elif number_random >= 9993 and number_random < 9998:
            num22 = random.randint(1, 3)
            if num22 == 3:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            info["boco"] += 4287
            em = discord.Embed(description="```diff\n You win 4287 Bobocoins!\n Congratulations!\n\n BoboCoins = {}```".format(round(info["boco"], 1)), color=discord.Color.blue())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        elif number_random >= 9998 and number_random < 9999:
            num22 = random.randint(1, 2)
            if num22 == 2:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            info["boco"] += 42871
            em = discord.Embed(description="```diff\n You win 42871 Bobocoins! \n Congratulations!\n\n BoboCoins = {}```".format(round(info["boco"], 1)), color=discord.Color.blue())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
        elif number_random == 10000:
            await _ran(ctx)
            info["boco"] += 4287140
            em = discord.Embed(description="```diff\n You win 4287140 Bobocoins!\n Congratulations!\n\n BoboCoins = {}```".format(round(info["boco"], 1)), color=discord.Color.blue())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't claim your reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some FreeCandys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)

@bot.command(aliases=["r"])
async def rest(ctx):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    lvl = info["lvl"]
    HPget = random.randint(40, 80) * int(info["all_drop_hp"])
    SPget = random.randint(40, 80) * int(info["all_drop_sp"])
    MPget = random.randint(40, 80) * int(info["all_drop_mp"])
    HPget = round(HPget, 0) * lvl
    SPget = round(SPget, 0) * lvl
    MPget = round(MPget, 0) * lvl
    time1 = 45000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >= 22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except ZeroDivisionError:
        freecandy = 0.01
        timereduce = time1 - freecandy
    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = curr_time - info["rest_block"]
    if delta >= timereduce and delta > 0:
        if info["class"] == "None" or info["race"] == "None":
            await ctx.send("Please start your player using `{}start`".format(Prefix))
            return
        info["health"] = info["healthmax"]
        info["stamina"] = info["staminamax"]
        info["mana"] = info["manamax"]
        info["rest_block"] = curr_time
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if MPget < 0:
            em = discord.Embed(description="```diff\n+ You gained {} HP for resting!\n+ You gained {} SP for resting!\n- You gained {} MP for resting!\n- ANY TOOL YOU EQUIPPED TAKES YOUR MAGIC POWER FROM YOU!```".format(HPget, SPget, MPget), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            em = discord.Embed(description="```diff\n+ You gained {} HP for resting!\n+ You gained {} SP for resting!\n+ You gained {} MP for resting!```".format(HPget, SPget, MPget), color=discord.Color.blue())
            await ctx.send(embed=em)
        if info["health"] > info["healthmax"]:
            info["health"] = info["healthmax"]
            info["stamina"] = info["staminamax"]
            info["mana"] = info["manamax"]
        info["rest_block"] = curr_time
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You're not tired!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)

@bot.command(aliases=["m"])
async def mine(ctx):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    mined_metal = info["all_drop_metal"] * int(info["sklvl"])
    mined_rock = info["all_drop_stone"] * int(info["sklvl"])
    mined_gold = info["all_drop_gold"] * int(info["sklvl"])
    mined_boco = info["all_drop_boco"] * int(info["sklvl"])
    mined_metal = round(mined_metal, 0)
    mined_rock = round(mined_rock, 0)
    mined_gold = round(mined_gold, 0)
    mined_boco = round(mined_boco, 0)
    slot0 = info["zslot_0_inventory"]
    slot1 = info["zslot_1_inventory"]
    slot2 = info["zslot_2_inventory"]
    slot3 = info["zslot_3_inventory"]
    slot4 = info["zslot_4_inventory"]
    slot5 = info["zslot_5_inventory"]
    slot6 = info["zslot_6_inventory"]
    slot7 = info["zslot_7_inventory"]
    slot8 = info["zslot_8_inventory"]
    slot9 = info["zslot_9_inventory"]
    slot10 = info["zslot_10_inventory"]
    slot11 = info["zslot_11_inventory"]
    slot12 = info["zslot_12_inventory"]
    slot13 = info["zslot_13_inventory"]
    slot14 = info["zslot_14_inventory"]
    slot15 = info["zslot_15_inventory"]
    slot16 = info["zslot_16_inventory"]
    slot17 = info["zslot_17_inventory"]
    slot18 = info["zslot_18_inventory"]
    slot19 = info["zslot_19_inventory"]
    slot20 = info["zslot_20_inventory"]
    slot21 = info["zslot_21_inventory"]
    slot22 = info["zslot_22_inventory"]
    slot23 = info["zslot_23_inventory"]
    slot24 = info["zslot_24_inventory"]
    slot25 = info["zslot_25_inventory"]
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >= 22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except ZeroDivisionError:
        freecandy = 0.01
        timereduce = time1 - freecandy
    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = curr_time - info["mine_block"]
    if delta >= timereduce and delta > 0:
        if info["class"] == "None" or info["race"] == "None":
            await ctx.send("Please start your player using `{}start`".format(Prefix))
            return
        pick_slots = [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
        if any(pick_slot in ["Pick", "Wood Pick", "Stone Pick", "Gold Pick", "Metal Pick", "Bobo Pick"] for pick_slot in pick_slots):
            info["metal"] += mined_metal
            info["stone"] += mined_rock
            info["gold"] += mined_gold
            info["boco"] += mined_boco
            info["skexp"] += 100
            info["mine_block"] = curr_time
            num22 = random.randint(1, 60)
            if num22 in [2, 25, 34, 52]:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You mined some Stuff!\n+ {} Metal\n+ {} Stones \n+ {} Gold And\n+ {} BoboCoins```".format(mined_metal, mined_rock, mined_gold, mined_boco), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = 600 - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(description="```diff\n- You need to Buy any Pick and put it in a slot!\n\nUse Command {}buy and {}bp0x0```".format(Prefix, Prefix), color=discord.Color.red())
            await ctx.send(embed=em)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't mine your reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some FreeCandys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)

@bot.command(aliases=["d"])
async def dig(ctx):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    mined_metal = info["all_drop_metal"] * int(info["sklvl"])
    mined_rock = info["all_drop_stone"] * int(info["sklvl"])
    mined_gold = info["all_drop_gold"] * int(info["sklvl"])
    mined_boco = info["all_drop_boco"] * int(info["sklvl"])
    mined_metal = round(mined_metal, 0)
    mined_rock = round(mined_rock, 0)
    mined_gold = round(mined_gold, 0)
    mined_boco = round(mined_boco, 0)
    user_name = info["name"]
    slot0 = info["zslot_0_inventory"]
    slot1 = info["zslot_1_inventory"]
    slot2 = info["zslot_2_inventory"]
    slot3 = info["zslot_3_inventory"]
    slot4 = info["zslot_4_inventory"]
    slot5 = info["zslot_5_inventory"]
    slot6 = info["zslot_6_inventory"]
    slot7 = info["zslot_7_inventory"]
    slot8 = info["zslot_8_inventory"]
    slot9 = info["zslot_9_inventory"]
    slot10 = info["zslot_10_inventory"]
    slot11 = info["zslot_11_inventory"]
    slot12 = info["zslot_12_inventory"]
    slot13 = info["zslot_13_inventory"]
    slot14 = info["zslot_14_inventory"]
    slot15 = info["zslot_15_inventory"]
    slot16 = info["zslot_16_inventory"]
    slot17 = info["zslot_17_inventory"]
    slot18 = info["zslot_18_inventory"]
    slot19 = info["zslot_19_inventory"]
    slot20 = info["zslot_20_inventory"]
    slot21 = info["zslot_21_inventory"]
    slot22 = info["zslot_22_inventory"]
    slot23 = info["zslot_23_inventory"]
    slot24 = info["zslot_24_inventory"]
    slot25 = info["zslot_25_inventory"]
    multi = 0
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >=22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except:
        freecandy = 0.01
        timereduce = time1 - freecandy
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = float(curr_time) - float(info["dig_block"])

    if delta >= float(timereduce) and delta > 0:
        if info["class"] == "None" and info["race"] == "None":
            await ctx.send("Please start your player using `{}start`".format(Prefix))
            return

        slots = [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9,
                 slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18,
                 slot19, slot20, slot21, slot22, slot23, slot24, slot25]

        shovel_slots = ["Shovel", "Wood Shovel", "Stone Shovel", "Gold Shovel", "Metal Shovel", "Bobo Shovel"]
        multipliers = [1, 2, 4, 8, 16, 32]
        chances = [[2, 25, 34, 52], [2, 25, 14, 12], [2, 5, 4, 12], [2, 4, 3, 5], [2, 5, 10, 1], [2, 1, 3, 5]]

        for i in range(len(shovel_slots)):
            if any(slot == shovel_slots[i] for slot in slots):
                multi = multipliers[i]
                num22 = random.randint(1, 60) if i == 0 else random.randint(1, 30) if i == 1 else random.randint(1, 15) if i == 2 else random.randint(1, 10) if i == 3 else random.randint(1, 10) if i == 4 else random.randint(1, 6)
                if num22 in chances[i]:
                    await _ran(ctx)
                else:
                    print("no NFTS Chance")
        luckynumber_min = 0
        luckynumber_max = 100
        luckynumber = random.randint(luckynumber_min, luckynumber_max)

        if multi > 0:
            if luckynumber == 0 or luckynumber <= 66:
                await ctx.send("You found NOTHING!")
                return

            if 67 <= luckynumber <= 74:
                luckynumber1_min = 0
                luckynumber1_max = 36
                luckynumber1 = random.randint(luckynumber1_min, luckynumber1_max)

                if 0 <= luckynumber1 <= 5:
                    info["bag_food"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Food bag!\n- USE COMMAND:\n+ {}foodbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 6 <= luckynumber1 <= 10:
                    info["bag_wood"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Wood bag!\n- USE COMMAND:\n+ {}woodbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 11 <= luckynumber1 <= 15:
                    info["bag_stone"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Stone bag!\n- USE COMMAND:\n+ {}stonebag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 16 <= luckynumber1 <= 20:
                    info["bag_gold"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Gold bag!\n- USE COMMAND:\n+ {}goldbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 21 <= luckynumber1 <= 25:
                    info["bag_metal"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Metal bag!\n- USE COMMAND:\n+ {}metalbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 26 <= luckynumber1 <= 35:
                    info["bag_boco"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} BoboCoin bag!\n- USE COMMAND:\n+ {}bocobag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber1 == 36:
                    info["bag_ticket"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Ticket bag!\n- USE COMMAND:\n+ {}ticketbag\n To open and receive your goods.```".format(user_name, multi, Prefix))

            if 75 <= luckynumber <= 81:
                luckynumber2_min = 0
                luckynumber2_max = 40
                luckynumber2 = random.randint(luckynumber2_min, luckynumber2_max)

                if 0 <= luckynumber2 <= 10:
                    info["bag_rwood"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Wood bag!\n- USE COMMAND:\n+ {}rwoodbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 11 <= luckynumber2 <= 20:
                    info["bag_rstone"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Stone bag!\n- USE COMMAND:\n+ {}rstonebag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 21 <= luckynumber2 <= 30:
                    info["bag_rgold"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Gold bag!\n- USE COMMAND:\n+ {}rgoldbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 31 <= luckynumber2 <= 35:
                    info["bag_rmetal"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Metal bag!\n- USE COMMAND:\n+ {}rmetalbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber2 == 36:
                    info["bag_boco"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} BoboCoin bag!\n- USE COMMAND:\n+ {}bocobag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber2 == 37:
                    info["bag_ticket"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Ticket bag!\n- USE COMMAND:\n+ {}ticketbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber2 == 38:
                    info["bag_shiny"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Shiny bag!\n- USE COMMAND:\n+ {}shinybag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber2 == 39:
                    info["bag_mega"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Mega bag!\n- USE COMMAND:\n+ {}megabag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber2 == 40:
                    info["bag_master"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Master bag!\n- USE COMMAND:\n+ {}masterbag\n To open and receive your goods.```".format(user_name, multi, Prefix))

            if 82 <= luckynumber <= 90:
                luckynumber3_min = 0
                luckynumber3_max = 36
                luckynumber3 = random.randint(luckynumber3_min, luckynumber3_max)

                if 0 <= luckynumber3 <= 5:
                    info["bag_food"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Food bag!\n- USE COMMAND:\n+ {}foodbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 6 <= luckynumber3 <= 10:
                    info["bag_wood"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Wood bag!\n- USE COMMAND:\n+ {}woodbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 11 <= luckynumber3 <= 15:
                    info["bag_stone"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Stone bag!\n- USE COMMAND:\n+ {}stonebag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 16 <= luckynumber3 <= 20:
                    info["bag_gold"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Gold bag!\n- USE COMMAND:\n+ {}goldbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 21 <= luckynumber3 <= 25:
                    info["bag_metal"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Metal bag!\n- USE COMMAND:\n+ {}metalbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 26 <= luckynumber3 <= 35:
                    info["bag_boco"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} BoboCoin bag!\n- USE COMMAND:\n+ {}bocobag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber3 == 36:
                    info["bag_ticket"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Ticket bag!\n- USE COMMAND:\n+ {}ticketbag\n To open and receive your goods.```".format(user_name, multi, Prefix))

            if 91 <= luckynumber <= 100:
                luckynumber4_min = 0
                luckynumber4_max = 40
                luckynumber4 = random.randint(luckynumber4_min, luckynumber4_max)

                if 0 <= luckynumber4 <= 10:
                    info["bag_rwood"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Wood bag!\n- USE COMMAND:\n+ {}rwoodbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 11 <= luckynumber4 <= 20:
                    info["bag_rstone"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Stone bag!\n- USE COMMAND:\n+ {}rstonebag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 21 <= luckynumber4 <= 30:
                    info["bag_rgold"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Gold bag!\n- USE COMMAND:\n+ {}rgoldbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif 31 <= luckynumber4 <= 35:
                    info["bag_rmetal"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Reinforced Metal bag!\n- USE COMMAND:\n+ {}rmetalbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber4 == 36:
                    info["bag_boco"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} BoboCoin bag!\n- USE COMMAND:\n+ {}bocobag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber4 == 37:
                    info["bag_ticket"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Ticket bag!\n- USE COMMAND:\n+ {}ticketbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber4 == 38:
                    info["bag_shiny"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Shiny bag!\n- USE COMMAND:\n+ {}shinybag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber4 == 39:
                    info["bag_mega"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Mega bag!\n- USE COMMAND:\n+ {}megabag\n To open and receive your goods.```".format(user_name, multi, Prefix))
                elif luckynumber4 == 40:
                    info["bag_master"] += multi
                    info["skexp"] += 100
                    info["dig_block"] = curr_time
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send("```diff\n+ {} found {} Master bag!\n- USE COMMAND:\n+ {}masterbag\n To open and receive your goods.```".format(user_name, multi, Prefix))
        else:
            seconds = 600 - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(description="```diff\n- You need to Buy any Shovel and put in slot!\n\n use Command {}buy and {}bp0x0 to equip```".format(Prefix,Prefix), color=discord.Color.red())
            await ctx.send(embed=em)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't dig your reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some FreeCandys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)


@bot.command(aliases=["up"])
async def update(ctx):
    # await _check_setexpLVL(ctx)
    # await _check_setskLVL(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    Safe_version = float(info["Safe_version"])
    
    if info["race"] and info["class"] == "None":
        print("No Data")
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    else:
        print("Actual Data Exist!")
        print(Safe_version)
        
        try:
            cinfo = fileIO("global/info.json".format(author.id), "load")
            print("Safe_version=< safe_version_old Kleiner")
            cinfo.update(newDataFlobalKICK)
            fileIO("global/info.json".format(author.id), "save", cinfo)
            await ctx.send("Done\n".format())
        except:
            print("No Config Data")
            
        try:
            maindata = fileIO("wallets/wallets.json".format(author.id), "load")
            safe_version_oldm = float(maindata["Safe_version"])
            print("Actual MAIN Data Exist!")
            print(safe_version_oldm)
        except:
            safe_version_oldm = None
            print("Try Fail Data From Wallet")
            
        try:
            infold = fileIO("playersold/{}/info.json".format(author.id), "load")
            safe_version_oldp = float(infold["Safe_version"])
            print("Actual Old Player Data Exist!")
            print(safe_version_oldp)
            # em = discord.Embed(description="```diff\n!==== [{}'s Data Files] ====!\n\n\n Safe_version Actual `{}` DONE!\n Safe_version MAIN Data `{}` Done!\n Safe_version Old Player `{}` DONE! \n Please Ping @bobocoin#2774 \n".format(author, Safe_version,safe_version_oldm,safe_version_oldp))
            # await ctx.send(embed=em)
        except:
            safe_version_oldp = None
            print("Try Fail Data From OLD Wallet")
            # em = discord.Embed(description="```diff\n!==== [{}'s Data Files] ====!\n\n\n Safe_version Actual `{}` DONE!\n Safe_version MAIN Data `{}` Done!\n".format(author, Safe_version,safe_version_oldm))
            # await ctx.send(embed=em)
        
        bag_food = info["bag_food"]
        bag_wood = info["bag_wood"]
        bag_stone = info["bag_stone"]
        bag_metal = info["bag_metal"]
        bag_gold = info["bag_gold"]
        bag_boco = info["bag_boco"]
        bag_key = info["bag_key"]
        bag_people = info["bag_people"]
        bag_army = info["bag_army"]
        bag_small = info["bag_small"]
        
        em1 = discord.Embed(
            description="```diff\n\n Your Actual Save Data is Version {}\n You can Update to Safe_Version {}\n Would you Like To Update\n\n `yes` to update your Safe_version Actual `{}`\n\n\n`no` to cancel\n```".format(
                Safe_version, safe_version_oldm, safe_version_oldp
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em1)
        
        options = ["Yes", "yes", "y", "Y"]
        
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        
        answer1 = await bot.wait_for("message", check=pred)
        
        if str(answer1.content) in options:
            if Safe_version == safe_version_oldm:  # Up to date
                print("Safe_version== safe_version_old Gleich")
                em = discord.Embed(
                    description="\n**All Up to Date**\n Main Safe_version is {} OK\n Your Safe_version is {} OK\n  Check with {}up\n".format(
                        safe_version_oldm, Safe_version, Prefix
                    ),
                    color=discord.Color.blue(),
                )
                await ctx.send(embed=em)
                return
            
            if Safe_version > safe_version_oldm:  # Main kleiner als Actual
                print("Safe_version=> safe_version_old Groesser")
                await ctx.send("Safe_version is {}`".format(Safe_version))
                # Updates Here
                # newData = {"Safe_version":"0.1","aaa222a":"bbb222"}
                # info.update(newData)
                return
            
            if Safe_version < safe_version_oldm:  # Actual kleiner als Main
                print("Safe_version=< safe_version_old Kleiner")
                await ctx.send(
                    " Player Actual Safe_version\n `{}` DONE!\n Main Data safe_version\n `{}` Done\n".format(
                        Safe_version, safe_version_oldm
                    )
                )
                info.update(newData)
                # check += 10  castle_guild_name  castle_img
                em = discord.Embed(description="```diff\n Update Done```", color=discord.Color.blue())
                await ctx.send(embed=em)
                info["skexp"] = info["skexp"] + 1000
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await ctx.send("If You Need NFTs to Get More Outcome!")
                await ctx.send("https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX")
        
        em2 = discord.Embed(description="```diff\n\n Canceled\n```".format(Safe_version, safe_version_oldm, safe_version_oldp), color=discord.Color.blue())
        await ctx.send(embed=em2)
        return

@bot.command(aliases=["up2"])
async def update2(ctx, user: discord.Member):
    #await _check_setexpLVL(ctx)
    #await _check_setskLVL(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    Safe_version = float(ainfo["Safe_version"])
    try:
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
        bname = binfo["name"]
    except:
        em = discord.Embed(description="```diff\n-No Player Data```\n={}=\n=={}==\n".format(discord.Member, user.id), color=discord.Color.red())
        await ctx.send(embed=em)
        print("No Player Data")
        return
    if ainfo["race"] and ainfo["class"] == "None":
        print("No Data")
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    else:
        print("Actual Data Exist!")
        try:    # Safe_version check
            if len(binfo["Safe_version"]) >= 0:
                print("Safe_version gr√∂sser als nu,ll")
                Save_Version_add = 1
                bSafe_version = float(binfo["Safe_version"])
            else:
                binfo.update(Save_Version_add)
        except:
            Save_Version_add = 1
            bSafe_version = 1
            print(bSafe_version)
        try:
            maindata = fileIO("wallets/wallets.json".format(author.id), "load")
            safe_version_oldm = float(maindata["Safe_version"])
            print("Actual MAIN Data Exist!")
            print(safe_version_oldm)
        except:
            safe_version_oldm = None
            print("Try Fail Data From Wallet")
        try:
            infold = fileIO("playersold/{}/info.json".format(user.id), "load")
            safe_version_oldp = float(infold["Safe_version"])
            print("Actual Old Player Data Exist!")
            print(safe_version_oldp)
            #em = discord.Embed(description="```diff\n!==== [{}'s Data Files] ====!\n\n\n Safe_version Actual `{}` DONE!\n Safe_version MAIN Data `{}` Done!\n Safe_version Old Player `{}` DONE! \n Please Ping @bobocoin#2774 \n".format(author, Safe_version,safe_version_oldm,safe_version_oldp)) aSafe_version
            #await ctx.send(embed=em)
        except:
            safe_version_oldp = None
            print("Try Fail Data From OLD Wallet")
            #em = discord.Embed(description="```diff\n!==== [{}'s Data Files] ====!\n\n\n Safe_version Actual `{}` DONE!\n Safe_version MAIN Data `{}` Done!\n".format(author, Safe_version,safe_version_oldm))
            #await ctx.send(embed=em)
        em1 = discord.Embed(description="```diff\n\n {} Actual Save Data is Version {}\n You can Update to Main Safe_Version {}```\n\n Would you Like To Update\n\n `yes` to update your Safe_version Actual\n\n`no` to cancel\n".format(bname,bSafe_version,safe_version_oldm), color=discord.Color.blue())
        await ctx.send(embed=em1)
        options = ["Yes", "yes", "y", "Y",]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if str(answer1.content) in options:
            if bSafe_version == safe_version_oldm:  # Up to date
                print("Safe_version == safe_version_old Gleich")
                em = discord.Embed(description="\n**All Up to Date**\n Main Safe_version is {} OK\n Your Safe_version is {} OK\n  Check with {}up\n".format(safe_version_oldm, Safe_version, Prefix), color=discord.Color.blue())
                await ctx.send(embed=em)
                return
            elif bSafe_version > safe_version_oldm:  # Main kleiner als Actual
                print("Safe_version > safe_version_old Gr√∂√üer")
                await ctx.send("Safe_version is {}`".format(Safe_version))
                # Updates Here
                # newData = {"Safe_version":"0.1","aaa222a":"bbb222"}
                # info.update(newData)
                return
            elif bSafe_version < safe_version_oldm:  # Actual kleiner als Main
                print("Safe_version < safe_version_old Kleiner")
                await ctx.send(" Player Actual Safe_version\n `{}` DONE!\n Main Data safe_version\n `{}` Done\n".format(bSafe_version, safe_version_oldm))
                binfo.update(newData)
                # check += 10  castle_guild_name  castle_img info
                em = discord.Embed(description="```diff\n Update Done```", color=discord.Color.blue())
                await ctx.send(embed=em)
                ainfo["skexp"] = ainfo["skexp"] + 10
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                await ctx.send("If You Need NFTs to Get More Outcome!")
                await ctx.send("https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX")
            else:
                print("else")
                try:    # Safe_version check
                    bSafe_version = float(binfo["Safe_version"])
                except TypeError:
                    Save_Version_add = 1
                    binfo.update(Save_Version_add)
                    # check += 10  castle_guild_name  castle_img info
                except KeyError:
                    Save_Version_add = 1
                    binfo.update(Save_Version_add)
                    # check += 10  castle_guild_name  castle_img info
                    em = discord.Embed(description="```diff\n Add Done```", color=discord.Color.blue())
                    await ctx.send(embed=em)
                    ainfo["skexp"] = ainfo["skexp"] + 10
                    fileIO("players/{}/info.json".format(user.id), "save", binfo)
                    em2 = discord.Embed(description="```diff\n\n Canceled\n```".format(Safe_version, safe_version_oldm, safe_version_oldp), color=discord.Color.blue())
                    await ctx.send(embed=em2)
                    return
        else:
            em1 = discord.Embed(description="```diff\n\n Nothing Than\n".format(), color=discord.Color.blue())
            await ctx.send(embed=em1)
            return

@bot.command()
async def guess(ctx, num=None):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    boco = info["boco"]
    gold = info["gold"]
    
    if num is None:
        await ctx.send("!guess <Amount in Bobocoin>")
        return
    
    bet = int(num)
    
    if bet >= 101:
        await ctx.send("!guess <Amount in Bobocoin>\nNot over 100 Bobocoin's")
        return
    elif bet <= 0:
        await ctx.send("!guess <Amount in Bobocoin>\nNo negative numbers")
        return
    else:
        try:
            gamble = int(num)
        except ValueError:
            em = discord.Embed(description="```diff\nWhat is the number?\nA number between 1 and 100.\nYou entered something other than a number!\n- Lost your bet!\n```", color=discord.Color.red())
            await ctx.send(embed=em)
            info["number_guess100"] = 0
            info["bet_guess100"] = 0
            info["try_guess100"] = 0
            fileIO("players/{}/info.json".format(author.id), "save", info)
            return
        
        if gamble > boco and info["check_guess"] == 0:
            await ctx.send(f"You don't have enough Bobocoins. You have {boco} Bobocoins.")
            em = discord.Embed(description="```diff\n- Note:\nUse Command:\n\n!guess100 [Amount to Play With]\n\nExample: !guess100 500\n\nfor a Random Number Game.\nTen in a Row\n1st Right Guess Pays 512x Amount.\n10th Right Guess Pays 1x Amount.\n\nYou have Bobocoins: {boco}\nGold: {gold}\n```", color=discord.Color.red())
            await ctx.send(embed=em)
            em = discord.Embed(description="```diff\n1st Try  x512\n2nd: x256\n3rd Try  x128\n4th: x64\n5th: x32\n6th: x16\n7th: x8\n8th: x4\n9th: x2\n\n10th:\nGAME OVER\n\n\n```", color=discord.Color.red())
            await ctx.send(embed=em)
        elif gamble <= boco or gamble == boco and info["check_guess"] == 0:
            versuch = 0
            min_dmg = 1
            max_dmg = 100
            number_to_guess = random.randint(min_dmg, max_dmg)
            info["number_guess100"] = number_to_guess
            
            if num < 0:
                return
            elif num > boco:
                return
            else:
                info["bet_guess100"] = num
                info["try_guess100"] = 1
                fileIO("players/{}/info.json".format(author.id), "save", info)
                print(number_to_guess)
                await _check_guess(ctx)
            
            if versuch <= 10:
                gamble = int(info["bet_guess100"])
            elif not versuch == 10:
                info["number_guess100"] = 0
                info["bet_guess100"] = 0
                info["try_guess100"] = 0
                fileIO("players/{}/info.json".format(author.id), "save", info)
                em = discord.Embed(description="```diff\nTen in a Row!\nNumber_to_Guess was {versuch} Soooo Close\nThis is your {boco} BoboCoin Balance\n.```", color=discord.Color.red())
                await ctx.send(embed=em)
                return
        else:
            info["number_guess100"] = 0
            info["bet_guess100"] = 0
            info["try_guess100"] = 0
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\nTen in a Row!\nNumber_to_Guess was {versuch} Soooo Close\nThis is your {boco} BoboCoin Balance\n.```", color=discord.Color.red())
            await ctx.send(embed=em)
            return

@bot.command()
async def tic(ctx: commands.Context):
    #"""Starts a tic-tac-toe game with yourself."""
    await ctx.send(f'Tic Tac Toe: X goes first', view=TicTacToe())

@bot.command()
async def oxo(ctx: commands.Context):
    #"""Starts a tic-tac-toe game with yourself."""
    await ctx.send(f'OXO: X goes first', view=TicTacToe())

@bot.command()
async def LINK(ctx):
    print("hi")
@bot.command(aliases=["c"])
async def chop(ctx):
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")

    # Get the values from the info dictionary using a loop instead of individual variables
    slots = [info["zslot_{}_inventory".format(i)] for i in range(26)]
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >= 22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except:
        freecandy = 0.01
        timereduce = time1 - freecandy

    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return

    curr_time = time.time()
    delta = curr_time - info["chop_block"]

    if delta >= timereduce and delta > 0:
        axes = ["Axe", "Wood Axe", "Stone Axe", "Gold Axe", "Metal Axe", "Bobo Axe"]

        if any(slot in axes for slot in slots):
            chopped = int(info["all_total_base_wood"]) * int(info["sklvl"])
            chopped = round(chopped, 0)
            info["wood"] += chopped
            info["skexp"] += 100
            info["chop_block"] = curr_time
            num22 = random.randint(1, 60)

            if num22 in [2, 25, 34, 52]:
                await _ran(ctx)
            else:
                print("No NFTs chance")

            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You chopped a Tree!\n+ {} Wood```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = 600 - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(description="```diff\n- You need to buy an Axe and put it in the slot!\n\nUse commands {}buy and {}bp0x0```".format(Prefix, Prefix), color=discord.Color.red())
            await ctx.send(embed=em)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't chop your reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some FreeCandys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)

@bot.command(aliases=["hu"])
async def hunt(ctx):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    
    # Check if the player has a race and class
    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}`start`".format(Prefix))
        return
    
    # Calculate the time reduction based on freecandy items
    freecandyALL = min(info["bpfreecandy"], 22)
    freecandy = freecandyALL * 3750
    timereduce = 90000 - freecandy
    
    curr_time = time.time()
    delta = curr_time - info["hunt_block"]
    
    if delta >= timereduce and delta > 0:
        # Check if the player has a rifle in any slot
        has_rifle = any(info["zslot_{}_inventory".format(i)] in ["Rifle", "Wood Rifle", "Metal Rifle", "Stone Rifle", "Gold Rifle", "Bobo Rifle"] for i in range(26))
        if has_rifle:
            chopped = int(info["all_drop_food"]) * int(info["sklvl"])
            chopped = round(chopped, 0)
            info["food"] += chopped
            info["skexp"] += 100
            info["hunt_block"] = curr_time
            
            num22 = random.randint(1, 60)
            if num22 in [2, 25, 34, 52]:
                await _ran(ctx)
            
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You hunted some meat!\n+ {} Food```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = 600 - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(description="```diff\n- You need to buy a Rifle and put it in a slot!\n\n- Use command {}buy and {}bp0x0```".format(Prefix, Prefix), color=discord.Color.red())
            await ctx.send(embed=em)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't hunt for your reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get some Free Candys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)
        
        
@bot.command(aliases=["melt"], amount=None)
async def oven(ctx, amount=None):
    author = ctx.author
    message = ctx.message
    channel = ctx.channel
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    slot0 = info["zslot_0_inventory"]
    slot1 = info["zslot_1_inventory"]
    slot2 = info["zslot_2_inventory"]
    slot3 = info["zslot_3_inventory"]
    slot4 = info["zslot_4_inventory"]
    slot5 = info["zslot_5_inventory"]
    slot6 = info["zslot_6_inventory"]
    slot7 = info["zslot_7_inventory"]
    slot8 = info["zslot_8_inventory"]
    slot9 = info["zslot_9_inventory"]
    slot10 = info["zslot_10_inventory"]
    slot11 = info["zslot_11_inventory"]
    slot12 = info["zslot_12_inventory"]
    slot13 = info["zslot_13_inventory"]
    slot14 = info["zslot_14_inventory"]
    slot15 = info["zslot_15_inventory"]
    slot16 = info["zslot_16_inventory"]
    slot17 = info["zslot_17_inventory"]
    slot18 = info["zslot_18_inventory"]
    slot19 = info["zslot_19_inventory"]
    slot20 = info["zslot_20_inventory"]
    slot21 = info["zslot_21_inventory"]
    slot22 = info["zslot_22_inventory"]
    slot23 = info["zslot_23_inventory"]
    slot24 = info["zslot_24_inventory"]
    slot25 = info["zslot_25_inventory"]
    
    stone = info["stone"]
    wood = info["wood"]
    
    if stone <= 4 or wood <= 2:
        await ctx.send("You Need Stone and Wood to use the Oven!!!")
        return
    
    answer1 = amount
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >= 22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except:
        freecandy = 0.01
        timereduce = time1 - freecandy
    
    if info["race"] == "None" or info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if not any(slot == "Oven" for slot in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]):
        await ctx.send("You Need an Oven to use this command!\n Only available as NFT!\n Use the command `{}code 10001300` when the NFT is in your Wallet\n AtomicHub-Market:\n\nhttps://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&schema_name=rollplaygame&sort=created&symbol=WAX&template_data:text.bobovalue=0x0x(%24)#sales".format(Prefix))
        return
    
    curr_time = time.time()
    delta = curr_time - info["hunt_block"]
    
    if delta >= timereduce and delta > 0:
        if amount is None:
            canmake_s = int(stone) // 4
            canmake_w = int(wood) // 2
            totalcanmake = min(canmake_s, canmake_w)
            
            await ctx.send("You have \n`{}` Stone and \n`{}` Wood \n\nMelting uses 2 Wood and 4 Stone.\nIt produces a random amount of Gold and Metal\n You have enough for \n`{}` Melts\n\nHow many would you like to melt?".format(info["stone"], info["wood"], totalcanmake))
            
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            
            answer1 = await bot.wait_for("message", check=pred)
            
            if answer1.content.lower() == "all":
                amount = info["stone"]
            else:
                amount = int(answer1.content)
                if amount < 0:
                    await ctx.send("No negative numbers!")
                    return
        
        if amount > stone:
            amount = info["stone"]
        
        if amount <= 0:
            em11 = discord.Embed(description="No negative numbers!\n```".format(), color=discord.Color.red())
            await ctx.send(embed=em11)
            return
        
        getthis = amount // 2000
        getthis1 = amount // 1000
        chopped = getthis * int(info["sklvl"])
        chopped1 = getthis1 * int(info["sklvl"])
        chopped = round(chopped, 8)
        chopped1 = round(chopped1, 8)
        
        stone_used = amount * 4
        wood_used = amount * 2
        
        info["gold"] += chopped
        info["metal"] += chopped1
        info["stone"] -= stone_used
        info["wood"] -= wood_used
        info["oven_block"] = curr_time
        fileIO("players/{}/info.json".format(author.id), "save", info)
        
        num22 = random.randint(1, 50)
        if num22 in [20, 47, 14, 27]:
            await _ran(ctx)
        
        em = discord.Embed(description="```diff\n+ You melted\n- {} stone!\nAnd Received:\n+ {} Gold\n+ {} Metal```".format(amount, chopped, chopped1), color=discord.Color.blue())
        await ctx.send(embed=em)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't use the Oven yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some Free Candys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)
        
@bot.command(aliases=["Heal"])
async def heal(ctx, user: discord.Member):
    print(user.id)
    print(user.name)

    if user is None:
        await ctx.send("Please start your character using `{}`start".format(Prefix))
        return

    try:
        author = ctx.author
        await _create_user(author)
        info = fileIO("players/{}/info.json".format(author.id), "load")
        
        if user == author:
            print("User == Author")
            binfo = fileIO("players/{}/info.json".format(user.id), "load")
        
        lvl = info["lvl"]
        inv_list = info["skills_learned"]
        
        if info["race"] == "None" or info["class"] == "None":
            await ctx.send("Please start your character using `{}`start".format(Prefix))
            return
        
        if info["mana"] <= 50:
            await ctx.send("You need more Mana")
            return
        
        if "Heal" not in inv_list:
            await ctx.send("You need the skill Heal for that!\n\n- USE COMMAND `{}`buy > Skills > Mage > Heal\n- USE COMMAND `{}`skillinv <slot_num>` to equip".format(Prefix, Prefix))
            return
        
        info["health"] = info["healthmax"]
        info["stamina"] = info["staminamax"]
        use = random.randint(lvl, 250)
        info["mana"] -= use
        if use >= info["mana"]:
            info["mana"] = 0
        
        await ctx.send("You fully healed {}!\nYour Mana Balance: {}/{}".format(user, round(info["mana"], 1), round(info["manamax"], 1)))
        fileIO("players/{}/info.json".format(author.id), "save", info)
        
        num22 = random.randint(1, 2)
        if num22 in [2, 75, 84, 57]:
            await _ran(ctx)
        else:
            print("No NFTs Chance")
        
        try:
            binfo = fileIO("players/{}/info.json".format(user.id), "load")
            binfo["health"] = binfo["healthmax"]
            binfo["infight_status"] = False
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            print("user.id  Save max Health")
        except:
            print("userid  ERROR")
        
        return

    except Exception as e:
        print(e)
        return

@bot.command(aliases=["sca"])
async def scan(ctx, user: discord.Member):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    binfo = fileIO("players/{}/info.json".format(author.id), "load")
    slot_list = [binfo[f"zslot_{i}_inventory"] for i in range(26)]
    if any(slot == "PC" or slot == "Wood PC" or slot == "Stone PC" or slot == "Gold PC" or slot == "Metal PC" or slot == "Bobo PC" for slot in slot_list):
        await ctx.send("Scanning in progress!")
    else:
        await ctx.send("You need a PC for that!")
        return
    info = fileIO("players/{}/info.json".format(user.id), "load")
    userid = info["memberid"]
    lvl = info["lvl"]
    inv_list = info["skills_learned"]
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}`start`".format(Prefix))
        return
    if info["mana"] <= 100:
        await ctx.send("You need more Mana")
    if "Heal" in inv_list:
        print("heal")
        # await _check_setCalcDroptoTotal(ctx)
        # await _check_setBoboValue(ctx)
    attack = round(info["all_drop_attack"], 0) * lvl
    defence = round(info["all_drop_defence"], 0) * lvl
    hp = round(info["all_drop_hp"], 0) * lvl
    mp = round(info["all_drop_mp"], 0) * lvl
    sp = round(info["all_drop_sp"], 0) * lvl
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    dropcoincandy = info["bpfreecandy"] + info["bpfreecandylv52"] + info["bpfreecandytwitch3"]
    sponsorccc = info["bpbalcrit"] + info["bpccc"] + info["bpcclassic"] + info["bpcclean"] + info["bpcdirty"] + info["bpcretro"] + info["bpcbwhite"] + info["bpwhite"] + info["bpjacktick"] + info["bpramdonator"]
    bpacks = info["bppacksv1"] + info["bppacksv2"] + info["bppacksv4525"] + info["bppacksv4550"] + info["bppacksv4575"] + info["bppacksv51025"] + info["bppacksv51050"] + info["bppacksv51075"] + info["bppacksv6f"] + info["bppacksv71"] + info["bppacksv710"] + info["bppacksv75"] + info["bppacksv81"] + info["bppacksv825"]
    all_drop_attack = round(info["all_drop_attack"], 2)
    all_drop_defence = round(info["all_drop_defence"], 2)
    all_drop = round(info["all_drop"], 2)
    all_drop_boco = round(info["all_drop_boco"], 2)
    all_drop_exp = round(info["all_drop_exp"], 2)
    all_drop_food = round(info["all_drop_food"], 2)
    all_drop_gold = round(info["all_drop_gold"], 2)
    all_drop_hp = round(info["all_drop_hp"], 2)
    all_drop_mp = round(info["all_drop_mp"], 2)
    all_drop_sp = round(info["all_drop_sp"], 2)

    if lvl >= 10:
        brake_chance = 0.3  # 30% chance of braking
    else:
        brake_chance = 0.1  # 10% chance of braking

    if random.random() < brake_chance:
        await ctx.send("Oops! Your PC broke while scanning.")
        # Perform the necessary actions when the PC breaks (e.g., deduct durability points, display a message, etc.)
        # ...
    else:
        await ctx.send("Scanning complete!")
        
        # Format and display the scanned data
        message = f"Scanned data for {user.name}:\n"
        message += f"Level: {lvl}\n"
        message += f"Attack: {attack}\n"
        message += f"Defence: {defence}\n"
        message += f"HP: {hp}\n"
        message += f"MP: {mp}\n"
        message += f"SP: {sp}\n"
        message += f"Max Experience: {maxexp}\n"
        message += f"Max Skill Experience: {maxskexp}\n"
        message += f"Drop Coin Candy: {dropcoincandy}\n"
        message += f"Sponsor CCC: {sponsorccc}\n"
        message += f"Backpacks: {bpacks}\n"
        message += f"All Drop Attack: {all_drop_attack}\n"
        message += f"All Drop Defence: {all_drop_defence}\n"
        message += f"All Drop: {all_drop}\n"
        message += f"All Drop Boco: {all_drop_boco}\n"
        message += f"All Drop Experience: {all_drop_exp}\n"
        message += f"All Drop Food: {all_drop_food}\n"
        message += f"All Drop Gold: {all_drop_gold}\n"
        message += f"All Drop HP: {all_drop_hp}\n"
        message += f"All Drop MP: {all_drop_mp}\n"
        message += f"All Drop SP: {all_drop_sp}\n"
        
        await ctx.send(message)
        
        
@bot.command(aliases=["qscn"])
async def quickscan(ctx, user: discord.Member):
    channel = ctx.channel
    author = ctx.author
    await _create_user(author)
    slot_inventories = [
    binfo[f"zslot_{i}_inventory"] for i in range(26)
]

scan_in_progress = any(
    inventory in ["PC", "Wood PC", "Stone PC", "Gold PC", "Metal PC", "Bobo PC"]
    for inventory in slot_inventories
)

if scan_in_progress:
    await ctx.send("Scanning in progress!")
else:
    await ctx.send("You need a PC for that!")
    return
    info = fileIO("players/{}/info.json".format(user.id), "load")
    #binfo = fileIO("players/{}/info.json".format(author.id), "load")
    userid = info["memberid"]
    lvl= info["lvl"]
    inv_list = [i for i in info["skills_learned"]]
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["mana"] <= 100:
        await ctx.send("You need more Mana".format(Prefix))
    if "Heal" in inv_list:
        print("heal")
        #await _check_setCalcDroptoTotal(ctx)
        #await _check_setBoboValue(ctx)
    attack = round(info["all_drop_attack"], 0) * info["lvl"]
    defence = round(info["all_drop_defence"], 0) * info["lvl"]
    hp = round(info["all_drop_hp"], 0) * info["lvl"]
    mp = round(info["all_drop_mp"], 0) * info["lvl"]
    sp = round(info["all_drop_sp"], 0) * info["lvl"]
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    dropcoincandy = info["bpfreecandy"] + info["bpfreecandylv52"] + info["bpfreecandytwitch3"]
    sponsorccc = info["bpbalcrit"] + info["bpccc"] + info["bpcclassic"] + info["bpcclean"] + info["bpcdirty"] + info["bpcretro"] +info["bpcbwhite"] + info["bpwhite"] + info["bpjacktick"] + info["bpramdonator"]
    bpacks = info["bppacksv1"] + info["bppacksv2"] + info["bppacksv4525"] + info["bppacksv4550"] + info["bppacksv4575"] + info["bppacksv51025"] + info["bppacksv51050"] + info["bppacksv51075"] + info["bppacksv6f"] + info["bppacksv71"] + info["bppacksv710"] + info["bppacksv75"] + info["bppacksv81"] + info["bppacksv825"]
    #all_attack = round(info["all_attack"], 2)
    all_drop_attack = round(info["all_drop_attack"], 2)
    all_defence = round(info["all_defence"], 2)
    all_drop_defence = round(info["all_drop_defence"], 2)
    all_drop = round(info["all_drop"], 2)
    all_drop_boco = round(info["all_drop_boco"], 2)
    all_drop_exp = round(info["all_drop_exp"], 2)
    all_drop_food = round(info["all_drop_food"], 2)
    all_drop_gold = round(info["all_drop_gold"], 2)
    all_drop_hp = round(info["all_drop_hp"], 2)
    all_drop_key = round(info["all_drop_key"], 2)
    all_drop_metal = round(info["all_drop_metal"], 2)
    all_drop_mp = round(info["all_drop_mp"], 2)
    all_drop_pot = round(info["all_drop_pot"], 2)
    all_drop_skexp = round(info["all_drop_skexp"], 2)
    all_drop_sp = round(info["all_drop_sp"], 2)
    all_drop_stone = round(info["all_drop_stone"], 2)
    all_drop_wood = round(info["all_drop_wood"], 2)
    all_drop_people = round(info["all_drop_people"], 2)
    all_drop_door = round(info["all_drop_door"]  , 2)
    all_base_attack = round(info["all_base_attack"], 2)
    all_base_defence = round(info["all_base_defence"], 2)
    all_base_drop = round(info["all_base_drop"], 2)
    all_base_boco = round(info["all_base_boco"], 2)
    all_base_exp = round(info["all_base_exp"], 2)
    all_base_food = round(info["all_base_food"], 2)
    all_base_gold = round(info["all_base_gold"], 2)
    all_base_hp = round(info["all_base_hp"], 2)
    all_base_key = round(info["all_base_key"], 2)
    all_base_metal = round(info["all_base_metal"], 2)
    all_base_mp = round(info["all_base_mp"], 2)
    all_base_pot = round(info["all_base_pot"], 2)
    all_base_skexp = round(info["all_base_skexp"], 2)
    all_base_sp = round(info["all_base_sp"], 2)
    all_base_stone = round(info["all_base_stone"], 2)
    all_base_people = round(info["all_base_people"], 2)
    all_base_wood = round(info["all_base_wood"]  , 2)
    all_base_door = round(info["all_base_door"]  , 2)
    all_attack = round(info["all_total_base_attack"], 2)
    all_total_base_attack = round(info["all_total_base_attack"], 2)
    all_defence = round(info["all_total_base_defence"], 2)
    all_total_base_defence = round(info["all_total_base_defence"], 2)
    all_total_base_drop = round(info["all_total_base_drop"] , 2)
    all_total_base_boco = round(info["all_total_base_boco"] , 2)
    all_total_base_exp = round(info["all_total_base_exp"], 2)
    all_total_base_food = round(info["all_total_base_food"], 2)
    all_total_base_gold = round(info["all_total_base_gold"], 2)
    all_total_base_hp = round(info["all_total_base_hp"], 2)
    all_total_base_key = round(info["all_total_base_key"], 2)
    all_total_base_metal = round(info["all_total_base_metal"], 2)
    all_total_base_mp = round(info["all_total_base_mp"], 2)
    all_total_base_pot = round(info["all_total_base_pot"], 2)
    all_total_base_skexp = round(info["all_total_base_skexp"], 2)
    all_total_base_sp = round(info["all_total_base_sp"], 2)
    all_total_base_stone = round(info["all_total_base_stone"], 2)
    all_total_base_people = round(info["all_total_base_people"], 2)
    all_total_base_wood = round(info["all_total_base_wood"]  , 2)
    all_total_base_door = round(info["all_total_base_door"]  , 2)
    aralvl1 = info["castle_boco"]
    aralvl2 = info["castle_metal"]
    aralvl3 = info["castle_gold"]
    aralvl4 = info["castle_stone"]
    aralvl5 = info["castle_wood"]
    aralvl6 = info["castle_food"]
    castle_people = info["people"]
    castle_army_total = info["castle_army_total"]
    count_win = info["castle_count_win"]
    count_lose = info["castle_count_lose"]
    count_played = info["castle_count_played"]
    count_draw = info["castle_count_draw"]
    count_wina = info["count_pvp_win"]
    count_losea = info["count_pvp_lose"]
    count_playeda = info["count_pvp_played"]
    count_drawa = info["count_pvp_draw"]
    count_winb = info["count_win"]
    count_loseb = info["count_lose"]
    count_playedb = info["count_played"]
    count_drawb = info["count_draw"]
    aralvl8 = info["castle_wood"]
    aralvl9 = info["castle_food"]
    maxexp = info["expmax"]
    maxskexp = info["expmaxsk"]
    castle_army = info["castle_army_scissor"] + info["castle_army_paper"] + info["castle_army_rock"]
    castle_lvl = info["castle_lvl"]
    castle_guild_lvl = info["castle_guild_lvl"]
    info["castle_army_total"] = castle_army_total
    em3 = discord.Embed(description="\n+ <:BP0X0_0:930385899223679009> X {} X 1\n+ <:BP0X0_1:930386090584600596> X {} X 2\n+ <:BP0X0_2:930413178398060594>  X {} X 4\n+ <:BP0X0_3:930413407230894080> X {} X 8\n+ <:BP0X0_4:930413442525958154> X {} X 16\n+ <:bp0x0_5:930413478596968468> X {} X 32\n+ <:bp0x0_6:930413516161187890> X {} X 64\n+ <:bp0x0_7:930413574894014464> X {} X 128\n+ <:bp0x0_8:930413605759901697> X {} X 256\n+ <:bp0x0_9:930413636533510204> X {} X 512\n+ <:bp0x0_10:930413669018374184> X {} X 1024\n+ <:bp0x0_11:930413701746532352> X {} X 2048\n+ <:bp0x0_12:930413740531273768> X {} X 4096\n+ <:bp0x0_13:930413770520526888> X {} X 8192\n+ <:bp0x0_14:930413883796119552> X {} X 16284\n+ <:bp0x0_15:930413914775240765> X {} X 32768\n-  <:bp0x0_16:930413947083980800> 0 {} X 65536\n-  <:bp0x0_17:930413992319549460> 0 {} X 131072\n-  <:bp0x0_18:930414228257509376> 0 {} X 262144\n-  <:bp0x0_19:930414274726199317> 0 {} X 524288\n-  <:bp0x0_20:930414311921311764> 0 {} X 1048576\n-  <:bp0x0_21:930414346100690955> 0 {} X 2097152\n-  <:bp0x0_22:930414378229039124> 0 {} X 4194304\n-  <:bp0x0_23:930414471376146472> 0 {} X 8388608\n-  <:bp0x0_24:930414504657944597> 0 {} X 16777216\n-  <:bp0x0_25:930414534794027028> 0 {} X *33554432*\n\n+ :BoboValue     : {} \n+ :Sponsors        : {} \n+ :DropCoins's : {}\n+ :BPacks               :{}\n\n Total NFTs    : {} \n".format(info["bp0"], info["bp1"], info["bp2"], info["bp3"], info["bp4"], info["bp5"], info["bp6"], info["bp7"], info["bp8"], info["bp9"], info["bp10"], info["bp11"], info["bp12"], info["bp13"], info["bp14"], info["bp15"], info["bp16"], info["bp17"], info["bp18"], info["bp19"], info["bp20"], info["bp21"], info["bp22"], info["bp23"], info["bp24"], info["bp25"], info["bbvalue_stats"], sponsorccc, dropcoincandy, bpacks, info["assets"]), color=discord.Color.blue())

    await ctx.send(embed=em3)
    totalfakevalue = info["bpf0"]+info["bpf1"]+info["bpf2"]+info["bpf3"]+info["bpf4"]+info["bpf5"]+info["bpf6"]+info["bpf7"]+info["bpf8"]+info["bpf9"]+info["bpf10"]+info["bpf11"]+info["bpf12"]+info["bpf13"]+info["bpf14"]+info["bpf15"]+info["bpf16"]+info["bpf17"]+info["bpf18"]+info["bpf19"]+info["bpf20"]+info["bpf21"]+info["bpf22"]+info["bpf23"]+info["bpf24"]+info["bpf25"]
    em4 = discord.Embed(description="```diff\n!========[{}'s Stats]========!\n\n+ CastleName : {}\n+ CastleNFT  : {}\n+ CastleLevel: {}\n+ GuildLevel : {}\n+ Rank       : {}\n+ Race       : {}\n+ Class      : {}\n+ Wallet     : {}\n+ NFTs       : {}\n+ NO NFTS    : {}\n+ BoboValue  : {}\n+ Level      : {}\n+ Exp        : {}\n+ ExpMax     : {}\n+ JobLevel   : {}\n+ JobExp     : {}\n+ JobExpMax  : {}\n+ Attack     : {}\n+ Defence    : {}\n+ Health     : ({}/{})\n+ Stamina    : ({}/{})\n+ Mana       : ({}/{})\n ```" .format(info["name"],info["castle_name"], info["castle_owner"],info["castle_lvl"], info["castle_guild_lvl"], info["status"], info["race"], info["class"], info["account"], info["assets"], totalfakevalue, info["bbvalue_stats"], round(info["lvl"], 0), round(info["exp"], 0), maxexp, round(info["sklvl"], 0), round(info["skexp"], 0), maxskexp, attack, defence, round(info["health"], 0), round(info["healthmax"], 0), round(info["stamina"], 0), round(info["staminamax"], 0), round(info["mana"], 0), round(info["manamax"], 0)), color=discord.Color.blue())
    embed = discord.Embed(title="Discord Quick Scan", color=discord.Color.blue())
    embed.set_thumbnail(url=user.avatar_url)
    embed.add_field(name="Username", value=user.name, inline=False)
    embed.add_field(name="Discriminator", value=user.discriminator, inline=False)
    embed.add_field(name="User ID", value=user.id, inline=False)
    embed.add_field(name="Account Created", value=user.created_at.strftime("%Y-%m-%d %H:%M:%S"), inline=False)
    embed.add_field(name="Joined Server", value=user.joined_at.strftime("%Y-%m-%d %H:%M:%S"), inline=False)
    embed.add_field(name="Roles", value=", ".join([role.name for role in user.roles]), inline=False)
    await ctx.send(embed=em4)
    await ctx.send(embed=embed)
    
    return
    #except:


@bot.command()
async def bingogo(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    walletsinfo = fileIO("wallets/wallets.json", "load")
    status = walletsinfo["dragon_hunt"]
    print("Hi Bingo")
    print(walletsinfo["dragon_hunt"])
    
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    await ctx.send("You have {} boco!!!".format(info["boco"]))
    await ctx.send("How much would you like to bet?")

    def pred(m):
        return m.author == message.author and m.channel == message.channel

    answer0 = await bot.wait_for("message", check=pred)
    amount_to_bet = float(answer0.content)
    
    print("amount_to_bet")
    print(amount_to_bet)
    
    money = float(info["boco"])
    
    print("money")
    print(money)
    
    if amount_to_bet <= 0:
        await ctx.send("No negative numbers allowed!")
        return
    
    if amount_to_bet >= money:
        if money <= 0:
            await ctx.send("You have {} boco!!!".format(money))
            info["boco"] = 0
            return
        amount_to_bet = money
        print("amount_to_bet")
        print(amount_to_bet)
    
    await ctx.send("Enter your first number (1 or 2 digits, from 0 to 75):")
    
    def pred1(m):
        return m.author == message.author and m.channel == message.channel
    
    answer1 = await bot.wait_for("message", check=pred1)
    answer1 = str(answer1.content)
    
    print("answer1")
    print(answer1)
    
    await ctx.send("Enter your next number (1 or 2 digits):")
    
    def pred2(m):
        return m.author == message.author and m.channel == message.channel
    
    answer2 = await bot.wait_for("message", check=pred2)
    answer2 = str(answer2.content)
    
    if answer2 == answer1:
        await ctx.send("Please select a number you have not chosen already!")
        def pred2(m):
            return m.author == message.author and m.channel == message.channel
        answer2 = await bot.wait_for("message", check=pred2)
        answer2 = str(answer2.content)
    
    await ctx.send("Enter your next number (1 or 2 digits):")
    
    def pred3(m):
        return m.author == message.author and m.channel == message.channel
    
    answer3 = await bot.wait_for("message", check=pred3)
    answer3 = str(answer3.content)
    
    if answer3 == answer1 or answer3 == answer2:
        await ctx.send("Please select a number you have not chosen already!")
        def pred3(m):
            return m.author == message.author and m.channel == message.channel
        answer3 = await bot.wait_for("message", check=pred3)
        answer3 = str(answer3.content)
    
    await ctx.send("Enter your next number (1 or 2 digits):")
    
    def pred4(m):
        return m.author == message.author and m.channel == message.channel
    
    answer4 = await bot.wait_for("message", check=pred4)
    answer4 = str(answer4.content)
    
    if answer4 == answer1 or answer4 == answer2 or answer4 == answer3:
        await ctx.send("Please select a number you have not chosen already!")
        def pred4(m):
            return m.author == message.author and m.channel == message.channel
        answer4 = await bot.wait_for("message", check=pred4)
        answer4 = str(answer4.content)
    
    await ctx.send("Enter your next number (1 or 2 digits):")
    
    def pred5(m):
        return m.author == message.author and m.channel == message.channel
    
    answer5 = await bot.wait_for("message", check=pred5)
    answer5 = str(answer5.content)
    
    if answer5 == answer1 or answer5 == answer2 or answer5 == answer3 or answer5 == answer4:
        await ctx.send("Please select a number you have not chosen already!")
        def pred5(m):
            return m.author == message.author and m.channel == message.channel
        answer5 = await bot.wait_for("message", check=pred5)
        answer5 = str(answer5.content)
    
    await ctx.send("Enter your next number (1 or 2 digits):")
    
    def pred6(m):
        return m.author == message.author and m.channel == message.channel
    
    answer6 = await bot.wait_for("message", check=pred6)
    answer6 = str(answer6.content)
    
    if answer6 == answer1 or answer6 == answer2 or answer6 == answer3 or answer6 == answer4 or answer6 == answer5:
        await ctx.send("Please select a number you have not chosen already!")
        def pred6(m):
            return m.author == message.author and m.channel == message.channel
        answer6 = await bot.wait_for("message", check=pred6)
        answer6 = str(answer6.content)
    
    numbers = [answer1, answer2, answer3, answer4, answer5, answer6]
    
    generated_numbers = []
    
    for i in range(6):
        while True:
            random_num = random.randint(1, 75)
            if random_num not in generated_numbers:
                generated_numbers.append(random_num)
                break
    
    matches = set(numbers) & set(generated_numbers)
    
    await ctx.send("Your numbers: {}".format(numbers))
    await ctx.send("Generated numbers: {}".format(generated_numbers))
    await ctx.send("Matches: {}".format(matches))

@bot.command()
async def box(ctx, WhatBox=None):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    #   ?????   time1 = 1000
    # 864 24h 432 12h  216 6h  108 3h 54 1.5hmin  27 0.75min 9 0.15min 3 0.5min  ... 6 10min ///
    time1 = 90000
    freecandyALL = info["bpfreecandy"]
    if freecandyALL >=22:
        freecandyALL = 23
    freecandy = freecandyALL * 3750
    try:
        timereduce = time1 - freecandy
    except:
        freecandy = 0.01
        timereduce = time1 - freecandy
    if info["health"] >= 0:
        if info["class"] == "None" and info["race"] == "None":
            await ctx.send("Please start your player using `{}start`".format(Prefix))
            return
        em = discord.Embed(description="<@{}>\n```diff\n What Box Would you like to Open?\n (1)Food, (2)Wood, (3)Stone, (4)Gold,\n (5)Metal, (6)Bobo, (7)People, (8)Coin,\n (9)Small, (10)Key, (11)OpenAll\n\n CaseSensitive! or use numbers.\n```".format(author.id), color=discord.Color.blue())
        await ctx.send(embed=em)
        options = ["Food", "Wood", "Stone", "Gole", "Metal", "Bobo", "People", "food", "wood", "stone", "gole", "metal", "bobo", "people", "Coin", "coin", "Small", "small", "Key", "key", "OpenAll", "openall", "1", "2", "3", "4" ,"5", "6", "7", "8", "9", "10", "11"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options:
            num22 = random.randint(1, 60)
            if num22 == 2 or num22 == 25 or num22 == 34 or num22 == 52:
                await _ran(ctx)
            else:
                print("no NFTS Chance")
            answer = str(answer1.content)
            #if lvl_attack > 0 :
            slot0 = info["zslot_0_inventory"]
            slot1 = info["zslot_1_inventory"]
            slot2 = info["zslot_2_inventory"]
            slot3 = info["zslot_3_inventory"]
            slot4 = info["zslot_4_inventory"]
            slot5 = info["zslot_5_inventory"]
            slot6 = info["zslot_6_inventory"]
            slot7 = info["zslot_7_inventory"]
            slot8 = info["zslot_8_inventory"]
            slot9 = info["zslot_9_inventory"]
            slot10 = info["zslot_10_inventory"]
            slot11 = info["zslot_11_inventory"]
            slot12 = info["zslot_12_inventory"]
            slot13 = info["zslot_13_inventory"]
            slot14 = info["zslot_14_inventory"]
            slot15 = info["zslot_15_inventory"]
            slot16 = info["zslot_16_inventory"]
            slot17 = info["zslot_17_inventory"]
            slot18 = info["zslot_18_inventory"]
            slot19 = info["zslot_19_inventory"]
            slot20 = info["zslot_20_inventory"]
            slot21 = info["zslot_21_inventory"]
            slot22 = info["zslot_22_inventory"]
            slot23 = info["zslot_23_inventory"]
            slot24 = info["zslot_24_inventory"]
            slot25 = info["zslot_25_inventory"]
            if answer1.content == "Food" or answer1.content == "food" or answer1.content == "1" or WhatBox == "Food" or WhatBox == "food":
                if (
                    "Food Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
                ):
                    curr_time = time.time()
                    delta = curr_time - float(info["box_food_block"])
                    if delta >= timereduce and delta > 0:
                        chopped = int(info["all_total_base_food"]) * int(info["box_food_lvl"])
                        chopped = round(chopped, 0)
                        info["food"] += chopped
                        info["skexp"] += random.randint(10, 100)
                        info["box_food_block"] = curr_time
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} Food```".format(chopped), color=discord.Color.blue())
                        await ctx.send(embed=em)
                    else:
                        seconds = timereduce - delta
                        m, s = divmod(seconds, 60)
                        h, m = divmod(m, 60)
                        em = discord.Embed(
                            description="```diff\n- You cannot open Food Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                                int(h), int(m), int(s)
                            ),
                            color=discord.Color.red(),
                        )
                        await ctx.send(embed=em)
                else:
                    em = discord.Embed(
                        description="```diff\n+You have to buy and put your Box in a Slot!\n\n USE COMMAND {}bp0x0 0```".format(
                            Prefix
                        ),
                        color=discord.Color.blue(),
                    )
                    await ctx.send(embed=em)
            elif answer1.content == "Wood" or answer1.content == "wood" or answer1.content == "2" or WhatBox == "Wood" or WhatBox == "wood":
    if (
        "Wood Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_wood_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_total_base_wood"]) * int(info["box_wood_lvl"])
            chopped = round(chopped, 0)
            info["wood"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_wood_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} Wood```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Wood Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
        elif answer1.content == "Stone" or answer1.content == "stone" or answer1.content == "3":
    if (
        "Stone Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_stone_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_total_base_stone"]) * int(info["box_stone_lvl"])
            chopped = round(chopped, 0)
            info["stone"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_stone_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} Stone```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Stone Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
elif answer1.content == "Gold" or answer1.content == "gold" or answer1.content == "4":
    if (
        "Gold Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_gold_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_total_base_gold"]) * int(info["box_gold_lvl"])
            chopped = round(chopped, 0)
            info["gold"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_gold_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} Gold```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Gold Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
        elif answer1.content == "Metal" or answer1.content == "metal" or answer1.content == "5":
    if (
        "Metal Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_metal_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_total_base_metal"]) * int(info["box_metal_lvl"])
            chopped = round(chopped, 0)
            info["metal"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_metal_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} Metal```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Metal Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
elif answer1.content == "Bobo" or answer1.content == "bobo" or answer1.content == "6":
    if (
        "Bobo Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_boco_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_total_base_boco"]) * int(info["box_boco_lvl"])
            chopped = round(chopped, 0)
            info["boco"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_boco_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} Bobo```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Bobo Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
elif answer1.content == "People" or answer1.content == "people" or answer1.content == "7":
    if (
        "People Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_people_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_total_base_people"]) * int(info["box_people_lvl"])
            chopped = round(chopped, 0)
            info["people"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_people_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} People```".format(chopped), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open People Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
        elif answer1.content == "Coin" or answer1.content == "coin" or answer1.content == "8":
    if (
        "Coin Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_coin_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_drop_coin"]) * int(info["box_coin_lvl"])
            chopped = round(chopped, 0)
            info["coin"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_coin_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(
                description="```diff\n+ You Open a box!\n+ {} Coin```".format(chopped),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Coin Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
elif answer1.content == "Small" or answer1.content == "small" or answer1.content == "9":
    if (
        "Small Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_pot_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_drop_pot"]) * int(info["box_pot_lvl"])
            chopped = round(chopped, 0)
            info["smallpot"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_pot_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(
                description="```diff\n+ You Open a box!\n+ {} smallpot```".format(chopped),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Small Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
elif answer1.content == "Key" or answer1.content == "key" or answer1.content == "10":
    if (
        "Key Box" in [slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10, slot11, slot12, slot13, slot14, slot15, slot16, slot17, slot18, slot19, slot20, slot21, slot22, slot23, slot24, slot25]
    ):
        curr_time = time.time()
        delta = curr_time - float(info["box_key_block"])
        if delta >= timereduce and delta > 0:
            chopped = int(info["all_drop_key"]) * int(info["box_key_lvl"])
            chopped = round(chopped, 0)
            info["key"] += chopped
            info["skexp"] += random.randint(10, 100)
            info["box_key_block"] = curr_time
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(
                description="```diff\n+ You Open a box!\n+ {} Coin```".format(chopped),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em)
        else:
            seconds = timereduce - delta
            m, s = divmod(seconds, 60)
            h, m = divmod(m, 60)
            em = discord.Embed(
                description="```diff\n- You cannot open Key Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                    int(h), int(m), int(s)
                ),
                color=discord.Color.red(),
            )
            await ctx.send(embed=em)
    else:
        em = discord.Embed(
            description="```diff\n+ You have to buy and put your Box in a Slot!\n\nUse Command {}bp0x0 0```".format(
                Prefix
            ),
            color=discord.Color.blue(),
        )
        await ctx.send(embed=em)
        if answer1.content.lower() == "openall" or answer1.content == "11":
    box_types = ["food", "wood", "stone", "gold", "metal", "boco", "people"]
    for box_type in box_types:
        if any(box_type in globals()["slot{}".format(i)] for i in range(26)):
            curr_time = time.time()
            delta = curr_time - float(info["box_{}_block".format(box_type)])
            if delta >= float(timereduce) and delta > 0:
                chopped = info["all_drop_{}".format(box_type)] * info["box_{}_lvl".format(box_type)]
                chopped = round(chopped, 0)
                info[box_type] += chopped
                info["skexp"] += random.randint(10, 100)
                info["box_{}_block".format(box_type)] = curr_time
                fileIO("players/{}/info.json".format(author.id), "save", info)
                em = discord.Embed(description="```diff\n+ You Open a box!\n+ {} {}```".format(chopped, box_type.capitalize()), color=discord.Color.blue())
                await ctx.send(embed=em)
            else:
                seconds = timereduce - delta
                m, s = divmod(seconds, 60)
                h, m = divmod(m, 60)
                em = discord.Embed(description="```diff\n- You cannot open {} Box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(box_type.capitalize(), int(h), int(m), int(s)), color=discord.Color.red())
                await ctx.send(embed=em)
    else:
        seconds = timereduce - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't open your box yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds\n\n+ TIP: Get Some FreeCandys.```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)


@bot.command()
async def setname(ctx, *, name=None):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    nameinfo = fileIO("wallets/wallets.json", "load")
    setnamedone = info["setnamedone"]
    nameo = nameinfo["Wallets"]["Response"]["name_list"]["Names_list"]

    if name is None:
        await ctx.send(f'{ctx.author.mention}, please enter your Name! Like you want "bobocoin" is taken!!! {Prefix}setname bobocoin')
        return

    if setnamedone == 1:
        await ctx.send(f'{ctx.author.mention}, You Already setup a Name!!!')
        return

    try:
        await ctx.send(f'Checking {name}! Please wait....')

        if name not in nameo:
            await ctx.send(f'Save {name}! Please wait....')
            info["name"] = str(name)
            nameinfo["Wallets"]["Response"]["name_list"]["Names_list"].append(name)
            walletsinfo = fileIO("wallets/wallets.json", "load")
            walleto = walletsinfo["Wallets"]["Response"]["name_list"]["Discordid_list"]
            discordid = info["discordid"]

            if discordid not in walleto:
                discordid = info["discordid"]
                name = info["name"]
                numToSage = walletsinfo["whitelist_holders"]

                if numToSage <= 1:
                    walletsinfo["whitelist_holders"] += 1
                elif numToSage >= 1 and numToSage <= 8:
                    walletsinfo["whitelist_holders"] += 1

                await ctx.send(f'Save {discordid}! Please wait....')
                fileIO("players/{}/info.json".format(author.id), "save", info)
                fileIO("players/{}/info.json".format(author.id), "save", walletsinfo)

                em = discord.Embed(description="```diff\n+ Your Name is setup now!\n\n-USE COMMNAD \n {}setcastlename to Name your Castle \n- USE COMMNAD\n {}help for a list of Commands!\n ```".format(Prefix, Prefix), color=discord.Color.blue())
                await ctx.send(embed=em)
                return

            else:
                em = discord.Embed(description="```diff\n+ Your already setuped up!\n\n-USE COMMNAD \n {}setcastlename to Name your Castle \n- USE COMMNAD\n {}help for a list of Commands!\n ```".format(Prefix,Prefix), color=discord.Color.blue())
                await ctx.send(embed=em)
                return

            fileIO("players/{}/info.json".format(author.id), "save", info)
            fileIO("wallets/wallets.json", "save", nameinfo)
            fileIO("wallets/wallets.json", "save", walletsinfo)

            em = discord.Embed(description="```diff\n+ Your Name is setup now!\n\n-USE COMMNAD \n {}setcastlename to Name your Castle \n- USE COMMNAD\n {}help for a list of Commands!\n ```".format(Prefix,Prefix), color=discord.Color.blue())
            await ctx.send(embed=em)
            return

        else:
            await ctx.send("Sorry. This Name is Taken!")

    except IndexError:
        pass
        await ctx.send("You need a better one!")
        return
        
@bot.command(aliases=["setnamecastle"])
async def setcastlename(ctx, *, name=None):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    nameinfo = fileIO("wallets/wallets.json", "load")
    setnamecastledone = info["setnamecastledone"]
    nameo = nameinfo["Wallets"]["Response"]["name_list"]["Names_list"]

    if name is None:
        await ctx.send(f'{ctx.author.mention}, please enter your Name! Like you want "bobocoin" is taken!!! {Prefix}setnmae bobocoin')
        return

    if setnamecastledone == 1:
        await ctx.send(f'{ctx.author.mention}, You Already setup a Castle!!!')
        return

    try:
        await ctx.send(f'Checking {name}! Please wait....')

        if name not in nameo:
            await ctx.send(f'Save {name}! Please wait....')
            info["castle_name"] = str(name)
            nameinfo["Wallets"]["Response"]["name_list"]["Names_list_castle"].append(name)
            fileIO("players/{}/info.json".format(author.id), "save", info)
            fileIO("C:/Users/BlackRabbit/Desktop/All in here (1)/bobo/NewDay6/MVORPG/wallets/wallets.json", "save", nameinfo)
            await ctx.send("Your Castle Name is setup now!")
            await ctx.send("Use Command `{}help` for a list of Commands!".format(Prefix))
            return

        else:
            await ctx.send("Sorry. This Name is Taken!")

    except IndexError:
        pass
        await ctx.send("You need a better one!")
        return
        
@bot.command()
async def myid(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    user = bot.get_user(int(ctx.message.author.id))
    await ctx.send("{} is your id".format(ctx.message.author.id))
    data = {ctx.message.author.id}
    data1 = int(ctx.message.author.id)
    data2 = str(ctx.message.author.id)
    data3 = str(ctx.message.channel)
    print("ctx.message.author.id")
    print(data)
    print("channel")
    print(channel)
    print("int")
    print(data1)
    print("str")
    print(data2)
    print("datat3")
    print(data3)
    await ctx.send(ctx.author.mention)
    await message.channel.send(message.author.mention)
    await message.channel.send(ctx.channel)
    info["location"] = ctx.channel
    return
    
@bot.command(aliases=["gs"])
async def google(ctx, Lookfor="None"):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    user = bot.get_user(int(ctx.message.author.id))
    info["location"] = ctx.channel

    if Lookfor == "None":
        Lookfor = "Nothing"

    await ctx.send("You are Looking for **{}** ?\n\nUse Command `{}google <Search term>`\nExample: `{}google bobopixeloxo`\n\n".format(Lookfor, Prefix, Prefix))
    em = discord.Embed(description="{}".format(Lookfor), color=discord.Color.blue())
    em.description = "[Google Search](https://www.google.com/search?q={})".format(Lookfor)
    await ctx.send(embed=em)
    
@bot.command()
async def web(ctx, collection="None"):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    user = bot.get_user(int(ctx.message.author.id))
    #await ctx.send("{} is your id".format(ctx.message.author.id))
    data = {ctx.message.author.id}
    data1 = int(ctx.message.author.id)
    data2 = str(ctx.message.author.id)
    data3 = str(ctx.message.channel)
    print("ctx.message.author.id")
    print(data)
    print("channel")
    print(channel)
    print("int")
    print(data1)
    print("str")
    print(data2)
    print("datat3")
    print(data3)
    #await ctx.send(ctx.author.mention)
    #await message.channel.send(message.author.mention)
    #await message.channel.send(ctx.channel)
    info["location"] = ctx.channel
    if collection == "None":
        await ctx.send(" **Please add a Collection Name to Look for Others!**\n\nUse Command `{}web <Collection Name>`\nExample: `{}web bobopixeloxo`\n".format(Prefix,Prefix))
        collection = "bobopixeloxo"
    options = ["0","1","2","3","4","5","6","sell","Sell","drop","blend","token","Internet","Drop","Blend","Token","internet","swap","Swap"]
    await ctx.send("**Do you looking for something specific?**\n\n 0 = AtomicHub, NeftyBlocks, NFTHive, WaxDao\n 1 = sell\n 2 = drop\n 3 = blend\n 4 = token\n 5 = swap\n 6 = On The Internet\n".format(Prefix,Prefix))
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer1 = await bot.wait_for("message", check=pred)
    if answer1.content in options:
        if answer1.content == "0" or answer1.content == "all" or answer1.content == "All":
            em = discord.Embed(description="**wax.atomichub.io**\n\nhttps://wax.atomichub.io/explorer/collection/{}\n\n**neftyblocks.com**\n\nhttps://neftyblocks.com/c/{}\n\n**nfthive.io**\n\nhttps://nfthive.io/collection/{}\n\n**waxdao.io**\n\nhttps://waxdao.io/\n\n".format(collection,collection,collection), color=discord.Color.blue())
            await ctx.send(embed=em)
        elif answer1.content == "1" or answer1.content == "sell" or answer1.content == "Sell":
            em = discord.Embed(description="**wax.atomichub.io**\n\nhttps://wax.atomichub.io/market?collection_name={}\n\n**neftyblocks.com**\n\nhttps://neftyblocks.com/c/bobopixeloxo/marketplace?sort=created&order=desc&collection_name={}\n\n**nfthive.io**\n\nhttps://nfthive.io/collection/{}?tab=open_market`\n\n".format(collection,collection,collection), color=discord.Color.blue())
            await ctx.send(embed=em)
        elif answer1.content == "2" or answer1.content == "drop" or answer1.content == "Drop":
            em = discord.Embed(description="**wax.atomichub.io**\n\nhttps://wax.atomichub.io/drops/4849\n\n**neftyblocks.com**\n\nhttps://neftyblocks.com/c/{}\n\n**nfthive.io**\n\nhttps://nfthive.io/collection/{}?tab=drops\n\n".format(collection,collection), color=discord.Color.blue())
            await ctx.send(embed=em)
        elif answer1.content == "3" or answer1.content == "blend" or answer1.content == "Blend":
        #  https://neftyblocks.com/c/bobopixeloxo/blends
            em = discord.Embed(description="**neftyblocks.com**\n\nhttps://neftyblocks.com/c/{}/blends\n\n".format(collection), color=discord.Color.blue())
            await ctx.send(embed=em)
        elif answer1.content == "4" or answer1.content == "token" or answer1.content == "Token":
            em = discord.Embed(description="**waxdao.io**\n\n**Pool**\n`https://waxdao.io/pool/bpbwaxpoxol`\n**Farm**\n`https://waxdao.io/farm/bobopixeloxo`\n\n".format(), color=discord.Color.blue())
            await ctx.send(embed=em)
            em1 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em2 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em1.description = "[waxdao.io Pool](https://waxdao.io/pool/{})".format(collection)
            em2.description = "[waxdao.io Farm](https://waxdao.io/farm/{})".format(collection)
            await ctx.send(embed=em1)
            await ctx.send(embed=em2)
            em3 = discord.Embed(description="**waxdao.io**\n\n**Pool**\nhttps://waxdao.io/pool/{}\n**waxdao.io**\n\n**Pool**\nhttps://waxdao.io/pool/{}\n**Farm**\nhttps://waxdao.io/farm/{}\n\n".format(collection,collection), color=discord.Color.blue())
            await ctx.send(embed=em3)
        elif answer1.content == "5" or answer1.content == "swap" or answer1.content == "Swap":
            em = discord.Embed(description="**alcor.exchange**\n\n**Pool**\n`https://alcor.exchange/`\n\n".format(), color=discord.Color.blue())
            await ctx.send(embed=em)
            em1 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em2 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em3 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em4 = discord.Embed(description="**WAXGOLI** for Pool to resive WAX", color=discord.Color.green())
            em5 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em6 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em7 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em8 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em9 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em10 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em11 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em12 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em13 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em14 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em15 = discord.Embed(description="{}".format(collection), color=discord.Color.red())
            em16 = discord.Embed(description="{}".format(collection), color=discord.Color.red())
            em17 = discord.Embed(description="{}".format(collection), color=discord.Color.red())
            em18 = discord.Embed(description="{}".format(collection), color=discord.Color.red())
            em19 = discord.Embed(description="{}".format(collection), color=discord.Color.red())
            em1.description = "[BOPIXBO/WAX](https://alcor.exchange/swap/?input=BOPIXBO-bobocoin.gm&output=WAX-eosio.token)"
            em2.description = "[BOPIXBO/GOLD](https://alcor.exchange/swap?output=GOLD-bobocoin.gm&input=BOPIXBO-bobocoin.gm)"
            em3.description = "[BOPIXBO/BOCO](https://alcor.exchange/swap?output=BOCO-bobocoin.gm&input=BOPIXBO-bobocoin.gm)"
            em4.description = "[GOLD/WAX](https://alcor.exchange/swap?output=WAX-eosio.token&input=GOLD-bobocoin.gm)"
            em5.description = "[GOLD/BOPIXBO](https://alcor.exchange/swap?output=BOPIXBO-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em6.description = "[GOLD/BOCO](https://alcor.exchange/swap?output=BOCO-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em7.description = "[GOLD/SCISSOR](https://alcor.exchange/swap?output=SCISSOR-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em8.description = "[GOLD/PAPER](https://alcor.exchange/swap?output=PAPER-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em9.description = "[GOLD/ROCK](https://alcor.exchange/swap?output=ROCK-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em10.description = "[GOLD/FOOD](https://alcor.exchange/swap?output=FOOD-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em11.description = "[GOLD/PEOPLE](https://alcor.exchange/swap?output=PEOPLE-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em12.description = "[GOLD/WOOD](https://alcor.exchange/swap?output=WOOD-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em13.description = "[GOLD/METAL](https://alcor.exchange/swap?output=METAL-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em14.description = "[GOLD/STONE](https://alcor.exchange/swap?output=STONE-bobocoin.gm&input=GOLD-bobocoin.gm)"
            em15.description = "[KEY/METAL](https://alcor.exchange/swap?output=METAL-bobocoin.gm&input=KEY-bobocoin.gm)"
            em16.description = "[DOOR/WOOD](https://alcor.exchange/swap?output=WOOD-bobocoin.gm&input=DOOR-bobocoin.gm)"
            em17.description = "[FOOD/SMPOT](https://alcor.exchange/swap?output=SMPOT-bobocoin.gm&input=FOOD-bobocoin.gm)"
            em18.description = "[FOOD/MEPOT](https://alcor.exchange/swap?output=MEPOT-bobocoin.gm&input=FOOD-bobocoin.gm)"
            em19.description = "[FOOD/BIPOT](https://alcor.exchange/swap?output=BIPOT-bobocoin.gm&input=FOOD-bobocoin.gm)"
            await ctx.send(embed=em1)
            await ctx.send(embed=em2)
            await ctx.send(embed=em3)
            await ctx.send("**WAXGOLI** for Pool to resive WAX **As Liquidity Reword!!!**")
            await ctx.send(embed=em4)
            await ctx.send(embed=em5)
            await ctx.send(embed=em6)
            await ctx.send(embed=em7)
            await ctx.send(embed=em8)
            await ctx.send(embed=em9)
            await ctx.send(embed=em10)
            await ctx.send(embed=em11)
            await ctx.send(embed=em12)
            await ctx.send(embed=em13)
            await ctx.send(embed=em14)
            await ctx.send("KEY **Only** for METAL")
            await ctx.send(embed=em15)
            await ctx.send("DOOR **Only** for WOOD")
            await ctx.send(embed=em16)
            await ctx.send("**SM**ALL**POT**, **ME**DIUM**POT**, **BI**G**POT** **Only** for FOOD")
            await ctx.send(embed=em17)
            await ctx.send(embed=em18)
            await ctx.send(embed=em19)
            await ctx.send("**Rock, Scissor, Paper, Army IN Building Will Need People and Guild Token RSP or something**")
        elif answer1.content == "6" or answer1.content == "Internet" or answer1.content == "internet":
        # https://www.google.com/search?q=bobopixeloxo
            #em = discord.Embed(description="**Google**\n\n https://www.google.com/search?q={}\n\n".format(collection), color=discord.Color.blue())
            em = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em1 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em2 = discord.Embed(description="{}".format(collection), color=discord.Color.blue())
            em.description = "[Google Search](https://www.google.com/search?q={})".format(collection)
            em1.description = "[AtomicHub Search](https://wax.atomichub.io/explorer?search={})".format(collection)
            em2.description = "[NFTHive Search](https://nfthive.io/search?term={})".format(collection)
            await ctx.send(embed=em)
            await ctx.send(embed=em1)
            await ctx.send(embed=em2)
    if collection == "None":
        await ctx.send(" Please add a Collection Name to Look for Others\n Use Command `{}web <Collection Name>`\n\n Example: `{}web bobopixeloxo`".format(Prefix,Prefix))
    walletsinfo = fileIO("wallets/wallets.json", "load")
    walleto = walletsinfo["Wallets"]["Response"]["name_list"]["Discordid_list"]
    discordid = info["discordid"]
    #await ctx.send(f'Checking {discordid}! Please wait....')
    if discordid not in walleto and walletsinfo["dragon_hunt"] == "True":
        print("if discordid not in walleto:")
        discordid = info["discordid"]
        name = info["name"]
        walletsinfo["Wallets"]["Response"]["name_list"]["Discordid_list"].append(discordid)
        walletsinfo["Wallets"]["Response"]["name_list"]["Discordid_name_list"].append(name)
        await ctx.send(f'Save {discordid}! Please wait....')
        #walletsinfo["Wallets"]["Response"]["name_list"]["dragon_holders_0"].append(discordid)
        #walletsinfo["Wallets"]["Response"]["name_list"]["Discordid_list"].append(discordid)
        walletsinfo["dragon_holders_0"] = discordid
        fileIO("wallets/wallets.json".format(author.id), "save", walletsinfo)

@bot.command(aliases=["gm"])
async def gamemaster(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    user = bot.get_user(int(ctx.message.author.id))
    await ctx.send("{} is your id".format(ctx.message.author.id))
    data = {ctx.message.author.id}
    data1 = int(ctx.message.author.id)
    data2 = str(ctx.message.author.id)
    data3 = str(ctx.message.channel)
    data4 = str(ctx.author.guild.roles)
    data5 = str(ctx.author.roles)
    print("ctx.message.author.id")
    print("ctx.message.author.id")
    print("ctx.message.author.id")
    print(data)
    print("channel")
    print("channel")
    print("channel")
    print(channel)
    print("int")
    print("int")
    print("int")
    print(data1)
    print("str")
    print("str")
    print("str")
    print(data2)
    print("datat3")
    print("datat3")
    print("datat3")
    print(data3)
    print("datat4")
    print("datat4")
    print("datat4")
    print(data4)
    print("datat5")
    print("datat5")
    print("datat5")
    print(data5)
    await ctx.send(ctx.author.mention)
    await message.channel.send(message.author.mention)
    await message.channel.send(ctx.channel)
    info["location"] = ctx.channel
    if "GameMaster" in data5:
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
    else:
        await ctx.send("You are Not Admin!")
        await ctx.send("You are Not Admin!")
        await ctx.send("You are Not Admin!")
        await ctx.send("You are Not Admin!")
        return

@bot.command(aliases=["wl"])
async def whitelist(ctx, wallet_to_whitelist=None):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}`start`".format(Prefix))
        return
    if wallet_to_whitelist is None:
        await ctx.send("Please use the command `{}setwhitelist` or `{}whitelist <wallet_to_whitelist>` to whitelist a wallet for the Castle drop.".format(Prefix, Prefix))
        return
    user = bot.get_user(int(ctx.message.author.id))
    await ctx.send("{} is the Wallet to Whitelist for The Drop?".format(wallet_to_whitelist))
    data = ctx.message.author.id
    data1 = int(ctx.message.author.id)
    data2 = str(wallet_to_whitelist)
    data3 = str(ctx.message.channel)
    newData = {"Safe_Whitelist": "Done", "Safe_Whitelist_1": "Done"}
    info.update(newData)
    fileIO("players/{}/info.json".format(author.id), "save", info)
    print(ctx.message.author.id)
    print(data)
    print("channel")
    print(channel)
    print("int")
    print(data1)
    print("str")
    print(data2)
    print("data3")
    print(data3)
    walletinfo = fileIO("wallets/wallets.json", "load")
    walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    try:
        await ctx.send(f'Checking Registration for Whitelist {wallet_to_whitelist}! Please wait....')
        if wallet_to_whitelist not in walleto:
            await ctx.send(f'Saving {wallet_to_whitelist} to Whitelist! Please wait....\n \n USE COMMAND `{Prefix}st` (for stats)')
            discordid = int(info["discordid"])
            name = info["name"]
            walletinfo["Wallets"]["Response"]["Names_whitelist"]["Discordid_list"] = discordid
            walletinfo["Wallets"]["Response"]["Names_whitelist"]["Name"] = name
            walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"].append(wallet_to_whitelist)
            await ctx.send(f'Saved {wallet_to_whitelist}! Done')
            fileIO("wallets/wallets.json", "save", walletinfo)
            return
        else:
            await ctx.send("This wallet is already whitelisted. Thank you for using the service!")
            await ctx.send("Please contact @bobocoin#2774 for any issues or retry the command.")
            await showwhitelist(ctx)
            return
    except IndexError:
        print("IndexError")
    await ctx.send(ctx.author.mention)
    await message.channel.send(message.author.mention)
    await message.channel.send(ctx.channel)
    namereal = info["name"]
    info["hacker_password"] = password
    fileIO("players/{}/info.json".format(author.id), "save", info)
    em = discord.Embed(description="```diff\n- {}, Password Saved```".format(namereal), color=discord.Color.red())
    await ctx.send(embed=em)
    
    
@bot.command(aliases=["sp"])
async def setpass(ctx, password=None):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}`start`".format(Prefix))
        return
    if password is None:
        await ctx.send("Please use the command `{}setpassword` or `{}sp <Your Password>` to set your password. Please do not use any real passwords.".format(Prefix, Prefix))
        return
    user = bot.get_user(int(ctx.message.author.id))
    await ctx.send("{} is your id".format(ctx.message.author.id))
    data = ctx.message.author.id
    data1 = int(ctx.message.author.id)
    data2 = str(ctx.message.author.id)
    data3 = str(ctx.message.channel)
    print(ctx.message.author.id)
    print(data)
    print("channel")
    print(channel)
    print("int")
    print(data1)
    print("str")
    print(data2)
    print("data3")
    print(data3)
    print("password")
    print(password)
    await ctx.send(ctx.author.mention)
    await message.channel.send(message.author.mention)
    await message.channel.send(ctx.channel)
    namereal = info["name"]
    info["hacker_password"] = password
    fileIO("players/{}/info.json".format(author.id), "save", info)
    em = discord.Embed(description="```diff\n- {}, Password Saved```".format(namereal), color=discord.Color.red())
    await ctx.send(embed=em)
    
@bot.command(aliases=["Login"], pass_context=True)
async def login(ctx, name=None, password=None):
    await ctx.message.delete()  # Delete user's message

    embed = discord.Embed(
        title="List of commands.",
        description="**Commands:**\n\n{}bot_info (Bot Info and Server Stats)\n{}stats <file_name>(Player Stats)\n{}scan <@ping user>(Scan a Target)\n{}upgrade <file_name>(Upgrade Your Stuff)\n{}upload <file_name>(Upload a File)\n{}download <file_name>(Download a File)\n{}task (See your Running Tasks)\n{}delete <file_name>(Delete a File)\n{}crack <file_name>(Crack Password)\n{}inventory (See your Inventory)\n{}hardware (Your Hardware)\n{}software (Your Software)\n{}install <file_name>(Install a File)\n{}run <file_name>(Run a Script)\n{}buy (Buy NFT on Atomic Market and Nefty)\n{}login <user_name>,<password>(Login as)\n{}logout (Logout)\n{}brute_force<@ping user>(Brute-Force a Password)\n{}mine (Miner Stats)\n{}spam (Spam Stats)\n{}transfer (Transfer FakeToken)\n{}hide (Hide a File)\n{}unhide (Unhide a File)\n{}collect (Collect Miner and Spam)\n\nHello, this is a great way to confuse people or hide your trace, but don't forget to delete your log. This message will self-destruct in 5 seconds...\n".format(
            Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix, Prefix
        ),
        colour=discord.Color.orange(),
    )

    msg = await ctx.send(embed=embed)  # Get bot's message
    await asyncio.sleep(5)
    await msg.delete()

    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    await ctx.send("{} is your id".format(ctx.message.author.id))
    info = fileIO("players/{}/info.json".format(author.id), "load")
    namereal = info["name"]
    discordid = info["discordid"]
    hacker_password = info["hacker_password"]

    print("author.id")
    print(author.id)
    print("name to login")
    print(name)
    print("namereal")
    print(namereal)
    print("password")
    print(password)
    print("hacker_password")
    print(hacker_password)

    name = str(name)
    namereal = str(namereal)
    author = str(author.id)
    password = str(password)
    hacker_password = str(hacker_password)

    if password == hacker_password:
        print("Password Match")
    else:
        print("Password Fail")

    if discordid == author:
        if discordid == author and password == hacker_password:
            print("tryname Real")
            await _check_setHacker(ctx)
            em551122 = discord.Embed(
                description="```diff\n Logged in as {} : ********```\n You are a Hacker\n Visit https://discord.gg/W6vZuwEa8g PanicRoom Guild\n".format(namereal),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em551122)
            await asyncio.sleep(5)
            try:
                await ctx.message.delete()
            except:
                print(
                    "discord.ext.commands.errors.CommandInvokeError: Command raised an exception: NotFound: 404 Not Found (error code: 10008): Unknown Message"
                )
        else:
            em333 = discord.Embed(
                description="```diff\n Login Fail {} : {}```\n Visit https://discord.gg/W6vZuwEa8g PanicRoom \n".format(
                    name, password
                ),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em333)
            msg1 = await ctx.send(embed=em333)  # Get bot's message
            await asyncio.sleep(5)
            await msg1.delete()

    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return

    if name == "Admin":
        if name == "Admin" and password == "Admin":
            em555 = discord.Embed(
                description="```diff\n You are Admin Admin```\n".format(), color=discord.Color.blue()
            )
            await ctx.send(embed=em555)
            msg101 = await ctx.send(embed=em555)  # Get bot's message
            await asyncio.sleep(5)
            await msg101.delete()
    elif name == "Admin":
        if name == "Admin" and password == "Password":
            print("tryAdmin")
            em666 = discord.Embed(
                description="```diff\n Logged in as Admin : ********```\n Visit https://discord.gg/N4naauDxJB Hacker Guild\n".format(),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em666)
            msg1010 = await ctx.send(embed=em666)  # Get bot's message
            await asyncio.sleep(5)
            await msg1010.delete()
    elif name == "User":
        if name == "User" and password == "Password":
            print("tryUser")
            em777 = discord.Embed(
                description="```diff\n Logged in as User : ********```\n Visit https://discord.gg/W6vZuwEa8g PanicRoom Guild\n".format(),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em777)
            msg10100 = await ctx.send(embed=em777)  # Get bot's message
            await asyncio.sleep(5)
            await msg10100.delete()
    elif name == author:
        if name == author and password == hacker_password:
            print("tryAutor")
            em = discord.Embed(
                description="```diff\n Logged in as {} : {} \n Visit https://discord.gg/mEntteMrmY PanicRoom as Hacker Guild Member\n Do Good or Bad and Receive What you Deserve\n Read all about in Server\n Better Delete This its Secret!!!```".format(
                    name, hacker_password
                ),
                color=discord.Color.blue(),
            )
            await ctx.send(embed=em)

    try:
        print("try")
    except:
        print("except")
    else:
        em = discord.Embed(
            description="```diff\n Logged in as {} : ********!```\n".format(name, password), color=discord.Color.blue()
        )
        await ctx.send(embed=em)
        
@bot.command(pass_context=True, aliases=["s"])
async def steal(ctx, user: discord.Member):
    author = ctx.author
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    
    if ainfo["race"] and ainfo["class"] == None:
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    
    if user is None:
        em = discord.Embed(description="USE COMMAND {}steal <@username>\nExample: {}steal @bobtherobot aaa".format(Prefix, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    try:
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
        bname = binfo["name"]
    except FileNotFoundError:
        em = discord.Embed(description="<@{}> has not started their character yet. Ask them to use `{}start`.".format(user.id, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    
    bname = binfo["name"]
    boco = binfo["boco"]
    gold = binfo["gold"]
    sklvl = int(ainfo["sklvl"])
    
    await ctx.send("{} has {} BoboCoins and {} Gold.\n\nWould you like to steal some?\nY or N?".format(user.mention, boco, gold))
    
    def pred(m):
        return m.author == author and m.channel == ctx.channel
    
    answer1 = await bot.wait_for("message", check=pred)
    
    if answer1.content.lower() in ["yes", "y"]:
        print("Player Data")
bname = binfo["name"]
boco = binfo["boco"]
gold = binfo["gold"]
sklvl = int(ainfo["sklvl"])
print("dfdf")

await ctx.send("{} have {} BoboCoins\n and {} Gold.\n\n Would you Like to steal some?\n Y or N ?\n".format(user.mention, boco, gold))

options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]

def pred(m):
    return m.author == message.author and m.channel == message.channel

answer1 = await bot.wait_for("message", check=pred)

if answer1.content in options2:
    if answer1.content.lower() in ["yes", "y"]:
        bsklvl = binfo.get("sklvl", 0)
        sklvl = ainfo.get("sklvl", 0)
        bgold = binfo.get("gold", 0)
        gold = ainfo.get("gold", 0)
        bfood = binfo.get("food", 0)
        food = ainfo.get("food", 0)
        bboco = binfo.get("boco", 0)
        boco = ainfo.get("boco", 0)
        
        if ainfo.get("status_confuse", "False") == "False":
            if binfo.get("status_confuse", "False") == "False":
                chance = random.randint(1, 10)
                
                if chance in [1, 2, 3]:
                    gain = bboco * 0.00001 * (chance * 10)
                    binfo["boco"] -= gain
                    ainfo["boco"] += gain
                    if binfo["boco"] <= 0:
                        gain = 0
                        binfo["boco"] = 0
                        em = discord.Embed(description="<@{}>\n```diff\n- You steal 0% at {}!\n```".format(author.id, bname), color=discord.Color.red())
                        await ctx.send(embed=em)
                    else:
                        em = discord.Embed(description="<@{}>\n```diff\n- You steal {}% at {}!\n {} Bobocoin's\n```".format(author.id, chance * 10, bname, gain), color=discord.Color.red())
                        await ctx.send(embed=em)
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    fileIO("players/{}/info.json".format(user.id), "save", binfo)
                elif chance in [4, 5, 6]:
                    gain = gold * 0.00000001 * ((chance - 3) * 10)
                    binfo["gold"] -= gain
                    ainfo["gold"] += gain
                    if binfo["gold"] <= 0.00000001:
                        gain = 0
                        binfo["gold"] = 0
                        em = discord.Embed(description="<@{}>\n```diff\n- You steal 0% at {}!\n```".format(author.id, bname), color=discord.Color.red())
                        await ctx.send(embed=em)
                    else:
                        em = discord.Embed(description="<@{}>\n```diff\n- You steal {}% at {}!\n {} gold\n```".format(author.id, (chance - 3) * 10, bname, gain), color=discord.Color.red())
                        await ctx.send(embed=em)
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
fileIO("players/{}/info.json".format(user.id), "save", binfo)
        await ctx.send("Stealing logic not implemented yet.")
    else:
        await ctx.send("Stealing canceled.")
        
@bot.command(pass_context=True, aliases=["look"])
async def search(ctx, user: discord.Member):
    if user == None or user == "None" or user == "discord.Member":
        em = discord.Embed(description="```diff\n USE COMMAND {}pick <@username>\n Exemple: {}pick @bobtherobot ```\n".format(Prefix, Prefix), color=discord.Color.blue())
        return
        await ctx.send(embed=em)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    if user == "None":
        await ctx.send("Use Command`{}search | {}look <@target>` to UNHIDE".format(Prefix, Prefix))
        # ...
    else:
        # ...
    # ...
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    try:
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
    except:
        em = discord.Embed(description="{} set your Char with {}start\n Its More Fun Toghter!'\nUse Command `{}attack | {}a <@target>\n to Kill some Zombies".format(user, Prefix, Prefix, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        print("No Player Data")
        return
    if ainfo["race"] and ainfo["class"] == None:
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    # ...
    bstatus = binfo["status_hide"]
    try:
        bbuser = bot.get.member(user.id)
        print("bbuser")
        print(bbuser)
    except:
        print("no")
    try:
        bauthor = bot.get.member(author.id)
        print("bauthor")
        print(bauthor)
    except:
        print("no")
    # ...
    await ctx.send("{} is of The {} Guild\n\n Would you Like to Search here?\n Y or N ?\n".format(user.mention, castle_guild_nameb))
    options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer1 = await bot.wait_for("message", check=pred)
    if answer1.content in options2 and bstatus == "True":
        print("insideTrue")
        if answer1.content == "Yes" or "yes" or "y":
            print("insideTrue YES")
            # ...
        elif answer1.content == "No" or "no" or "N" or "n":
            print("insideTrue NO")
            await ctx.send("Nothing Than\n USE COMMAND {}buy > skills > thief > steal > {}skillinv and equipt in one of 4 slots to use {}steal @user".format(Prefix, Prefix, Prefix, Prefix))
            return
            
@bot.command(pass_context=True, aliases=["pick"])
async def pickpocket(ctx, user: discord.Member):
    if user == None or user == "None":
        em = discord.Embed(description="```diff\n USE COMMAND {}pick <@username>\n Exemple: {}pick @bobtherobot ```\n".format(Prefix, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return

    ainfo = fileIO("players/{}/info.json".format(ctx.author.id), "load")
    try:
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
    except:
        em = discord.Embed(description="{} set your Char with {}start\n Its More Fun Toghter!'\n".format(user, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        print("No Player Data")
        return

    if ainfo["race"] and ainfo["class"] == None:
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return

    bname = binfo["name"]
    boco = binfo["boco"]
    gold = binfo["gold"]
    food = 1000
    castle_guild_namea = ainfo["castle_guild_name"]
    castle_guild_nameb = binfo["castle_guild_name"]

    await ctx.send("{} is of The {} Guild\n\n Would you really like to try some?\n Y or N ?\n".format(user.mention, castle_guild_nameb))

    options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]

    def pred(m):
        return m.author == ctx.message.author and m.channel == ctx.message.channel

    answer1 = await bot.wait_for("message", check=pred)

    if answer1.content in options2 and ainfo["class"] == "Thief":
        if answer1.content.lower() in ["yes", "y"]:
            sklvl = ainfo["sklvl"] / 100
            chance = random.randint(1, 11)

            if chance in [1, 2, 3]:
                gain = boco * (chance * 0.1) * sklvl
            elif chance in [4, 5, 6]:
                gain = gold * ((chance - 3) * 0.1) * sklvl
            elif chance in [7, 8, 9]:
                gain = food * ((chance - 6) * 0.1) * sklvl
            elif chance == 10:
                gain = food * 0.75 * sklvl
                gain = gain / 2
            elif chance == 11:
                gain = food * sklvl
                gain = gain / 2

            if binfo["boco"] >= gain:
                binfo["boco"] -= gain
                ainfo["boco"] += gain
            else:
                gain = binfo["boco"]
                binfo["boco"] = 0
                ainfo["boco"] += gain

            em = discord.Embed(description="<@{}>\n```diff\n- You steal at {}!\n {} Bobocoin's\n```".format(ctx.author.id, bname, gain), color=discord.Color.red())
            await ctx.send(embed=em)
            fileIO("players/{}/info.json".format(ctx.author.id), "save", ainfo)
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
        elif answer1.content.lower() in ["no", "n"]:
            await ctx.send("Nothing Than\n USE COMMAND {}buy > skills > thief > steal > {}skillinv and equipt in one of 4 slots to use {}steal @user".format(Prefix, Prefix, Prefix))
            return
    else:
        await ctx.send("You are not a Thief!")
        
@bot.command(pass_context=True, aliases=["br"])
async def burn(ctx, numskill="None"):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    skillname = fileIO("core/enemies/skills.json", "load")
    if ainfo["race"] and ainfo["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if numskill == None or numskill == "None":
        numskill = 0
        print("numskill 0")
        em0001 = discord.Embed(description="\n Do you Want to **Burn All**\n Use Command \n`{}burn 1`**\n\n Do you want to burn specific Resource Write \n`{}burn boco(2)\n{}burn gold(3)\n{}burn metal(4)\n{}burn stone(5)\n{}burn wood(6)\n{}burn food(7)\n\n` What it does it set your \nResource to `0` \n Maybe Helpful when you are in **Minus**\n".format(Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix), color=discord.Color.red())
        await ctx.send(embed=em0001)
    if numskill == None or numskill == "None":
        em = discord.Embed(description="```diff\n USE COMMAND {}skill <@username>\n Exemple: {}skill @bobtherobot 1 ```\n" .format(Prefix,Prefix), color=discord.Color.blue())
        return
        await ctx.send(embed=em)
    print("author")
    print(author.id)
    print("memberID")
    #print(user.mention)
    print("discord.Member")
    print(discord.Member)
    print("==========")
    print("==========")
    print("==========")
    print("a")
    print("author.id")
    print(author.id)
    print("==========")
    print("b")
    print("user.id")
    #print(user.id)
    print("==========")
    if numskill == "None":
        #await ctx.send("Use Command`{}search | {}look <@target>` to UNHIDE".format(Prefix))
        print("numskill")
        print(numskill)
        print("message")
        print(message)
        print("author")
        print(author.id)
        print("memberID")
        print("==========")
        print("==========")
        print("==========")
        print("a")
        print("author.id")
        print(author.id)
        print("==========")
    else:
        print("author")
        print(author.id)
        print("memberID")
        #print(user.mention)
        print("discord.Member")
        print(discord.Member)
        print("==========")
        print("==========")
        print("==========")
        print("a")
        print("author.id")
        print(author.id)
        print("==========")
        print("==========")
    print("last_message_id")
    print(message.id)
    print("==========")
    print("channel.id")
    print(channel.id)
    print("==========")
    print("==========")
    print("message_members")
    print(message.id)
    print("==========")
    aname = ainfo["name"]
    print(aname)
    print(Prefix)
    #user_drop_skexp
    #user_drop_exp
    #user_drop_hp
    #user_drop_sp
    #user_drop_mp
    #user_drop_pot
    #user_drop_key
    #user_drop_door
    #user_drop_people
    if numskill == "1" or numskill == "All":
        #
        print("numskill 0")
        em0001 = discord.Embed(description="\n Do you Want to burn All \n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                ainfo["food"] = 0
                ainfo["boco"] = 0
                ainfo["gold"] = 0
                ainfo["metal"] = 0
                ainfo["wood"] = 0
                ainfo["stone"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
    if numskill == "2" or numskill == "boco":
        #
        print("numskill 0")
        em0001 = discord.Embed(description="\n Do you Want to burn All BoCo \n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                num22 = random.randint(1, 60)
                if num22 == 2 or num22 == 25 or num22 == 34 or num22 == 52:
                    await _ran(ctx)
                else:
                    print("no NFTS Chance")
                ainfo["boco"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
    if numskill == "3" or numskill == "gold":
        #
        print("numskill 0")
        em0001 = discord.Embed(description="\n Do you Want to burn All Gold\n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                ainfo["gold"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
    if numskill == "4" or numskill == "metal":
        #
        print("numskill 4")
        em0001 = discord.Embed(description="\n Do you Want to burn All Metal\n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                ainfo["metal"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
    if numskill == "5" or numskill == "stone":
        #
        print("numskill 0")
        em0001 = discord.Embed(description="\n Do you Want to burn All Stone\n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                ainfo["stone"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
    if numskill == "6" or numskill == "wood":
        #
        print("numskill 6")
        em0001 = discord.Embed(description="\n Do you Want to burn All Wood\n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                ainfo["wood"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
    if numskill == "7" or numskill == "food":
        #
        print("numskill 7")
        em0001 = discord.Embed(description="\n Do you Want to burn All Food\n- **Y or N**\n".format(), color=discord.Color.red())
        await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        values = ["yes", "Yes", "YES", "Y", "y", "No", "NO", "no", "n", "N"]
        if str(answer1.content) in values:
            if str(answer1.content) == "yes" or str(answer1.content) == "Yes" or str(answer1.content) == "YES" or str(answer1.content) == "Y" or str(answer1.content) == "y":
                ainfo["food"] = 0
                em = discord.Embed(description="\nAll Done you are Poor Now good Luck!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                em = discord.Embed(description="\nA You Know What to Do!\n".format(), color=discord.Color.blue())
                await ctx.send(embed=em)

@bot.command()
async def kick(ctx):
    author = ctx.author
    message = ctx.message
    if ctx.author.guild_permissions.manage_messages == True:
        await ctx.send("Target is an manage_messages True")
    if ctx.author.guild_permissions.administrator == True:
        await ctx.send("Target is an administrator True")
    #else:
    #try:
    cinfo = fileIO("global/info.json".format(author.id), "load")
    #userTargetA = cinfo["adiscordid"]
    userTargetB = cinfo["bdiscordid"]
    target = cinfo["bdiscordid"]
    user = discord.utils.get(ctx.guild.members, id=userTargetB)
    await user.kick(reason=None)
    #await _kicker(target)
    cinfo["bdiscordid"] = 0
    fileIO("global/info.json".format(author.id), "save", cinfo)
    #except:
    #    await ctx.send("Something went wrong")
    #    useriddd = target.id
    #    user = discord.utils.get(ctx.guild.members, id=useriddd)
    #    await user.kick(reason=None)
    #
    #if ctx.author.guild_permissions.manage_messages == True:
    #    await ctx.send("Target is an manage_messages True")
    #if ctx.author.guild_permissions.administrator == True:
    #    await ctx.send("Target is an administrator True")
    #else:
    #    try:
    #        cinfo = fileIO("global/info.json".format(author.id), "load")
    #        #userTargetA = cinfo["adiscordid"]
    #        userTargetB = cinfo["bdiscordid"]
    #        user = discord.utils.get(ctx.guild.members, id=userTargetB)
    #        await user.kick(reason=None)
    #        cinfo["bdiscordid"] = None
    #        fileIO("global/info.json".format(author.id), "save", cinfo)
    #    except Exception:
    #        await ctx.send("Something went wrong")
    #    useriddd = target.id
    #    user = discord.utils.get(ctx.guild.members, id=useriddd)
    #    await user.kick(reason=None)
async def _kicker(ctx, *, target: discord.Member):
    author = ctx.author
    message = ctx.message
    cinfo = fileIO("global/info.json".format(author.id), "load")
    #userTargetA = cinfo["adiscordid"]
    userTargetB = cinfo["bdiscordid"]
    target = cinfo["bdiscordid"]
    if ctx.author.guild_permissions.manage_messages == True:
        await ctx.send("Target is an admin1")
    else:
        try:
            cinfo = fileIO("global/info.json".format(author.id), "load")
            #userTargetA = cinfo["adiscordid"]
            userTargetB = cinfo["bdiscordid"]
            user = discord.utils.get(ctx.guild.members, id=userTargetB)
            await user.kick(reason=None)
            cinfo["bdiscordid"] = 0
            fileIO("global/info.json".format(author.id), "save", cinfo)
        except Exception:
            await ctx.send("Something went wrong")
        useriddd = target.id
        user = discord.utils.get(ctx.guild.members, id=useriddd)
        await user.kick(reason=None)
async def _kicked(ctx, *, target: discord.Member):
    author = ctx.author
    message = ctx.message
    if ctx.author.guild_permissions.manage_messages == True:
        await ctx.send("Target is an admin1")
    else:
        try:
            cinfo = fileIO("global/info.json".format(author.id), "load")
            userTargetA = cinfo["adiscordid"]
            #userTargetB = cinfo["bdiscordid"]
            user = discord.utils.get(ctx.guild.members, id=userTargetA)
            await user.kick(reason=None)
            cinfo["bdiscordid"] = None
            fileIO("global/info.json".format(author.id), "save", cinfo)
        except Exception:
            await ctx.send("Something went wrong")
        useriddd = target.id
        user = discord.utils.get(ctx.guild.members, id=useriddd)
        await user.kick(reason=None)

@bot.command(pass_context=True, aliases=["sk"])
async def skill(ctx, user: discord.Member, numskill="None"):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    #info = fileIO("players/{}/info.json".format(author.id), "load")
    aname = ainfo["name"]
    adiscordid = ainfo["discordid"]
    slot0 = ainfo["zslot_0_inventory"]
    slot1 = ainfo["zslot_1_inventory"]
    slot2 = ainfo["zslot_2_inventory"]
    slot3 = ainfo["zslot_3_inventory"]
    slot4 = ainfo["zslot_4_inventory"]
    slot5 = ainfo["zslot_5_inventory"]
    slot6 = ainfo["zslot_6_inventory"]
    slot7 = ainfo["zslot_7_inventory"]
    slot8 = ainfo["zslot_8_inventory"]
    slot9 = ainfo["zslot_9_inventory"]
    slot10 = ainfo["zslot_10_inventory"]
    slot11 = ainfo["zslot_11_inventory"]
    slot12 = ainfo["zslot_12_inventory"]
    slot13 = ainfo["zslot_13_inventory"]
    slot14 = ainfo["zslot_14_inventory"]
    slot15 = ainfo["zslot_15_inventory"]
    slot16 = ainfo["zslot_16_inventory"]
    slot17 = ainfo["zslot_17_inventory"]
    slot18 = ainfo["zslot_18_inventory"]
    slot19 = ainfo["zslot_19_inventory"]
    slot20 = ainfo["zslot_20_inventory"]
    slot21 = ainfo["zslot_21_inventory"]
    slot22 = ainfo["zslot_22_inventory"]
    slot23 = ainfo["zslot_23_inventory"]
    slot24 = ainfo["zslot_24_inventory"]
    slot25 = ainfo["zslot_25_inventory"]
    skillname = fileIO("core/enemies/skills.json", "load")
    print("user")
    print(user)
    print("user.id")
    print(user.id)
    if ainfo["race"] and ainfo["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    choices = []
    options = ["Swing","Attack","Cast","Shoot","Run","Punch","Fire Ball","Heal","Arrow Shower","Steel Arrow","Trap","Shield","Knock Back","Brute Force","Water Ball","Earth Ball","Pickpocket","Hide","Jump","Secret Dagger","Scan","Crack","DDOS","Install"]
    options_show = []
    skills_learned = [i for i in ainfo["skill_inventory"]]     # inv_list   skills_learned = []  info binfo
    print("BEfor attack in slkills learnd")
    try: #aInfo
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
        except:
            print("No A Data 1")
        all_drop_attack = ainfo["all_drop_attack"]
        all_drop_defence = ainfo["all_drop_defence"]
        all_drop = ainfo["all_drop"]
        all_drop_boco = ainfo["all_drop_boco"]
        all_drop_exp = ainfo["all_drop_exp"]
        all_drop_food = ainfo["all_drop_food"]
        all_drop_gold = ainfo["all_drop_gold"]
        all_drop_hp = ainfo["all_drop_hp"]
        all_drop_key = ainfo["all_drop_key"]
        all_drop_metal = ainfo["all_drop_metal"]
        all_drop_mp = ainfo["all_drop_mp"]
        all_drop_pot = ainfo["all_drop_pot"]
        all_drop_skexp = ainfo["all_drop_skexp"]
        all_drop_sp = ainfo["all_drop_sp"]
        all_drop_stone = ainfo["all_drop_stone"]
        all_drop_wood = ainfo["all_drop_wood"]
        all_attack = ainfo["all_total_base_attack"]
        all_total_base_attack = ainfo["all_total_base_attack"]
        all_defence = ainfo["all_defence"]
        all_total_base_defence = ainfo["all_total_base_defence"]
        all_total_base_drop = ainfo["all_total_base_drop"]
        all_total_base_boco = ainfo["all_total_base_boco"]
        all_total_base_exp = ainfo["all_total_base_exp"]
        all_total_base_food = ainfo["all_total_base_food"]
        all_total_base_gold = ainfo["all_total_base_gold"]
        all_total_base_hp = ainfo["all_total_base_hp"]
        all_total_base_key = ainfo["all_total_base_key"]
        all_total_base_metal = ainfo["all_total_base_metal"]
        all_total_base_mp = ainfo["all_total_base_mp"]
        all_total_base_pot = ainfo["all_total_base_pot"]
        all_total_base_skexp = ainfo["all_total_base_skexp"]
        all_total_base_sp = ainfo["all_total_base_sp"]
        all_total_base_stone = ainfo["all_total_base_stone"]
        all_total_base_people = ainfo["all_total_base_people"]
        all_total_base_wood = ainfo["all_total_base_wood"]
        all_total_base_door = ainfo["all_total_base_door"]
        max_dmg = ainfo["all_total_base_attack"]
        max_def = ainfo["all_total_base_defence"]
        user_dmg = ainfo["all_total_base_attack"]
        all_total_base_drop = ainfo["all_total_base_drop"]
        all_total_base_boco = ainfo["all_total_base_boco"]
        all_total_base_exp = ainfo["all_total_base_exp"]
        all_total_base_food = ainfo["all_total_base_food"]
        all_total_base_gold = ainfo["all_total_base_gold"]
        all_total_base_hp = ainfo["all_total_base_hp"]
        all_total_base_key = ainfo["all_total_base_key"]
        all_total_base_metal = ainfo["all_total_base_metal"]
        all_total_base_mp = ainfo["all_total_base_mp"]
        all_total_base_pot = ainfo["all_total_base_pot"]
        all_total_base_skexp = ainfo["all_total_base_skexp"]
        all_total_base_sp = ainfo["all_total_base_sp"]
        all_total_base_stone = ainfo["all_total_base_stone"]
        all_total_base_people = ainfo["all_total_base_people"]
        all_total_base_wood = ainfo["all_total_base_wood"]
        all_total_base_door = ainfo["all_total_base_door"]
        user_location = ainfo["location"]
        #user_enemy = ainfo["selected_enemy_player"]
        ainfo["selected_enemy_player"] = user
        user_enemy = user
        print("user_enemy in a data")
        print(user_enemy)
        user_enemy_hp = ainfo["enemyhp"]
        user_skills = ainfo["skills_learned"]
        max_dmg = ainfo["all_total_base_attack"]
        bbvalue_stats = ainfo["bbvalue_stats"]
        #max_dmg = ainfo["equipluk"]
        max_def = ainfo["all_total_base_defence"]
        user_hp = ainfo["health"]
        user_mp = ainfo["mana"]
        user_sp = ainfo["stamina"]
        name = ainfo["name"]
    except:
        print("No A Data")
    try: #binfo
        try:
            binfo = fileIO("players/{}/info.json".format(user.id), "load")
            bname = binfo["name"]
        except:
            print("No B Data 1")
            await ctx.send("The User you Pinged is an ZOmbie!!!")
            return
        ball_drop_attack = binfo["all_drop_attack"]
        ball_drop_defence = binfo["all_drop_defence"]
        ball_drop = binfo["all_drop"]
        ball_drop_boco = binfo["all_drop_boco"]
        ball_drop_exp = binfo["all_drop_exp"]
        ball_drop_food = binfo["all_drop_food"]
        ball_drop_gold = binfo["all_drop_gold"]
        ball_drop_hp = binfo["all_drop_hp"]
        ball_drop_key = binfo["all_drop_key"]
        ball_drop_metal = binfo["all_drop_metal"]
        ball_drop_mp = binfo["all_drop_mp"]
        ball_drop_pot = binfo["all_drop_pot"]
        ball_drop_skexp = binfo["all_drop_skexp"]
        ball_drop_sp = binfo["all_drop_sp"]
        ball_drop_stone = binfo["all_drop_stone"]
        ball_drop_wood = binfo["all_drop_wood"]
        ball_attack = binfo["all_total_base_attack"]
        ball_total_base_attack = binfo["all_total_base_attack"]
        ball_defence = binfo["all_defence"]
        ball_total_base_defence = binfo["all_total_base_defence"]
        ball_total_base_drop = binfo["all_total_base_drop"]
        ball_total_base_boco = binfo["all_total_base_boco"]
        ball_total_base_exp = binfo["all_total_base_exp"]
        ball_total_base_food = binfo["all_total_base_food"]
        ball_total_base_gold = binfo["all_total_base_gold"]
        ball_total_base_hp = binfo["all_total_base_hp"]
        ball_total_base_key = binfo["all_total_base_key"]
        ball_total_base_metal = binfo["all_total_base_metal"]
        ball_total_base_mp = binfo["all_total_base_mp"]
        ball_total_base_pot = binfo["all_total_base_pot"]
        ball_total_base_skexp = binfo["all_total_base_skexp"]
        ball_total_base_sp = binfo["all_total_base_sp"]
        ball_total_base_stone = binfo["all_total_base_stone"]
        ball_total_base_people = binfo["all_total_base_people"]
        ball_total_base_wood = binfo["all_total_base_wood"]
        ball_total_base_door = binfo["all_total_base_door"]
        bmax_dmg = binfo["all_total_base_attack"]
        bmax_def = binfo["all_total_base_defence"]
        buser_dmg = binfo["all_total_base_attack"]
        ball_total_base_drop = binfo["all_total_base_drop"]
        ball_total_base_boco = binfo["all_total_base_boco"]
        ball_total_base_exp = binfo["all_total_base_exp"]
        ball_total_base_food = binfo["all_total_base_food"]
        ball_total_base_gold = binfo["all_total_base_gold"]
        ball_total_base_hp = binfo["all_total_base_hp"]
        ball_total_base_key = binfo["all_total_base_key"]
        ball_total_base_metal = binfo["all_total_base_metal"]
        ball_total_base_mp = binfo["all_total_base_mp"]
        ball_total_base_pot = binfo["all_total_base_pot"]
        ball_total_base_skexp = binfo["all_total_base_skexp"]
        ball_total_base_sp = binfo["all_total_base_sp"]
        ball_total_base_stone = binfo["all_total_base_stone"]
        ball_total_base_people = binfo["all_total_base_people"]
        ball_total_base_wood = binfo["all_total_base_wood"]
        ball_total_base_door = binfo["all_total_base_door"]
        buser_location = binfo["location"]
        buser_enemy = ainfo["selected_enemy_player"]
        user_enemy = ainfo["selected_enemy_player"]
        print("buser_enemy in b data")
        print(buser_enemy)
        print("user_enemy in b data")
        print(user_enemy)
        buser_skills = binfo["skills_learned"]
        bmax_dmg = binfo["all_total_base_attack"]
        bbbvalue_stats = binfo["bbvalue_stats"]
        #max_dmg = binfo["equipluk"]
        bmax_def = binfo["all_total_base_defence"]
        buser_hp = binfo["health"]
        buser_mp = binfo["mana"]
        buser_sp = binfo["stamina"]
        bname = binfo["name"]
        bdiscordid = binfo["discordid"]
        buser_enemy_hp = buser_hp
        #Define wep dmg.
        try:
            winfo = fileIO("core/enemies/weapons.json", "load")
        except:
            print("No Weapon Data w")
        #user_wep_define = ainfo[user_wep]
        #max_dmg = ainfo[user_wep]["max_dmg"]
        #Define enemy stats.
        #enemy_define = info["selected_enemy"]
        #selected_enemy = info["selected_enemy"]
        #enemy_define_hp = info["enemyhp"]
        #selected_enemy_hp = info["selected_enemy_hp"]
    except:
        print("No info data")
        if binfo["status_jump"] == "True":
            gain = 1000 * ainfo["lvl"]
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            await ctx.send(" {} is Flying High\n And Spit on you {} Damage\n\nWait until he come down".format(bname,gain))
            return
        else:
            print("Not status_jump")
        if ainfo["status_ddos"] == "True":
            ddos_attacker = ainfo["ddos_attacker"]
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            await ctx.send(" {} Is the Attacker Who DDOS your System\n USE COMMAND `{}login`\nto Fight back an Epic Ehtical NFT Hacking Simulation\n\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(ddos_attacker,Prefix))
            return
        else:
            print("Not status_ddos")
        if binfo["status_trap"] == "True":
            gain = 100000 * ainfo["lvl"]
            ainfo["health"] -= gain
            binfo["status_trap"] = "False"
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            await ctx.send("You Ring the Bell\n DING DONG {} Damage!!! {} set up a Trap and You Fall IN!\n|n USE COMMAND `{}bomb <@target>`\nto drop a bomb!\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(gain,bname,Prefix))
            binfo["status_trap"] = "False"
            #binfo = fileIO("players/{}/info.json".format(user.id), "safe")
            #ainfo = fileIO("players/{}/info.json".format(author.id), "safe")
            return
        else:
            print("Not status_trap")
        print(bname)
        if binfo["status_hide"] == "True":
            print("status_hide True")
            await ctx.send(" `{}` Is Hiddn!!!\n\n Use Command\n `{}search | {}look <@User>`\n to find and Attack!\n USE COMMAND `{}l` or any other command to show the bot where you are!\n".format(bname,Prefix,Prefix,Prefix))
            print("a1")
            try:
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                gain = 100000 * binfo["lvl"]
            except:
                print("b error")
            try:
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                ainfo["health"] -= gain
                if ainfo["health"] <= 0:
                    ainfo["health"] = 0
            except:
                print("a error")
            print("a12")
            #await ctx.send("{} Is hidden under a Tree\n USE COMMAND `{}search`\nto Find trails\n\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(bname,Prefix))
            return
        else:
            print("Not status_hide")
        print("a13")
        if binfo["infight_status"] == "Death":
            await ctx.send("Is K.O. \n and can not Fight!".format())
            return
    if "Attack" in ainfo["skills_learned"]:
        options.append("Attack")
        options.append("attack")
        options.append("1")
        options_show.append("1)Attack")
    print("In attack in slkills learnd")
    if "Swing" in ainfo["skills_learned"]:
        options.append("Swing")
        options.append("swing")
        options.append("2")
        options_show.append("2)Swing")
    if "Cast" in ainfo["skills_learned"]:
        options.append("Cast")
        options.append("cast")
        options.append("3")
        options_show.append("3)Cast")
    if "Shoot" in ainfo["skills_learned"]:
        options.append("Shoot")
        options.append("shoot")
        options.append("4")
        options_show.append("4)Shoot")
    if "Run" in ainfo["skills_learned"]:
        options.append("Run")
        options.append("run")
        options.append("5")
        options_show.append("5)Run")
    if "Punch" in ainfo["skills_learned"]:
        options.append("Punch")
        options.append("punch")
        options.append("6")
        options_show.append("6)Punch")
    if "Fire Ball" in ainfo["skills_learned"]:
        options.append("Fire Ball")
        options.append("fire ball")
        options.append("7")
        options_show.append("7)Fire Ball")
    if "Heal" in ainfo["skills_learned"]:
        options.append("Heal")
        options.append("heal")
        options.append("8")
        options_show.append("8)Heal")
    if "Arrow Shower" in ainfo["skills_learned"]:
        options.append("Arrow Shower")
        options.append("arrow shower")
        options.append("9")
        options_show.append("9)Arrow Shower")
    if "Steel Arrow" in ainfo["skills_learned"]:
        options.append("Steel Arrow")
        options.append("steel arrow")
        options.append("10")
        options_show.append("10)Steel Arrow")
    if "Trap" in ainfo["skills_learned"]:
        options.append("Trap")
        options.append("trap")
        options.append("11")
        options_show.append("11)trap")
    if "Shield" in ainfo["skills_learned"]:
        options.append("Shield")
        options.append("shield")
        options.append("12")
        options_show.append("12)shield")
    if "Knock Back" in ainfo["skills_learned"]:
        options.append("Knock Back")
        options.append("knock Back")
        options.append("13")
        options_show.append("13)knock Back")
    if "Brute Force" in ainfo["skills_learned"]:
        options.append("Brute Force")
        options.append("brute Force")
        options.append("14")
        options_show.append("14)brute Force")
    if "Water Ball" in ainfo["skills_learned"]:
        options.append("Water Ball")
        options.append("water Ball")
        options.append("15")
        options_show.append("15)water Ball")
    if "Wind Ball" in ainfo["skills_learned"]:
        options.append("Wind Ball")
        options.append("wind ball")
        options.append("16")
        options_show.append("16)Wind Ball")
    if "Earth Ball" in ainfo["skills_learned"]:
        options.append("Earth Ball")
        options.append("earth ball")
        options.append("17")
        options_show.append("17)Earth Ball")
    if "Pickpocket" in ainfo["skills_learned"]:
        options.append("Pickpocket")
        options.append("pickpocket")
        options.append("18")
        options_show.append("18)Pickpocket")
    if "Hide" in ainfo["skills_learned"]:
        options.append("Hide")
        options.append("hide")
        options.append("19")
        options_show.append("19)Hide")
    if "Jump" in ainfo["skills_learned"]:
        options.append("Jump")
        options.append("jump")
        options.append("20")
        options_show.append("20)Jump")
    if "Secret Dagger" in ainfo["skills_learned"]:
        options.append("Secret Dagger")
        options.append("secret dagger")
        options.append("21")
        options_show.append("21)secret Dagger")
    if "Scan" in ainfo["skills_learned"]:
        options.append("Scan")
        options.append("scan")
        options.append("22")
        options_show.append("22)Scan")
    if "Crack" in ainfo["skills_learned"]:
        options.append("Crack")
        options.append("crack")
        options.append("23")
        options_show.append("23)Crack")
    if "DDOS" in ainfo["skills_learned"]:
        options.append("DDOS")
        options.append("ddos")
        options.append("24")
        options_show.append("24)DDOS")
    if "Install" in ainfo["skills_learned"]:
        options.append("Install")
        options.append("Install")
        options.append("25")
        options_show.append("25)Install")
    await ctx.send("<@{}> what skill would you like to use?\n\n`Choose one`\n{}".format(author.id, "\n".join(options_show)))
    print("After attack in slkills learnd")
    if numskill == None or numskill == "None":
        numskill = 0
        adiscordid = ainfo["discordid"]
        bdiscordid = binfo["discordid"]
        print(adiscordid)
        print(bdiscordid)
        print("numskill 0")
        #em0001 = discord.Embed(description="\n List of Available Skills\n\n {}\n\n- Please use `{}skill` or `{}sk @user <Number> `\n+ self Ping possible!".format("\n+".join(map(str, options_show)),Prefix,Prefix), color=discord.Color.red())
        #await ctx.send(embed=em0001)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if str(answer1.content) in options:
            skillDMG = 1
            user_dmgSELFBurn = 0
            if answer1.content == "Attack" or answer1.content == "attack" or answer1.content == "1":
                move = "Attack"
                skillDMG = 1
                user_dmgSELFBurn = 0
            elif answer1.content == "Swing" or answer1.content == "swing" or answer1.content == "2" or answer1.content == 2:
                move = "Swing"
                skillDMG = ainfo["health"] * ainfo["sklvl"]
                user_dmgSELFBurn = 0
                binfo["status_confuse"] = "True"
                await ctx.send(" {} Looking in two Directions!\n Confused!".format(binfo["name"]))
            elif answer1.content == "Cast" or answer1.content == "cast" or answer1.content == "3":
                move = "Cast"
                skillDMG = 1
                user_dmgSELFBurn = 0
            elif answer1.content == "Shoot" or answer1.content == "shoot" or answer1.content == "4":
                move = "Shoot"
                skillDMG = 1
                user_dmgSELFBurn = 0
            elif answer1.content == "Fire Ball" or answer1.content == "sire ball" or answer1.content == "7":
                move = "Fire Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    skillDMG = 1
                    user_dmgSELFBurn = 0
                    if ainfo["class"] == "Mage":
                        if ainfo["ammo_fire_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_fire_pot"] = ainfo["ammo_fire_pot"] - 1
                            if randomNUm == 0 or  randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf FirePots".format())
                            return
                    else:
                        if ainfo["ammo_fire_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_fire_pot"] = ainfo["ammo_fire_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["mana"] = ainfo["mana"] - 10 * ainfo["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                            await ctx.send("You are not a Mage and burnt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf FirePots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return ##skill(ctx)
            elif answer1.content == "Heal" or answer1.content == "heal" or answer1.content == "8" or answer1.content == 8:
                move = "Heal"
                skillDMG = 1
                user_dmgSELFBurn = 0
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    randomNum = random.randint(10, 40)
                    user_hp = ainfo["healthmax"]
                    ainfo["health"] = ainfo["healthmax"]
                    ainfo["mana"] = ainfo["manamax"]
                    ainfo["stamina"] = ainfo["staminamax"]
                    ainfo["mana"] = ainfo["mana"] - randomNum * ainfo["lvl"]
                    ainfo["stamina"] = ainfo["stamina"] - randomNum * ainfo["lvl"]
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Punch" or answer1.content == "punch" or answer1.content == "6":
                    move = "Punch"
            elif answer1.content == "Run" or answer1.content == "run" or answer1.content == "5":
                move = "Run"
                ainfo["selected_enemy_player"] = "None"
                ainfo["infight_status"] = "False"
                ainfo["runaways"] = ainfo["runaways"] + 1
                fileIO("players/{}/ainfo.json".format(author.id), "save", ainfo)
                await ctx.send("```diff\n- You could escape.```".format())
                return
            elif answer1.content == "Arrow Shower" or answer1.content == "arrow shower" or answer1.content == "9":
                move = "Arrow Shower"
                if slot0 == "Bow" or slot1 == "Bow" or slot2 == "Bow" or slot3 == "Bow" or slot4 == "Bow" or slot5 == "Bow" or slot6 == "Bow" or slot7 == "Bow" or slot8 == "Bow" or slot9 == "Bow" or slot10 == "Bow" or slot11 == "Bow" or slot12 == "Bow" or slot13 == "Bow" or slot14 == "Bow" or slot15 == "Bow" or slot16 == "Bow" or slot17 == "Bow" or slot18 == "Bow" or slot19 == "Bow" or slot20 == "Bow"or slot21 == "Bow"or slot22 == "Bow"or slot23 == "Bow"or slot24 == "Bow"or slot25 == "Bow" or slot0 == "Wood Bow" or slot1 == "Wood Bow" or slot2 == "Wood Bow" or slot3 == "Wood Bow" or slot4 == "Wood Bow" or slot5 == "Wood Bow" or slot6 == "Wood Bow" or slot7 == "Wood Bow" or slot8 == "Wood Bow" or slot9 == "Wood Bow" or slot10 == "Wood Bow" or slot11 == "Wood Bow" or slot12 == "Wood Bow" or slot13 == "Wood Bow" or slot14 == "Wood Bow" or slot15 == "Wood Bow" or slot16 == "Wood Bow" or slot17 == "Wood Bow" or slot18 == "Wood Bow" or slot19 == "Wood Bow" or slot20 == "Wood Bow"or slot21 == "Wood Bow"or slot22 == "Wood Bow"or slot23 == "Wood Bow"or slot24 == "Wood Bow"or slot25 == "Wood Bow" or slot0 == "Stone Bow" or slot1 == "Stone Bow" or slot2 == "Stone Bow" or slot3 == "Stone Bow" or slot4 == "Stone Bow" or slot5 == "Stone Bow" or slot6 == "Stone Bow" or slot7 == "Stone Bow" or slot8 == "Stone Bow" or slot9 == "Stone Bow" or slot10 == "Stone Bow" or slot11 == "Stone Bow" or slot12 == "Stone Bow" or slot13 == "Stone Bow" or slot14 == "Stone Bow" or slot15 == "Stone Bow" or slot16 == "Stone Bow" or slot17 == "Stone Bow" or slot18 == "Stone Bow" or slot19 == "Stone Bow" or slot20 == "Stone Bow"or slot21 == "Stone Bow"or slot22 == "Stone Bow"or slot23 == "Stone Bow"or slot24 == "Stone Bow"or slot25 == "Stone Bow" or slot0 == "Gold Bow" or slot1 == "Gold Bow" or slot2 == "Gold Bow" or slot3 == "Gold Bow" or slot4 == "Gold Bow" or slot5 == "Gold Bow" or slot6 == "Gold Bow" or slot7 == "Gold Bow" or slot8 == "Gold Bow" or slot9 == "Gold Bow" or slot10 == "Gold Bow" or slot11 == "Gold Bow" or slot12 == "Gold Bow" or slot13 == "Gold Bow" or slot14 == "Gold Bow" or slot15 == "Gold Bow" or slot16 == "Gold Bow" or slot17 == "Gold Bow" or slot18 == "Gold Bow" or slot19 == "Gold Bow" or slot20 == "Gold Bow"or slot21 == "Gold Bow"or slot22 == "Gold Bow"or slot23 == "Gold Bow"or slot24 == "Gold Bow"or slot25 == "Gold Bow" or slot0 == "Metal Bow" or slot1 == "Metal Bow" or slot2 == "Metal Bow" or slot3 == "Metal Bow" or slot4 == "Metal Bow" or slot5 == "Metal Bow" or slot6 == "Metal Bow" or slot7 == "Metal Bow" or slot8 == "Metal Bow" or slot9 == "Metal Bow" or slot10 == "Metal Bow" or slot11 == "Metal Bow" or slot12 == "Metal Bow" or slot13 == "Metal Bow" or slot14 == "Metal Bow" or slot15 == "Metal Bow" or slot16 == "Metal Bow" or slot17 == "Metal Bow" or slot18 == "Metal Bow" or slot19 == "Metal Bow" or slot20 == "Metal Bow"or slot21 == "Metal Bow"or slot22 == "Metal Bow"or slot23 == "Metal Bow"or slot24 == "Metal Bow"or slot25 == "Metal Bow" or slot0 == "Bobo Bow" or slot1 == "Bobo Bow" or slot2 == "Bobo Bow" or slot3 == "Bobo Bow" or slot4 == "Bobo Bow" or slot5 == "Bobo Bow" or slot6 == "Bobo Bow" or slot7 == "Bobo Bow" or slot8 == "Bobo Bow" or slot9 == "Bobo Bow" or slot10 == "Bobo Bow" or slot11 == "Bobo Bow" or slot12 == "Bobo Bow" or slot13 == "Bobo Bow" or slot14 == "Bobo Bow" or slot15 == "Bobo Bow" or slot16 == "Bobo Bow" or slot17 == "Bobo Bow" or slot18 == "Bobo Bow" or slot19 == "Bobo Bow" or slot20 == "Bobo Bow"or slot21 == "Bobo Bow"or slot22 == "Bobo Bow"or slot23 == "Bobo Bow"or slot24 == "Bobo Bow"or slot25 == "Bobo Bow" :
                    if ainfo["class"] == "Archer":
                        if ainfo["ammo_arrow"] >= 5:
                            randomNUm = random.randint(1, 6)
                            howManyArrows = random.randint(5, 100)
                            if howManyArrows >= ainfo["ammo_arrow"]:
                                howManyArrows = ainfo["ammo_arrow"]
                            ainfo["ammo_arrow"] = ainfo["ammo_arrow"] - howManyArrows
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg + user_dmgDif * 4
                                ainfo["stamina"] = ainfo["stamina"] - 10 * ainfo["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg + user_dmgDif * 8
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            if randomNUm == 6:
                                skillDMG = user_dmg + user_dmgDif * 16
                                ainfo["stamina"] = ainfo["stamina"] - 40 * ainfo["lvl"]
                        else:
                            await ctx.send("You have not enaf Arrows!".format())
                            return
                    else:
                        if ainfo["ammo_arrow"] >= 5:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_arrow"] = ainfo["ammo_arrow"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["stamina"] = ainfo["stamina"] - 10 * ainfo["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 4
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf Arrows".format())
                            return
                else:
                    await ctx.send("You Need a Bow for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Steel Arrow" or answer1.content == "steel arrow" or answer1.content == "10":
                move = "Steel Arrow"
                if slot0 == "Bow" or slot1 == "Bow" or slot2 == "Bow" or slot3 == "Bow" or slot4 == "Bow" or slot5 == "Bow" or slot6 == "Bow" or slot7 == "Bow" or slot8 == "Bow" or slot9 == "Bow" or slot10 == "Bow" or slot11 == "Bow" or slot12 == "Bow" or slot13 == "Bow" or slot14 == "Bow" or slot15 == "Bow" or slot16 == "Bow" or slot17 == "Bow" or slot18 == "Bow" or slot19 == "Bow" or slot20 == "Bow"or slot21 == "Bow"or slot22 == "Bow"or slot23 == "Bow"or slot24 == "Bow"or slot25 == "Bow" or slot0 == "Wood Bow" or slot1 == "Wood Bow" or slot2 == "Wood Bow" or slot3 == "Wood Bow" or slot4 == "Wood Bow" or slot5 == "Wood Bow" or slot6 == "Wood Bow" or slot7 == "Wood Bow" or slot8 == "Wood Bow" or slot9 == "Wood Bow" or slot10 == "Wood Bow" or slot11 == "Wood Bow" or slot12 == "Wood Bow" or slot13 == "Wood Bow" or slot14 == "Wood Bow" or slot15 == "Wood Bow" or slot16 == "Wood Bow" or slot17 == "Wood Bow" or slot18 == "Wood Bow" or slot19 == "Wood Bow" or slot20 == "Wood Bow"or slot21 == "Wood Bow"or slot22 == "Wood Bow"or slot23 == "Wood Bow"or slot24 == "Wood Bow"or slot25 == "Wood Bow" or slot0 == "Stone Bow" or slot1 == "Stone Bow" or slot2 == "Stone Bow" or slot3 == "Stone Bow" or slot4 == "Stone Bow" or slot5 == "Stone Bow" or slot6 == "Stone Bow" or slot7 == "Stone Bow" or slot8 == "Stone Bow" or slot9 == "Stone Bow" or slot10 == "Stone Bow" or slot11 == "Stone Bow" or slot12 == "Stone Bow" or slot13 == "Stone Bow" or slot14 == "Stone Bow" or slot15 == "Stone Bow" or slot16 == "Stone Bow" or slot17 == "Stone Bow" or slot18 == "Stone Bow" or slot19 == "Stone Bow" or slot20 == "Stone Bow"or slot21 == "Stone Bow"or slot22 == "Stone Bow"or slot23 == "Stone Bow"or slot24 == "Stone Bow"or slot25 == "Stone Bow" or slot0 == "Gold Bow" or slot1 == "Gold Bow" or slot2 == "Gold Bow" or slot3 == "Gold Bow" or slot4 == "Gold Bow" or slot5 == "Gold Bow" or slot6 == "Gold Bow" or slot7 == "Gold Bow" or slot8 == "Gold Bow" or slot9 == "Gold Bow" or slot10 == "Gold Bow" or slot11 == "Gold Bow" or slot12 == "Gold Bow" or slot13 == "Gold Bow" or slot14 == "Gold Bow" or slot15 == "Gold Bow" or slot16 == "Gold Bow" or slot17 == "Gold Bow" or slot18 == "Gold Bow" or slot19 == "Gold Bow" or slot20 == "Gold Bow"or slot21 == "Gold Bow"or slot22 == "Gold Bow"or slot23 == "Gold Bow"or slot24 == "Gold Bow"or slot25 == "Gold Bow" or slot0 == "Metal Bow" or slot1 == "Metal Bow" or slot2 == "Metal Bow" or slot3 == "Metal Bow" or slot4 == "Metal Bow" or slot5 == "Metal Bow" or slot6 == "Metal Bow" or slot7 == "Metal Bow" or slot8 == "Metal Bow" or slot9 == "Metal Bow" or slot10 == "Metal Bow" or slot11 == "Metal Bow" or slot12 == "Metal Bow" or slot13 == "Metal Bow" or slot14 == "Metal Bow" or slot15 == "Metal Bow" or slot16 == "Metal Bow" or slot17 == "Metal Bow" or slot18 == "Metal Bow" or slot19 == "Metal Bow" or slot20 == "Metal Bow"or slot21 == "Metal Bow"or slot22 == "Metal Bow"or slot23 == "Metal Bow"or slot24 == "Metal Bow"or slot25 == "Metal Bow" or slot0 == "Bobo Bow" or slot1 == "Bobo Bow" or slot2 == "Bobo Bow" or slot3 == "Bobo Bow" or slot4 == "Bobo Bow" or slot5 == "Bobo Bow" or slot6 == "Bobo Bow" or slot7 == "Bobo Bow" or slot8 == "Bobo Bow" or slot9 == "Bobo Bow" or slot10 == "Bobo Bow" or slot11 == "Bobo Bow" or slot12 == "Bobo Bow" or slot13 == "Bobo Bow" or slot14 == "Bobo Bow" or slot15 == "Bobo Bow" or slot16 == "Bobo Bow" or slot17 == "Bobo Bow" or slot18 == "Bobo Bow" or slot19 == "Bobo Bow" or slot20 == "Bobo Bow"or slot21 == "Bobo Bow"or slot22 == "Bobo Bow"or slot23 == "Bobo Bow"or slot24 == "Bobo Bow"or slot25 == "Bobo Bow":
                    if ainfo["class"] == "Archer":
                        if ainfo["ammo_arrow_steal"] >= 1:
                            randomNUm = random.randint(0, 7)
                            ainfo["ammo_arrow_steal"] = ainfo["ammo_arrow_steal"] - 1
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                enemy_def = 8
                                skillDMG = user_dmg + user_dmgDif * 1
                            if randomNUm == 4 or randomNUm == 5:
                                enemy_def = 4
                                skillDMG = user_dmg + user_dmgDif * 2
                            if randomNUm == 6:
                                enemy_def = 2
                                skillDMG = user_dmg + user_dmgDif * 4
                            if randomNUm == 7:
                                enemy_def = 1
                                skillDMG = user_dmg + user_dmgDif * 4
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                        else:
                            await ctx.send("You have not enaf Arrows!".format())
                    else:
                        if ainfo["ammo_arrow_steal"] >= 1:
                            randomNUm = random.randint(0, 7)
                            ainfo["ammo_arrow_steal"] = ainfo["ammo_arrow_steal"] - 1
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                enemy_def /= 128
                                skillDMG = user_dmg + user_dmgDif * 1
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                enemy_def /= 64
                                skillDMG = user_dmg + user_dmgDif * 2
                                ainfo["stamina"] = ainfo["stamina"] - 40 * ainfo["lvl"]
                            if randomNUm == 6:
                                enemy_def /= 32
                                skillDMG = user_dmg + user_dmgDif * 4
                                ainfo["stamina"] = ainfo["stamina"] - 80 * ainfo["lvl"]
                            if randomNUm == 7:
                                enemy_def /= 16
                                skillDMG = user_dmg + user_dmgDif * 4
                                ainfo["stamina"] = ainfo["stamina"] - 160 * ainfo["lvl"]
                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf Arrows".format())
                else:
                    await ctx.send("You Need a Bow for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Trap" or answer1.content == "trap" or answer1.content == "11":
                move = "Cast"
                if ainfo["class"] == "Archer":
                    if ainfo["ammo_arrow_trap"] >= 1:
                        ainfo["ammo_arrow_trap"] = ainfo["ammo_arrow_trap"] - 1
                        if ainfo["status_trap"] == "False":
                            ainfo["status_trap"] = "True"
                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                        else:
                            await ctx.send("Your Trap is active!".format())
                    else:
                        await ctx.send("You have not enaf Traps!".format())
                else:
                    if ainfo["ammo_arrow_trap"] >= 1:
                        ainfo["ammo_arrow_trap"] = ainfo["ammo_arrow_trap"] - 1
                        if ainfo["status_trap"] == "False":
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= 10
                            user_enemy_hp -= user_dmgSELFBurn
                            ainfo["status_trap"] = "True"
                            ainfo["stamina"] = ainfo["stamina"] - 40 * ainfo["lvl"]
                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}\n Anyway your Trap is active now".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("Your Trap is active! BUt you got some Damage! Beware you are not an Archer".format())
                    else:
                        await ctx.send("You have not enaf Traps!".format())
            elif answer1.content == "Shield" or answer1.content == "shield" or answer1.content == "12":
                move = "Shield"
                if slot0 == "Amore" or slot1 == "Amore" or slot2 == "Amore" or slot3 == "Amore" or slot4 == "Amore" or slot5 == "Amore" or slot6 == "Amore" or slot7 == "Amore" or slot8 == "Amore" or slot9 == "Amore" or slot10 == "Amore" or slot11 == "Amore" or slot12 == "Amore" or slot13 == "Amore" or slot14 == "Amore" or slot15 == "Amore" or slot16 == "Amore" or slot17 == "Amore" or slot18 == "Amore" or slot19 == "Amore" or slot20 == "Amore"or slot21 == "Amore"or slot22 == "Amore"or slot23 == "Amore"or slot24 == "Amore"or slot25 == "Amore" or slot0 == "Wood Amore" or slot1 == "Wood Amore" or slot2 == "Wood Amore" or slot3 == "Wood Amore" or slot4 == "Wood Amore" or slot5 == "Wood Amore" or slot6 == "Wood Amore" or slot7 == "Wood Amore" or slot8 == "Wood Amore" or slot9 == "Wood Amore" or slot10 == "Wood Amore" or slot11 == "Wood Amore" or slot12 == "Wood Amore" or slot13 == "Wood Amore" or slot14 == "Wood Amore" or slot15 == "Wood Amore" or slot16 == "Wood Amore" or slot17 == "Wood Amore" or slot18 == "Wood Amore" or slot19 == "Wood Amore" or slot20 == "Wood Amore"or slot21 == "Wood Amore"or slot22 == "Wood Amore"or slot23 == "Wood Amore"or slot24 == "Wood Amore"or slot25 == "Wood Amore" or slot0 == "Stone Amore" or slot1 == "Stone Amore" or slot2 == "Stone Amore" or slot3 == "Stone Amore" or slot4 == "Stone Amore" or slot5 == "Stone Amore" or slot6 == "Stone Amore" or slot7 == "Stone Amore" or slot8 == "Stone Amore" or slot9 == "Stone Amore" or slot10 == "Stone Amore" or slot11 == "Stone Amore" or slot12 == "Stone Amore" or slot13 == "Stone Amore" or slot14 == "Stone Amore" or slot15 == "Stone Amore" or slot16 == "Stone Amore" or slot17 == "Stone Amore" or slot18 == "Stone Amore" or slot19 == "Stone Amore" or slot20 == "Stone Amore"or slot21 == "Stone Amore"or slot22 == "Stone Amore"or slot23 == "Stone Amore"or slot24 == "Stone Amore"or slot25 == "Stone Amore" or slot0 == "Gold Amore" or slot1 == "Gold Amore" or slot2 == "Gold Amore" or slot3 == "Gold Amore" or slot4 == "Gold Amore" or slot5 == "Gold Amore" or slot6 == "Gold Amore" or slot7 == "Gold Amore" or slot8 == "Gold Amore" or slot9 == "Gold Amore" or slot10 == "Gold Amore" or slot11 == "Gold Amore" or slot12 == "Gold Amore" or slot13 == "Gold Amore" or slot14 == "Gold Amore" or slot15 == "Gold Amore" or slot16 == "Gold Amore" or slot17 == "Gold Amore" or slot18 == "Gold Amore" or slot19 == "Gold Amore" or slot20 == "Gold Amore"or slot21 == "Gold Amore"or slot22 == "Gold Amore"or slot23 == "Gold Amore"or slot24 == "Gold Amore"or slot25 == "Gold Amore" or slot0 == "Metal Amore" or slot1 == "Metal Amore" or slot2 == "Metal Amore" or slot3 == "Metal Amore" or slot4 == "Metal Amore" or slot5 == "Metal Amore" or slot6 == "Metal Amore" or slot7 == "Metal Amore" or slot8 == "Metal Amore" or slot9 == "Metal Amore" or slot10 == "Metal Amore" or slot11 == "Metal Amore" or slot12 == "Metal Amore" or slot13 == "Metal Amore" or slot14 == "Metal Amore" or slot15 == "Metal Amore" or slot16 == "Metal Amore" or slot17 == "Metal Amore" or slot18 == "Metal Amore" or slot19 == "Metal Amore" or slot20 == "Metal Amore"or slot21 == "Metal Amore"or slot22 == "Metal Amore"or slot23 == "Metal Amore"or slot24 == "Metal Amore"or slot25 == "Metal Amore" or slot0 == "Bobo Amore" or slot1 == "Bobo Amore" or slot2 == "Bobo Amore" or slot3 == "Bobo Amore" or slot4 == "Bobo Amore" or slot5 == "Bobo Amore" or slot6 == "Bobo Amore" or slot7 == "Bobo Amore" or slot8 == "Bobo Amore" or slot9 == "Bobo Amore" or slot10 == "Bobo Amore" or slot11 == "Bobo Amore" or slot12 == "Bobo Amore" or slot13 == "Bobo Amore" or slot14 == "Bobo Amore" or slot15 == "Bobo Amore" or slot16 == "Bobo Amore" or slot17 == "Bobo Amore" or slot18 == "Bobo Amore" or slot19 == "Bobo Amore" or slot20 == "Bobo Amore"or slot21 == "Bobo Amore"or slot22 == "Bobo Amore"or slot23 == "Bobo Amore"or slot24 == "Bobo Amore"or slot25 == "Bobo Amore" or  slot0 == "Amore I" or slot1 == "Amore I" or slot2 == "Amore I" or slot3 == "Amore I" or slot4 == "Amore I" or slot5 == "Amore I" or slot6 == "Amore I" or slot7 == "Amore I" or slot8 == "Amore I" or slot9 == "Amore I" or slot10 == "Amore I" or slot11 == "Amore I" or slot12 == "Amore I" or slot13 == "Amore I" or slot14 == "Amore I" or slot15 == "Amore I" or slot16 == "Amore I" or slot17 == "Amore I" or slot18 == "Amore I" or slot19 == "Amore I" or slot20 == "Amore I"or slot21 == "Amore I"or slot22 == "Amore I"or slot23 == "Amore I"or slot24 == "Amore I"or slot25 == "Amore I" or  slot0 == "Amore II" or slot1 == "Amore II" or slot2 == "Amore II" or slot3 == "Amore II" or slot4 == "Amore II" or slot5 == "Amore II" or slot6 == "Amore II" or slot7 == "Amore II" or slot8 == "Amore II" or slot9 == "Amore II" or slot10 == "Amore II" or slot11 == "Amore II" or slot12 == "Amore II" or slot13 == "Amore II" or slot14 == "Amore II" or slot15 == "Amore II" or slot16 == "Amore II" or slot17 == "Amore II" or slot18 == "Amore II" or slot19 == "Amore II" or slot20 == "Amore II"or slot21 == "Amore II"or slot22 == "Amore II"or slot23 == "Amore II"or slot24 == "Amore II"or slot25 == "Amore II" or  slot0 == "Amore III" or slot1 == "Amore III" or slot2 == "Amore III" or slot3 == "Amore III" or slot4 == "Amore III" or slot5 == "Amore III" or slot6 == "Amore III" or slot7 == "Amore III" or slot8 == "Amore III" or slot9 == "Amore III" or slot10 == "Amore III" or slot11 == "Amore III" or slot12 == "Amore III" or slot13 == "Amore III" or slot14 == "Amore III" or slot15 == "Amore III" or slot16 == "Amore III" or slot17 == "Amore III" or slot18 == "Amore III" or slot19 == "Amore III" or slot20 == "Amore III"or slot21 == "Amore III"or slot22 == "Amore III"or slot23 == "Amore III"or slot24 == "Amore III"or slot25 == "Amore III" or  slot0 == "Amore IV" or slot1 == "Amore IV" or slot2 == "Amore IV" or slot3 == "Amore IV" or slot4 == "Amore IV" or slot5 == "Amore IV" or slot6 == "Amore IV" or slot7 == "Amore IV" or slot8 == "Amore IV" or slot9 == "Amore IV" or slot10 == "Amore IV" or slot11 == "Amore IV" or slot12 == "Amore IV" or slot13 == "Amore IV" or slot14 == "Amore IV" or slot15 == "Amore IV" or slot16 == "Amore IV" or slot17 == "Amore IV" or slot18 == "Amore IV" or slot19 == "Amore IV" or slot20 == "Amore IV"or slot21 == "Amore IV"or slot22 == "Amore IV"or slot23 == "Amore IV"or slot24 == "Amore IV"or slot25 == "Amore IV" or  slot0 == "Amore V" or slot1 == "Amore V" or slot2 == "Amore V" or slot3 == "Amore V" or slot4 == "Amore V" or slot5 == "Amore V" or slot6 == "Amore V" or slot7 == "Amore V" or slot8 == "Amore V" or slot9 == "Amore V" or slot10 == "Amore V" or slot11 == "Amore V" or slot12 == "Amore V" or slot13 == "Amore V" or slot14 == "Amore V" or slot15 == "Amore V" or slot16 == "Amore V" or slot17 == "Amore V" or slot18 == "Amore V" or slot19 == "Amore V" or slot20 == "Amore V"or slot21 == "Amore V"or slot22 == "Amore V"or slot23 == "Amore V"or slot24 == "Amore V"or slot25 == "Amore V":
                    if ainfo["class"] == "Paladin":
                        randomNUm = random.randint(10, 40)
                        ainfo["ammo_arrow_steal"] = ainfo["ammo_arrow_steal"] - 1
                        max_def = max_def * randomNUm
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            max_def = max_def * randomNUm
                        if randomNUm == 4 or randomNUm == 5:
                            max_def = max_def * randomNUm
                        if randomNUm == 6:
                            max_def = max_def * randomNUm
                        if randomNUm == 7:
                            max_def = max_def * randomNUm
                        ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                    else:
                        await ctx.send("You are not a Paladin your Protection is wasteless!".format())
                else:
                    await ctx.send("You Need an Amore for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Knock Back" or answer1.content == "knock back" or answer1.content == "13":
                move = "Knock Back"
                if slot0 == "Amore" or slot1 == "Amore" or slot2 == "Amore" or slot3 == "Amore" or slot4 == "Amore" or slot5 == "Amore" or slot6 == "Amore" or slot7 == "Amore" or slot8 == "Amore" or slot9 == "Amore" or slot10 == "Amore" or slot11 == "Amore" or slot12 == "Amore" or slot13 == "Amore" or slot14 == "Amore" or slot15 == "Amore" or slot16 == "Amore" or slot17 == "Amore" or slot18 == "Amore" or slot19 == "Amore" or slot20 == "Amore"or slot21 == "Amore"or slot22 == "Amore"or slot23 == "Amore"or slot24 == "Amore"or slot25 == "Amore" or slot0 == "Wood Amore" or slot1 == "Wood Amore" or slot2 == "Wood Amore" or slot3 == "Wood Amore" or slot4 == "Wood Amore" or slot5 == "Wood Amore" or slot6 == "Wood Amore" or slot7 == "Wood Amore" or slot8 == "Wood Amore" or slot9 == "Wood Amore" or slot10 == "Wood Amore" or slot11 == "Wood Amore" or slot12 == "Wood Amore" or slot13 == "Wood Amore" or slot14 == "Wood Amore" or slot15 == "Wood Amore" or slot16 == "Wood Amore" or slot17 == "Wood Amore" or slot18 == "Wood Amore" or slot19 == "Wood Amore" or slot20 == "Wood Amore"or slot21 == "Wood Amore"or slot22 == "Wood Amore"or slot23 == "Wood Amore"or slot24 == "Wood Amore"or slot25 == "Wood Amore" or slot0 == "Stone Amore" or slot1 == "Stone Amore" or slot2 == "Stone Amore" or slot3 == "Stone Amore" or slot4 == "Stone Amore" or slot5 == "Stone Amore" or slot6 == "Stone Amore" or slot7 == "Stone Amore" or slot8 == "Stone Amore" or slot9 == "Stone Amore" or slot10 == "Stone Amore" or slot11 == "Stone Amore" or slot12 == "Stone Amore" or slot13 == "Stone Amore" or slot14 == "Stone Amore" or slot15 == "Stone Amore" or slot16 == "Stone Amore" or slot17 == "Stone Amore" or slot18 == "Stone Amore" or slot19 == "Stone Amore" or slot20 == "Stone Amore"or slot21 == "Stone Amore"or slot22 == "Stone Amore"or slot23 == "Stone Amore"or slot24 == "Stone Amore"or slot25 == "Stone Amore" or slot0 == "Gold Amore" or slot1 == "Gold Amore" or slot2 == "Gold Amore" or slot3 == "Gold Amore" or slot4 == "Gold Amore" or slot5 == "Gold Amore" or slot6 == "Gold Amore" or slot7 == "Gold Amore" or slot8 == "Gold Amore" or slot9 == "Gold Amore" or slot10 == "Gold Amore" or slot11 == "Gold Amore" or slot12 == "Gold Amore" or slot13 == "Gold Amore" or slot14 == "Gold Amore" or slot15 == "Gold Amore" or slot16 == "Gold Amore" or slot17 == "Gold Amore" or slot18 == "Gold Amore" or slot19 == "Gold Amore" or slot20 == "Gold Amore"or slot21 == "Gold Amore"or slot22 == "Gold Amore"or slot23 == "Gold Amore"or slot24 == "Gold Amore"or slot25 == "Gold Amore" or slot0 == "Metal Amore" or slot1 == "Metal Amore" or slot2 == "Metal Amore" or slot3 == "Metal Amore" or slot4 == "Metal Amore" or slot5 == "Metal Amore" or slot6 == "Metal Amore" or slot7 == "Metal Amore" or slot8 == "Metal Amore" or slot9 == "Metal Amore" or slot10 == "Metal Amore" or slot11 == "Metal Amore" or slot12 == "Metal Amore" or slot13 == "Metal Amore" or slot14 == "Metal Amore" or slot15 == "Metal Amore" or slot16 == "Metal Amore" or slot17 == "Metal Amore" or slot18 == "Metal Amore" or slot19 == "Metal Amore" or slot20 == "Metal Amore"or slot21 == "Metal Amore"or slot22 == "Metal Amore"or slot23 == "Metal Amore"or slot24 == "Metal Amore"or slot25 == "Metal Amore" or slot0 == "Bobo Amore" or slot1 == "Bobo Amore" or slot2 == "Bobo Amore" or slot3 == "Bobo Amore" or slot4 == "Bobo Amore" or slot5 == "Bobo Amore" or slot6 == "Bobo Amore" or slot7 == "Bobo Amore" or slot8 == "Bobo Amore" or slot9 == "Bobo Amore" or slot10 == "Bobo Amore" or slot11 == "Bobo Amore" or slot12 == "Bobo Amore" or slot13 == "Bobo Amore" or slot14 == "Bobo Amore" or slot15 == "Bobo Amore" or slot16 == "Bobo Amore" or slot17 == "Bobo Amore" or slot18 == "Bobo Amore" or slot19 == "Bobo Amore" or slot20 == "Bobo Amore"or slot21 == "Bobo Amore"or slot22 == "Bobo Amore"or slot23 == "Bobo Amore"or slot24 == "Bobo Amore"or slot25 == "Bobo Amore" or  slot0 == "Amore I" or slot1 == "Amore I" or slot2 == "Amore I" or slot3 == "Amore I" or slot4 == "Amore I" or slot5 == "Amore I" or slot6 == "Amore I" or slot7 == "Amore I" or slot8 == "Amore I" or slot9 == "Amore I" or slot10 == "Amore I" or slot11 == "Amore I" or slot12 == "Amore I" or slot13 == "Amore I" or slot14 == "Amore I" or slot15 == "Amore I" or slot16 == "Amore I" or slot17 == "Amore I" or slot18 == "Amore I" or slot19 == "Amore I" or slot20 == "Amore I"or slot21 == "Amore I"or slot22 == "Amore I"or slot23 == "Amore I"or slot24 == "Amore I"or slot25 == "Amore I" or  slot0 == "Amore II" or slot1 == "Amore II" or slot2 == "Amore II" or slot3 == "Amore II" or slot4 == "Amore II" or slot5 == "Amore II" or slot6 == "Amore II" or slot7 == "Amore II" or slot8 == "Amore II" or slot9 == "Amore II" or slot10 == "Amore II" or slot11 == "Amore II" or slot12 == "Amore II" or slot13 == "Amore II" or slot14 == "Amore II" or slot15 == "Amore II" or slot16 == "Amore II" or slot17 == "Amore II" or slot18 == "Amore II" or slot19 == "Amore II" or slot20 == "Amore II"or slot21 == "Amore II"or slot22 == "Amore II"or slot23 == "Amore II"or slot24 == "Amore II"or slot25 == "Amore II" or  slot0 == "Amore III" or slot1 == "Amore III" or slot2 == "Amore III" or slot3 == "Amore III" or slot4 == "Amore III" or slot5 == "Amore III" or slot6 == "Amore III" or slot7 == "Amore III" or slot8 == "Amore III" or slot9 == "Amore III" or slot10 == "Amore III" or slot11 == "Amore III" or slot12 == "Amore III" or slot13 == "Amore III" or slot14 == "Amore III" or slot15 == "Amore III" or slot16 == "Amore III" or slot17 == "Amore III" or slot18 == "Amore III" or slot19 == "Amore III" or slot20 == "Amore III"or slot21 == "Amore III"or slot22 == "Amore III"or slot23 == "Amore III"or slot24 == "Amore III"or slot25 == "Amore III" or  slot0 == "Amore IV" or slot1 == "Amore IV" or slot2 == "Amore IV" or slot3 == "Amore IV" or slot4 == "Amore IV" or slot5 == "Amore IV" or slot6 == "Amore IV" or slot7 == "Amore IV" or slot8 == "Amore IV" or slot9 == "Amore IV" or slot10 == "Amore IV" or slot11 == "Amore IV" or slot12 == "Amore IV" or slot13 == "Amore IV" or slot14 == "Amore IV" or slot15 == "Amore IV" or slot16 == "Amore IV" or slot17 == "Amore IV" or slot18 == "Amore IV" or slot19 == "Amore IV" or slot20 == "Amore IV"or slot21 == "Amore IV"or slot22 == "Amore IV"or slot23 == "Amore IV"or slot24 == "Amore IV"or slot25 == "Amore IV" or  slot0 == "Amore V" or slot1 == "Amore V" or slot2 == "Amore V" or slot3 == "Amore V" or slot4 == "Amore V" or slot5 == "Amore V" or slot6 == "Amore V" or slot7 == "Amore V" or slot8 == "Amore V" or slot9 == "Amore V" or slot10 == "Amore V" or slot11 == "Amore V" or slot12 == "Amore V" or slot13 == "Amore V" or slot14 == "Amore V" or slot15 == "Amore V" or slot16 == "Amore V" or slot17 == "Amore V" or slot18 == "Amore V" or slot19 == "Amore V" or slot20 == "Amore V"or slot21 == "Amore V"or slot22 == "Amore V"or slot23 == "Amore V"or slot24 == "Amore V"or slot25 == "Amore V":
                    if ainfo["class"] == "Paladin":
                        if ainfo["status_confuse"] == "False":
                            ainfo["status_confuse"] = "True"
                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            await ctx.send("You knock sso hard that your enamy is confuessed!".format())
                        else:
                            await ctx.send("Your enamy is still confuessed!".format())
                    else:
                        await ctx.send("You not a Paladin...your power is to weak!".format())
                else:
                    await ctx.send("You Need an Amore for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Brute Force" or answer1.content == "brute force" or answer1.content == "14":
                move = "Brute Force"
                if slot0 == "Sword" or slot1 == "Sword" or slot2 == "Sword" or slot3 == "Sword" or slot4 == "Sword" or slot5 == "Sword" or slot6 == "Sword" or slot7 == "Sword" or slot8 == "Sword" or slot9 == "Sword" or slot10 == "Sword" or slot11 == "Sword" or slot12 == "Sword" or slot13 == "Sword" or slot14 == "Sword" or slot15 == "Sword" or slot16 == "Sword" or slot17 == "Sword" or slot18 == "Sword" or slot19 == "Sword" or slot20 == "Sword"or slot21 == "Sword"or slot22 == "Sword"or slot23 == "Sword"or slot24 == "Sword"or slot25 == "Sword" or slot0 == "Wood Sword" or slot1 == "Wood Sword" or slot2 == "Wood Sword" or slot3 == "Wood Sword" or slot4 == "Wood Sword" or slot5 == "Wood Sword" or slot6 == "Wood Sword" or slot7 == "Wood Sword" or slot8 == "Wood Sword" or slot9 == "Wood Sword" or slot10 == "Wood Sword" or slot11 == "Wood Sword" or slot12 == "Wood Sword" or slot13 == "Wood Sword" or slot14 == "Wood Sword" or slot15 == "Wood Sword" or slot16 == "Wood Sword" or slot17 == "Wood Sword" or slot18 == "Wood Sword" or slot19 == "Wood Sword" or slot20 == "Wood Sword"or slot21 == "Wood Sword"or slot22 == "Wood Sword"or slot23 == "Wood Sword"or slot24 == "Wood Sword"or slot25 == "Wood Sword" or slot0 == "Stone Sword" or slot1 == "Stone Sword" or slot2 == "Stone Sword" or slot3 == "Stone Sword" or slot4 == "Stone Sword" or slot5 == "Stone Sword" or slot6 == "Stone Sword" or slot7 == "Stone Sword" or slot8 == "Stone Sword" or slot9 == "Stone Sword" or slot10 == "Stone Sword" or slot11 == "Stone Sword" or slot12 == "Stone Sword" or slot13 == "Stone Sword" or slot14 == "Stone Sword" or slot15 == "Stone Sword" or slot16 == "Stone Sword" or slot17 == "Stone Sword" or slot18 == "Stone Sword" or slot19 == "Stone Sword" or slot20 == "Stone Sword"or slot21 == "Stone Sword"or slot22 == "Stone Sword"or slot23 == "Stone Sword"or slot24 == "Stone Sword"or slot25 == "Stone Sword" or slot0 == "Gold Sword" or slot1 == "Gold Sword" or slot2 == "Gold Sword" or slot3 == "Gold Sword" or slot4 == "Gold Sword" or slot5 == "Gold Sword" or slot6 == "Gold Sword" or slot7 == "Gold Sword" or slot8 == "Gold Sword" or slot9 == "Gold Sword" or slot10 == "Gold Sword" or slot11 == "Gold Sword" or slot12 == "Gold Sword" or slot13 == "Gold Sword" or slot14 == "Gold Sword" or slot15 == "Gold Sword" or slot16 == "Gold Sword" or slot17 == "Gold Sword" or slot18 == "Gold Sword" or slot19 == "Gold Sword" or slot20 == "Gold Sword"or slot21 == "Gold Sword"or slot22 == "Gold Sword"or slot23 == "Gold Sword"or slot24 == "Gold Sword"or slot25 == "Gold Sword" or slot0 == "Metal Sword" or slot1 == "Metal Sword" or slot2 == "Metal Sword" or slot3 == "Metal Sword" or slot4 == "Metal Sword" or slot5 == "Metal Sword" or slot6 == "Metal Sword" or slot7 == "Metal Sword" or slot8 == "Metal Sword" or slot9 == "Metal Sword" or slot10 == "Metal Sword" or slot11 == "Metal Sword" or slot12 == "Metal Sword" or slot13 == "Metal Sword" or slot14 == "Metal Sword" or slot15 == "Metal Sword" or slot16 == "Metal Sword" or slot17 == "Metal Sword" or slot18 == "Metal Sword" or slot19 == "Metal Sword" or slot20 == "Metal Sword"or slot21 == "Metal Sword"or slot22 == "Metal Sword"or slot23 == "Metal Sword"or slot24 == "Metal Sword"or slot25 == "Metal Sword" or slot0 == "Bobo Sword" or slot1 == "Bobo Sword" or slot2 == "Bobo Sword" or slot3 == "Bobo Sword" or slot4 == "Bobo Sword" or slot5 == "Bobo Sword" or slot6 == "Bobo Sword" or slot7 == "Bobo Sword" or slot8 == "Bobo Sword" or slot9 == "Bobo Sword" or slot10 == "Bobo Sword" or slot11 == "Bobo Sword" or slot12 == "Bobo Sword" or slot13 == "Bobo Sword" or slot14 == "Bobo Sword" or slot15 == "Bobo Sword" or slot16 == "Bobo Sword" or slot17 == "Bobo Sword" or slot18 == "Bobo Sword" or slot19 == "Bobo Sword" or slot20 == "Bobo Sword"or slot21 == "Bobo Sword"or slot22 == "Bobo Sword"or slot23 == "Bobo Sword"or slot24 == "Bobo Sword"or slot25 == "Bobo Sword":
                    if ainfo["class"] == "Paladin":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                    else:
                        randomNUm = random.randint(1, 6)
                        if randomNUm == 0 or  randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        await ctx.send("You are not an Paladin and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                else:
                    await ctx.send("You Need an Sword for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Water Ball" or answer1.content == "water ball" or answer1.content == "15":
                move = "Water Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    if ainfo["class"] == "Mage":
                        if ainfo["ammo_water_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_water_pot"] = ainfo["ammo_water_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf WaterPots".format())
                            return
                    else:
                        if ainfo["ammo_water_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_water_pot"] = ainfo["ammo_water_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["mana"] = ainfo["mana"] - 10 * ainfo["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf WaterPots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Wind Ball" or answer1.content == "wind ball" or answer1.content == "16":
                move = "Wind Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    if ainfo["class"] == "Mage":
                        if ainfo["ammo_wind_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_wind_pot"] = ainfo["ammo_wind_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf WindPots".format())
                            return
                    else:
                        if ainfo["ammo_wind_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_wind_pot"] = ainfo["ammo_wind_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 2
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["mana"] = ainfo["mana"] - 10 * ainfo["lvl"]
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                                user_dmgSELFBurn = user_dmg
                                user_dmgSELFBurn /= 1
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf WindPots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Earth Ball" or answer1.content == "earth ball" or answer1.content == "17":
                move = "Earth Ball"
                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                    if ainfo["class"] == "Mage":
                        if ainfo["ammo_earth_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_earth_pot"] = ainfo["ammo_earth_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * 1
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * 2
                            if randomNUm == 6:
                                skillDMG = user_dmg * 4
                        else:
                            await ctx.send("You have not enaf EarthPots".format())
                            return
                    else:
                        if ainfo["ammo_earth_pot"] >= 1:
                            randomNUm = random.randint(1, 6)
                            ainfo["ammo_earth_pot"] = ainfo["ammo_earth_pot"] - 1
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn /= randomNUm
                            if randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg / randomNUm
                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                        else:
                            await ctx.send("You have not enaf EarthPots".format())
                            return
                else:
                    await ctx.send("You Need a Staff for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Pickpocket" or answer1.content == "pickpocket" or answer1.content == "18":
                move = "Pickpocket"
                name = ainfo["name"]
                chance = random.randint(0, 6)
                drop = random.randint(1, 10)
                if chance == 1 or chance == 2 or chance == 3:
                    gain = drop * 0.50
                    ainfo["boco"] = drop + gain
                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 50%!\n {} Bobocoin's\n```".format(name, gain), color=discord.Color.red())
                    await ctx.send(embed=em)
                elif chance == 4 or chance == 5:
                    gain = drop * 0.75
                    ainfo["boco"] = drop + gain
                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 75% at!\n {} Bobocoin's\n```".format(name,  gain), color=discord.Color.red())
                    await ctx.send(embed=em)
                elif chance == 6:
                    gain = drop * 0.9
                    ainfo["boco"] = drop + gain
                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 90%!\n {} Bobocoin's\n```".format(name, gain), color=discord.Color.red())
                    await ctx.send(embed=em)
                elif chance == 0:
                    await ctx.send("Nothing Sorry")
                    ainfo["boco"] = ainfo["boco"]
            elif answer1.content == "Hide" or answer1.content == "hide" or answer1.content == "19":
                move = "Hide"
                if ainfo["class"] == "Thief":
                    ainfo["location"] = ctx.channel
                    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                    binfo = fileIO("players/{}/info.json".format(user.id), "load")
                    print("aname")
                    print(aname)
                    print("bname")
                    print(bname)
                    if bname == aname:
                        print("a=bxxxxx")
                        if ainfo["status_hide"] == "False":
                            #ainfo["status_hide"] = "False"
                            ainfo["status_hide"] = "True"
                            #ainfo["status_trap"] = "False"
                        else:
                            await ctx.send("No one spoted you so far!".format())
                    else:
                        print("b=b  user attack")
                        if binfo["status_hide"] == "False":
                            binfo["status_hide"] = "True"
                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                            await ctx.send("You hide {} between the two trees!".format(binfo["name"]))
                    fileIO("players/{}/info.json".format(user.id), "save", binfo)
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    return
                else:
                    HideOrNot = random.randint(1, 3)
                    if HideOrNot == "1" or HideOrNot == 1:
                        await ctx.send("You are not a Thief!...you hide Very baddly and was direct spoted!".format())
                        ainfo["location"] = ctx.channel
                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                        binfo = fileIO("players/{}/info.json".format(user.id), "load")
                        if bname == aname:
                            print("a=bbbbbb")
                            if ainfo["status_hide"] == "False":
                                ainfo["status_hide"] = "False"
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                await ctx.send("You hidden between the trees!".format())
                                #$return #skill(ctx)
                            else:
                                await ctx.send("No one spoted you so far!".format())
                        else:
                            print("b=b  user attack")
                            if binfo["status_hide"] == "False":
                                binfo["status_hide"] = "False"
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                await ctx.send("You hide {} between the two trees!".format(binfo["name"]))
                    elif HideOrNot == "2" or HideOrNot == 2:
                        await ctx.send("You are not a Thief!...you hide but was direct spoted!".format())
                        ainfo["location"] = ctx.channel
                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                        binfo = fileIO("players/{}/info.json".format(user.id), "load")
                        if bname == aname:
                            print("a=b")
                            if ainfo["status_hide"] == "False":
                                ainfo["status_hide"] = "False"
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                await ctx.send("You hidden between the trees!".format())
                                #$return #skill(ctx)
                            else:
                                await ctx.send("No one spoted you so far!".format())
                        else:
                            print("b=b  user attack")
                            if binfo["status_hide"] == "False":
                                binfo["status_hide"] = "False"
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                await ctx.send("You hide {} between the two trees!".format(binfo["name"]))
                    elif HideOrNot == "3" or HideOrNot == 3:
                        await ctx.send("You are not a Thief!...you hide Very baddly!".format())
                        ainfo["location"] = ctx.channel
                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                        binfo = fileIO("players/{}/info.json".format(user.id), "load")
                        if bname == aname:
                            print("a=bdddddd")
                            if ainfo["status_hide"] == "False":
                                ainfo["status_hide"] = "True"
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                await ctx.send("You hidden between the trees!".format())
                                #$return #skill(ctx)
                            else:
                                await ctx.send("No one spoted you so far!".format())
                        else:
                            print("b=b  user attack")
                            if binfo["status_hide"] == "False":
                                binfo["status_hide"] = "True"
                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                await ctx.send("You hide {} between the two trees!".format(binfo["name"]))
                    else:
                        await ctx.send("You are not a Thief!...you hide but was direct spoted!\n Thiefs have Special abbility to Attack while Hidden!".format())
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    fileIO("players/{}/info.json".format(user.id), "save", binfo)
                #fileIO("players/{}/info.json".format(discordid), "save", ainfo)
                #fileIO("players/{}/info.json".format(bdiscordid), "save", binfo)
            elif answer1.content == "Jump" or answer1.content == "jump" or answer1.content == "20":
                move = "Jump"
                if ainfo["class"] == "Thief":
                    if ainfo["status_jump"] == "False":
                        ainfo["status_jump"] = "True"
                        enemy_dmg = 0
                        ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                        await ctx.send("You Jump in the Air!".format())
                        return #skill(ctx)
                    else:
                        await ctx.send("Still on flying!".format())
                        if ainfo["class"] == "Thief":
                            randomNUm = random.randint(1, 6)
                            howManyArrows = random.randint(5, 100)
                            user_dmgDif = user_dmg / 100
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                ainfo["status_jump"] = "False"
                            elif randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                ainfo["status_jump"] = "False"
                            elif randomNUm == 6:
                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                ainfo["status_jump"] = "False"
                        else:
                            randomNUm = random.randint(1, 6)
                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg + 10
                                user_dmgSELFBurn /= randomNUm
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                ainfo["status_jump"] = "False"
                            elif randomNUm == 4 or randomNUm == 5:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg + 100
                                user_dmgSELFBurn /= randomNUm
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                ainfo["status_jump"] = "False"
                                await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                            else:
                                skillDMG = user_dmg * randomNUm
                                user_dmgSELFBurn = user_dmg + 1000
                                user_dmgSELFBurn /= randomNUm
                                user_enemy_hp -= user_dmgSELFBurn
                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                ainfo["status_jump"] = "False"
                                await ctx.send("You are not a Thief and hurrt yourself!aa\n- {}".format(user_dmgSELFBurn))
                else:
                    await ctx.send("You are not a Thief...you jump but plobbed direct on the ground!".format())
                    randomNUm = random.randint(1, 6)
                    if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                        skillDMG = user_dmg * randomNUm
                        user_dmgSELFBurn = user_dmg + 10
                        user_dmgSELFBurn /= randomNUm
                        user_enemy_hp -= user_dmgSELFBurn
                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        ainfo["status_jump"] = "False"
                    elif randomNUm == 4 or randomNUm == 5:
                        skillDMG = user_dmg * randomNUm
                        user_dmgSELFBurn = user_dmg + 100
                        user_dmgSELFBurn /= randomNUm
                        user_enemy_hp -= user_dmgSELFBurn
                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        ainfo["status_jump"] = "False"
                        await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                    else:
                        skillDMG = user_dmg * randomNUm
                        user_dmgSELFBurn = user_dmg + 1000
                        user_dmgSELFBurn /= randomNUm
                        user_enemy_hp -= user_dmgSELFBurn
                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        ainfo["status_jump"] = "False"
                        await ctx.send("You are not a Thief and hurrt yourself!dd\n- {}".format(user_dmgSELFBurn))
            elif answer1.content == "Secret Dagger" or answer1.content == "secret dagger" or answer1.content == "21":
                move = "Secret Dagger"
                if slot0 == "Dagger" or slot1 == "Dagger" or slot2 == "Dagger" or slot3 == "Dagger" or slot4 == "Dagger" or slot5 == "Dagger" or slot6 == "Dagger" or slot7 == "Dagger" or slot8 == "Dagger" or slot9 == "Dagger" or slot10 == "Dagger" or slot11 == "Dagger" or slot12 == "Dagger" or slot13 == "Dagger" or slot14 == "Dagger" or slot15 == "Dagger" or slot16 == "Dagger" or slot17 == "Dagger" or slot18 == "Dagger" or slot19 == "Dagger" or slot20 == "Dagger"or slot21 == "Dagger"or slot22 == "Dagger"or slot23 == "Dagger"or slot24 == "Dagger"or slot25 == "Dagger" or slot0 == "Wood Dagger" or slot1 == "Wood Dagger" or slot2 == "Wood Dagger" or slot3 == "Wood Dagger" or slot4 == "Wood Dagger" or slot5 == "Wood Dagger" or slot6 == "Wood Dagger" or slot7 == "Wood Dagger" or slot8 == "Wood Dagger" or slot9 == "Wood Dagger" or slot10 == "Wood Dagger" or slot11 == "Wood Dagger" or slot12 == "Wood Dagger" or slot13 == "Wood Dagger" or slot14 == "Wood Dagger" or slot15 == "Wood Dagger" or slot16 == "Wood Dagger" or slot17 == "Wood Dagger" or slot18 == "Wood Dagger" or slot19 == "Wood Dagger" or slot20 == "Wood Dagger"or slot21 == "Wood Dagger"or slot22 == "Wood Dagger"or slot23 == "Wood Dagger"or slot24 == "Wood Dagger"or slot25 == "Wood Dagger" or slot0 == "Stone Dagger" or slot1 == "Stone Dagger" or slot2 == "Stone Dagger" or slot3 == "Stone Dagger" or slot4 == "Stone Dagger" or slot5 == "Stone Dagger" or slot6 == "Stone Dagger" or slot7 == "Stone Dagger" or slot8 == "Stone Dagger" or slot9 == "Stone Dagger" or slot10 == "Stone Dagger" or slot11 == "Stone Dagger" or slot12 == "Stone Dagger" or slot13 == "Stone Dagger" or slot14 == "Stone Dagger" or slot15 == "Stone Dagger" or slot16 == "Stone Dagger" or slot17 == "Stone Dagger" or slot18 == "Stone Dagger" or slot19 == "Stone Dagger" or slot20 == "Stone Dagger"or slot21 == "Stone Dagger"or slot22 == "Stone Dagger"or slot23 == "Stone Dagger"or slot24 == "Stone Dagger"or slot25 == "Stone Dagger" or slot0 == "Gold Dagger" or slot1 == "Gold Dagger" or slot2 == "Gold Dagger" or slot3 == "Gold Dagger" or slot4 == "Gold Dagger" or slot5 == "Gold Dagger" or slot6 == "Gold Dagger" or slot7 == "Gold Dagger" or slot8 == "Gold Dagger" or slot9 == "Gold Dagger" or slot10 == "Gold Dagger" or slot11 == "Gold Dagger" or slot12 == "Gold Dagger" or slot13 == "Gold Dagger" or slot14 == "Gold Dagger" or slot15 == "Gold Dagger" or slot16 == "Gold Dagger" or slot17 == "Gold Dagger" or slot18 == "Gold Dagger" or slot19 == "Gold Dagger" or slot20 == "Gold Dagger"or slot21 == "Gold Dagger"or slot22 == "Gold Dagger"or slot23 == "Gold Dagger"or slot24 == "Gold Dagger"or slot25 == "Gold Dagger" or slot0 == "Metal Dagger" or slot1 == "Metal Dagger" or slot2 == "Metal Dagger" or slot3 == "Metal Dagger" or slot4 == "Metal Dagger" or slot5 == "Metal Dagger" or slot6 == "Metal Dagger" or slot7 == "Metal Dagger" or slot8 == "Metal Dagger" or slot9 == "Metal Dagger" or slot10 == "Metal Dagger" or slot11 == "Metal Dagger" or slot12 == "Metal Dagger" or slot13 == "Metal Dagger" or slot14 == "Metal Dagger" or slot15 == "Metal Dagger" or slot16 == "Metal Dagger" or slot17 == "Metal Dagger" or slot18 == "Metal Dagger" or slot19 == "Metal Dagger" or slot20 == "Metal Dagger"or slot21 == "Metal Dagger"or slot22 == "Metal Dagger"or slot23 == "Metal Dagger"or slot24 == "Metal Dagger"or slot25 == "Metal Dagger" or slot0 == "Bobo Dagger" or slot1 == "Bobo Dagger" or slot2 == "Bobo Dagger" or slot3 == "Bobo Dagger" or slot4 == "Bobo Dagger" or slot5 == "Bobo Dagger" or slot6 == "Bobo Dagger" or slot7 == "Bobo Dagger" or slot8 == "Bobo Dagger" or slot9 == "Bobo Dagger" or slot10 == "Bobo Dagger" or slot11 == "Bobo Dagger" or slot12 == "Bobo Dagger" or slot13 == "Bobo Dagger" or slot14 == "Bobo Dagger" or slot15 == "Bobo Dagger" or slot16 == "Bobo Dagger" or slot17 == "Bobo Dagger" or slot18 == "Bobo Dagger" or slot19 == "Bobo Dagger" or slot20 == "Bobo Dagger"or slot21 == "Bobo Dagger"or slot22 == "Bobo Dagger"or slot23 == "Bobo Dagger"or slot24 == "Bobo Dagger"or slot25 == "Bobo Dagger":
                    if ainfo["class"] == "Thief":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                    else:
                        randomNUm = random.randint(1, 6)
                        ainfo["ammo_arrow"] = ainfo["ammo_arrow"] - 1
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg * randomNUm
                            user_dmgSELFBurn = user_dmg
                            user_dmgSELFBurn /= randomNUm
                            user_enemy_hp -= user_dmgSELFBurn
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                            await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                else:
                    await ctx.send("You Need an Dagger for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Scan" or answer1.content == "scan" or answer1.content == "22":
                move = "Scan"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if ainfo["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                            ainfo["status_scan"] = "True"
                        await ctx.send("You Scanned your Taget and found Open Ports".format())
                else:
                    await ctx.send("You Need a PC for that Move".format())
                    return #skill(ctx)
            elif answer1.content == "Crack" or answer1.content == "crack" or answer1.content == "23":
                move = "Crack"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if ainfo["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if ainfo["status_scan"] == "True":
                            ainfo["status_crack"] = "True"
                            await ctx.send("You Cracked your Taget PC use DDOS or Install to attack!".format())
                        else:
                            await ctx.send("Use attack {}scan first!".format(Prefix))
                else:
                    await ctx.send("You need to be a HACKER for that!\n Use Command {}login".format(Prefix))
                    return #skill(ctx)
            elif answer1.content == "DDOS" or answer1.content == "ddos" or answer1.content == "25":
                move = "DDOS"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if ainfo["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if ainfo["status_ddos"] == "True":
                            ainfo["status_confuse"] = "True"
                            await ctx.send("You send many pings to your target and confuessed him with that!".format())
                        else:
                            await ctx.send("Use attack {}crack first!".format(Prefix))
                else:
                    await ctx.send("You need to be a HACKER for that!\n Use Command {}login".format(Prefix))
                    return #skill(ctx)
            elif answer1.content == "Install" or answer1.content == "install" or answer1.content == "24":
                move = "Install"
                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                    if ainfo["class"] == "Hacker":
                        randomNUm = random.randint(1, 6)
                        howManyArrows = random.randint(5, 100)
                        user_dmgDif = user_dmg / 100
                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 4 or randomNUm == 5:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if randomNUm == 6:
                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                        if ainfo["status_crack"] == "True":
                            ainfo["status_install_who"] = ainfo["name"]
                            ainfo["status_install"] = "True"
                            await ctx.send("You send many pings to your target and confuessed him with that!".format())
                        else:
                            await ctx.send("Use attack {}crack first!".format(Prefix))
                else:
                    await ctx.send("You need to be a HACKER for that!\n Use Command {}login".format(Prefix))
                    return #skill(ctx)
            MissOrNot = random.randint(2, 2)
            if MissOrNot == 2 or MissOrNot == 4 or MissOrNot == 6 or MissOrNot == 8 or MissOrNot == 10 :
                print("[=======CALC+++++START=======]")
                #Hit = enemy_max_dmg
                ainfo["stamina"] = ainfo["stamina"] - random.randint(1, 10)
                benemy_hp = binfo["health"]
                #benemy_dmg = binfo["health"]
                user_hp = ainfo["health"]
                user_hp -= user_dmgSELFBurn
                bgold_lost = random.randint(9, 99)
                bmax_dmg = binfo["all_total_base_attack"]
                bmax_def = binfo["all_total_base_defence"]
                user_def = ainfo["all_total_base_defence"]
                benemy_def = binfo["all_total_base_defence"]
                benemy_dmg = binfo["all_total_base_attack"]
                user_name = ainfo["name"]
                buser_name = binfo["name"]
                #enemy_xp = ainfo["exp"]
                benemy_xp = binfo["exp"] / 1000
                enemy_gold = binfo["gold"] / 1000
                benemy_gold = ainfo["gold"] / 1000
                #print("")  attack*(100/(100+defense)) user_enemy
                #print()
                #print("")
                #print()
                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                #user_hp_after = int(user_hp) - int(enemy_dmg)
                #userAtk * (100/(100+enemy_def))
                user_dmg = user_dmg + skillDMG
                print("[=======PlayA=======]")
                print("user_hp")
                print(user_hp)
                print("max_def")
                print(max_def)
                print("user_dmg")
                print(user_dmg)
                print("user_def")
                print(user_def)
                print("[=======PlayA=======]")
                print("[=======MonA=======]")
                print("enemy_hp")
                print(benemy_hp)
                print("enemy_dmg")
                print(benemy_dmg)
                print("enemy_def")
                print(benemy_def)
                print("user_enemy")
                print(user_enemy)
                print("buser_enemy")
                print(buser_enemy)
                print("[=======MonA=======]")
                user_enemy = ainfo["selected_enemy_player"]
                if max_def > benemy_dmg and user_dmg > benemy_def:
                    atk_def_userAtkShow = benemy_hp
                    #atk_def_enamyAtkShow = 0
                    batk_def_enamyAtk = user_dmg - benemy_def
                    atk_def_userAtk = benemy_def - user_dmg
                    if batk_def_enamyAtk <= 0:
                        batk_def_enamyAtk = 0
                    if atk_def_userAtk <= 0:
                        atk_def_userAtk = 0
                    user_hp_after = user_hp
                    atk_def_userAtk = user_dmg - benemy_def
                    benemy_hp_after = atk_def_userAtkShow - int(atk_def_userAtk)
                    benemy_hp_after -= skillDMG
                    if benemy_hp_after <= 0:
                        benemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    if move == "Heal":
                        #if bname == aname:
                        if ainfo["mana"] <= 1:
                            await ctx.send("{} you are Out of Mana {}/{}max!!!\n\n Use `{}rest` or buy pot".format(binfo["name"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1),Prefix))
                            ainfo["mana"] = 0
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            return
                        else:
                            print("Heal")
                            binfo["health"] = ainfo["healthmax"]
                            lvl = ainfo["sklvl"]
                            ainfo["stamina"] = ainfo["staminamax"]
                            use = random.randint(lvl, 250)
                            ainfo["mana"] -= use
                            if use >= ainfo["mana"]:
                                ainfo["mana"]  = 0
                            await ctx.send("You healed {}!\n with {} Points\n your Mana Balance {}\{}".format(binfo["name"],ainfo["healthmax"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1)))
                            #fileIO("players/{}/info.json".format(author.id), "save", info)
                            ainfo["selected_enemy_player"] = binfo["name"]
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            print("SAFE INFO SELECTET ENAMY")
                            return
                    else:
                        print("Not Heal!")
                    await ctx.send("```diff\n- {} has1 {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(batk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0),  skillDMG, user_enemy, round(benemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    print("atk_def_userAtk")
                    print(atk_def_userAtk)
                    print("enemy_hp_after")
                    print(benemy_hp_after)
                    print("if max_def > benemy_dmg and user_dmg > benemy_def:")
                elif benemy_dmg > max_def and benemy_def > user_dmg:
                    atk_def_userAtkShow = user_hp
                    batk_def_enamyAtk = user_dmg - benemy_def
                    atk_def_userAtk = benemy_def - user_dmg
                    if batk_def_enamyAtk <= 0:
                        batk_def_enamyAtk = 0
                    if atk_def_userAtk <= 0:
                        atk_def_userAtk = 0
                    batk_def_enamyAtk = benemy_hp
                    atk_def_userAtk = benemy_dmg - max_def
                    skillendCALS = batk_def_enamyAtk - skillDMG
                    benemy_hp_after = skillendCALS
                    #enemy_hp_after = atk_def_enamyAtk * skillDMG
                    user_hp_after = atk_def_userAtkShow - int(atk_def_userAtk)
                    benATk0 = atk_def_userAtk
                    usAtk0 = 0
                    if benemy_hp_after <= 0:
                        benemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    if move == "Heal":
                        #if bname == aname:
                        if ainfo["mana"] <= 1:
                            await ctx.send("{} you are Out of Mana {}/{}max!!!\n\n Use `{}rest` or buy pot".format(binfo["name"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1),Prefix))
                            ainfo["mana"] = 0
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            return
                        else:
                            print("Heal")
                            binfo["health"] = ainfo["healthmax"]
                            lvl = ainfo["sklvl"]
                            ainfo["stamina"] = ainfo["staminamax"]
                            use = random.randint(lvl, 250)
                            ainfo["mana"] -= use
                            if use >= ainfo["mana"]:
                                ainfo["mana"]  = 0
                            await ctx.send("You healed {}!\n with {} Points\n your Mana Balance {}\{}".format(binfo["name"],ainfo["healthmax"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1)))
                            #fileIO("players/{}/info.json".format(author.id), "save", info)
                            ainfo["selected_enemy_player"] = binfo["name"]
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            print("SAFE INFO SELECTET ENAMY")
                            return
                    else:
                        print("Not Heal!")
                    await ctx.send("```diff\n- {} has2 {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(batk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0),  skillDMG, user_enemy, round(benemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    if user_dmg < benemy_def :
                        em = discord.Embed(description="```diff\n- YOU MAKE LESS THAN THE RECOMANDED DAMAGE!\n- USE COMMAND {}bp0x0 0 to equipt a weapon!\n And \n- USE COMMAND {}lvl to check your lvl!```".format(Prefix,Prefix), color=discord.Color.red())
                        await ctx.send(embed=em)
                    print("if enemy_dmg > max_def and enemy_def > user_dmg:")
                elif max_def > benemy_dmg  and benemy_def > user_dmg:
                    batk_def_enamyAtk = user_dmg - benemy_def
                    atk_def_userAtk = benemy_def - user_dmg
                    if batk_def_enamyAtk <= 0:
                        batk_def_enamyAtk = 0
                    if atk_def_userAtk <= 0:
                        atk_def_userAtk = 0
                    benATk0 = 0
                    usAtk0 = 0
                    benemy_hp_after = benemy_hp
                    user_hp_after = user_hp
                    usATKuSkill = usAtk0 + skillDMG
                    benemy_hp_after -= usATKuSkill
                    user_hp_after -= benATk0
                    if benemy_hp_after <= 0:
                        benemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    if move == "Heal":
                        #if bname == aname:
                        if ainfo["mana"] <= 1:
                            await ctx.send("{} you are Out of Mana {}/{}max!!!\n\n Use `{}rest` or buy pot".format(binfo["name"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1),Prefix))
                            ainfo["mana"] = 0
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            return
                        else:
                            print("Heal")
                            binfo["health"] = ainfo["healthmax"]
                            lvl = ainfo["sklvl"]
                            ainfo["stamina"] = ainfo["staminamax"]
                            use = random.randint(lvl, 250)
                            ainfo["mana"] -= use
                            if use >= ainfo["mana"]:
                                ainfo["mana"]  = 0
                            await ctx.send("You healed {}!\n with {} Points\n your Mana Balance {}\{}".format(binfo["name"],ainfo["healthmax"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1)))
                            #fileIO("players/{}/info.json".format(author.id), "save", info)
                            ainfo["selected_enemy_player"] = binfo["name"]
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            print("SAFE INFO SELECTET ENAMY")
                            return
                    else:
                        print("Not Heal!")
                    await ctx.send("```diff\n- {} has3 {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(batk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0),  skillDMG, user_enemy, round(benemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                    print("if max_def > enemy_dmg  and enemy_def > user_dmg:")
                elif benemy_dmg > max_def and user_dmg > benemy_def:
                    batk_def_enamyAtk = user_dmg - benemy_def
                    atk_def_userAtk = benemy_def - user_dmg
                    if batk_def_enamyAtk <= 0:
                        batk_def_enamyAtk = 0
                    if atk_def_userAtk <= 0:
                        atk_def_userAtk = 0
                    benATk0 = benemy_dmg - max_def
                    usAtk0 = user_dmg - benemy_def
                    usATKuSkill = skillDMG
                    damageCalc = usAtk0 + skillDMG
                    benemy_hp_after = benemy_hp - damageCalc
                    user_hp_after = user_hp - benATk0
                    user_enemy = ainfo["selected_enemy_player"]
                    user_enemy_hp = binfo["health"]
                    if benemy_hp_after <= 0:
                        benemy_hp_after = 0
                    if user_hp_after <= 0:
                        user_hp_after = 0
                    if move == "Heal":
                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                        #if bname == aname:
                        if ainfo["mana"] <= 1:
                            print("ainfo")
                            #print(ainfo)
                            print("ainfo")
                            await ctx.send("{} you are Out of Mana {}/{}max!!!\n\n Use `{}rest` or buy pot".format(binfo["name"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1),Prefix))
                            ainfo["mana"] = 0
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            return
                        else:
                            print("Heal")
                            binfo["health"] = ainfo["healthmax"]
                            lvl = ainfo["sklvl"]
                            ainfo["stamina"] = ainfo["staminamax"]
                            use = random.randint(lvl, 250)
                            print(lvl)
                            print(use)
                            ainfo["mana"] -= use
                            if use >= ainfo["mana"]:
                                ainfo["mana"]  = 0
                            await ctx.send("You healed {}!\n with {} Points\n your Mana Balance {}\{}".format(binfo["name"],ainfo["healthmax"], round(ainfo["mana"],1) , round(ainfo["manamax"], 1)))
                            #fileIO("players/{}/info.json".format(author.id), "save", info)
                            ainfo["selected_enemy_player"] = binfo["name"]
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            print("SAFE INFO SELECTET ENAMY")
                            return
                    else:
                        print("Not Heal!")
                elif benemy_dmg > max_def:
                    atk_def_userAtkShow = benemy_def - user_dmg
                    batk_def_enamyAtkShow = max_def - benemy_dmg
                    if batk_def_enamyAtk <= 0:
                        batk_def_enamyAtk = 0
                    if atk_def_userAtk <= 0:
                        atk_def_userAtk = 0
                    #batk_def_enamyAtkShow = 0
                    batk_def_enamyAtk = max_def - benemy_dmg
                    batk_def_enamyAtk = 0
                    atk_def_userAtk = benemy_def - user_dmg
                    print("atk_def_userAtkShow = enemy_def - user_dmg")
                    print(atk_def_userAtkShow)
                    print("atk_def_enamyAtkShow = max_def - enemy_dmg = 0")
                    print(batk_def_enamyAtkShow)
                    print("if enemy_dmg > max_def:")
                    if atk_def_userAtk < batk_def_enamyAtk:
                        print("if atk_def_userAtk < atk_def_enamyAtk:12")
                        print("atk_def_userAtk Verliert")
                        print(atk_def_userAtk)
                        print("atk_def_enamyAtk")
                        print(batk_def_enamyAtk)
                        print("if atk_def_userAtk < atk_def_enamyAtk:")
                else:
                    print("Else???HP 19294")
                print("CALC FINISH=================]")
                #print("max_def")
                #print(max_def)
                #print("user_dmg")
                #print(user_dmg)
                #print("enemy_dmg")
                #print(enemy_dmg)
                #print("enemy_def")
                #print(enemy_def)
                #enemy_hp_after = round(enemy_hp_after, 0)
                #user_hp_after = round(user_hp_after, 0)
                #print("enemy_hp_after")
                #print(enemy_hp_after)
                #print("user_hp_after")
                #print(user_hp_after)
                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                #user_hp_after = int(user_hp) - int(enemy_dmg)
                #enemy_hp = user_enemy_hp
                #calc1 = user_dmg - enemy_def
                #user_dmg = calc1
                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                #user_hp_after = int(user_hp) - int(enemy_dmg)
                #fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                #await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} Hit {}\n+ {} uses  Heal and heals for {} HP.\n.```".format(user_enemy, user_enemy_hp, user_name, user_hp, user_enemy, user_name, user_name, ainfo["healthmax"]))
                #Lootbag# 10% chance to obtain one from an enemy.
                #enemy_hp_after = int(enemy_hp) - int(atk_def_enamyAtk)
                #if enemy_hp_after <= 0:
                #    enemy_hp_after = 0
                #if user_hp_after <= 0:
                #    user_hp_after = 0
                #await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(atk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0), user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                batk_def_enamyAtk = user_dmg - benemy_def
                atk_def_userAtk = benemy_def - user_dmg
                if batk_def_enamyAtk <= 0:
                    batk_def_enamyAtk = 0
                if atk_def_userAtk <= 0:
                    atk_def_userAtk = 0
                benATk0 = 0
                usAtk0 = 0
                benemy_hp_after = benemy_hp
                user_hp_after = user_hp
                usATKuSkill = usAtk0 + skillDMG
                benemy_hp_after -= usATKuSkill
                user_hp_after -= benATk0
                if benemy_hp_after <= 0:
                    benemy_hp_after = 0
                if user_hp_after <= 0:
                    user_hp_after = 0
                ainfo["health"] = round(user_hp_after,0)
                binfo["health"] = round(benemy_hp_after, 0)
                ainfo["selected_enemy_player"] = binfo["name"]
                ainfo["selected_enemy_exp"] = round(benemy_xp, 0) + all_drop_exp
                ainfo["selected_enemy_gold"] = round(benemy_gold, 0) +all_drop_gold
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                print("benemy_hp_after")
                print("benemy_hp_after")
                print("benemy_hp_after")
                print("benemy_hp_after")
                print(benemy_hp_after)
                print("user_hp_after")
                print(user_hp_after)
                if int(benemy_hp_after) < 1 and int(user_hp_after) < 1: #  Draw DRAW DRAW  20085
                    gold_losta = ainfo["gold"]
                    gold_lostb = binfo["gold"]
                    await ctx.send("```diff\n- **{}** has killed you its a draw!```\n- You lost `{}` gold.\n **{}** Lost `{}` gold```".format(user_enemy, gold_losta,user_enemy, gold_lostb ))
                    #ainfo["gold"] = ainfo["gold"] - gold_lost
                    ainfo["health"] = 0
                    ainfo["selected_enemy_player"] = "None"
                    ainfo["infight_status"] = "Death"
                    binfo["infight_status"] = "Death"
                    ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                    ainfo["deaths"] = ainfo["deaths"] + 1
                    ainfo["count_played"] = ainfo["count_played"] + 1
                    ainfo["count_draw"] = ainfo["count_draw"] + 1
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    user = ctx.guild.get_member(bdiscordid)
                    await user.kick(reason=None)
                    user = ctx.guild.get_member(adiscordid)
                    await user.kick(reason=None)
                    if ainfo["gold"] < 0:
                        ainfo["gold"] = 0
                        ainfo["health"] = 0
                        ainfo["selected_enemy_player"] = "None"
                        ainfo["infight_status"] = "False"
                        fileIO("players/{}/info.json".format(author.id), "save", binfo)
                        return
                elif int(user_hp_after) < 1 and int(benemy_hp_after) > int(user_hp_after) :  # KILLED YOU KILLED YOU20106
                    gold_losta = ainfo["gold"]
                    await ctx.send("```diff\n- {} has killed you\n- You lost {} gold```".format(user_enemy, gold_losta))
                    binfo["gold"] += gold_losta
                    ainfo["gold"] = ainfo["gold"] - gold_losta
                    ainfo["health"] = 0
                    ainfo["selected_enemy_player"] = "None"
                    ainfo["infight_status"] = "Death"
                    ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                    ainfo["deaths"] = ainfo["deaths"] + 1
                    ainfo["count_played"] = ainfo["count_played"] + 1
                    ainfo["count_lose"] = ainfo["count_lose"] + 1
                    #user = ctx.guild.get_member(bdiscordid)
                    #await user.kick(reason=None)
                    user = ctx.guild.get_member(adiscordid)
                    await user.kick(reason=None)
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    if ainfo["gold"] < 0:
                        ainfo["gold"] = 0
                        ainfo["health"] = 0
                        ainfo["selected_enemy_player"] = "None"
                        ainfo["infight_status"] = "False"
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                        return
                elif int(benemy_hp_after) < 1:  # WIN   20128
                    #gold_losta = ainfo["gold"]
                    gold_lostb = binfo["gold"]
                    await ctx.send("```diff\n- {} You WIN the Fight and {} gold```".format(user_name,gold_lostb))
                    ainfo["gold"] += gold_lostb
                    binfo["gold"] -= gold_lostb
                    ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                    ainfo["count_win"] = ainfo["count_win"] + 1
                    ainfo["count_played"] = ainfo["count_played"] + 1
                    binfo["infight_status"] = "Death"
                    #user_hp_after -=
                    #ainfo["enemyhp"] = enemy_hp_after
                    #user_enemy_hp = enemy_hp_after
                    xpmax = int(ainfo["expmax"])
                    xp = int(ainfo["exp"])
                    skxpmax = int(ainfo["expmaxsk"])
                    skxp = int(ainfo["skexp"])
                    all_total_base_exp  = ainfo["all_total_base_exp"]
                    enemy_gold = round(enemy_gold, 0) + all_drop_gold
                    enemy_xp = 1000
                    ainfo["selected_enemy_player"] = binfo["name"]
                    ainfo["selected_enemy_exp"] += round(enemy_xp, 0)
                    ainfo["selected_enemy_gold"] = round(enemy_gold, 0)
                    ainfo["gold"] += enemy_gold
                    #if atk_def_userAtk < atk_def_enamyAtk:
                    #    print("kleiner  atk_def_userAtk")
                    #    print("atk_def_userAtk")
                    #    print(atk_def_userAtk)
                    #    gold_lost = random.randint(99, 999)
                    #if atk_def_enamyAtk < atk_def_userAtk:
                    #    print("kleiner  atk_def_enamyAtk Enamy ----")
                    #    print("atk_def_enamyAtk")
                    #    print(atk_def_enamyAtk)
                    #    gold_lost = random.randint(0, 250)
                        #user_hp_after -=
                        #ainfo["enemyhp"] = enemy_hp_after
                        #user_enemy_hp = enemy_hp_after
                    ainfo["healthmax"] += 10
                    ainfo["exp"] += enemy_xp
                    yonextlevel = ainfo["expmax"]  - ainfo["exp"]
                    await ctx.send("```diff\n+ You killed {}\n You gained \n+ {} gold\n and exp points \n+ {} \n```".format(user_enemy, benemy_gold,  benemy_xp))
                    #await kicked(adiscordid)
                    #await kicker(bdiscordid)
                    #enemy_xp1 = enemy_xp * ainfo["all_drop_exp"]
                    #ainfo ["exp"] = ainfo["exp"] + ainfo["all_drop_exp"] + ainfo["selected_enemy_exp"]
                    ainfo["infight_status"] = "False"
                    binfo["infight_status"] = "False"
                    lootbag = random.randint(1, 14)
                    lootbag100 = random.randint(1, 100)
                    luckynumber = ainfo["luknum"]
                    #ainfo["selected_enemy_player"] = "None"
                    #all_total_base_exp  = ainfo["all_total_base_exp"]
                    #enemy_xp = ainfo["selected_enemy_exp"]
                    #gain = enemy_xp * all_total_base_exp
                    #ainfo["exp"] += gain
                    #ainfo["expmax"] =
                    #ainfo["expmaxsk"] =
                    #ainfo["skexp"] =
                    #ainfo["all_total_base_exp"] =
                    #user = ctx.guild.get_member(adiscordid)
                    #await user.kick(reason=None)
                    #print("try user = bdiscordid1111111111111")
                    try:
                        print("try user = bdiscordid1111111111111")
                        user = ctx.guild.get_member(bdiscordid)
                        await user.kick(reason=None)
                        print("try user = bdiscordid  DONE111111111")
                    except:
                        print("try user = bdiscordid  ERROER1111111")
                    try:
                        print("try user = bdiscordid")
                        user = ctx.guild.get_member(bdiscordid)
                        await user.kick(reason=None)
                        print("try user = bdiscordid  DONE")
                    except:
                        print("try user = bdiscordid  ERROER")
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    fileIO("players/{}/info.json".format(author.id), "save", binfo)
                    if ainfo["exp"] >= ainfo["expmax"]:
                        await ctx.send("Checking your EXP")
                        await _check_setExpLVL(ctx)
                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                        print("BACK")
                        #await _check_setExpLVL(ctx)
                    #
                    #
                    #
                    #
                    #
                    #
                    #
                    #
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    if lootbag == 1:
                        await ctx.send("```diff\n+ {} obtained a Food bag!\n- USE COMMAND:\n+ {}foodbag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_food"] = ainfo["bag_food"] + 1
                    elif lootbag == 7:
                        await ctx.send("```diff\n+ {} obtained a Wood bag!\n- USE COMMAND:\n+ {}woodbag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_wood"] = ainfo["bag_wood"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                        #await _check_levelup(ctx)
                    elif lootbag == 8:
                        await ctx.send("```diff\n+ {} obtained a bag full of Metal!\n- USE COMMAND:\n+ {}metalbag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_metal"] = ainfo["bag_metal"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    elif lootbag == 4:
                        await ctx.send("```diff\n+ {} obtained a Gold bag!\n- USE COMMAND:\n+ {}goldbag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_gold"] = ainfo["bag_gold"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    elif lootbag == 5:
                        await ctx.send("```diff\n+ {} obtained a bag full of BoboCoins!\n- USE COMMAND:\n+ {}bocobag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_boco"] = ainfo["bag_boco"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    elif lootbag == 13:
                        await ctx.send("```diff\n+ {} obtained a Key bag!\n- USE COMMAND:\n+ {}keybag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_key"] = ainfo["bag_key"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    elif lootbag == 14:
                        await ctx.send("```diff\n+ {} obtained a bag full of Stones!\n- USE COMMAND:\n+ {}stonebag\n To open and resive your goods.```".format(user_name,Prefix))
                        ainfo["bag_stone"] = ainfo["bag_stone"] + 1
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    elif lootbag == 2 or lootbag == 3 or lootbag == 6 or lootbag == 9 or lootbag == 10 or lootbag == 11 or lootbag == 0:
                        await ctx.send("```diff\n+ The Monster lost Nothing```".format())
                    em = discord.Embed(description="```diff\n HP:  {} / {}\n SP: {} / {}\n MP: {} / {}```".format(round(ainfo["health"], 2), round(ainfo["healthmax"], 2), round(ainfo["stamina"], 2), round(ainfo["staminamax"], 2), round(ainfo["mana"], 2), round(ainfo["manamax"], 2)), color=discord.Color.red())
                    await ctx.send(embed=em)
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    if benemy_xp == 0 :
                        em = discord.Embed(description="```diff\n- You need to get a WAX Cloud Wallet\n- and at least one BP0x0 NFT!\n- To Level up and enjoy the Game!```".format(), color=discord.Color.red())
                        await ctx.send(embed=em)
                    ainfo["selected_enemy_player"] = "None"
                    ainfo["infight_status"] = "False"
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    print("===================LAST SAFE FIGHT==============")
                    return
                else:
                    #gold_losta = ainfo["gold"]
                    gold_lostb = binfo["gold"]
                    await ctx.send("```diff\n- You Damage **{}** with `{}` points.\n **{}** has `{}` HP left!```".format(user_enemy, atk_def_userAtk,user_enemy, benemy_hp_after))
                    #ainfo["gold"] = ainfo["gold"] - gold_lost  atk_def_userAtk
                    #ainfo["health"] = 0
                    #ainfo["selected_enemy_player"] = "None"
                    #ainfo["infight_status"] = "Death"
                    #binfo["infight_status"] = "Death"
                    #ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                    #ainfo["deaths"] = ainfo["deaths"] + 1
                    ainfo["count_played"] = ainfo["count_played"] + 1
                    #ainfo["count_draw"] = ainfo["count_draw"] + 1
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    #if ainfo["gold"] < 0:
                    #    ainfo["gold"] = 0
                    #    ainfo["health"] = 0
                    #    ainfo["selected_enemy_player"] = "None"
                    #    ainfo["infight_status"] = "False"#    fileIO("players/{}/info.json".format(author.id), "save", binfo)
                    #    return
                    #await ctx.send("Still Alive Attck Harder!")
                    return #await #skill(ctx)
            else:
                await ctx.send("You Miss!!! Attck Harder!!!")
                return #await #skill(ctx)
        else:
            await ctx.send("You Miss!!! Push Harder!!! Check your Spelling!!! You Lost The Monster")
            health = ainfo["health"] * 0.1
            ainfo["health"] -= health
            ainfo["enemyhp"] += health
            ainfo["selected_enemy_player"] = "None"
            ainfo["infight_status"] = "False"
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            #await fight(ctx)
    if user == None or user == "None":
        em = discord.Embed(description="```diff\n USE COMMAND {}skill <@username>\n Exemple: {}skill @bobtherobot 1 ```\n" .format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    print("user")
    print(user)
    print("message")
    print(message)
    print("author")
    print(author.id)
    print("memberID")
    print(user.mention)
    print("discord.Member")
    print(discord.Member)
    print("==========")
    print("==========")
    print("==========")
    print("a")
    print("author.id")
    print(author.id)
    print("==========")
    print("b1")
    print("user.id")
    print(user.id)
    print("==========")
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    #print("id")
    #print(id)
    #print("==========")
    print("message_members")
    print(message.id)
    print("==========")
    #zombieKill = ainfo["zombie_kill_count"]
    #ainfo["zombie_kill_count_total"] += 1
    zombie_kill_count_total = ainfo["zombie_kill_count_total"]
    #await ctx.send(f'{user.mention}\'s id: `{user.id}`')
    if ainfo["race"] and ainfo["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    try:
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
        bname = binfo["name"]
        aname = ainfo["name"]
        print("Anywhere 19858 DUserId....new 21208 here <<<this line")
        print(user.id)
    except:
        em = discord.Embed(description=" `@{}` set your Char with `{}start`\n Its More Fun toghter!'\n".format(user, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        print("No Player Data")
        aname = ainfo["name"]
        print(aname)
        print(Prefix)
        zombie_kill_count_total = ainfo["zombie_kill_count_total"] + 1
        print(zombie_kill_count_total)
        #ainfo["zombie_kill_count_total"] += 1
        #ainfo = fileIO("players/{}/info.json".format(author.id), "load")
        print("csafe")
        cinfo = fileIO("global/info.json".format(author.id), "load")
        GuildAttackera = ainfo["castle_guild_name"]
        gainexpguild =  0.01 * ainfo["lvl"]
        if GuildAttackera == "RockCastle": #ROCK info
            cinfo["Rock_Castle"]["castle_guild_lvl"] += gainexpguild
            #castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
        if GuildAttackera == "ScissorCastle":    #SCISSOR
            cinfo["Scissor_Castle"]["castle_guild_lvl"] += gainexpguild
        if GuildAttackera == "PaperCastle": #PAPER
            cinfo["Paper_Castle"]["castle_guild_lvl"] += gainexpguild
        #fileIO("players/{}/info.json".format(user.id), "save", binfo)
        ainfo["zombie_kill_count_total"] = zombie_kill_count_total
        em = discord.Embed(description="\n`{}` You Killed a Zombie `{}st`\n to see your Stats!'\n Zombies are Not realy helpfull in Having a Community based RPG Game\n Your Zombie Kills Total `{}` \n as well a bit Castle EXP `{}` \n".format(aname, Prefix,zombie_kill_count_total,gainexpguild), color=discord.Color.blue())
        await ctx.send(embed=em)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("global/info.json".format(author.id), "save", cinfo)
        print("safe")
        return
        #binfo = fileIO("players/{}/info.json".format(user.id), "load") info
        #Zombies
    try:
        all_drop_attack = ainfo["all_drop_attack"]
        all_drop_defence = ainfo["all_drop_defence"]
        all_drop = ainfo["all_drop"]
        all_drop_boco = ainfo["all_drop_boco"]
        all_drop_exp = ainfo["all_drop_exp"]
        all_drop_food = ainfo["all_drop_food"]
        all_drop_gold = ainfo["all_drop_gold"]
        all_drop_hp = ainfo["all_drop_hp"]
        all_drop_key = ainfo["all_drop_key"]
        all_drop_metal = ainfo["all_drop_metal"]
        all_drop_mp = ainfo["all_drop_mp"]
        all_drop_pot = ainfo["all_drop_pot"]
        all_drop_skexp = ainfo["all_drop_skexp"]
        all_drop_sp = ainfo["all_drop_sp"]
        all_drop_stone = ainfo["all_drop_stone"]
        all_drop_wood = ainfo["all_drop_wood"]
        all_attack = ainfo["all_total_base_attack"]
        all_total_base_attack = ainfo["all_total_base_attack"]
        all_defence = ainfo["all_defence"]
        all_total_base_defence = ainfo["all_total_base_defence"]
        all_total_base_drop = ainfo["all_total_base_drop"]
        all_total_base_boco = ainfo["all_total_base_boco"]
        all_total_base_exp = ainfo["all_total_base_exp"]
        all_total_base_food = ainfo["all_total_base_food"]
        all_total_base_gold = ainfo["all_total_base_gold"]
        all_total_base_hp = ainfo["all_total_base_hp"]
        all_total_base_key = ainfo["all_total_base_key"]
        all_total_base_metal = ainfo["all_total_base_metal"]
        all_total_base_mp = ainfo["all_total_base_mp"]
        all_total_base_pot = ainfo["all_total_base_pot"]
        all_total_base_skexp = ainfo["all_total_base_skexp"]
        all_total_base_sp = ainfo["all_total_base_sp"]
        all_total_base_stone = ainfo["all_total_base_stone"]
        all_total_base_people = ainfo["all_total_base_people"]
        all_total_base_wood = ainfo["all_total_base_wood"]
        all_total_base_door = ainfo["all_total_base_door"]
        max_dmg = ainfo["all_total_base_attack"]
        max_def = ainfo["all_total_base_defence"]
        user_dmg = ainfo["all_total_base_attack"]
        all_total_base_drop = ainfo["all_total_base_drop"]
        all_total_base_boco = ainfo["all_total_base_boco"]
        all_total_base_exp = ainfo["all_total_base_exp"]
        all_total_base_food = ainfo["all_total_base_food"]
        all_total_base_gold = ainfo["all_total_base_gold"]
        all_total_base_hp = ainfo["all_total_base_hp"]
        all_total_base_key = ainfo["all_total_base_key"]
        all_total_base_metal = ainfo["all_total_base_metal"]
        all_total_base_mp = ainfo["all_total_base_mp"]
        all_total_base_pot = ainfo["all_total_base_pot"]
        all_total_base_skexp = ainfo["all_total_base_skexp"]
        all_total_base_sp = ainfo["all_total_base_sp"]
        all_total_base_stone = ainfo["all_total_base_stone"]
        all_total_base_people = ainfo["all_total_base_people"]
        all_total_base_wood = ainfo["all_total_base_wood"]
        all_total_base_door = ainfo["all_total_base_door"]
    except:
        print("No a data ")
    if numskill == "0":
        print("skill NUMBER ) TRUE")
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            #await ctx.send("List of Available Skills".format(ctx.message.author.id))
            em000 = discord.Embed(description="\n What Skill would you like to use?\n Select by Number\n\n ".format(bname,Prefix,Prefix), color=discord.Color.red())
            await ctx.send(embed=em000)
            ##
            #
            castle_guild_name = ainfo["castle_guild_name"]
            if castle_guild_name == "ScissorCastle":
                print("ScissorCastle")
                castle_guild_name = "ScissorCastle"
                castle_guild_name = castle_guild_name
            if castle_guild_name == "PaperCastle":
                print("PaperCastleCastle")
                castle_guild_name = "PaperCastle"
                castle_guild_name_name = "PaperCastle"
                if ainfo["where"] == rock_training_chat :
                    ainfo["location"] = "Newbe Training Ground"
                    minus_gain = 10
                if ainfo["where"] == rock_training_bot :
                    ainfo["location"] = "Newbe Training Ground"
                    minus_gain = 1
                    plus_gain = 2
                if ainfo["where"] == rock_market_chat :
                    ainfo["location"] = "Market I"
                    minus_gain = 20
                    plus_gain = 2
                if ainfo["where"] == rock_market_bot :
                    ainfo["location"] = "Market I"
                    minus_gain = 2
                    plus_gain = 2
                if ainfo["where"] == rock_field_chat :
                    ainfo["location"] = "Rock Field II"
                    minus_gain = 40
                    plus_gain = 2
                if ainfo["where"] == rock_field_bot :
                    ainfo["location"] = "Rock Field II"
                    minus_gain = 4
                    plus_gain = 2
                if ainfo["where"] == rock_forest_chat :
                    ainfo["location"] = "Rock Forest IV"
                    minus_gain = 80
                    plus_gain = 2
                if ainfo["where"] == rock_forest_bot :
                    ainfo["location"] = "Rock Forest IV"
                    minus_gain = 8
                    plus_gain = 2
                if ainfo["where"] == rock_castle_chat :
                    ainfo["location"] = "Player Battle Field"
                    minus_gain = 160
                    plus_gain = 2
                if ainfo["where"] == rock_castle_bot :
                    ainfo["location"] = "Player Battle Field"
                    minus_gain = 16
                    plus_gain = 2
                if ainfo["where"] == rock_mine_chat :
                    ainfo["location"] = "Rock Mine III"
                    minus_gain = 320
                    plus_gain = 2
                if ainfo["where"] == rock_mine_bot :
                    ainfo["location"] = "Rock Mine III"
                    minus_gain = 32
                    plus_gain = 2
                if ainfo["where"] == rock_dungon_chat :
                    ainfo["location"] = "Rock Dungon V"
                    minus_gain = 640
                    plus_gain = 2
                if ainfo["where"] == rock_dungon_bot :
                    ainfo["location"] = "Rock Dungon V"
                    minus_gain = 64
                    plus_gain = 2
                all_total_base_metal
                total_Minus = minus_gain
                all_total_base_drop -= total_Minus
            if castle_guild_name == "RockCastle":
                print("RockCastleCastle")
                castle_guild_name = castle_guild_name
            if ainfo["where"] == rock_training_chat :
                ainfo["location"] = "Newbe Training Ground"
            if ainfo["where"] == rock_training_bot :
                ainfo["location"] = "Newbe Training Ground"
            if ainfo["where"] == rock_market_chat :
                ainfo["location"] = "Market I"
            if ainfo["where"] == rock_market_bot :
                ainfo["location"] = "Market I"
            if ainfo["where"] == rock_field_chat :
                ainfo["location"] = "Rock Field II"
            if ainfo["where"] == rock_field_bot :
                ainfo["location"] = "Rock Field II"
            if ainfo["where"] == rock_forest_chat :
                ainfo["location"] = "Rock Forest IV"
            if ainfo["where"] == rock_forest_bot :
                ainfo["location"] = "Rock Forest IV"
            if ainfo["where"] == rock_castle_chat :
                ainfo["location"] = "Player Battle Field"
            if ainfo["where"] == rock_castle_bot :
                ainfo["location"] = "Player Battle Field"
            if ainfo["where"] == rock_mine_chat :
                ainfo["location"] = "Rock Mine III"
            if ainfo["where"] == rock_mine_bot :
                ainfo["location"] = "Rock Mine III"
            if ainfo["where"] == rock_dungon_chat :
                ainfo["location"] = "Rock Dungon V"
            if ainfo["where"] == rock_dungon_bot :
                ainfo["location"] = "Rock Dungon V"
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            if ainfo["health"] < int("0") or ainfo["health"] == int("0") :
                await ctx.send("<@{}> You cannot fight with 0 HP.\n- USE COMMAND:\n- {}rest or {}use \n To refill POWER!\n or buy some pot!".format(author.id,Prefix,Prefix))
                return
            if ainfo["stamina"] < int("9"):
                await ctx.send("<@{}> You cannot fight with so low Stamina.\n- USE COMMAND:\n+ {}rest\n To refill POWER!\n or buy some pot!".format(author.id,Prefix))
                return
            if ainfo["selected_enemy_player"] == "None" and ainfo["infight_status"] == "False":
                location = ainfo["location"]
            else:
                all_drop_attack = binfo["all_drop_attack"]
                all_drop_defence = binfo["all_drop_defence"]
                all_drop = binfo["all_drop"]
                all_drop_boco = binfo["all_drop_boco"]
                all_drop_exp = binfo["all_drop_exp"]
                all_drop_food = binfo["all_drop_food"]
                all_drop_gold = binfo["all_drop_gold"]
                all_drop_hp = binfo["all_drop_hp"]
                all_drop_key = binfo["all_drop_key"]
                all_drop_metal = binfo["all_drop_metal"]
                all_drop_mp = binfo["all_drop_mp"]
                all_drop_pot = binfo["all_drop_pot"]
                all_drop_skexp = binfo["all_drop_skexp"]
                all_drop_sp = binfo["all_drop_sp"]
                all_drop_stone = binfo["all_drop_stone"]
                all_drop_wood = binfo["all_drop_wood"]
                all_attack = binfo["all_total_base_attack"]
                all_total_base_attack = binfo["all_total_base_attack"]
                all_defence = binfo["all_defence"]
                all_total_base_defence = binfo["all_total_base_defence"]
                all_total_base_drop = binfo["all_total_base_drop"]
                all_total_base_boco = binfo["all_total_base_boco"]
                all_total_base_exp = binfo["all_total_base_exp"]
                all_total_base_food = binfo["all_total_base_food"]
                all_total_base_gold = binfo["all_total_base_gold"]
                all_total_base_hp = binfo["all_total_base_hp"]
                all_total_base_key = binfo["all_total_base_key"]
                all_total_base_metal = binfo["all_total_base_metal"]
                all_total_base_mp = binfo["all_total_base_mp"]
                all_total_base_pot = binfo["all_total_base_pot"]
                all_total_base_skexp = binfo["all_total_base_skexp"]
                all_total_base_sp = binfo["all_total_base_sp"]
                all_total_base_stone = binfo["all_total_base_stone"]
                all_total_base_people = binfo["all_total_base_people"]
                all_total_base_wood = binfo["all_total_base_wood"]
                all_total_base_door = binfo["all_total_base_door"]
                max_dmg = binfo["all_total_base_attack"]
                max_def = binfo["all_total_base_defence"]
                user_dmg = binfo["all_total_base_attack"]
                all_total_base_drop = binfo["all_total_base_drop"]
                all_total_base_boco = binfo["all_total_base_boco"]
                all_total_base_exp = binfo["all_total_base_exp"]
                all_total_base_food = binfo["all_total_base_food"]
                all_total_base_gold = binfo["all_total_base_gold"]
                all_total_base_hp = binfo["all_total_base_hp"]
                all_total_base_key = binfo["all_total_base_key"]
                all_total_base_metal = binfo["all_total_base_metal"]
                all_total_base_mp = binfo["all_total_base_mp"]
                all_total_base_pot = binfo["all_total_base_pot"]
                all_total_base_skexp = binfo["all_total_base_skexp"]
                all_total_base_sp = binfo["all_total_base_sp"]
                all_total_base_stone = binfo["all_total_base_stone"]
                all_total_base_people = binfo["all_total_base_people"]
                all_total_base_wood = binfo["all_total_base_wood"]
                all_total_base_door = binfo["all_total_base_door"]
                user_location = binfo["location"]
                user_enemy = ainfo["selected_enemy_player"]
                user_enemy_hp = binfo["enemyhp"]
                user_skills = binfo["skills_learned"]
                max_dmg = binfo["all_total_base_attack"]
                bbvalue_stats = binfo["bbvalue_stats"]
                #max_dmg = binfo["equipluk"]
                max_def = binfo["all_total_base_defence"]
                user_hp = binfo["health"]
                user_name = binfo["name"]
                eexp_min = monster_xp_min
                eexp_max = monster_xp_max
                enemy_exp = random.randint(eexp_min, eexp_max)
                monster_attack = multyThis * 0.5
                monster_defence = multyThis * 0.5
                monster_health = multyThis * 0.5
                #monster_name
            if ainfo["infight_status"] == "True":
                embed = discord.Embed(title=monster_cardid, description=description, color=0x00ff00)
                embed.add_field(name=monster_name, value="Level : {}\n HP : {}-{}\n Attack : {}-{}\n Defence : {}-{}\n Drop : {}-{}\n exp : {}-{}\n".format(monster_level, ehp_min, ehp_max , edmg_min, edmg_max,edef_min, edef_max, edrop_min, edrop_max,eexp_min, eexp_max), inline=False)
                embed.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(monster_img))
                #embed.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(monster_img))
                await ctx.send(embed=embed)
                await ctx.send("You wonder around {} and find {}, would you like to use your Skill?\\n\n**Y** or **N**".format(info["location"], bname))
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer1 = await bot.wait_for("message", check=pred)
                values = ["y", "Y", "yes", "Yes", "1", "0", "n", "N", "no", "No", "q", "Q", "{}skill".format(Prefix)]
                if str(answer1.content) in values:
                    if answer1.content == "{}skill".format(Prefix):
                        return
                    if answer1.content == "y" or answer1.content == "Y" or answer1.content == "yes" or answer1.content == "Yes" or answer1.content == "1" or answer1.content == "Q"  or answer1.content == "q":
                        all_drop_attack = ainfo["all_drop_attack"]
                        all_drop_defence = ainfo["all_drop_defence"]
                        all_drop = ainfo["all_drop"]
                        all_drop_boco = ainfo["all_drop_boco"]
                        all_drop_exp = ainfo["all_drop_exp"]
                        all_drop_food = ainfo["all_drop_food"]
                        all_drop_gold = ainfo["all_drop_gold"]
                        all_drop_hp = ainfo["all_drop_hp"]
                        all_drop_key = ainfo["all_drop_key"]
                        all_drop_metal = ainfo["all_drop_metal"]
                        all_drop_mp = ainfo["all_drop_mp"]
                        all_drop_pot = ainfo["all_drop_pot"]
                        all_drop_skexp = ainfo["all_drop_skexp"]
                        all_drop_sp = ainfo["all_drop_sp"]
                        all_drop_stone = ainfo["all_drop_stone"]
                        all_drop_wood = ainfo["all_drop_wood"]
                        all_attack = ainfo["all_total_base_attack"]
                        all_total_base_attack = ainfo["all_total_base_attack"]
                        all_defence = ainfo["all_defence"]
                        all_total_base_defence = ainfo["all_total_base_defence"]
                        all_total_base_drop = ainfo["all_total_base_drop"]
                        all_total_base_boco = ainfo["all_total_base_boco"]
                        all_total_base_exp = ainfo["all_total_base_exp"]
                        all_total_base_food = ainfo["all_total_base_food"]
                        all_total_base_gold = ainfo["all_total_base_gold"]
                        all_total_base_hp = ainfo["all_total_base_hp"]
                        all_total_base_key = ainfo["all_total_base_key"]
                        all_total_base_metal = ainfo["all_total_base_metal"]
                        all_total_base_mp = ainfo["all_total_base_mp"]
                        all_total_base_pot = ainfo["all_total_base_pot"]
                        all_total_base_skexp = ainfo["all_total_base_skexp"]
                        all_total_base_sp = ainfo["all_total_base_sp"]
                        all_total_base_stone = ainfo["all_total_base_stone"]
                        all_total_base_people = ainfo["all_total_base_people"]
                        all_total_base_wood = ainfo["all_total_base_wood"]
                        all_total_base_door = ainfo["all_total_base_door"]
                        max_dmg = ainfo["all_total_base_attack"]
                        max_def = ainfo["all_total_base_defence"]
                        user_dmg = ainfo["all_total_base_attack"]
                        all_total_base_drop = ainfo["all_total_base_drop"]
                        all_total_base_boco = ainfo["all_total_base_boco"]
                        all_total_base_exp = ainfo["all_total_base_exp"]
                        all_total_base_food = ainfo["all_total_base_food"]
                        all_total_base_gold = ainfo["all_total_base_gold"]
                        all_total_base_hp = ainfo["all_total_base_hp"]
                        all_total_base_key = ainfo["all_total_base_key"]
                        all_total_base_metal = ainfo["all_total_base_metal"]
                        all_total_base_mp = ainfo["all_total_base_mp"]
                        all_total_base_pot = ainfo["all_total_base_pot"]
                        all_total_base_skexp = ainfo["all_total_base_skexp"]
                        all_total_base_sp = ainfo["all_total_base_sp"]
                        all_total_base_stone = ainfo["all_total_base_stone"]
                        all_total_base_people = ainfo["all_total_base_people"]
                        all_total_base_wood = ainfo["all_total_base_wood"]
                        all_total_base_door = ainfo["all_total_base_door"]
                        user_location = ainfo["location"]
                        user_enemy = ainfo["selected_enemy_player"]
                        user_enemy_hp = ainfo["enemyhp"]
                        user_skills = ainfo["skills_learned"]
                        max_dmg = ainfo["all_total_base_attack"]
                        bbvalue_stats = ainfo["bbvalue_stats"]
                        #max_dmg = ainfo["equipluk"]
                        max_def = ainfo["all_total_base_defence"]
                        user_hp = ainfo["health"]
                        user_name = ainfo["name"]
                        #Define wep dmg.
                        #aainfo = fileIO("core/enemies/weapons.json", "load")
                        #user_wep_define = aainfo[user_wep]
                        #max_dmg = aainfo[user_wep]["max_dmg"]
                        #Define enemy stats.
                        #enemy_define = ainfo["selected_enemy_player"]
                        #enemy_define_hp = ainfo["enemyhp"]
                        #selected_enemy_hp = ainfo["selected_enemy_hp"]
                        #aainfo["selected_enemy_player"] = enemy
                        #aainfo["infight_status"] = "True"
                        #aainfo["enemyhp"] = enemy_hp
                        #aainfo["selected_enemy_hp"] = enemy_hp
                        #aainfo["selected_enemy_drop"] = enemy_drop
                        #aainfo["selected_enemy_cardid"] = monster_cardid
                        #aainfo["selected_enemy_lvl"] = monster_level
                        #aainfo["selected_enemy_name"] = monster_name
                        #aainfo["enemyhp"] = enemy_hp
                        #aainfo["selected_enemy_hp"] = enemy_hp
                        #aainfo["selected_enemy_drop"] = enemy_drop
                        #aainfo["selected_enemy_cardid"] = monster_cardid
                        #aainfo["selected_enemy_lvl"] = monster_level
                        #aainfo["selected_enemy_name"] = monster_name
                        try:
                            enemy_min_dmg = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_dmg"]
                            enemy_max_dmg = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_dmg"]
                        except:
                            enemy_min_dmg = 1
                            enemy_max_dmg = 100
                        enemy_dmg = random.randint(enemy_min_dmg, enemy_max_dmg)
                        try:
                            enemy_min_def = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_def"]
                            enemy_max_def = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_def"]
                        except:
                            enemy_min_def = 1
                            enemy_max_def = 100
                        enemy_def = random.randint(enemy_min_def, enemy_max_def)
                        try:
                            enemy_gold = einfo["locations"]["Forest"]["enemies"][user_enemy]["gold_drop"]
                        except:
                            enemy_gold = 10
                        try:
                            enemy_xp_min = einfo["locations"]["Forest"]["enemies"][user_enemy]["min_xp"]
                            enemy_xp_max = einfo["locations"]["Forest"]["enemies"][user_enemy]["max_xp"]
                        except:
                            enemy_xp_min = 1
                            enemy_xp_max = 100
                        enemy_xp = random.randint(enemy_xp_min, enemy_xp_max)
                        monster_cardid = ainfo["selected_enemy_player"]
                        enemy_define = binfo["name"]
                        monster_level = binfo["lvl"]
                        #ainfo["selected_enemy_player"] = enemy_define
                        ainfo["selected_enemy_player"] = binfo["name"]
                        #enemy_dmg = info["selected_enemy_attack"]
                        #enemy_def = info["selected_enemy_defence"]
                        #selected_enemy_hp = info["selected_enemy_hp"]
                        #enemy_xp = info["selected_enemy_exp"]
                        enemy_drop = ainfo["selected_enemy_drop"]
                        showEXP1 = enemy_xp + all_total_base_exp
                        embed1 = discord.Embed(title=monster_cardid, color=0x00ff00)
                        embed1.add_field(name=enemy_define, value="\n Enamy: {}\n Level : {}\n HPFull : {}\n HP: {}\n **Attack : {}\n Defence : {} **\n Drop : {}\n GoldDrop: {}\n \n exp : {} \n Boosted : {}\n\n ** Your HP **\n HP: {}\n ** Defence: {}\n Attack: {} **\nSkil".format(monster_cardid, monster_level, round(selected_enemy_hp, 0), round(enemy_hp, 0), round(enemy_dmg, 0), round(enemy_def, 0), round(enemy_drop, 0), round(enemy_gold, 0), round(enemy_xp, 0), round(showEXP1, 0), round(user_hp, 0 ), round(max_def, 0), round(max_dmg), inline=False))
                        await ctx.send(embed=embed1)
                        options = []
                        options_show = []
                        options.append("{}fight".format(Prefix))
                        if "Attack" in ainfo["skills_learned"]:
                            options.append("Attack")
                            options.append("attack")
                            options.append("1")
                            options_show.append("1)Attack")
                        if "Swing" in ainfo["skills_learned"]:
                            options.append("Swing")
                            options.append("swing")
                            options.append("2")
                            options_show.append("2)Swing")
                        if "Cast" in ainfo["skills_learned"]:
                            options.append("Cast")
                            options.append("cast")
                            options.append("3")
                            options_show.append("3)Cast")
                        if "Shoot" in ainfo["skills_learned"]:
                            options.append("Shoot")
                            options.append("shoot")
                            options.append("4")
                            options_show.append("4)Shoot")
                        if "Run" in ainfo["skills_learned"]:
                            options.append("Run")
                            options.append("run")
                            options.append("5")
                            options_show.append("5)Run")
                        if "Punch" in ainfo["skills_learned"]:
                            options.append("Punch")
                            options.append("punch")
                            options.append("6")
                            options_show.append("6)Punch")
                        if "Fire Ball" in ainfo["skills_learned"]:
                            options.append("Fire Ball")
                            options.append("fire ball")
                            options.append("7")
                            options_show.append("7)Fire Ball")
                        if "Heal" in ainfo["skills_learned"]:
                            options.append("Heal")
                            options.append("heal")
                            options.append("8")
                            options_show.append("8)Heal")
                        if "Arrow Shower" in ainfo["skills_learned"]:
                            options.append("Arrow Shower")
                            options.append("arrow shower")
                            options.append("9")
                            options_show.append("9)Arrow Shower")
                        if "Steel Arrow" in ainfo["skills_learned"]:
                            options.append("Steel Arrow")
                            options.append("steel arrow")
                            options.append("10")
                            options_show.append("10)Steel Arrow")
                        if "Trap" in ainfo["skills_learned"]:
                            options.append("Trap")
                            options.append("trap")
                            options.append("11")
                            options_show.append("11)trap")
                        if "Shield" in ainfo["skills_learned"]:
                            options.append("Shield")
                            options.append("shield")
                            options.append("12")
                            options_show.append("12)shield")
                        if "Knock Back" in ainfo["skills_learned"]:
                            options.append("Knock Back")
                            options.append("knock Back")
                            options.append("13")
                            options_show.append("13)knock Back")
                        if "Brute Force" in ainfo["skills_learned"]:
                            options.append("Brute Force")
                            options.append("brute Force")
                            options.append("14")
                            options_show.append("14)brute Force")
                        if "Water Ball" in ainfo["skills_learned"]:
                            options.append("Water Ball")
                            options.append("water Ball")
                            options.append("15")
                            options_show.append("15)water Ball")
                        if "Wind Ball" in ainfo["skills_learned"]:
                            options.append("Wind Ball")
                            options.append("wind ball")
                            options.append("16")
                            options_show.append("16)Wind Ball")
                        if "Earth Ball" in ainfo["skills_learned"]:
                            options.append("Earth Ball")
                            options.append("earth ball")
                            options.append("17")
                            options_show.append("17)Earth Ball")
                        if "Pickpocket" in ainfo["skills_learned"]:
                            options.append("Pickpocket")
                            options.append("pickpocket")
                            options.append("18")
                            options_show.append("18)Pickpocket")
                        if "Hide" in ainfo["skills_learned"]:
                            options.append("Hide")
                            options.append("hide")
                            options.append("19")
                            options_show.append("19)Hide")
                        if "Jump" in ainfo["skills_learned"]:
                            options.append("Jump")
                            options.append("jump")
                            options.append("20")
                            options_show.append("20)Jump")
                        if "Secret Dagger" in ainfo["skills_learned"]:
                            options.append("Secret Dagger")
                            options.append("secret dagger")
                            options.append("21")
                            options_show.append("21)secret Dagger")
                        if "Scan" in ainfo["skills_learned"]:
                            options.append("Scan")
                            options.append("scan")
                            options.append("22")
                            options_show.append("22)Scan")
                        if "Crack" in ainfo["skills_learned"]:
                            options.append("Crack")
                            options.append("crack")
                            options.append("23")
                            options_show.append("23)Crack")
                        if "DDOS" in ainfo["skills_learned"]:
                            options.append("DDOS")
                            options.append("ddos")
                            options.append("24")
                            options_show.append("24)DDOS")
                        if "Install" in ainfo["skills_learned"]:
                            options.append("Install")
                            options.append("Install")
                            options.append("25")
                            options_show.append("25)Install")
                        await ctx.send("<@{}> what skill would you like to use?\n\n`Choose one`\n{}".format(author.id, "\n".join(options_show)))
                        def pred(m):
                            return m.author == message.author and m.channel == message.channel
                        answer1 = await bot.wait_for("message", check=pred)
                        if str(answer1.content) in options:
                            skillDMG = 1
                            user_dmgSELFBurn = 0
                            if answer1.content == "Attack" or answer1.content == "attack" or answer1.content == "1":
                                move = "Attack"
                                skillDMG = 1
                                user_dmgSELFBurn = 0
                            elif answer1.content == "Swing" or answer1.content == "swing" or answer1.content == "2":
                                move = "Swing"
                                skillDMG = ainfo["health"] * ainfo["sklvl"]
                                user_dmgSELFBurn = 0
                            elif answer1.content == "Cast" or answer1.content == "cast" or answer1.content == "3":
                                move = "Cast"
                                skillDMG = 1
                                user_dmgSELFBurn = 0
                            elif answer1.content == "Shoot" or answer1.content == "shoot" or answer1.content == "4":
                                move = "Shoot"
                                skillDMG = 1
                                user_dmgSELFBurn = 0
                            elif answer1.content == "Fire Ball" or answer1.content == "sire ball" or answer1.content == "7":
                                move = "Fire Ball"
                                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                                    skillDMG = 1
                                    user_dmgSELFBurn = 0
                                    if ainfo["class"] == "Mage":
                                        if ainfo["ammo_fire_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_fire_pot"] = ainfo["ammo_fire_pot"] - 1
                                            if randomNUm == 0 or  randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                            if randomNUm == 6:
                                                skillDMG = user_dmg * 4
                                        else:
                                            await ctx.send("You have not enaf FirePots".format())
                                            return
                                    else:
                                        if ainfo["ammo_fire_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_fire_pot"] = ainfo["ammo_fire_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 2
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["mana"] = ainfo["mana"] - 10 * ainfo["lvl"]
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 1
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                                            await ctx.send("You are not a Mage and burnt yourself!\n- {}".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("You have not enaf FirePots".format())
                                            return
                                else:
                                    await ctx.send("You Need a Staff for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Heal" or answer1.content == "heal" or answer1.content == "8":
                                move = "Heal"
                                skillDMG = 1
                                user_dmgSELFBurn = 0
                                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                                    randomNum = random.randint(10, 40)
                                    user_hp = ainfo["healthmax"]
                                    ainfo["health"] = ainfo["healthmax"]
                                    ainfo["mana"] = ainfo["manamax"]
                                    ainfo["stamina"] = ainfo["staminamax"]
                                    ainfo["mana"] = ainfo["mana"] - randomNum * ainfo["lvl"]
                                    ainfo["stamina"] = ainfo["stamina"] - randomNum * ainfo["lvl"]
                                else:
                                    await ctx.send("You Need a Staff for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Punch" or answer1.content == "punch" or answer1.content == "6":
                                    move = "Punch"
                            elif answer1.content == "Run" or answer1.content == "run" or answer1.content == "5":
                                move = "Run"
                                ainfo["selected_enemy_player"] = "None"
                                ainfo["infight_status"] = "False"
                                ainfo["runaways"] = ainfo["runaways"] + 1
                                fileIO("players/{}/ainfo.json".format(author.id), "save", ainfo)
                                await ctx.send("```diff\n- You could escape.```".format())
                                return
                            elif answer1.content == "Arrow Shower" or answer1.content == "arrow shower" or answer1.content == "9":
                                move = "Arrow Shower"
                                if slot0 == "Bow" or slot1 == "Bow" or slot2 == "Bow" or slot3 == "Bow" or slot4 == "Bow" or slot5 == "Bow" or slot6 == "Bow" or slot7 == "Bow" or slot8 == "Bow" or slot9 == "Bow" or slot10 == "Bow" or slot11 == "Bow" or slot12 == "Bow" or slot13 == "Bow" or slot14 == "Bow" or slot15 == "Bow" or slot16 == "Bow" or slot17 == "Bow" or slot18 == "Bow" or slot19 == "Bow" or slot20 == "Bow"or slot21 == "Bow"or slot22 == "Bow"or slot23 == "Bow"or slot24 == "Bow"or slot25 == "Bow" or slot0 == "Wood Bow" or slot1 == "Wood Bow" or slot2 == "Wood Bow" or slot3 == "Wood Bow" or slot4 == "Wood Bow" or slot5 == "Wood Bow" or slot6 == "Wood Bow" or slot7 == "Wood Bow" or slot8 == "Wood Bow" or slot9 == "Wood Bow" or slot10 == "Wood Bow" or slot11 == "Wood Bow" or slot12 == "Wood Bow" or slot13 == "Wood Bow" or slot14 == "Wood Bow" or slot15 == "Wood Bow" or slot16 == "Wood Bow" or slot17 == "Wood Bow" or slot18 == "Wood Bow" or slot19 == "Wood Bow" or slot20 == "Wood Bow"or slot21 == "Wood Bow"or slot22 == "Wood Bow"or slot23 == "Wood Bow"or slot24 == "Wood Bow"or slot25 == "Wood Bow" or slot0 == "Stone Bow" or slot1 == "Stone Bow" or slot2 == "Stone Bow" or slot3 == "Stone Bow" or slot4 == "Stone Bow" or slot5 == "Stone Bow" or slot6 == "Stone Bow" or slot7 == "Stone Bow" or slot8 == "Stone Bow" or slot9 == "Stone Bow" or slot10 == "Stone Bow" or slot11 == "Stone Bow" or slot12 == "Stone Bow" or slot13 == "Stone Bow" or slot14 == "Stone Bow" or slot15 == "Stone Bow" or slot16 == "Stone Bow" or slot17 == "Stone Bow" or slot18 == "Stone Bow" or slot19 == "Stone Bow" or slot20 == "Stone Bow"or slot21 == "Stone Bow"or slot22 == "Stone Bow"or slot23 == "Stone Bow"or slot24 == "Stone Bow"or slot25 == "Stone Bow" or slot0 == "Gold Bow" or slot1 == "Gold Bow" or slot2 == "Gold Bow" or slot3 == "Gold Bow" or slot4 == "Gold Bow" or slot5 == "Gold Bow" or slot6 == "Gold Bow" or slot7 == "Gold Bow" or slot8 == "Gold Bow" or slot9 == "Gold Bow" or slot10 == "Gold Bow" or slot11 == "Gold Bow" or slot12 == "Gold Bow" or slot13 == "Gold Bow" or slot14 == "Gold Bow" or slot15 == "Gold Bow" or slot16 == "Gold Bow" or slot17 == "Gold Bow" or slot18 == "Gold Bow" or slot19 == "Gold Bow" or slot20 == "Gold Bow"or slot21 == "Gold Bow"or slot22 == "Gold Bow"or slot23 == "Gold Bow"or slot24 == "Gold Bow"or slot25 == "Gold Bow" or slot0 == "Metal Bow" or slot1 == "Metal Bow" or slot2 == "Metal Bow" or slot3 == "Metal Bow" or slot4 == "Metal Bow" or slot5 == "Metal Bow" or slot6 == "Metal Bow" or slot7 == "Metal Bow" or slot8 == "Metal Bow" or slot9 == "Metal Bow" or slot10 == "Metal Bow" or slot11 == "Metal Bow" or slot12 == "Metal Bow" or slot13 == "Metal Bow" or slot14 == "Metal Bow" or slot15 == "Metal Bow" or slot16 == "Metal Bow" or slot17 == "Metal Bow" or slot18 == "Metal Bow" or slot19 == "Metal Bow" or slot20 == "Metal Bow"or slot21 == "Metal Bow"or slot22 == "Metal Bow"or slot23 == "Metal Bow"or slot24 == "Metal Bow"or slot25 == "Metal Bow" or slot0 == "Bobo Bow" or slot1 == "Bobo Bow" or slot2 == "Bobo Bow" or slot3 == "Bobo Bow" or slot4 == "Bobo Bow" or slot5 == "Bobo Bow" or slot6 == "Bobo Bow" or slot7 == "Bobo Bow" or slot8 == "Bobo Bow" or slot9 == "Bobo Bow" or slot10 == "Bobo Bow" or slot11 == "Bobo Bow" or slot12 == "Bobo Bow" or slot13 == "Bobo Bow" or slot14 == "Bobo Bow" or slot15 == "Bobo Bow" or slot16 == "Bobo Bow" or slot17 == "Bobo Bow" or slot18 == "Bobo Bow" or slot19 == "Bobo Bow" or slot20 == "Bobo Bow"or slot21 == "Bobo Bow"or slot22 == "Bobo Bow"or slot23 == "Bobo Bow"or slot24 == "Bobo Bow"or slot25 == "Bobo Bow" :
                                    if ainfo["class"] == "Archer":
                                        if ainfo["ammo_arrow"] >= 5:
                                            randomNUm = random.randint(1, 6)
                                            howManyArrows = random.randint(5, 100)
                                            if howManyArrows >= ainfo["ammo_arrow"]:
                                                howManyArrows = ainfo["ammo_arrow"]
                                            ainfo["ammo_arrow"] = ainfo["ammo_arrow"] - howManyArrows
                                            user_dmgDif = user_dmg / 100
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg + user_dmgDif * 4
                                                ainfo["stamina"] = ainfo["stamina"] - 10 * ainfo["lvl"]
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg + user_dmgDif * 8
                                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                            if randomNUm == 6:
                                                skillDMG = user_dmg + user_dmgDif * 16
                                                ainfo["stamina"] = ainfo["stamina"] - 40 * ainfo["lvl"]
                                        else:
                                            await ctx.send("You have not enaf Arrows!".format())
                                            return
                                    else:
                                        if ainfo["ammo_arrow"] >= 5:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_arrow"] = ainfo["ammo_arrow"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 2
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 2
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["stamina"] = ainfo["stamina"] - 10 * ainfo["lvl"]
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 4
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 1
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("You have not enaf Arrows".format())
                                            return
                                else:
                                    await ctx.send("You Need a Bow for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Steel Arrow" or answer1.content == "steel arrow" or answer1.content == "10":
                                move = "Steel Arrow"
                                if slot0 == "Bow" or slot1 == "Bow" or slot2 == "Bow" or slot3 == "Bow" or slot4 == "Bow" or slot5 == "Bow" or slot6 == "Bow" or slot7 == "Bow" or slot8 == "Bow" or slot9 == "Bow" or slot10 == "Bow" or slot11 == "Bow" or slot12 == "Bow" or slot13 == "Bow" or slot14 == "Bow" or slot15 == "Bow" or slot16 == "Bow" or slot17 == "Bow" or slot18 == "Bow" or slot19 == "Bow" or slot20 == "Bow"or slot21 == "Bow"or slot22 == "Bow"or slot23 == "Bow"or slot24 == "Bow"or slot25 == "Bow" or slot0 == "Wood Bow" or slot1 == "Wood Bow" or slot2 == "Wood Bow" or slot3 == "Wood Bow" or slot4 == "Wood Bow" or slot5 == "Wood Bow" or slot6 == "Wood Bow" or slot7 == "Wood Bow" or slot8 == "Wood Bow" or slot9 == "Wood Bow" or slot10 == "Wood Bow" or slot11 == "Wood Bow" or slot12 == "Wood Bow" or slot13 == "Wood Bow" or slot14 == "Wood Bow" or slot15 == "Wood Bow" or slot16 == "Wood Bow" or slot17 == "Wood Bow" or slot18 == "Wood Bow" or slot19 == "Wood Bow" or slot20 == "Wood Bow"or slot21 == "Wood Bow"or slot22 == "Wood Bow"or slot23 == "Wood Bow"or slot24 == "Wood Bow"or slot25 == "Wood Bow" or slot0 == "Stone Bow" or slot1 == "Stone Bow" or slot2 == "Stone Bow" or slot3 == "Stone Bow" or slot4 == "Stone Bow" or slot5 == "Stone Bow" or slot6 == "Stone Bow" or slot7 == "Stone Bow" or slot8 == "Stone Bow" or slot9 == "Stone Bow" or slot10 == "Stone Bow" or slot11 == "Stone Bow" or slot12 == "Stone Bow" or slot13 == "Stone Bow" or slot14 == "Stone Bow" or slot15 == "Stone Bow" or slot16 == "Stone Bow" or slot17 == "Stone Bow" or slot18 == "Stone Bow" or slot19 == "Stone Bow" or slot20 == "Stone Bow"or slot21 == "Stone Bow"or slot22 == "Stone Bow"or slot23 == "Stone Bow"or slot24 == "Stone Bow"or slot25 == "Stone Bow" or slot0 == "Gold Bow" or slot1 == "Gold Bow" or slot2 == "Gold Bow" or slot3 == "Gold Bow" or slot4 == "Gold Bow" or slot5 == "Gold Bow" or slot6 == "Gold Bow" or slot7 == "Gold Bow" or slot8 == "Gold Bow" or slot9 == "Gold Bow" or slot10 == "Gold Bow" or slot11 == "Gold Bow" or slot12 == "Gold Bow" or slot13 == "Gold Bow" or slot14 == "Gold Bow" or slot15 == "Gold Bow" or slot16 == "Gold Bow" or slot17 == "Gold Bow" or slot18 == "Gold Bow" or slot19 == "Gold Bow" or slot20 == "Gold Bow"or slot21 == "Gold Bow"or slot22 == "Gold Bow"or slot23 == "Gold Bow"or slot24 == "Gold Bow"or slot25 == "Gold Bow" or slot0 == "Metal Bow" or slot1 == "Metal Bow" or slot2 == "Metal Bow" or slot3 == "Metal Bow" or slot4 == "Metal Bow" or slot5 == "Metal Bow" or slot6 == "Metal Bow" or slot7 == "Metal Bow" or slot8 == "Metal Bow" or slot9 == "Metal Bow" or slot10 == "Metal Bow" or slot11 == "Metal Bow" or slot12 == "Metal Bow" or slot13 == "Metal Bow" or slot14 == "Metal Bow" or slot15 == "Metal Bow" or slot16 == "Metal Bow" or slot17 == "Metal Bow" or slot18 == "Metal Bow" or slot19 == "Metal Bow" or slot20 == "Metal Bow"or slot21 == "Metal Bow"or slot22 == "Metal Bow"or slot23 == "Metal Bow"or slot24 == "Metal Bow"or slot25 == "Metal Bow" or slot0 == "Bobo Bow" or slot1 == "Bobo Bow" or slot2 == "Bobo Bow" or slot3 == "Bobo Bow" or slot4 == "Bobo Bow" or slot5 == "Bobo Bow" or slot6 == "Bobo Bow" or slot7 == "Bobo Bow" or slot8 == "Bobo Bow" or slot9 == "Bobo Bow" or slot10 == "Bobo Bow" or slot11 == "Bobo Bow" or slot12 == "Bobo Bow" or slot13 == "Bobo Bow" or slot14 == "Bobo Bow" or slot15 == "Bobo Bow" or slot16 == "Bobo Bow" or slot17 == "Bobo Bow" or slot18 == "Bobo Bow" or slot19 == "Bobo Bow" or slot20 == "Bobo Bow"or slot21 == "Bobo Bow"or slot22 == "Bobo Bow"or slot23 == "Bobo Bow"or slot24 == "Bobo Bow"or slot25 == "Bobo Bow":
                                    if ainfo["class"] == "Archer":
                                        if ainfo["ammo_arrow_steal"] >= 1:
                                            randomNUm = random.randint(0, 7)
                                            ainfo["ammo_arrow_steal"] = ainfo["ammo_arrow_steal"] - 1
                                            user_dmgDif = user_dmg / 100
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                enemy_def = 8
                                                skillDMG = user_dmg + user_dmgDif * 1
                                            if randomNUm == 4 or randomNUm == 5:
                                                enemy_def = 4
                                                skillDMG = user_dmg + user_dmgDif * 2
                                            if randomNUm == 6:
                                                enemy_def = 2
                                                skillDMG = user_dmg + user_dmgDif * 4
                                            if randomNUm == 7:
                                                enemy_def = 1
                                                skillDMG = user_dmg + user_dmgDif * 4
                                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                        else:
                                            await ctx.send("You have not enaf Arrows!".format())
                                    else:
                                        if ainfo["ammo_arrow_steal"] >= 1:
                                            randomNUm = random.randint(0, 7)
                                            ainfo["ammo_arrow_steal"] = ainfo["ammo_arrow_steal"] - 1
                                            user_dmgDif = user_dmg / 100
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                enemy_def /= 128
                                                skillDMG = user_dmg + user_dmgDif * 1
                                                ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                            if randomNUm == 4 or randomNUm == 5:
                                                enemy_def /= 64
                                                skillDMG = user_dmg + user_dmgDif * 2
                                                ainfo["stamina"] = ainfo["stamina"] - 40 * ainfo["lvl"]
                                            if randomNUm == 6:
                                                enemy_def /= 32
                                                skillDMG = user_dmg + user_dmgDif * 4
                                                ainfo["stamina"] = ainfo["stamina"] - 80 * ainfo["lvl"]
                                            if randomNUm == 7:
                                                enemy_def /= 16
                                                skillDMG = user_dmg + user_dmgDif * 4
                                                ainfo["stamina"] = ainfo["stamina"] - 160 * ainfo["lvl"]
                                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("You have not enaf Arrows".format())
                                else:
                                    await ctx.send("You Need a Bow for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Trap" or answer1.content == "trap" or answer1.content == "11":
                                move = "Cast"
                                if ainfo["class"] == "Archer":
                                    if ainfo["ammo_arrow_trap"] >= 1:
                                        ainfo["ammo_arrow_trap"] = ainfo["ammo_arrow_trap"] - 1
                                        if ainfo["status_trap"] == "False":
                                            ainfo["status_trap"] = "True"
                                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                        else:
                                            await ctx.send("Your Trap is active!".format())
                                    else:
                                        await ctx.send("You have not enaf Traps!".format())
                                else:
                                    if ainfo["ammo_arrow_trap"] >= 1:
                                        ainfo["ammo_arrow_trap"] = ainfo["ammo_arrow_trap"] - 1
                                        if ainfo["status_trap"] == "False":
                                            user_dmgSELFBurn = user_dmg
                                            user_dmgSELFBurn /= 10
                                            user_enemy_hp -= user_dmgSELFBurn
                                            ainfo["status_trap"] = "True"
                                            ainfo["stamina"] = ainfo["stamina"] - 40 * ainfo["lvl"]
                                            await ctx.send("You are not an Archer and hurrt yourself!\n- {}\n Anyway your Trap is active now".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("Your Trap is active! BUt you got some Damage! Beware you are not an Archer".format())
                                    else:
                                        await ctx.send("You have not enaf Traps!".format())
                            elif answer1.content == "Shield" or answer1.content == "shield" or answer1.content == "12":
                                move = "Shield"
                                if slot0 == "Amore" or slot1 == "Amore" or slot2 == "Amore" or slot3 == "Amore" or slot4 == "Amore" or slot5 == "Amore" or slot6 == "Amore" or slot7 == "Amore" or slot8 == "Amore" or slot9 == "Amore" or slot10 == "Amore" or slot11 == "Amore" or slot12 == "Amore" or slot13 == "Amore" or slot14 == "Amore" or slot15 == "Amore" or slot16 == "Amore" or slot17 == "Amore" or slot18 == "Amore" or slot19 == "Amore" or slot20 == "Amore"or slot21 == "Amore"or slot22 == "Amore"or slot23 == "Amore"or slot24 == "Amore"or slot25 == "Amore" or slot0 == "Wood Amore" or slot1 == "Wood Amore" or slot2 == "Wood Amore" or slot3 == "Wood Amore" or slot4 == "Wood Amore" or slot5 == "Wood Amore" or slot6 == "Wood Amore" or slot7 == "Wood Amore" or slot8 == "Wood Amore" or slot9 == "Wood Amore" or slot10 == "Wood Amore" or slot11 == "Wood Amore" or slot12 == "Wood Amore" or slot13 == "Wood Amore" or slot14 == "Wood Amore" or slot15 == "Wood Amore" or slot16 == "Wood Amore" or slot17 == "Wood Amore" or slot18 == "Wood Amore" or slot19 == "Wood Amore" or slot20 == "Wood Amore"or slot21 == "Wood Amore"or slot22 == "Wood Amore"or slot23 == "Wood Amore"or slot24 == "Wood Amore"or slot25 == "Wood Amore" or slot0 == "Stone Amore" or slot1 == "Stone Amore" or slot2 == "Stone Amore" or slot3 == "Stone Amore" or slot4 == "Stone Amore" or slot5 == "Stone Amore" or slot6 == "Stone Amore" or slot7 == "Stone Amore" or slot8 == "Stone Amore" or slot9 == "Stone Amore" or slot10 == "Stone Amore" or slot11 == "Stone Amore" or slot12 == "Stone Amore" or slot13 == "Stone Amore" or slot14 == "Stone Amore" or slot15 == "Stone Amore" or slot16 == "Stone Amore" or slot17 == "Stone Amore" or slot18 == "Stone Amore" or slot19 == "Stone Amore" or slot20 == "Stone Amore"or slot21 == "Stone Amore"or slot22 == "Stone Amore"or slot23 == "Stone Amore"or slot24 == "Stone Amore"or slot25 == "Stone Amore" or slot0 == "Gold Amore" or slot1 == "Gold Amore" or slot2 == "Gold Amore" or slot3 == "Gold Amore" or slot4 == "Gold Amore" or slot5 == "Gold Amore" or slot6 == "Gold Amore" or slot7 == "Gold Amore" or slot8 == "Gold Amore" or slot9 == "Gold Amore" or slot10 == "Gold Amore" or slot11 == "Gold Amore" or slot12 == "Gold Amore" or slot13 == "Gold Amore" or slot14 == "Gold Amore" or slot15 == "Gold Amore" or slot16 == "Gold Amore" or slot17 == "Gold Amore" or slot18 == "Gold Amore" or slot19 == "Gold Amore" or slot20 == "Gold Amore"or slot21 == "Gold Amore"or slot22 == "Gold Amore"or slot23 == "Gold Amore"or slot24 == "Gold Amore"or slot25 == "Gold Amore" or slot0 == "Metal Amore" or slot1 == "Metal Amore" or slot2 == "Metal Amore" or slot3 == "Metal Amore" or slot4 == "Metal Amore" or slot5 == "Metal Amore" or slot6 == "Metal Amore" or slot7 == "Metal Amore" or slot8 == "Metal Amore" or slot9 == "Metal Amore" or slot10 == "Metal Amore" or slot11 == "Metal Amore" or slot12 == "Metal Amore" or slot13 == "Metal Amore" or slot14 == "Metal Amore" or slot15 == "Metal Amore" or slot16 == "Metal Amore" or slot17 == "Metal Amore" or slot18 == "Metal Amore" or slot19 == "Metal Amore" or slot20 == "Metal Amore"or slot21 == "Metal Amore"or slot22 == "Metal Amore"or slot23 == "Metal Amore"or slot24 == "Metal Amore"or slot25 == "Metal Amore" or slot0 == "Bobo Amore" or slot1 == "Bobo Amore" or slot2 == "Bobo Amore" or slot3 == "Bobo Amore" or slot4 == "Bobo Amore" or slot5 == "Bobo Amore" or slot6 == "Bobo Amore" or slot7 == "Bobo Amore" or slot8 == "Bobo Amore" or slot9 == "Bobo Amore" or slot10 == "Bobo Amore" or slot11 == "Bobo Amore" or slot12 == "Bobo Amore" or slot13 == "Bobo Amore" or slot14 == "Bobo Amore" or slot15 == "Bobo Amore" or slot16 == "Bobo Amore" or slot17 == "Bobo Amore" or slot18 == "Bobo Amore" or slot19 == "Bobo Amore" or slot20 == "Bobo Amore"or slot21 == "Bobo Amore"or slot22 == "Bobo Amore"or slot23 == "Bobo Amore"or slot24 == "Bobo Amore"or slot25 == "Bobo Amore" or  slot0 == "Amore I" or slot1 == "Amore I" or slot2 == "Amore I" or slot3 == "Amore I" or slot4 == "Amore I" or slot5 == "Amore I" or slot6 == "Amore I" or slot7 == "Amore I" or slot8 == "Amore I" or slot9 == "Amore I" or slot10 == "Amore I" or slot11 == "Amore I" or slot12 == "Amore I" or slot13 == "Amore I" or slot14 == "Amore I" or slot15 == "Amore I" or slot16 == "Amore I" or slot17 == "Amore I" or slot18 == "Amore I" or slot19 == "Amore I" or slot20 == "Amore I"or slot21 == "Amore I"or slot22 == "Amore I"or slot23 == "Amore I"or slot24 == "Amore I"or slot25 == "Amore I" or  slot0 == "Amore II" or slot1 == "Amore II" or slot2 == "Amore II" or slot3 == "Amore II" or slot4 == "Amore II" or slot5 == "Amore II" or slot6 == "Amore II" or slot7 == "Amore II" or slot8 == "Amore II" or slot9 == "Amore II" or slot10 == "Amore II" or slot11 == "Amore II" or slot12 == "Amore II" or slot13 == "Amore II" or slot14 == "Amore II" or slot15 == "Amore II" or slot16 == "Amore II" or slot17 == "Amore II" or slot18 == "Amore II" or slot19 == "Amore II" or slot20 == "Amore II"or slot21 == "Amore II"or slot22 == "Amore II"or slot23 == "Amore II"or slot24 == "Amore II"or slot25 == "Amore II" or  slot0 == "Amore III" or slot1 == "Amore III" or slot2 == "Amore III" or slot3 == "Amore III" or slot4 == "Amore III" or slot5 == "Amore III" or slot6 == "Amore III" or slot7 == "Amore III" or slot8 == "Amore III" or slot9 == "Amore III" or slot10 == "Amore III" or slot11 == "Amore III" or slot12 == "Amore III" or slot13 == "Amore III" or slot14 == "Amore III" or slot15 == "Amore III" or slot16 == "Amore III" or slot17 == "Amore III" or slot18 == "Amore III" or slot19 == "Amore III" or slot20 == "Amore III"or slot21 == "Amore III"or slot22 == "Amore III"or slot23 == "Amore III"or slot24 == "Amore III"or slot25 == "Amore III" or  slot0 == "Amore IV" or slot1 == "Amore IV" or slot2 == "Amore IV" or slot3 == "Amore IV" or slot4 == "Amore IV" or slot5 == "Amore IV" or slot6 == "Amore IV" or slot7 == "Amore IV" or slot8 == "Amore IV" or slot9 == "Amore IV" or slot10 == "Amore IV" or slot11 == "Amore IV" or slot12 == "Amore IV" or slot13 == "Amore IV" or slot14 == "Amore IV" or slot15 == "Amore IV" or slot16 == "Amore IV" or slot17 == "Amore IV" or slot18 == "Amore IV" or slot19 == "Amore IV" or slot20 == "Amore IV"or slot21 == "Amore IV"or slot22 == "Amore IV"or slot23 == "Amore IV"or slot24 == "Amore IV"or slot25 == "Amore IV" or  slot0 == "Amore V" or slot1 == "Amore V" or slot2 == "Amore V" or slot3 == "Amore V" or slot4 == "Amore V" or slot5 == "Amore V" or slot6 == "Amore V" or slot7 == "Amore V" or slot8 == "Amore V" or slot9 == "Amore V" or slot10 == "Amore V" or slot11 == "Amore V" or slot12 == "Amore V" or slot13 == "Amore V" or slot14 == "Amore V" or slot15 == "Amore V" or slot16 == "Amore V" or slot17 == "Amore V" or slot18 == "Amore V" or slot19 == "Amore V" or slot20 == "Amore V"or slot21 == "Amore V"or slot22 == "Amore V"or slot23 == "Amore V"or slot24 == "Amore V"or slot25 == "Amore V":
                                    if ainfo["class"] == "Paladin":
                                        randomNUm = random.randint(10, 40)
                                        ainfo["ammo_arrow_steal"] = ainfo["ammo_arrow_steal"] - 1
                                        max_def = max_def * randomNUm
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            max_def = max_def * randomNUm
                                        if randomNUm == 4 or randomNUm == 5:
                                            max_def = max_def * randomNUm
                                        if randomNUm == 6:
                                            max_def = max_def * randomNUm
                                        if randomNUm == 7:
                                            max_def = max_def * randomNUm
                                        ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                    else:
                                        await ctx.send("You are not a Paladin your Protection is wasteless!".format())
                                else:
                                    await ctx.send("You Need an Amore for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Knock Back" or answer1.content == "knock back" or answer1.content == "13":
                                move = "Knock Back"
                                if slot0 == "Amore" or slot1 == "Amore" or slot2 == "Amore" or slot3 == "Amore" or slot4 == "Amore" or slot5 == "Amore" or slot6 == "Amore" or slot7 == "Amore" or slot8 == "Amore" or slot9 == "Amore" or slot10 == "Amore" or slot11 == "Amore" or slot12 == "Amore" or slot13 == "Amore" or slot14 == "Amore" or slot15 == "Amore" or slot16 == "Amore" or slot17 == "Amore" or slot18 == "Amore" or slot19 == "Amore" or slot20 == "Amore"or slot21 == "Amore"or slot22 == "Amore"or slot23 == "Amore"or slot24 == "Amore"or slot25 == "Amore" or slot0 == "Wood Amore" or slot1 == "Wood Amore" or slot2 == "Wood Amore" or slot3 == "Wood Amore" or slot4 == "Wood Amore" or slot5 == "Wood Amore" or slot6 == "Wood Amore" or slot7 == "Wood Amore" or slot8 == "Wood Amore" or slot9 == "Wood Amore" or slot10 == "Wood Amore" or slot11 == "Wood Amore" or slot12 == "Wood Amore" or slot13 == "Wood Amore" or slot14 == "Wood Amore" or slot15 == "Wood Amore" or slot16 == "Wood Amore" or slot17 == "Wood Amore" or slot18 == "Wood Amore" or slot19 == "Wood Amore" or slot20 == "Wood Amore"or slot21 == "Wood Amore"or slot22 == "Wood Amore"or slot23 == "Wood Amore"or slot24 == "Wood Amore"or slot25 == "Wood Amore" or slot0 == "Stone Amore" or slot1 == "Stone Amore" or slot2 == "Stone Amore" or slot3 == "Stone Amore" or slot4 == "Stone Amore" or slot5 == "Stone Amore" or slot6 == "Stone Amore" or slot7 == "Stone Amore" or slot8 == "Stone Amore" or slot9 == "Stone Amore" or slot10 == "Stone Amore" or slot11 == "Stone Amore" or slot12 == "Stone Amore" or slot13 == "Stone Amore" or slot14 == "Stone Amore" or slot15 == "Stone Amore" or slot16 == "Stone Amore" or slot17 == "Stone Amore" or slot18 == "Stone Amore" or slot19 == "Stone Amore" or slot20 == "Stone Amore"or slot21 == "Stone Amore"or slot22 == "Stone Amore"or slot23 == "Stone Amore"or slot24 == "Stone Amore"or slot25 == "Stone Amore" or slot0 == "Gold Amore" or slot1 == "Gold Amore" or slot2 == "Gold Amore" or slot3 == "Gold Amore" or slot4 == "Gold Amore" or slot5 == "Gold Amore" or slot6 == "Gold Amore" or slot7 == "Gold Amore" or slot8 == "Gold Amore" or slot9 == "Gold Amore" or slot10 == "Gold Amore" or slot11 == "Gold Amore" or slot12 == "Gold Amore" or slot13 == "Gold Amore" or slot14 == "Gold Amore" or slot15 == "Gold Amore" or slot16 == "Gold Amore" or slot17 == "Gold Amore" or slot18 == "Gold Amore" or slot19 == "Gold Amore" or slot20 == "Gold Amore"or slot21 == "Gold Amore"or slot22 == "Gold Amore"or slot23 == "Gold Amore"or slot24 == "Gold Amore"or slot25 == "Gold Amore" or slot0 == "Metal Amore" or slot1 == "Metal Amore" or slot2 == "Metal Amore" or slot3 == "Metal Amore" or slot4 == "Metal Amore" or slot5 == "Metal Amore" or slot6 == "Metal Amore" or slot7 == "Metal Amore" or slot8 == "Metal Amore" or slot9 == "Metal Amore" or slot10 == "Metal Amore" or slot11 == "Metal Amore" or slot12 == "Metal Amore" or slot13 == "Metal Amore" or slot14 == "Metal Amore" or slot15 == "Metal Amore" or slot16 == "Metal Amore" or slot17 == "Metal Amore" or slot18 == "Metal Amore" or slot19 == "Metal Amore" or slot20 == "Metal Amore"or slot21 == "Metal Amore"or slot22 == "Metal Amore"or slot23 == "Metal Amore"or slot24 == "Metal Amore"or slot25 == "Metal Amore" or slot0 == "Bobo Amore" or slot1 == "Bobo Amore" or slot2 == "Bobo Amore" or slot3 == "Bobo Amore" or slot4 == "Bobo Amore" or slot5 == "Bobo Amore" or slot6 == "Bobo Amore" or slot7 == "Bobo Amore" or slot8 == "Bobo Amore" or slot9 == "Bobo Amore" or slot10 == "Bobo Amore" or slot11 == "Bobo Amore" or slot12 == "Bobo Amore" or slot13 == "Bobo Amore" or slot14 == "Bobo Amore" or slot15 == "Bobo Amore" or slot16 == "Bobo Amore" or slot17 == "Bobo Amore" or slot18 == "Bobo Amore" or slot19 == "Bobo Amore" or slot20 == "Bobo Amore"or slot21 == "Bobo Amore"or slot22 == "Bobo Amore"or slot23 == "Bobo Amore"or slot24 == "Bobo Amore"or slot25 == "Bobo Amore" or  slot0 == "Amore I" or slot1 == "Amore I" or slot2 == "Amore I" or slot3 == "Amore I" or slot4 == "Amore I" or slot5 == "Amore I" or slot6 == "Amore I" or slot7 == "Amore I" or slot8 == "Amore I" or slot9 == "Amore I" or slot10 == "Amore I" or slot11 == "Amore I" or slot12 == "Amore I" or slot13 == "Amore I" or slot14 == "Amore I" or slot15 == "Amore I" or slot16 == "Amore I" or slot17 == "Amore I" or slot18 == "Amore I" or slot19 == "Amore I" or slot20 == "Amore I"or slot21 == "Amore I"or slot22 == "Amore I"or slot23 == "Amore I"or slot24 == "Amore I"or slot25 == "Amore I" or  slot0 == "Amore II" or slot1 == "Amore II" or slot2 == "Amore II" or slot3 == "Amore II" or slot4 == "Amore II" or slot5 == "Amore II" or slot6 == "Amore II" or slot7 == "Amore II" or slot8 == "Amore II" or slot9 == "Amore II" or slot10 == "Amore II" or slot11 == "Amore II" or slot12 == "Amore II" or slot13 == "Amore II" or slot14 == "Amore II" or slot15 == "Amore II" or slot16 == "Amore II" or slot17 == "Amore II" or slot18 == "Amore II" or slot19 == "Amore II" or slot20 == "Amore II"or slot21 == "Amore II"or slot22 == "Amore II"or slot23 == "Amore II"or slot24 == "Amore II"or slot25 == "Amore II" or  slot0 == "Amore III" or slot1 == "Amore III" or slot2 == "Amore III" or slot3 == "Amore III" or slot4 == "Amore III" or slot5 == "Amore III" or slot6 == "Amore III" or slot7 == "Amore III" or slot8 == "Amore III" or slot9 == "Amore III" or slot10 == "Amore III" or slot11 == "Amore III" or slot12 == "Amore III" or slot13 == "Amore III" or slot14 == "Amore III" or slot15 == "Amore III" or slot16 == "Amore III" or slot17 == "Amore III" or slot18 == "Amore III" or slot19 == "Amore III" or slot20 == "Amore III"or slot21 == "Amore III"or slot22 == "Amore III"or slot23 == "Amore III"or slot24 == "Amore III"or slot25 == "Amore III" or  slot0 == "Amore IV" or slot1 == "Amore IV" or slot2 == "Amore IV" or slot3 == "Amore IV" or slot4 == "Amore IV" or slot5 == "Amore IV" or slot6 == "Amore IV" or slot7 == "Amore IV" or slot8 == "Amore IV" or slot9 == "Amore IV" or slot10 == "Amore IV" or slot11 == "Amore IV" or slot12 == "Amore IV" or slot13 == "Amore IV" or slot14 == "Amore IV" or slot15 == "Amore IV" or slot16 == "Amore IV" or slot17 == "Amore IV" or slot18 == "Amore IV" or slot19 == "Amore IV" or slot20 == "Amore IV"or slot21 == "Amore IV"or slot22 == "Amore IV"or slot23 == "Amore IV"or slot24 == "Amore IV"or slot25 == "Amore IV" or  slot0 == "Amore V" or slot1 == "Amore V" or slot2 == "Amore V" or slot3 == "Amore V" or slot4 == "Amore V" or slot5 == "Amore V" or slot6 == "Amore V" or slot7 == "Amore V" or slot8 == "Amore V" or slot9 == "Amore V" or slot10 == "Amore V" or slot11 == "Amore V" or slot12 == "Amore V" or slot13 == "Amore V" or slot14 == "Amore V" or slot15 == "Amore V" or slot16 == "Amore V" or slot17 == "Amore V" or slot18 == "Amore V" or slot19 == "Amore V" or slot20 == "Amore V"or slot21 == "Amore V"or slot22 == "Amore V"or slot23 == "Amore V"or slot24 == "Amore V"or slot25 == "Amore V":
                                    if ainfo["class"] == "Paladin":
                                        if ainfo["status_confuse"] == "False":
                                            ainfo["status_confuse"] = "True"
                                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                            await ctx.send("You knock sso hard that your enamy is confuessed!".format())
                                        else:
                                            await ctx.send("Your enamy is still confuessed!".format())
                                    else:
                                        await ctx.send("You not a Paladin...your power is to weak!".format())
                                else:
                                    await ctx.send("You Need an Amore for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Brute Force" or answer1.content == "brute force" or answer1.content == "14":
                                move = "Brute Force"
                                if slot0 == "Sword" or slot1 == "Sword" or slot2 == "Sword" or slot3 == "Sword" or slot4 == "Sword" or slot5 == "Sword" or slot6 == "Sword" or slot7 == "Sword" or slot8 == "Sword" or slot9 == "Sword" or slot10 == "Sword" or slot11 == "Sword" or slot12 == "Sword" or slot13 == "Sword" or slot14 == "Sword" or slot15 == "Sword" or slot16 == "Sword" or slot17 == "Sword" or slot18 == "Sword" or slot19 == "Sword" or slot20 == "Sword"or slot21 == "Sword"or slot22 == "Sword"or slot23 == "Sword"or slot24 == "Sword"or slot25 == "Sword" or slot0 == "Wood Sword" or slot1 == "Wood Sword" or slot2 == "Wood Sword" or slot3 == "Wood Sword" or slot4 == "Wood Sword" or slot5 == "Wood Sword" or slot6 == "Wood Sword" or slot7 == "Wood Sword" or slot8 == "Wood Sword" or slot9 == "Wood Sword" or slot10 == "Wood Sword" or slot11 == "Wood Sword" or slot12 == "Wood Sword" or slot13 == "Wood Sword" or slot14 == "Wood Sword" or slot15 == "Wood Sword" or slot16 == "Wood Sword" or slot17 == "Wood Sword" or slot18 == "Wood Sword" or slot19 == "Wood Sword" or slot20 == "Wood Sword"or slot21 == "Wood Sword"or slot22 == "Wood Sword"or slot23 == "Wood Sword"or slot24 == "Wood Sword"or slot25 == "Wood Sword" or slot0 == "Stone Sword" or slot1 == "Stone Sword" or slot2 == "Stone Sword" or slot3 == "Stone Sword" or slot4 == "Stone Sword" or slot5 == "Stone Sword" or slot6 == "Stone Sword" or slot7 == "Stone Sword" or slot8 == "Stone Sword" or slot9 == "Stone Sword" or slot10 == "Stone Sword" or slot11 == "Stone Sword" or slot12 == "Stone Sword" or slot13 == "Stone Sword" or slot14 == "Stone Sword" or slot15 == "Stone Sword" or slot16 == "Stone Sword" or slot17 == "Stone Sword" or slot18 == "Stone Sword" or slot19 == "Stone Sword" or slot20 == "Stone Sword"or slot21 == "Stone Sword"or slot22 == "Stone Sword"or slot23 == "Stone Sword"or slot24 == "Stone Sword"or slot25 == "Stone Sword" or slot0 == "Gold Sword" or slot1 == "Gold Sword" or slot2 == "Gold Sword" or slot3 == "Gold Sword" or slot4 == "Gold Sword" or slot5 == "Gold Sword" or slot6 == "Gold Sword" or slot7 == "Gold Sword" or slot8 == "Gold Sword" or slot9 == "Gold Sword" or slot10 == "Gold Sword" or slot11 == "Gold Sword" or slot12 == "Gold Sword" or slot13 == "Gold Sword" or slot14 == "Gold Sword" or slot15 == "Gold Sword" or slot16 == "Gold Sword" or slot17 == "Gold Sword" or slot18 == "Gold Sword" or slot19 == "Gold Sword" or slot20 == "Gold Sword"or slot21 == "Gold Sword"or slot22 == "Gold Sword"or slot23 == "Gold Sword"or slot24 == "Gold Sword"or slot25 == "Gold Sword" or slot0 == "Metal Sword" or slot1 == "Metal Sword" or slot2 == "Metal Sword" or slot3 == "Metal Sword" or slot4 == "Metal Sword" or slot5 == "Metal Sword" or slot6 == "Metal Sword" or slot7 == "Metal Sword" or slot8 == "Metal Sword" or slot9 == "Metal Sword" or slot10 == "Metal Sword" or slot11 == "Metal Sword" or slot12 == "Metal Sword" or slot13 == "Metal Sword" or slot14 == "Metal Sword" or slot15 == "Metal Sword" or slot16 == "Metal Sword" or slot17 == "Metal Sword" or slot18 == "Metal Sword" or slot19 == "Metal Sword" or slot20 == "Metal Sword"or slot21 == "Metal Sword"or slot22 == "Metal Sword"or slot23 == "Metal Sword"or slot24 == "Metal Sword"or slot25 == "Metal Sword" or slot0 == "Bobo Sword" or slot1 == "Bobo Sword" or slot2 == "Bobo Sword" or slot3 == "Bobo Sword" or slot4 == "Bobo Sword" or slot5 == "Bobo Sword" or slot6 == "Bobo Sword" or slot7 == "Bobo Sword" or slot8 == "Bobo Sword" or slot9 == "Bobo Sword" or slot10 == "Bobo Sword" or slot11 == "Bobo Sword" or slot12 == "Bobo Sword" or slot13 == "Bobo Sword" or slot14 == "Bobo Sword" or slot15 == "Bobo Sword" or slot16 == "Bobo Sword" or slot17 == "Bobo Sword" or slot18 == "Bobo Sword" or slot19 == "Bobo Sword" or slot20 == "Bobo Sword"or slot21 == "Bobo Sword"or slot22 == "Bobo Sword"or slot23 == "Bobo Sword"or slot24 == "Bobo Sword"or slot25 == "Bobo Sword":
                                    if ainfo["class"] == "Paladin":
                                        randomNUm = random.randint(1, 6)
                                        howManyArrows = random.randint(5, 100)
                                        user_dmgDif = user_dmg / 100
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 6:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                    else:
                                        randomNUm = random.randint(1, 6)
                                        if randomNUm == 0 or  randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg * randomNUm
                                            user_dmgSELFBurn = user_dmg
                                            user_dmgSELFBurn /= randomNUm
                                            user_enemy_hp -= user_dmgSELFBurn
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg * randomNUm
                                            user_dmgSELFBurn = user_dmg
                                            user_dmgSELFBurn /= randomNUm
                                            user_enemy_hp -= user_dmgSELFBurn
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        await ctx.send("You are not an Paladin and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                else:
                                    await ctx.send("You Need an Sword for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Water Ball" or answer1.content == "water ball" or answer1.content == "15":
                                move = "Water Ball"
                                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                                    if ainfo["class"] == "Mage":
                                        if ainfo["ammo_water_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_water_pot"] = ainfo["ammo_water_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                            if randomNUm == 6:
                                                skillDMG = user_dmg * 4
                                        else:
                                            await ctx.send("You have not enaf WaterPots".format())
                                            return
                                    else:
                                        if ainfo["ammo_water_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_water_pot"] = ainfo["ammo_water_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 2
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["mana"] = ainfo["mana"] - 10 * ainfo["lvl"]
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 1
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("You have not enaf WaterPots".format())
                                            return
                                else:
                                    await ctx.send("You Need a Staff for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Wind Ball" or answer1.content == "wind ball" or answer1.content == "16":
                                move = "Wind Ball"
                                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                                    if ainfo["class"] == "Mage":
                                        if ainfo["ammo_wind_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_wind_pot"] = ainfo["ammo_wind_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                            if randomNUm == 6:
                                                skillDMG = user_dmg * 4
                                        else:
                                            await ctx.send("You have not enaf WindPots".format())
                                            return
                                    else:
                                        if ainfo["ammo_wind_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_wind_pot"] = ainfo["ammo_wind_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 2
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["mana"] = ainfo["mana"] - 10 * ainfo["lvl"]
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= 1
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("You have not enaf WindPots".format())
                                            return
                                else:
                                    await ctx.send("You Need a Staff for that Move".format())
                                    return #skill(ctx)
                            if answer1.content == "Earth Ball" or answer1.content == "earth ball" or answer1.content == "17":
                                move = "Earth Ball"
                                if slot0 == "Staff" or slot1 == "Staff" or slot2 == "Staff" or slot3 == "Staff" or slot4 == "Staff" or slot5 == "Staff" or slot6 == "Staff" or slot7 == "Staff" or slot8 == "Staff" or slot9 == "Staff" or slot10 == "Staff" or slot11 == "Staff" or slot12 == "Staff" or slot13 == "Staff" or slot14 == "Staff" or slot15 == "Staff" or slot16 == "Staff" or slot17 == "Staff" or slot18 == "Staff" or slot19 == "Staff" or slot20 == "Staff"or slot21 == "Staff"or slot22 == "Staff"or slot23 == "Staff"or slot24 == "Staff"or slot25 == "Staff" or slot0 == "Wood Staff" or slot1 == "Wood Staff" or slot2 == "Wood Staff" or slot3 == "Wood Staff" or slot4 == "Wood Staff" or slot5 == "Wood Staff" or slot6 == "Wood Staff" or slot7 == "Wood Staff" or slot8 == "Wood Staff" or slot9 == "Wood Staff" or slot10 == "Wood Staff" or slot11 == "Wood Staff" or slot12 == "Wood Staff" or slot13 == "Wood Staff" or slot14 == "Wood Staff" or slot15 == "Wood Staff" or slot16 == "Wood Staff" or slot17 == "Wood Staff" or slot18 == "Wood Staff" or slot19 == "Wood Staff" or slot20 == "Wood Staff"or slot21 == "Wood Staff"or slot22 == "Wood Staff"or slot23 == "Wood Staff"or slot24 == "Wood Staff"or slot25 == "Wood Staff" or slot0 == "Stone Staff" or slot1 == "Stone Staff" or slot2 == "Stone Staff" or slot3 == "Stone Staff" or slot4 == "Stone Staff" or slot5 == "Stone Staff" or slot6 == "Stone Staff" or slot7 == "Stone Staff" or slot8 == "Stone Staff" or slot9 == "Stone Staff" or slot10 == "Stone Staff" or slot11 == "Stone Staff" or slot12 == "Stone Staff" or slot13 == "Stone Staff" or slot14 == "Stone Staff" or slot15 == "Stone Staff" or slot16 == "Stone Staff" or slot17 == "Stone Staff" or slot18 == "Stone Staff" or slot19 == "Stone Staff" or slot20 == "Stone Staff"or slot21 == "Stone Staff"or slot22 == "Stone Staff"or slot23 == "Stone Staff"or slot24 == "Stone Staff"or slot25 == "Stone Staff" or slot0 == "Gold Staff" or slot1 == "Gold Staff" or slot2 == "Gold Staff" or slot3 == "Gold Staff" or slot4 == "Gold Staff" or slot5 == "Gold Staff" or slot6 == "Gold Staff" or slot7 == "Gold Staff" or slot8 == "Gold Staff" or slot9 == "Gold Staff" or slot10 == "Gold Staff" or slot11 == "Gold Staff" or slot12 == "Gold Staff" or slot13 == "Gold Staff" or slot14 == "Gold Staff" or slot15 == "Gold Staff" or slot16 == "Gold Staff" or slot17 == "Gold Staff" or slot18 == "Gold Staff" or slot19 == "Gold Staff" or slot20 == "Gold Staff"or slot21 == "Gold Staff"or slot22 == "Gold Staff"or slot23 == "Gold Staff"or slot24 == "Gold Staff"or slot25 == "Gold Staff" or slot0 == "Metal Staff" or slot1 == "Metal Staff" or slot2 == "Metal Staff" or slot3 == "Metal Staff" or slot4 == "Metal Staff" or slot5 == "Metal Staff" or slot6 == "Metal Staff" or slot7 == "Metal Staff" or slot8 == "Metal Staff" or slot9 == "Metal Staff" or slot10 == "Metal Staff" or slot11 == "Metal Staff" or slot12 == "Metal Staff" or slot13 == "Metal Staff" or slot14 == "Metal Staff" or slot15 == "Metal Staff" or slot16 == "Metal Staff" or slot17 == "Metal Staff" or slot18 == "Metal Staff" or slot19 == "Metal Staff" or slot20 == "Metal Staff"or slot21 == "Metal Staff"or slot22 == "Metal Staff"or slot23 == "Metal Staff"or slot24 == "Metal Staff"or slot25 == "Metal Staff" or slot0 == "Bobo Staff" or slot1 == "Bobo Staff" or slot2 == "Bobo Staff" or slot3 == "Bobo Staff" or slot4 == "Bobo Staff" or slot5 == "Bobo Staff" or slot6 == "Bobo Staff" or slot7 == "Bobo Staff" or slot8 == "Bobo Staff" or slot9 == "Bobo Staff" or slot10 == "Bobo Staff" or slot11 == "Bobo Staff" or slot12 == "Bobo Staff" or slot13 == "Bobo Staff" or slot14 == "Bobo Staff" or slot15 == "Bobo Staff" or slot16 == "Bobo Staff" or slot17 == "Bobo Staff" or slot18 == "Bobo Staff" or slot19 == "Bobo Staff" or slot20 == "Bobo Staff"or slot21 == "Bobo Staff"or slot22 == "Bobo Staff"or slot23 == "Bobo Staff"or slot24 == "Bobo Staff"or slot25 == "Bobo Staff" :
                                    if ainfo["class"] == "Mage":
                                        if ainfo["ammo_earth_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_earth_pot"] = ainfo["ammo_earth_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * 1
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * 2
                                            if randomNUm == 6:
                                                skillDMG = user_dmg * 4
                                        else:
                                            await ctx.send("You have not enaf EarthPots".format())
                                            return
                                    else:
                                        if ainfo["ammo_earth_pot"] >= 1:
                                            randomNUm = random.randint(1, 6)
                                            ainfo["ammo_earth_pot"] = ainfo["ammo_earth_pot"] - 1
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * randomNUm
                                                user_dmgSELFBurn /= randomNUm
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * randomNUm
                                                user_dmgSELFBurn = user_dmg / randomNUm
                                                ainfo["mana"] = ainfo["mana"] - 20 * ainfo["lvl"]
                                            await ctx.send("You are not a Mage and hurt yourself!\n- {}".format(user_dmgSELFBurn))
                                        else:
                                            await ctx.send("You have not enaf EarthPots".format())
                                            return
                                else:
                                    await ctx.send("You Need a Staff for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Pickpocket" or answer1.content == "pickpocket" or answer1.content == "18":
                                move = "Pickpocket"
                                name = ainfo["name"]
                                chance = random.randint(0, 6)
                                drop = random.randint(1, 10)
                                if chance == 1 or chance == 2 or chance == 3:
                                    gain = drop * 0.50
                                    ainfo["boco"] = drop + gain
                                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 50%!\n {} Bobocoin's\n```".format(name, gain), color=discord.Color.red())
                                    await ctx.send(embed=em)
                                elif chance == 4 or chance == 5:
                                    gain = drop * 0.75
                                    ainfo["boco"] = drop + gain
                                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 75% at!\n {} Bobocoin's\n```".format(name,  gain), color=discord.Color.red())
                                    await ctx.send(embed=em)
                                elif chance == 6:
                                    gain = drop * 0.9
                                    ainfo["boco"] = drop + gain
                                    em = discord.Embed(description="<@{}>\n```diff\n- You steal 90%!\n {} Bobocoin's\n```".format(name, gain), color=discord.Color.red())
                                    await ctx.send(embed=em)
                                elif chance == 0:
                                    await ctx.send("Nothing Sorry")
                                    ainfo["boco"] = ainfo["boco"]
                            elif answer1.content == "Hide" or answer1.content == "hide" or answer1.content == "19":
                                move = "Hide"
                                if ainfo["class"] == "Thief":
                                    if ainfo["status_hide"] == "False":
                                        ainfo["status_hide"] = "True"
                                        ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                        await ctx.send("You hidden between the trees!".format())
                                        return #skill(ctx)
                                    else:
                                        await ctx.send("No one spoted you so far!".format())
                                        if ainfo["class"] == "Thief":
                                            randomNUm = random.randint(1, 6)
                                            howManyArrows = random.randint(5, 100)
                                            user_dmgDif = user_dmg / 100
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_hide"] = "False"
                                            elif randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_hide"] = "False"
                                            elif randomNUm == 6:
                                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_hide"] = "False"
                                        else:
                                            randomNUm = random.randint(1, 6)
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * randomNUm
                                                #user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_hide"] = "False"
                                            elif randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * randomNUm
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= randomNUm
                                                #user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_hide"] = "False"
                                                await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                else:
                                    HideOrNot = random.randint(1, 3)
                                    if HideOrNot == "1" or HideOrNot == 1:
                                        await ctx.send("You are not a Thief!...you hide Very baddly! And a woman saw you!".format())
                                        if ainfo["status_hide"] == "False":
                                            ainfo["status_hide"] = "True"
                                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                            await ctx.send("You hidden between the trees!".format())
                                            return #skill(ctx)
                                        else:
                                            await ctx.send("No one spoted you so far!".format())
                                    elif HideOrNot == "2" or HideOrNot == 2:
                                        await ctx.send("You are not a Thief!...you hide but was direct spoted!".format())
                                    elif HideOrNot == "3" or HideOrNot == 3:
                                        await ctx.send("You are not a Thief!...you hide Very baddly!".format())
                                        if ainfo["status_hide"] == "True":
                                            ainfo["status_hide"] = "True"
                                            ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                            await ctx.send("You hidden between the trees!".format())
                                            return #skill(ctx)
                                        else:
                                            await ctx.send("No one spoted you so far!".format())
                                    else:
                                        await ctx.send("You are not a Thief!...you hide but was direct spoted!\n Thiefs have Special abbility to Attack while Hidden!".format())
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            elif answer1.content == "Jump" or answer1.content == "jump" or answer1.content == "20":
                                move = "Jump"
                                if ainfo["class"] == "Thief":
                                    if ainfo["status_jump"] == "False":
                                        ainfo["status_jump"] = "True"
                                        enemy_dmg = 0
                                        ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                        await ctx.send("You Jump in the Air!".format())
                                        return #skill(ctx)
                                    else:
                                        await ctx.send("Still on flying!".format())
                                        if ainfo["class"] == "Thief":
                                            randomNUm = random.randint(1, 6)
                                            howManyArrows = random.randint(5, 100)
                                            ainfo["meters_max"] += 10
                                            user_dmgDif = user_dmg / 100
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_jump"] = "False"
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_jump"] = "False"
                                            if randomNUm == 6:
                                                skillDMG = user_dmg + user_dmgDif * howManyArrows
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_jump"] = "False"
                                        else:
                                            randomNUm = random.randint(1, 6)
                                            if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                                skillDMG = user_dmg * randomNUm
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= randomNUm
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_jump"] = "False"
                                            if randomNUm == 4 or randomNUm == 5:
                                                skillDMG = user_dmg * randomNUm
                                                user_dmgSELFBurn = user_dmg
                                                user_dmgSELFBurn /= randomNUm
                                                user_enemy_hp -= user_dmgSELFBurn
                                                ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                                ainfo["status_jump"] = "False"
                                                await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                else:
                                    if ainfo["status_jump"] == "False":
                                        ainfo["status_jump"] = "True"
                                        enemy_dmg = 0
                                        ainfo["stamina"] = ainfo["stamina"] - 20 * ainfo["lvl"]
                                        await ctx.send("You Jump in the Air!".format())
                                        return #skill(ctx)
                                    else:
                                        await ctx.send("Still on flying!".format())
                                        ainfo["meters_max"] += 1
                                    randomNUm = random.randint(1, 6)
                                    if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                        skillDMG = user_dmg * randomNUm
                                        user_dmgSELFBurn = user_dmg+ 10
                                        user_dmgSELFBurn /= randomNUm
                                        user_enemy_hp -= user_dmgSELFBurn
                                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        ainfo["status_jump"] = "False"
                                    elif randomNUm == 4 or randomNUm == 5:
                                        skillDMG = user_dmg * randomNUm
                                        user_dmgSELFBurn = user_dmg + 100
                                        user_dmgSELFBurn /= randomNUm
                                        user_enemy_hp -= user_dmgSELFBurn
                                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        ainfo["status_jump"] = "False"
                                        await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                    else:
                                        skillDMG = user_dmg * randomNUm
                                        user_dmgSELFBurn = user_dmg + 1000
                                        user_dmgSELFBurn /= randomNUm
                                        user_enemy_hp -= user_dmgSELFBurn
                                        ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        ainfo["status_jump"] = "False"
                                        await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                            elif answer1.content == "Secret Dagger" or answer1.content == "secret dagger" or answer1.content == "21":
                                move = "Secret Dagger"
                                if slot0 == "Dagger" or slot1 == "Dagger" or slot2 == "Dagger" or slot3 == "Dagger" or slot4 == "Dagger" or slot5 == "Dagger" or slot6 == "Dagger" or slot7 == "Dagger" or slot8 == "Dagger" or slot9 == "Dagger" or slot10 == "Dagger" or slot11 == "Dagger" or slot12 == "Dagger" or slot13 == "Dagger" or slot14 == "Dagger" or slot15 == "Dagger" or slot16 == "Dagger" or slot17 == "Dagger" or slot18 == "Dagger" or slot19 == "Dagger" or slot20 == "Dagger"or slot21 == "Dagger"or slot22 == "Dagger"or slot23 == "Dagger"or slot24 == "Dagger"or slot25 == "Dagger" or slot0 == "Wood Dagger" or slot1 == "Wood Dagger" or slot2 == "Wood Dagger" or slot3 == "Wood Dagger" or slot4 == "Wood Dagger" or slot5 == "Wood Dagger" or slot6 == "Wood Dagger" or slot7 == "Wood Dagger" or slot8 == "Wood Dagger" or slot9 == "Wood Dagger" or slot10 == "Wood Dagger" or slot11 == "Wood Dagger" or slot12 == "Wood Dagger" or slot13 == "Wood Dagger" or slot14 == "Wood Dagger" or slot15 == "Wood Dagger" or slot16 == "Wood Dagger" or slot17 == "Wood Dagger" or slot18 == "Wood Dagger" or slot19 == "Wood Dagger" or slot20 == "Wood Dagger"or slot21 == "Wood Dagger"or slot22 == "Wood Dagger"or slot23 == "Wood Dagger"or slot24 == "Wood Dagger"or slot25 == "Wood Dagger" or slot0 == "Stone Dagger" or slot1 == "Stone Dagger" or slot2 == "Stone Dagger" or slot3 == "Stone Dagger" or slot4 == "Stone Dagger" or slot5 == "Stone Dagger" or slot6 == "Stone Dagger" or slot7 == "Stone Dagger" or slot8 == "Stone Dagger" or slot9 == "Stone Dagger" or slot10 == "Stone Dagger" or slot11 == "Stone Dagger" or slot12 == "Stone Dagger" or slot13 == "Stone Dagger" or slot14 == "Stone Dagger" or slot15 == "Stone Dagger" or slot16 == "Stone Dagger" or slot17 == "Stone Dagger" or slot18 == "Stone Dagger" or slot19 == "Stone Dagger" or slot20 == "Stone Dagger"or slot21 == "Stone Dagger"or slot22 == "Stone Dagger"or slot23 == "Stone Dagger"or slot24 == "Stone Dagger"or slot25 == "Stone Dagger" or slot0 == "Gold Dagger" or slot1 == "Gold Dagger" or slot2 == "Gold Dagger" or slot3 == "Gold Dagger" or slot4 == "Gold Dagger" or slot5 == "Gold Dagger" or slot6 == "Gold Dagger" or slot7 == "Gold Dagger" or slot8 == "Gold Dagger" or slot9 == "Gold Dagger" or slot10 == "Gold Dagger" or slot11 == "Gold Dagger" or slot12 == "Gold Dagger" or slot13 == "Gold Dagger" or slot14 == "Gold Dagger" or slot15 == "Gold Dagger" or slot16 == "Gold Dagger" or slot17 == "Gold Dagger" or slot18 == "Gold Dagger" or slot19 == "Gold Dagger" or slot20 == "Gold Dagger"or slot21 == "Gold Dagger"or slot22 == "Gold Dagger"or slot23 == "Gold Dagger"or slot24 == "Gold Dagger"or slot25 == "Gold Dagger" or slot0 == "Metal Dagger" or slot1 == "Metal Dagger" or slot2 == "Metal Dagger" or slot3 == "Metal Dagger" or slot4 == "Metal Dagger" or slot5 == "Metal Dagger" or slot6 == "Metal Dagger" or slot7 == "Metal Dagger" or slot8 == "Metal Dagger" or slot9 == "Metal Dagger" or slot10 == "Metal Dagger" or slot11 == "Metal Dagger" or slot12 == "Metal Dagger" or slot13 == "Metal Dagger" or slot14 == "Metal Dagger" or slot15 == "Metal Dagger" or slot16 == "Metal Dagger" or slot17 == "Metal Dagger" or slot18 == "Metal Dagger" or slot19 == "Metal Dagger" or slot20 == "Metal Dagger"or slot21 == "Metal Dagger"or slot22 == "Metal Dagger"or slot23 == "Metal Dagger"or slot24 == "Metal Dagger"or slot25 == "Metal Dagger" or slot0 == "Bobo Dagger" or slot1 == "Bobo Dagger" or slot2 == "Bobo Dagger" or slot3 == "Bobo Dagger" or slot4 == "Bobo Dagger" or slot5 == "Bobo Dagger" or slot6 == "Bobo Dagger" or slot7 == "Bobo Dagger" or slot8 == "Bobo Dagger" or slot9 == "Bobo Dagger" or slot10 == "Bobo Dagger" or slot11 == "Bobo Dagger" or slot12 == "Bobo Dagger" or slot13 == "Bobo Dagger" or slot14 == "Bobo Dagger" or slot15 == "Bobo Dagger" or slot16 == "Bobo Dagger" or slot17 == "Bobo Dagger" or slot18 == "Bobo Dagger" or slot19 == "Bobo Dagger" or slot20 == "Bobo Dagger"or slot21 == "Bobo Dagger"or slot22 == "Bobo Dagger"or slot23 == "Bobo Dagger"or slot24 == "Bobo Dagger"or slot25 == "Bobo Dagger":
                                    if ainfo["class"] == "Thief":
                                        randomNUm = random.randint(1, 6)
                                        howManyArrows = random.randint(5, 100)
                                        user_dmgDif = user_dmg / 100
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 6:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                    else:
                                        randomNUm = random.randint(1, 6)
                                        ainfo["ammo_arrow"] = ainfo["ammo_arrow"] - 1
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg * randomNUm
                                            user_dmgSELFBurn = user_dmg
                                            user_dmgSELFBurn /= randomNUm
                                            user_enemy_hp -= user_dmgSELFBurn
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg * randomNUm
                                            user_dmgSELFBurn = user_dmg
                                            user_dmgSELFBurn /= randomNUm
                                            user_enemy_hp -= user_dmgSELFBurn
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                            await ctx.send("You are not a Thief and hurrt yourself!\n- {}".format(user_dmgSELFBurn))
                                else:
                                    await ctx.send("You Need an Dagger for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Scan" or answer1.content == "scan" or answer1.content == "22":
                                move = "Scan"
                                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                                    if ainfo["class"] == "Hacker":
                                        randomNUm = random.randint(1, 6)
                                        howManyArrows = random.randint(5, 100)
                                        user_dmgDif = user_dmg / 100
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 6:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                            ainfo["status_scan"] = "True"
                                        await ctx.send("You Scanned your Taget and found Open Ports".format())
                                else:
                                    await ctx.send("You Need a PC for that Move".format())
                                    return #skill(ctx)
                            elif answer1.content == "Crack" or answer1.content == "crack" or answer1.content == "23":
                                move = "Crack"
                                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                                    if ainfo["class"] == "Hacker":
                                        randomNUm = random.randint(1, 6)
                                        howManyArrows = random.randint(5, 100)
                                        user_dmgDif = user_dmg / 100
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 6:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if ainfo["status_scan"] == "True":
                                            ainfo["status_crack"] = "True"
                                            await ctx.send("You Cracked your Taget PC use DDOS or Install to attack!".format())
                                        else:
                                            await ctx.send("Use attack {}scan first!".format(Prefix))
                                else:
                                    await ctx.send("You need to be a HACKER for that!\n use Commadn {}login".format(Prefix))
                                    return #skill(ctx)
                            elif answer1.content == "DDOS" or answer1.content == "ddos" or answer1.content == "25":
                                move = "DDOS"
                                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                                    if ainfo["class"] == "Hacker":
                                        randomNUm = random.randint(1, 6)
                                        howManyArrows = random.randint(5, 100)
                                        user_dmgDif = user_dmg / 100
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 6:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if ainfo["status_ddos"] == "True":
                                            ainfo["status_confuse"] = "True"
                                            await ctx.send("You send many pings to your target and confuessed him with that!".format())
                                        else:
                                            await ctx.send("Use attack {}crack first!".format(Prefix))
                                else:
                                    await ctx.send("You need to be a HACKER for that!\n Use Command {}login".format(Prefix))
                                    return #skill(ctx)
                            elif answer1.content == "Install" or answer1.content == "install" or answer1.content == "24":
                                move = "Install"
                                if slot0 == "PC" or slot1 == "PC" or slot2 == "PC" or slot3 == "PC" or slot4 == "PC" or slot5 == "PC" or slot6 == "PC" or slot7 == "PC" or slot8 == "PC" or slot9 == "PC" or slot10 == "PC" or slot11 == "PC" or slot12 == "PC" or slot13 == "PC" or slot14 == "PC" or slot15 == "PC" or slot16 == "PC" or slot17 == "PC" or slot18 == "PC" or slot19 == "PC" or slot20 == "PC"or slot21 == "PC"or slot22 == "PC"or slot23 == "PC"or slot24 == "PC"or slot25 == "PC" or slot0 == "Wood PC" or slot1 == "Wood PC" or slot2 == "Wood PC" or slot3 == "Wood PC" or slot4 == "Wood PC" or slot5 == "Wood PC" or slot6 == "Wood PC" or slot7 == "Wood PC" or slot8 == "Wood PC" or slot9 == "Wood PC" or slot10 == "Wood PC" or slot11 == "Wood PC" or slot12 == "Wood PC" or slot13 == "Wood PC" or slot14 == "Wood PC" or slot15 == "Wood PC" or slot16 == "Wood PC" or slot17 == "Wood PC" or slot18 == "Wood PC" or slot19 == "Wood PC" or slot20 == "Wood PC"or slot21 == "Wood PC"or slot22 == "Wood PC"or slot23 == "Wood PC"or slot24 == "Wood PC"or slot25 == "Wood PC" or slot0 == "Stone PC" or slot1 == "Stone PC" or slot2 == "Stone PC" or slot3 == "Stone PC" or slot4 == "Stone PC" or slot5 == "Stone PC" or slot6 == "Stone PC" or slot7 == "Stone PC" or slot8 == "Stone PC" or slot9 == "Stone PC" or slot10 == "Stone PC" or slot11 == "Stone PC" or slot12 == "Stone PC" or slot13 == "Stone PC" or slot14 == "Stone PC" or slot15 == "Stone PC" or slot16 == "Stone PC" or slot17 == "Stone PC" or slot18 == "Stone PC" or slot19 == "Stone PC" or slot20 == "Stone PC"or slot21 == "Stone PC"or slot22 == "Stone PC"or slot23 == "Stone PC"or slot24 == "Stone PC"or slot25 == "Stone PC" or slot0 == "Gold PC" or slot1 == "Gold PC" or slot2 == "Gold PC" or slot3 == "Gold PC" or slot4 == "Gold PC" or slot5 == "Gold PC" or slot6 == "Gold PC" or slot7 == "Gold PC" or slot8 == "Gold PC" or slot9 == "Gold PC" or slot10 == "Gold PC" or slot11 == "Gold PC" or slot12 == "Gold PC" or slot13 == "Gold PC" or slot14 == "Gold PC" or slot15 == "Gold PC" or slot16 == "Gold PC" or slot17 == "Gold PC" or slot18 == "Gold PC" or slot19 == "Gold PC" or slot20 == "Gold PC"or slot21 == "Gold PC"or slot22 == "Gold PC"or slot23 == "Gold PC"or slot24 == "Gold PC"or slot25 == "Gold PC" or slot0 == "Metal PC" or slot1 == "Metal PC" or slot2 == "Metal PC" or slot3 == "Metal PC" or slot4 == "Metal PC" or slot5 == "Metal PC" or slot6 == "Metal PC" or slot7 == "Metal PC" or slot8 == "Metal PC" or slot9 == "Metal PC" or slot10 == "Metal PC" or slot11 == "Metal PC" or slot12 == "Metal PC" or slot13 == "Metal PC" or slot14 == "Metal PC" or slot15 == "Metal PC" or slot16 == "Metal PC" or slot17 == "Metal PC" or slot18 == "Metal PC" or slot19 == "Metal PC" or slot20 == "Metal PC"or slot21 == "Metal PC"or slot22 == "Metal PC"or slot23 == "Metal PC"or slot24 == "Metal PC"or slot25 == "Metal PC" or slot0 == "Bobo PC" or slot1 == "Bobo PC" or slot2 == "Bobo PC" or slot3 == "Bobo PC" or slot4 == "Bobo PC" or slot5 == "Bobo PC" or slot6 == "Bobo PC" or slot7 == "Bobo PC" or slot8 == "Bobo PC" or slot9 == "Bobo PC" or slot10 == "Bobo PC" or slot11 == "Bobo PC" or slot12 == "Bobo PC" or slot13 == "Bobo PC" or slot14 == "Bobo PC" or slot15 == "Bobo PC" or slot16 == "Bobo PC" or slot17 == "Bobo PC" or slot18 == "Bobo PC" or slot19 == "Bobo PC" or slot20 == "Bobo PC"or slot21 == "Bobo PC"or slot22 == "Bobo PC"or slot23 == "Bobo PC"or slot24 == "Bobo PC"or slot25 == "Bobo PC":
                                    if ainfo["class"] == "Hacker":
                                        randomNUm = random.randint(1, 6)
                                        howManyArrows = random.randint(5, 100)
                                        user_dmgDif = user_dmg / 100
                                        if randomNUm == 0 or randomNUm == 1 or randomNUm == 2 or randomNUm == 3:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 4 or randomNUm == 5:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if randomNUm == 6:
                                            skillDMG = user_dmg + user_dmgDif * howManyArrows
                                            ainfo["stamina"] = ainfo["stamina"] - randomNUm * ainfo["lvl"]
                                        if ainfo["status_crack"] == "True":
                                            ainfo["status_install_who"] = ainfo["name"]
                                            ainfo["status_install"] = "True"
                                            await ctx.send("You send many pings to your target and confuessed him with that!".format())
                                        else:
                                            await ctx.send("Use attack {}crack first!".format(Prefix))
                                else:
                                    await ctx.send("You need to be a HACKER for that!|n Use Command {}login".format(Prefix))
                                    return #skill(ctx)
                            MissOrNot = random.randint(1, 13)
                            if MissOrNot == 2 or MissOrNot == 4 or MissOrNot == 6 or MissOrNot == 8 or MissOrNot == 10 :
                                print("[=======CALC+++++START=======]")
                                #Hit = enemy_max_dmg
                                ainfo["stamina"] = ainfo["stamina"] - random.randint(1, 10)
                                enemy_hp = user_enemy_hp
                                user_hp -= user_dmgSELFBurn
                                gold_lost = random.randint(9, 99)
                                #print("")  attack*(100/(100+defense))
                                #print()
                                #print("")
                                #print()
                                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                                #user_hp_after = int(user_hp) - int(enemy_dmg)
                                #userAtk * (100/(100+enemy_def))
                                user_dmg = user_dmg + skillDMG
                                print("[=======PlayA=======]")
                                print("user_hp")
                                print(user_hp)
                                print("max_def")
                                print(max_def)
                                print("user_dmg")
                                print(user_dmg)
                                print("[=======PlayA=======]")
                                print("[=======MonA=======]")
                                print("enemy_hp")
                                print(enemy_hp)
                                print("enemy_dmg")
                                print(enemy_dmg)
                                print("enemy_def")
                                print(enemy_def)
                                print("[=======MonA=======]")
                                if max_def > enemy_dmg and user_dmg > enemy_def:
                                    atk_def_userAtkShow = enemy_hp
                                    #atk_def_enamyAtkShow = 0
                                    atk_def_enamyAtk = 0
                                    user_hp_after = user_hp
                                    atk_def_userAtk = user_dmg - enemy_def
                                    enemy_hp_after = atk_def_userAtkShow - int(atk_def_userAtk)
                                    enemy_hp_after -= skillDMG
                                    if enemy_hp_after <= 0:
                                        enemy_hp_after = 0
                                    if user_hp_after <= 0:
                                        user_hp_after = 0
                                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(atk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0),  skillDMG, user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                                    print("atk_def_userAtk")
                                    print(atk_def_userAtk)
                                    print("enemy_hp_after")
                                    print(enemy_hp_after)
                                    print("if max_def > enemy_dmg and user_dmg > enemy_def:")
                                if enemy_dmg > max_def and enemy_def > user_dmg:
                                    atk_def_userAtkShow = user_hp
                                    atk_def_enamyAtkShow = 0
                                    atk_def_enamyAtk = enemy_hp
                                    atk_def_userAtk = enemy_dmg - max_def
                                    skillendCALS = atk_def_enamyAtk - skillDMG
                                    enemy_hp_after = skillendCALS
                                    #enemy_hp_after = atk_def_enamyAtk * skillDMG
                                    user_hp_after = atk_def_userAtkShow - int(atk_def_userAtk)
                                    enATk0 = atk_def_userAtk
                                    usAtk0 = 0
                                    if enemy_hp_after <= 0:
                                        enemy_hp_after = 0
                                    if user_hp_after <= 0:
                                        user_hp_after = 0
                                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(enATk0, 0), user_name, move, round(usAtk0, 0), skillDMG, user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                                    if user_dmg < enemy_def :
                                        em = discord.Embed(description="```diff\n- YOU MAKE LESS THAN THE RECOMANDED DAMAGE!\n- USE COMMAND {}bp0x0 0 to equipt a weapon!\n And \n- USE COMMAND {}lvl to check your lvl!```".format(Prefix,Prefix), color=discord.Color.red())
                                        await ctx.send(embed=em)
                                    print("if enemy_dmg > max_def and enemy_def > user_dmg:")
                                if max_def > enemy_dmg  and enemy_def > user_dmg:
                                    enATk0 = 0
                                    usAtk0 = 0
                                    enemy_hp_after = enemy_hp
                                    user_hp_after = user_hp
                                    usATKuSkill = usAtk0 + skillDMG
                                    enemy_hp_after -= usATKuSkill
                                    user_hp_after -= enATk0
                                    if enemy_hp_after <= 0:
                                        enemy_hp_after = 0
                                    if user_hp_after <= 0:
                                        user_hp_after = 0
                                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(enATk0, 0), user_name, move, round(usAtk0, 0), round(usATKuSkill, 0), user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                                    print("if max_def > enemy_dmg  and enemy_def > user_dmg:")
                                if enemy_dmg > max_def and user_dmg > enemy_def:
                                    enATk0 = enemy_dmg - max_def
                                    usAtk0 = user_dmg - enemy_def
                                    usATKuSkill = skillDMG
                                    damageCalc = usAtk0 + skillDMG
                                    enemy_hp_after = enemy_hp - damageCalc
                                    user_hp_after = user_hp - enATk0
                                    if enemy_hp_after <= 0:
                                        enemy_hp_after = 0
                                    if user_hp_after <= 0:
                                        user_hp_after = 0
                                    await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {}+{} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(enATk0, 0), user_name, move, round(usAtk0, 0), round(usATKuSkill, 0), user_enemy, round(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                                    print("if enemy_dmg > max_def and user_dmg > enemy_def:")
                                if enemy_dmg > max_def:
                                    atk_def_userAtkShow = enemy_def - user_dmg
                                    atk_def_enamyAtkShow = max_def - enemy_dmg
                                    atk_def_enamyAtkShow = 0
                                    atk_def_enamyAtk = max_def - enemy_dmg
                                    atk_def_enamyAtk = 0
                                    atk_def_userAtk = enemy_def - user_dmg
                                    print("atk_def_userAtkShow = enemy_def - user_dmg")
                                    print(atk_def_userAtkShow)
                                    print("atk_def_enamyAtkShow = max_def - enemy_dmg = 0")
                                    print(atk_def_enamyAtkShow)
                                    print("if enemy_dmg > max_def:")
                                    if atk_def_userAtk < atk_def_enamyAtk:
                                        print("if atk_def_userAtk < atk_def_enamyAtk:12")
                                        print("atk_def_userAtk Verliert")
                                        print(atk_def_userAtk)
                                        print("atk_def_enamyAtk")
                                        print(atk_def_enamyAtk)
                                        print("if atk_def_userAtk < atk_def_enamyAtk:")
                                print("CALC FINISH=================]")
                                #print("max_def")
                                #print(max_def)
                                #print("user_dmg")
                                #print(user_dmg)
                                #print("enemy_dmg")
                                #print(enemy_dmg)
                                #print("enemy_def")
                                #print(enemy_def)
                                #enemy_hp_after = round(enemy_hp_after, 0)
                                #user_hp_after = round(user_hp_after, 0)
                                #print("enemy_hp_after")
                                #print(enemy_hp_after)
                                #print("user_hp_after")
                                #print(user_hp_after)
                                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                                #user_hp_after = int(user_hp) - int(enemy_dmg)
                                #enemy_hp = user_enemy_hp
                                #calc1 = user_dmg - enemy_def
                                #user_dmg = calc1
                                #enemy_hp_after = int(enemy_hp) - int(user_dmg)
                                #user_hp_after = int(user_hp) - int(enemy_dmg)
                                #fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                #await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} Hit {}\n+ {} uses  Heal and heals for {} HP.\n.```".format(user_enemy, user_enemy_hp, user_name, user_hp, user_enemy, user_name, user_name, info["healthmax"]))
                                #Lootbag# 10% chance to obtain one from an enemy.
                                #enemy_hp_after = int(enemy_hp) - int(atk_def_enamyAtk)
                                #if enemy_hp_after <= 0:
                                #    enemy_hp_after = 0
                                #if user_hp_after <= 0:
                                #    user_hp_after = 0
                                #await ctx.send("```diff\n- {} has {} HP\n+ {} has {} HP\n\n- {} hits {} for {} dmg. \n+ {} uses {} and hits for {} dmg.\n\n- {} has {} hp left\n+ {} has {} hp left.```".format(user_enemy, round(user_enemy_hp, 0), user_name, round(user_hp, 0), user_enemy, user_name, round(atk_def_enamyAtk, 0), user_name, move, round(atk_def_userAtk, 0), user_enemy,ound(enemy_hp_after, 0), user_name, round(user_hp_after, 0)))
                                ainfo["health"] = round(user_hp_after,0)
                                ainfo["enemyhp"] = round(benemy_hp_after, 0)
                                #ainfo["selected_enemy_player"] = user_enemy
                                ainfo["selected_enemy_player"] = binfo["name"]
                                ainfo["selected_enemy_exp"] = round(enemy_xp, 0) + all_drop_exp
                                ainfo["selected_enemy_gold"] = round(enemy_gold, 0) +all_drop_gold
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                print("befor kick")
                                if int(benemy_hp_after) <= 0 and int(user_hp_after) <= 0: # DRAW
                                    await ctx.send("```diff\n- {} has killed you its a draw!\n- You lost {} gold```".format(user_enemy, gold_lost))
                                    ainfo["gold"] = ainfo["gold"] - gold_lost
                                    ainfo["health"] = 0
                                    ainfo["selected_enemy_player"] = "None"
                                    ainfo["infight_status"] = "False"
                                    ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                                    ainfo["deaths"] = ainfo["deaths"] + 1
                                    ainfo["count_played"] = ainfo["count_played"] + 1
                                    ainfo["count_draw"] = ainfo["count_draw"] + 1
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    if ainfo["gold"] < 0:
                                        ainfo["gold"] = 0
                                        ainfo["health"] = 0
                                        ainfo["selected_enemy_player"] = "None"
                                        ainfo["infight_status"] = "False"
                                        whereServer = ctx.message.guild.id
                                        try:
                                            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                                        except:
                                            print("No DATA")
                                        ainfo["whereServer"] = ctx.message.guild.id
                                        try:
                                            streetsServer = 1069993213257076787
                                            if whereServer == streetsServer:
                                                print("On the STREETS")
                                                hp = ainfo["health"]
                                                print("hp")
                                                print(hp)
                                                if hp < 1:
                                                    userTargetA = adiscordid
                                                    userTargetB = bdiscordid
                                                    user = discord.utils.get(ctx.guild.members, id=userTargetB)
                                                    userA = discord.utils.get(ctx.guild.members, id=userTargetA)
                                                    await user.kick(reason=None)
                                                    await userA.kick(reason=None)
                                                else:
                                                    print("You are JUCIE AND KICKET NOTHING")
                                            else:
                                                print("Not on the streets Draw")
                                        except:
                                            print("Not on the streets Draw")
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                        return
                                elif int(user_hp_after) <= 0 and int(enemy_hp_after) >= 0 : # KILLED YOU
                                    await ctx.send("```diff\n- {} has killed you\n- You lost {} gold```".format(user_enemy, gold_lost))
                                    ainfo["gold"] = ainfo["gold"] - gold_lost
                                    ainfo["health"] = 0
                                    ainfo["selected_enemy_player"] = "None"
                                    ainfo["infight_status"] = "False"
                                    ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                                    ainfo["deaths"] = ainfo["deaths"] + 1
                                    ainfo["count_played"] = ainfo["count_played"] + 1
                                    ainfo["count_lose"] = ainfo["count_lose"] + 1
                                    channel = ctx.channel
                                    author = ctx.author
                                    message = ctx.message
                                    user = (discord.Member)
                                    guild = ctx.guild
                                    print("ctx income")
                                    xinfo = fileIO("config/config.json", "load")
                                    xinfo["Commands_used"] = info["Commands_used"] + 1
                                    fileIO("config/config.json", "save", xinfo)
                                    whereServer = ctx.message.guild.id
                                    try:
                                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                                    except:
                                        print("No DATA")
                                    ainfo["whereServer"] = ctx.message.guild.id
                                    try:
                                        streetsServer = 1069993213257076787
                                        if whereServer == streetsServer:
                                            print("On the STREETS")
                                            hp = ainfo["health"]
                                            print("hp")
                                            print(hp)
                                            if hp <= 0:
                                                userTargetA = adiscordid
                                                #userTargetB = bdiscordid
                                                #user = discord.utils.get(ctx.guild.members, id=userTargetB)
                                                userA = discord.utils.get(ctx.guild.members, id=userTargetA)
                                                #await user.kick(reason=None)
                                                await userA.kick(reason=None)
                                            else:
                                                print("You are JUCIE")
                                        else:
                                            print("Not on the streets Killed")
                                    except:
                                        print("Not on the streets Killed")
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    if ainfo["gold"] < 0:
                                        ainfo["gold"] = 0
                                        ainfo["health"] = 0
                                        ainfo["selected_enemy_player"] = "None"
                                        ainfo["infight_status"] = "False"
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                        return
                                elif int(enemy_hp_after) <= 0: # WWIN
                                    await ctx.send("```diff\n- {} You WIN the Fight```".format(user_name))
                                    ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                                    ainfo["count_win"] = ainfo["count_win"] + 1
                                    ainfo["count_played"] = ainfo["count_played"] + 1
                                    #user_hp_after -=
                                    #ainfo["enemyhp"] = enemy_hp_after
                                    #user_enemy_hp = enemy_hp_after
                                    xpmax = int(ainfo["expmax"])
                                    xp = int(ainfo["exp"])
                                    skxpmax = int(ainfo["expmaxsk"])
                                    skxp = int(ainfo["skexp"])
                                    all_total_base_exp  = ainfo["all_total_base_exp"]
                                    enemy_gold = round(enemy_gold, 0) + all_drop_gold
                                    enemy_xp = round(enemy_xp, 0) + all_total_base_exp
                                    ainfo["selected_enemy_player"] = binfo["name"]
                                    #fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    ainfo["selected_enemy_exp"] = round(enemy_xp, 0)
                                    ainfo["selected_enemy_gold"] = round(enemy_gold, 0)
                                    ainfo["gold"] += enemy_gold
                                    #if atk_def_userAtk < atk_def_enamyAtk:
                                    #    print("kleiner  atk_def_userAtk")
                                    #    print("atk_def_userAtk")
                                    #    print(atk_def_userAtk)
                                    #    gold_lost = random.randint(99, 999)
                                    #if atk_def_enamyAtk < atk_def_userAtk:
                                    #    print("kleiner  atk_def_enamyAtk Enamy ----")
                                    #    print("atk_def_enamyAtk")
                                    #    print(atk_def_enamyAtk)
                                    #    gold_lost = random.randint(0, 250)
                                        #user_hp_after -=
                                        #info["enemyhp"] = enemy_hp_after
                                        #user_enemy_hp = enemy_hp_after
                                    ainfo["healthmax"] += 10
                                    ainfo["exp"] += enemy_xp
                                    yonextlevel = ainfo["expmax"]  - ainfo["exp"]
                                    await ctx.send("```diff\n+ You killed {}\n You gained \n+ {} gold\n and exp points \n+ {} \n```".format(user_enemy, enemy_gold,  enemy_xp))
                                    #enemy_xp1 = enemy_xp * info["all_drop_exp"]
                                    #info ["exp"] = info["exp"] + info["all_drop_exp"] + info["selected_enemy_exp"]
                                    ainfo["infight_status"] = "False"
                                    binfo["infight_status"] = "False"
                                    lootbag = random.randint(1, 14)
                                    lootbag100 = random.randint(1, 100)
                                    luckynumber = ainfo["luknum"]
                                    #info["selected_enemy_player"] = "None"
                                    #all_total_base_exp  = info["all_total_base_exp"]
                                    #enemy_xp = info["selected_enemy_exp"]
                                    #gain = enemy_xp * all_total_base_exp
                                    #info["exp"] += gain
                                    #info["expmax"] =
                                    #info["expmaxsk"] =
                                    #info["skexp"] =
                                    #info["all_total_base_exp"] =
                                    whereServer = ctx.message.guild.id
                                    try:
                                        streetsServer = 1069993213257076787
                                        if whereServer == streetsServer:
                                            print("On the STREETS")
                                            hp = ainfo["health"]
                                            print("hp")
                                            print(hp)
                                            if hp <= 0:
                                                #userTargetA = adiscordid
                                                userTargetB = bdiscordid
                                                #user = discord.utils.get(ctx.guild.members, id=userTargetB)
                                                #userA = discord.utils.get(ctx.guild.members, id=userTargetA)
                                                await user.kick(reason=None)
                                                #await userA.kick(reason=None)
                                            else:
                                                print("You are JUCIE")
                                        else:
                                            print("Not on the streets win on the strets")
                                    except:
                                        print("Not on the streets win")
                                    #user = ctx.guild.get_member(adiscordid)
                                    #await user.kick(reason=None)
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    if ainfo["exp"] >= ainfo["expmax"]:
                                        await ctx.send("Checking your EXP")
                                        await _check_setExpLVL(ctx)
                                        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                                        print("BACK")
                                        #await _check_setExpLVL(ctx)
                                    #
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    if lootbag == 1:
                                        await ctx.send("```diff\n+ {} obtained a Food bag!\n- USE COMMAND:\n+ {}foodbag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_food"] = ainfo["bag_food"] + 1
                                    elif lootbag == 7:
                                        await ctx.send("```diff\n+ {} obtained a Wood bag!\n- USE COMMAND:\n+ {}woodbag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_wood"] = ainfo["bag_wood"] + 1
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                        #await _check_levelup(ctx)
                                    elif lootbag == 8:
                                        await ctx.send("```diff\n+ {} obtained a bag full of Metal!\n- USE COMMAND:\n+ {}metalbag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_metal"] = ainfo["bag_metal"] + 1
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    elif lootbag == 4:
                                        await ctx.send("```diff\n+ {} obtained a Gold bag!\n- USE COMMAND:\n+ {}goldbag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_gold"] = ainfo["bag_gold"] + 1
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    elif lootbag == 5:
                                        await ctx.send("```diff\n+ {} obtained a bag full of BoboCoins!\n- USE COMMAND:\n+ {}bocobag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_boco"] = ainfo["bag_boco"] + 1
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    elif lootbag == 13:
                                        await ctx.send("```diff\n+ {} obtained a Key bag!\n- USE COMMAND:\n+ {}keybag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_key"] = ainfo["bag_key"] + 1
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    elif lootbag == 14:
                                        await ctx.send("```diff\n+ {} obtained a bag full of Stones!\n- USE COMMAND:\n+ {}stonebag\n To open and resive your goods.```".format(user_name,Prefix))
                                        ainfo["bag_stone"] = ainfo["bag_stone"] + 1
                                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    elif lootbag == 2 or lootbag == 3 or lootbag == 6 or lootbag == 9 or lootbag == 10 or lootbag == 11 or lootbag == 0:
                                        await ctx.send("```diff\n+ The Monster lost Nothing```".format())
                                    em = discord.Embed(description="```diff\n HP:  {} / {}\n SP: {} / {}\n MP: {} / {}```".format(round(ainfo["health"], 2), round(ainfo["healthmax"], 2), round(ainfo["stamina"], 2), round(ainfo["staminamax"], 2), round(ainfo["mana"], 2), round(ainfo["manamax"], 2)), color=discord.Color.red())
                                    await ctx.send(embed=em)
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    if enemy_xp == 0 :
                                        em = discord.Embed(description="```diff\n- You need to get a WAX Cloud Wallet\n- and at least one BP0x0 NFT!\n- To Level up and enjoy the Game!```".format(), color=discord.Color.red())
                                        await ctx.send(embed=em)
                                    ainfo["selected_enemy_player"] = "None"
                                    ainfo["infight_status"] = "False"
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    print("===================LAST SAFE FIGHT==============")
                                    return
                                else:
                                    ainfo["selected_enemy_player"] = binfo["name"]
                                    await ctx.send("Still Alive Attck Harder!fff")
                                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                    return #await #skill(ctx)
                                #print(enemy_hp)
                                ainfo["selected_enemy_player"] = binfo["name"]
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                print("after kick ")
                                #await ctx.send("You start fighting a {}...\nPlease use `{}fight` or `{}f` to start fighting it.".format(enemy, Prefix, Prefix))
                                await _check_setBoboValue(ctx)
                                #Define our user stats here.
                            else:
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                #await ctx.send("You start fighting a {}...\nPlease use `{}fight` or `{}f` to start fighting it.".format(enemy, Prefix, Prefix))
                                await _check_setBoboValue(ctx)
                                #Define our user stats here.
                                await ctx.send("You Miss!!! Attck Harder!!!")
                                return #await #skill(ctx)
                        else:
                            await ctx.send("You Miss!!! Push Harder!!! Check your Spelling!!! You Lost The Fight")
                            health = ainfo["health"] * 0.1
                            ainfo["health"] -= health
                            ainfo["enemyhp"] += health
                            ainfo["selected_enemy_player"] = "None"
                            ainfo["infight_status"] = "False"
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            #await fight(ctx)
                        #return await fight(ctx)
                    elif answer1.content == "n" or answer1.content == "N" or answer1.content == "no" or answer1.content == "No":
                        await ctx.send("Ok then.")
                        ainfo["infight_status"] = "False"
                        binfo["infight_status"] = "False"
                        ainfo["selected_enemy_player"] = "None"
                        binfo["selected_enemy_player"] = "None"
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                        fileIO("players/{}/info.json".format(author.id), "save", binfo)
                else:
                    await ctx.send("Please choose one of the options next time.")
        except:
            print("BadTry11111111111111111111111111111")
        try:
            #
            #
            print("HErettttttttttttttttt")
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            print("ctx.message.author.id")
            print(data)
            print("channel")
            print(channel)
            print("int")
            print(data1)
            print("str")
            print(data2)
            print("datat3")
            print(data3)
            print("datat4")
            print(data4)
            print("datat5")
            print(data5)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
            ainfo["location"] = ctx.channel
            ainfo["where"] = ctx.channel
            if "GameMaster" in data5:
                print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
                print("numskill222")
                em1111 = discord.Embed(description="\n You Clean {}\n Please use `{}a` or `{}s` to Attack or Steal".format(bname,Prefix,Prefix), color=discord.Color.red())
                await ctx.send(embed=em1111)
                print(aname)
                print(bname)
                if bname == aname:
                    print("a=b")
                    ainfo["status_confuse"] = "False"
                    ainfo["status_hide"] = "False"
                    ainfo["status_jump"] = "False"
                    ainfo["status_trap"] = "False"
                else:
                    print("else")
                    binfo["status_confuse"] = "False"
                    binfo["status_hide"] = "False"
                    binfo["status_jump"] = "False"
                    binfo["status_trap"] = "False"
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                await ctx.send("You are Not")
        except:
            print("AdminFail")
    if numskill == "11":  # Trap
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            #await ctx.send("{} is your id".format(ctx.message.author.id))
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            print("ctx.message.author.id")
            print(data)
            print("channel")
            print(channel)
            print("int")
            print(data1)
            print("str")
            print(data2)
            print("datat3")
            print(data3)
            print("datat4")
            print(data4)
            print("datat5")
            print(data5)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
            ainfo["location"] = ctx.channel
            if bname == aname:
                print("a=b")
                #ainfo["status_confuse"] = "False"
                #ainfo["status_hide"] = "False"
                #ainfo["status_jump"] = "True"
                ainfo["status_trap"] = "True"
            else:
                meters_max = ainfo["meters_max"]
                damage = random.randint(1,meters_max)
                meters = random.randint(1,meters_max)
                total = damage * meters
                print("else")
                #binfo["status_confuse"] = "True"
                #binfo["status_hide"] = "False"
                #binfo["status_jump"] = "False"
                binfo["status_trap"] = "True"
                #em1111 = discord.Embed(description="\n You make a Jump Attack on {} {} meters high!\n for {} Damage\n".format(bname,meters,total), color=discord.Color.red())
                #await ctx.send(embed=em1111)
            if ainfo["ammo_arrow_trap"] >= 1:
                await ctx.send("Trap Aktive!!!\n Wait untill Attacked!")
                ainfo["ammo_arrow_trap"] = ainfo["ammo_arrow_trap"] - 1
            else:
                await ctx.send("Sorry Not enaf Trap's\n\n Use Command {}buy >>> ammo(9) >>> Trap(3)".format(Prefix))
                return buy
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            return
        except:
            print("AdminFail")
    if numskill == "2":  # Swing
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            #await ctx.send("{} is your id".format(ctx.message.author.id))
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            print("ctx.message.author.id")
            print(data)
            print("channel")
            print(channel)
            print("int")
            print(data1)
            print("str")
            print(data2)
            print("datat3")
            print(data3)
            print("datat4")
            print(data4)
            print("datat5")
            print(data5)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
            ainfo["location"] = ctx.channel
            if bname == aname:
                print("a=b")
                #ainfo["status_confuse"] = "False"
                #ainfo["status_hide"] = "False"
                #ainfo["status_jump"] = "True"
                ainfo["status_confuse"] = "True"
            else:
                meters_max = ainfo["meters_max"]
                damage = random.randint(1,meters_max)
                meters = random.randint(1,meters_max)
                total = damage * meters
                print("else")
                #binfo["status_confuse"] = "True"
                #binfo["status_hide"] = "False"
                #binfo["status_jump"] = "False"
                binfo["status_confuse"] = "True"
                #em1111 = discord.Embed(description="\n You make a Jump Attack on {} {} meters high!\n for {} Damage\n".format(bname,meters,total), color=discord.Color.red())
                #await ctx.send(embed=em1111)
            await ctx.send(" {} Looking in Four Directions!\n Confused!".format(binfo["name"]))
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            return
        except:
            print("SwingFail")
    if numskill == "19":  # Hide
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            #await ctx.send("{} is your id".format(ctx.message.author.id))
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            print("ctx.message.author.id")
            print(data)
            print("channel")
            print(channel)
            print("int")
            print(data1)
            print("str")
            print(data2)
            print("datat3")
            print(data3)
            print("datat4")
            print(data4)
            print("datat5")
            print(data5)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
            ainfo["location"] = ctx.channel
            if bname == aname:
                print("a=b")
                #ainfo["status_confuse"] = "False"
                #ainfo["status_hide"] = "False"
                #ainfo["status_jump"] = "True"
                ainfo["status_hide"] = "True"
            else:
                meters_max = ainfo["meters_max"]
                damage = random.randint(1,meters_max)
                meters = random.randint(1,meters_max)
                total = damage * meters
                print("else")
                #binfo["status_confuse"] = "True"
                #binfo["status_hide"] = "False"
                #binfo["status_jump"] = "False"
                binfo["status_hide"] = "True"
                #em1111 = discord.Embed(description="\n You make a Jump Attack on {} {} meters high!\n for {} Damage\n".format(bname,meters,total), color=discord.Color.red())
                #await ctx.send(embed=em1111)
            await ctx.send(" {} Looking in Disapering!\n Gone!".format(binfo["name"]))
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            return
        except:
            print("HideFail")
    if numskill == "20": # Jump
        print("20 Jump")
        ainfo["location"] = ctx.channel
        ainfo = fileIO("players/{}/info.json".format(author.id), "load")
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
        if bname == aname:
            print("a=b")
            ainfo["status_confuse"] = "False"
            #ainfo["status_hide"] = "False"
            ainfo["status_jump"] = "True"
            #ainfo["status_trap"] = "False"
            meters_high = ainfo["meters_high"]
            meters_max = ainfo["meters_max"] + meters_high
            meters = ainfo["meters"]
            damage = random.randint(1,meters_max)
            meters = random.randint(1,meters_max)
            total = damage * meters
            em1111 = discord.Embed(description="\n You Jump {} meters high\n Please use `{}a` or `{}f` to Attack or Fight".format(meters,Prefix,Prefix), color=discord.Color.red())
            await ctx.send(embed=em1111)
        else:
            meters_max = ainfo["meters_max"]
            damage = random.randint(1,meters_max)
            meters = random.randint(1,meters_max)
            total = damage * meters
            print("else")
            binfo["status_confuse"] = "True"
         #   binfo["status_hide"] = "False"
            binfo["status_jump"] = "False"
        #    binfo["status_trap"] = "False"
            em1111 = discord.Embed(description="\n You make a Jump Right Over {}'s Head around {} meters high!\n Use Command `{}a @user`\n".format(bname,meters,Prefix), color=discord.Color.red())
            await ctx.send(embed=em1111)
        try:
            ainfo["meters_high"] = meters
        except:
            print("no Metree high save")
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        return
        #except:
        #    print("AdminFail")
    if numskill == "8": #heal
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            binfo = fileIO("players/{}/info.json".format(user.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            await ctx.send("{} is your id".format(ctx.message.author.id))
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            print("ctx.message.author.id")
            print(data)
            print("channel")
            print(channel)
            print("int")
            print(data1)
            print("str")
            print(data2)
            print("datat3")
            print(data3)
            print("datat4")
            print(data4)
            print("datat5")
            print(data5)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
        except:
            print("data Fail")
        ainfo["location"] = ctx.channel
        if "GameMaster" in data5:
            print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
            print("numskill222")
            print(aname)
            print(bname)
            if bname == aname:
                print("a=b")
                #ainfo["status_confuse"] = "False"
                ainfo["status_hide"] = "False"
                ainfo["status_jump"] = "False"
                ainfo["status_trap"] = "False"
            else:
                print("else")
                #binfo["status_confuse"] = "False"
                binfo["status_hide"] = "False"
                binfo["status_jump"] = "False"
                binfo["status_trap"] = "False"
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            await ctx.send("You are")
            gain = 1000 * ainfo["lvl"]
            ainfo["stamina"] -= 100 * ainfo["lvl"]
            binfo["health"] += gain
            if ainfo == binfo:
                print("Ainfo is Binfo")
                ainfo["health"] += gain
                if ainfo["health"] <= ainfo["healthmax"]:
                    ainfo["health"] = ainfo["healthmax"]
            if binfo["health"] <= binfo["healthmax"]:
                binfo["health"] = binfo["healthmax"]
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            await ctx.send("GameMaster {} is High\n And Thanks on your {} Heal\n\nWait until he clime down".format(bname,gain))
            return
            #return
        else:
            #await ctx.send("You are Not")
            gain = 1000 * ainfo["lvl"]
            ainfo["stamina"] -= 100 * ainfo["lvl"]
            binfo["health"] += gain
            if ainfo == binfo:
                print("Ainfo is Binfo")
                ainfo["health"] += gain
                if ainfo["health"] <= ainfo["healthmax"]:
                    ainfo["health"] = ainfo["healthmax"]
            if binfo["health"] <= binfo["healthmax"]:
                binfo["health"] = binfo["healthmax"]
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            await ctx.send(" {} is High\n And Thanks on your {} Heal\n\nWait until he clime down".format(bname,gain))
            return
    #except:
    #    print("AdminFail")
    if binfo["status_jump"]  == "True":
        gain = 1000 * ainfo["lvl"]
        ainfo["health"] -= gain
        if ainfo["health"] <= 0:
            ainfo["health"] = 0
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send(" {} is Flying High\n And Spit on you {} Damage\n\nWait until he come down".format(bname,gain))
        return
    else:
        print("bdata is Not status_jump False")
    if ainfo["status_ddos"]  == "True":
        ddos_attacker = ainfo["ddos_attacker"]
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send(" {} Is the Attacker Who DDOS your System\n USE COMMAND `{}login`\nto Fight back an Epic Ehtical NFT Hacking Simulation\n\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(ddos_attacker,Prefix))
        return
    else:
        print("Not status_ddos")
    if numskill == "1":
        print("numskill")
        em1111 = discord.Embed(description="\n You Swing on {}\n Please use `{}a` or `{}s` to Attack or Steal".format(bname,Prefix,Prefix), color=discord.Color.red())
        await ctx.send(embed=em1111)
        binfo["status_confuse"] = "True"
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
    if binfo["status_trap"]  == "True":
        gain = 100000 * ainfo["lvl"]
        ainfo["health"] -= gain
        binfo["status_trap"] = "False"
        if ainfo["health"] <= 0:
            ainfo["health"] = 0
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send("You Ring the Bell\n DING DONG {} Damage!!! {} set up a Trap and You Fall IN!\n|n USE COMMAND `{}bomb <@target>`(Not Ready)\nto drop a bomb!\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(gain,bname,Prefix))
        binfo["status_trap"] = "False"
        #binfo = fileIO("players/{}/info.json".format(user.id), "safe")
        #ainfo = fileIO("players/{}/info.json".format(author.id), "safe")
        return
    else:
        print("Not status_trap")
    print(bname)
    if binfo["status_hide"]  == "True":
        print("status_hide True")
        await ctx.send(" `{}` Is Hiddn!!!\n\n Use Command\n `{}search | {}look <@User>`\n to find and Attack!\n USE COMMAND `{}l` or any other command to show the bot where you are!\n".format(bname,Prefix,Prefix,Prefix))
        print("a1")
        try:
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            gain = 100000 * binfo["lvl"]
        except:
            print("b error")
        try:
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
        except:
            print("a error")
        print("a12")
        #await ctx.send("{} Is hidden under a Tree\n USE COMMAND `{}search`\nto Find trails\n\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(bname,Prefix))
        return
    else:
        print("Not status_hide")

@bot.command(pass_context=True, aliases=["a"])
async def attack(ctx, user: discord.Member, numskill="None"):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    cinfo = fileIO("global/info.json".format(author.id), "load")
    if numskill == None or numskill == "None":
        numskill = 0
        print("numskill 0")
    if user == None or user == "None":
        em = discord.Embed(description="```diff\n USE COMMAND {}attack <@username>\n Exemple: {}attack @bobtherobot ```\n" .format(Prefix,Prefix), color=discord.Color.blue())
        return
        await ctx.send(embed=em)
    print("user")
    print(user)
    print("message")
    print(message)
    print("author")
    print(author.id)
    print("memberID")
    print(user.mention)
    print("discord.Member")
    print(discord.Member)
    print("==========")
    print("==========")
    print("==========")
    print("a")
    print("author.id")
    print(author.id)
    print("==========")
    print("b")
    print("user.id")
    #print(user.id)
    print("==========")
    if user == "None":
        await ctx.send("Use Command`{}search | {}look <@target>` to UNHIDE".format(Prefix,Prefix))
        print("user")
        print(user)
        print("message")
        print(message)
        print("author")
        print(author.id)
        print("memberID")
        print("==========")
        print("==========")
        print("==========")
        print("a")
        print("author.id")
        print(author.id)
        print("==========")
    else:
        print("user")
        print(user)
        print("message")
        print(message)
        print("author")
        print(author.id)
        print("memberID")
        #print(user.mention)
        print("discord.Member")
        print(discord.Member)
        print("==========")
        print("==========")
        print("==========")
        print("a")
        print("author.id")
        print(author.id)
        print("==========")
        print("b")
        print("user.id")
        print(user.id)
        print("==========")
    print("last_message_id")
    print(message.id)
    print("==========")
    print("channel.id")
    print(channel.id)
    print("==========")
    print("==========")
    #print("userchannel.id")
    #print(user.channel.id)
    #print("==========")
    print("guild_id")
    print(user.guild.id)
    print("==========")
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    #print("id")
    #print(id)
    #print("==========")
    print("message_members")
    print(message.id)
    print("==========")
    #zombieKill = ainfo["zombie_kill_count"]
    #ainfo["zombie_kill_count_total"] += 1
    zombie_kill_count_total = ainfo["zombie_kill_count_total"]
    #await ctx.send(f'{user.mention}\'s id: `{user.id}`')
    if ainfo["race"] and ainfo["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    try:
        binfo = fileIO("players/{}/info.json".format(user.id), "load")
        bname = binfo["name"]
        castle_name = binfo["castle_name"]
        castle_guild_name = binfo["castle_guild_name"]
        print("LOADRE binfo")
        print(bname)
        print(castle_name)
        print(castle_guild_name)
        aname = ainfo["name"]
    except:
        em = discord.Embed(description=" `@{}` set your Char with `{}start`\n Its More Fun toghter!'\n".format(user, Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        print("No Player Data")
        aname = ainfo["name"]
        print(aname)
        print(Prefix)
        zombie_kill_count_total = ainfo["zombie_kill_count_total"] + 1
        print(zombie_kill_count_total)
        #ainfo["zombie_kill_count_total"] += 1
        #ainfo = fileIO("players/{}/info.json".format(author.id), "load")
        print("csafe")
        cinfo = fileIO("global/info.json".format(author.id), "load")
        GuildAttackera = ainfo["castle_guild_name"]
        gainexpguild =  0.01 * ainfo["lvl"]
        if GuildAttackera == "RockCastle": #ROCK info
            cinfo["Rock_Castle"]["castle_guild_lvl"] += gainexpguild
            #castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
        if GuildAttackera == "ScissorCastle":    #SCISSOR
            cinfo["Scissor_Castle"]["castle_guild_lvl"] += gainexpguild
        if GuildAttackera == "PaperCastle": #PAPER
            cinfo["Paper_Castle"]["castle_guild_lvl"] += gainexpguild
        #fileIO("players/{}/info.json".format(user.id), "save", binfo)
        ainfo["zombie_kill_count_total"] = zombie_kill_count_total
        em = discord.Embed(description="\n`{}` You Killed a Zombie `{}st`\n to see your Stats!'\n Zombies are Not realy helpfull in Having a Community based RPG Game\n Your Zombie Kills Total `{}` \n as well a bit Castle EXP `{}` \n".format(aname, Prefix,zombie_kill_count_total,gainexpguild), color=discord.Color.blue())
        await ctx.send(embed=em)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("global/info.json".format(author.id), "save", cinfo)
        print("safe")
        return
        #binfo = fileIO("players/{}/info.json".format(user.id), "load") info
        #Zombies
    try: # serverGuild_id players/{}/info.json
        try:
            ainfo["serverGuild_id"] = user.guild.id
        except:
            pass
        try:
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
        except:
            print("no b")
            pass
        try:
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        except:
            print("no a")
            pass
        print("user.guild.id")
        print(user.guild.id)
    except:
        print("except444")
        em22 = discord.Embed(description="\n- Error\n Please use `{}up` to Update your Data".format(Prefix), color=discord.Color.red())
        await ctx.send(embed=em22)
    if ainfo["status_confuse"] == "True" or ainfo["status_confuse"]  == True:
        #ainfo["health"] -= 1000 * info["lvl"]
        randomnumbersim = random.randint(1, 4)
        print("randomnumbersim")
        print(randomnumbersim)
        if randomnumbersim == 1:
            gain = 1 * ainfo["lvl"]
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
        elif randomnumbersim == 2:
            gain = 10 * ainfo["lvl"]
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
        elif randomnumbersim == 3:
            gain = 100 * ainfo["lvl"]
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
        else:
            gain = 1000 * ainfo["lvl"]
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send("You are Confused and Hit Yourself!!\n {} Damage\n Use Command\n`{}buy` to buy  Pot to get Clean!!!".format(gain,Prefix))
        return
    else:
        print("Not status_confuse")
    if ainfo["status_jump"]  == "True" or ainfo["status_jump"]  == True:
        if bname == aname:
            print("a=b")
            meters_max = ainfo["meters_max"]
            meters = ainfo["meters"]
            meters_high = ainfo["meters_high"]
            ainfo["status_confuse"] = "True"
            #ainfo["status_hide"] = "False"
            ainfo["status_jump"] = "False"
            #ainfo["status_trap"] = "False"
            meters_max = ainfo["meters_max"] + meters_high
            damage = random.randint(1,meters_max)
            meters = random.randint(1,meters_max)
            gain1 = damage * meters
            #em1111 = discord.Embed(description="\n You Jump even higher {} meters!\n Please use `{}a @user` or `{}f` to Attack or Fight".format(meters,Prefix,Prefix), color=discord.Color.red())
            #await ctx.send(embed=em1111)
            #ainfo["health"] -= 1000 * info["lvl"]
            randomnumbersim = random.randint(1, 4)
            print("randomnumbersim")
            print(randomnumbersim)
            if randomnumbersim == 1:
                gain = 1 * ainfo["lvl"]
                ainfo["health"] -= gain + gain1
                if ainfo["health"] <= 0:
                    ainfo["health"] = 0
            elif randomnumbersim == 2:
                gain = 10 * ainfo["lvl"]
                ainfo["health"] -= gain + gain1
                if ainfo["health"] <= 0:
                    ainfo["health"] = 0
            elif randomnumbersim == 3:
                gain = 100 * ainfo["lvl"]
                ainfo["health"] -= gain + gain1
                if ainfo["health"] <= 0:
                    ainfo["health"] = 0
            else:
                gain = 1000 * ainfo["lvl"]
                ainfo["health"] -= gain + gain1
                if ainfo["health"] <= 0:
                    ainfo["health"] = 0
            total = gain + gain1
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            em1111 = discord.Embed(description="\n You make a Jump Attack on {} {} meters high!\n for {} Damage\n You looks Confused?!?".format(bname,meters, total), color=discord.Color.red())
            await ctx.send(embed=em1111)
            return
        else:
            print("a=b NOT")
            meters_max = ainfo["meters_max"]
            meters = ainfo["meters"]
            meters_high = ainfo["meters_high"]
            ainfo["status_confuse"] = "True"
            #ainfo["status_hide"] = "False"
            ainfo["status_jump"] = "False"
            #ainfo["status_trap"] = "False"
            meters_max = ainfo["meters_max"] + meters_high
            ainfo["status_confuse"] = "False"
            #ainfo["status_hide"] = "False"
            ainfo["status_jump"] = "False"
            #ainfo["status_trap"] = "False"
            meters_max = ainfo["meters_max"]
            damage = random.randint(1,meters_max)
            meters = random.randint(1,meters_max)
            gain1 = damage * meters
            #em1111 = discord.Embed(description="\n You Jump even higher {} meters!\n Please use `{}a @user` or `{}f` to Attack or Fight".format(meters,Prefix,Prefix), color=discord.Color.red())
            #await ctx.send(embed=em1111)
            #ainfo["health"] -= 1000 * info["lvl"]
            randomnumbersim = random.randint(1, 4)
            print("randomnumbersim")
            print(randomnumbersim)
            if randomnumbersim == 1:
                gain = 1 * ainfo["lvl"]
                binfo["health"] -= gain + gain1
                if binfo["health"] <= 0:
                    binfo["health"] = 0
            elif randomnumbersim == 2:
                gain = 10 * ainfo["lvl"]
                binfo["health"] -= gain + gain1
                if binfo["health"] <= 0:
                    binfo["health"] = 0
            elif randomnumbersim == 3:
                gain = 100 * ainfo["lvl"]
                binfo["health"] -= gain + gain1
                if binfo["health"] <= 0:
                    binfo["health"] = 0
            else:
                gain = 1000 * ainfo["lvl"]
                binfo["health"] -= gain + gain1
                if binfo["health"] <= 0:
                    binfo["health"] = 0
            total = gain + gain1
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            em1111 = discord.Embed(description="\n You make a Jump Attack on {} {} meters high!\n for {} Damage\n".format(bname,meters, total), color=discord.Color.red())
            await ctx.send(embed=em1111)
            return
    else:
        pass
    if numskill == "0":
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            await ctx.send("List of Available Skills".format(ctx.message.author.id))
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
            ainfo["location"] = ctx.channel
            ainfo["where"] = ctx.channel
            if "GameMaster" in data5:
                print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
                print("numskill222")
                em1111 = discord.Embed(description="\n You Clean {}\n Please use `{}a` or `{}s` to Attack or Steal".format(bname,Prefix,Prefix), color=discord.Color.red())
                await ctx.send(embed=em1111)
                print(aname)
                print(bname)
                if bname == aname:
                    print("a=b")
                    ainfo["status_confuse"] = "False"
                    ainfo["status_hide"] = "False"
                    ainfo["status_jump"] = "False"
                    ainfo["status_trap"] = "False"
                else:
                    print("else")
                    binfo["status_confuse"] = "False"
                    binfo["status_hide"] = "False"
                    binfo["status_jump"] = "False"
                    binfo["status_trap"] = "False"
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                await ctx.send("You are Not")
        except:
            print("AdminFail")
    if numskill == "3":
        try:
            ainfo = fileIO("players/{}/info.json".format(author.id), "load")
            user = bot.get_user(int(ctx.message.author.id))
            await ctx.send("{} is your id".format(ctx.message.author.id))
            data = {ctx.message.author.id}
            data1 = int(ctx.message.author.id)
            data2 = str(ctx.message.author.id)
            data3 = str(ctx.message.channel)
            data4 = str(ctx.author.guild.roles)
            data5 = str(ctx.author.roles)
            #await ctx.send(ctx.author.mention)
            #await message.channel.send(message.author.mention)
            #await message.channel.send(ctx.channel)
            ainfo["location"] = ctx.channel
            if "GameMaster" in data5:
                print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
                print("numskill222")
                em1111 = discord.Embed(description="\n You Clean {}\n Please use `{}a` or `{}s` to Attack or Steal".format(bname,Prefix,Prefix), color=discord.Color.red())
                await ctx.send(embed=em1111)
                print(aname)
                print(bname)
                if bname == aname:
                    print("a=b")
                    ainfo["status_confuse"] = "False"
                    ainfo["status_hide"] = "False"
                    ainfo["status_jump"] = "False"
                    ainfo["status_trap"] = "False"
                else:
                    print("else")
                    binfo["status_confuse"] = "False"
                    binfo["status_hide"] = "False"
                    binfo["status_jump"] = "False"
                    binfo["status_trap"] = "False"
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                return
            else:
                await ctx.send("You are Not")
        except:
            print("AdminFail")
    if binfo["status_jump"] == "True":
        gain = 1000 * ainfo["lvl"]
        ainfo["health"] -= gain
        if ainfo["health"] <= 0:
            ainfo["health"] = 0
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send(" {} is Flying High\n And Spit on you {} Damage\n\nWait until he come down".format(bname,gain))
        return
    else:
        print("Not status_jump")
    if ainfo["status_ddos"] == "True":
        ddos_attacker = ainfo["ddos_attacker"]
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send(" {} Is the Attacker Who DDOS your System\n USE COMMAND `{}login`\nto Fight back an Epic Ehtical NFT Hacking Simulation\n\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(ddos_attacker,Prefix))
        return
    else:
        print("Not status_ddos")
    if numskill == "2":
        print("numskill")
        em1111 = discord.Embed(description="\n You Swing on {}\n Please use `{}a` or `{}s` to Attack or Steal".format(bname,Prefix,Prefix), color=discord.Color.red())
        await ctx.send(embed=em1111)
        binfo["status_confuse"] = "True"
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
    if binfo["status_trap"] == "True":
        gain = 100000 * ainfo["lvl"]
        ainfo["health"] -= gain
        binfo["status_trap"] = "False"
        if ainfo["health"] <= 0:
            ainfo["health"] = 0
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        await ctx.send("You Ring the Bell\n DING DONG {} Damage!!! {} set up a Trap and You Fall IN!\n|n USE COMMAND `{}bomb <@target>`\nto drop a bomb!\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(gain,bname,Prefix))
        binfo["status_trap"] = "False"
        #binfo = fileIO("players/{}/info.json".format(user.id), "safe")
        #ainfo = fileIO("players/{}/info.json".format(author.id), "safe")
        return
    else:
        pass
    if binfo["status_hide"] == "True":
        print("status_hide True")
        await ctx.send(" `{}` Is Hiddn!!!\n\n Use Command\n `{}search | {}look <@User>`\n to find and Attack!\n USE COMMAND `{}l` or any other command to show the bot where you are!\n".format(bname,Prefix,Prefix,Prefix))
        print("a1")
        try:
            fileIO("players/{}/info.json".format(user.id), "save", binfo)
            gain = 100000 * binfo["lvl"]
        except:
            print("b error")
        try:
            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
            ainfo["health"] -= gain
            if ainfo["health"] <= 0:
                ainfo["health"] = 0
        except:
            print("a error")
        print("a12")
        #await ctx.send("{} Is hidden under a Tree\n USE COMMAND `{}search`\nto Find trails\n\n `ALL A GAME NOTHING REAL EXCEPT DATA STORED !!! SO DO NOT USE ANY REAL DATA EXCEPT WALLET ADDRES OF COURSE!!!".format(bname,Prefix))
        return
    else:
        pass
    if binfo["infight_status"] == "Death":
        await ctx.send("Is K.O. \n and can not Fight!".format())
        return
    else:    #fight#print("Fight!!!")
        GuildAttackera = ainfo["castle_guild_name"]
        GuildAttackerb = binfo["castle_guild_name"]
        cinfo = fileIO("global/info.json".format(author.id), "load")
        #attackerGuild = cinfo["name"]
        castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
        castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
        castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
        castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
        castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
        scorerock = cinfo["Rock_Castle"]["score"]
        scorebp0x0 = cinfo["BP0x0_Castle"]["score"]
        scorescissor = cinfo["Scissor_Castle"]["score"]
        scorehacker = cinfo["Hacker_Guild"]["score"]
        scorepaper = cinfo["Paper_Castle"]["score"]
        ainfo["selected_enemy_player"] = binfo["name"]
        GuildAttacker = ainfo["castle_guild_name"]
        GuildOpfer = binfo["castle_guild_name"]
        if GuildAttackera == "RockCastle": #ROCK
            attackerGuild = cinfo["Rock_Castle"]["name"]
        if GuildAttackera == "ScissorCastle":    #SCISSOR
            attackerGuild = cinfo["Scissor_Castle"]["name"]
        if GuildAttackera == "PaperCastle": #PAPER
            attackerGuild = cinfo["Paper_Castle"]["name"]
        if GuildAttackera == "BP0x0_Castle": #BP0x0_Castle
            attackerGuild = cinfo["BP0x0_Castle"]["name"]
        if GuildAttackera == "Hacker_Guild":    #Hacker_Guild
            attackerGuild = cinfo["Hacker_Guild"]["name"]
        if GuildAttackera == "BP0x0_Poker": #BP0x0_Poker
            attackerGuild = cinfo["BP0x0_Poker"]["name"]
        cowner = binfo["castle_owner"]
        cname = binfo["castle_name"]
        brank = binfo["rank"]
        bname = binfo["name"]
        bhealt = round(binfo["health"], 0)
        bgold = binfo["gold"]
        bbuff = binfo["buff"]
        bboco = binfo["boco"]
        ball_defence = binfo["all_defence"]
        ball_attack = binfo["all_total_base_attack"]
        arank = ainfo["rank"]
        aname = ainfo["name"]
        ahealt = round(ainfo["health"], 0)
        abuff = ainfo["buff"]
        aall_defence = ainfo["all_defence"]
        aall_attackv = ainfo["all_total_base_attack"]
        try: # LV plus a  ++TOWER PLUS!!! #point = pointt + towerAmount + towerLv + atkLv + buff
            castle_guild_towerGuild = ainfo["castle_guild_tower"]
            castle_guild_towerPlayer = ainfo["castle_tower"]
            castle_guild_tower_lvl = ainfo["castle_guild_tower_lvl"]
            castle_tower_lvl = ainfo["castle_tower_lvl"]
            tower_inventory = ainfo["tower_inventory"]
            inbuff = ainfo["inbuff"]
            box_buff = ainfo["box_buff"]
            castle_atk = ainfo["castle_atk"]
            castle_drop_atk = ainfo["castle_drop_atk"]
            #castle_atk_lvl = ainfo["castle_atk_lvl"]
            try:
                configInfo = fileIO("config/config.json", "load")
                score_rock = configInfo["score_rock"]
                score_scissor = configInfo["score_scissor"]
                score_paper = configInfo["score_paper"]
                score_hacker = configInfo["score_hacker"]
                score_bp0x0 = configInfo["score_bp0x0"]
                score_poker = configInfo["score_poker"]
                score_alien = configInfo["score_alien"]
                guildWar = configInfo["guildWar"]
            except:
                pass
            if guildWar == "True" or guildWar == True:
                guildWar_castle_guild_tower = ainfo["castle_guild_tower"]
                guildWar_info_member = cinfo[attackerGuild]["info_member"]
                guildWar_tower = cinfo[attackerGuild]["tower"]
                castle_guild_towerAll = guildWar_tower + guildWar_castle_guild_tower
                guildWar_castle_tower_lvlb = cinfo[attackerGuild]["castle_tower_lvl"]
                if guildWar_castle_tower_lvlb <= 0:
                    guildWar_castle_tower_lvlb = 0.001
                guildWar_castle_tower_lvla = ainfo["castle_tower_lvl"]
                castle_tower_lvlv = guildWar_castle_tower_lvlb / 100
                castle_tower_lvl =  castle_tower_lvlv + guildWar_castle_tower_lvla
                #guildWar_tower_inventory = cinfo["tower_inventory"]
                #tower_inventory = ainfo["tower_inventory"]
                #tower_inventory += guildWar_tower_inventory
                #guildWar_inbuff = cinfo["inbuff"]
                #inbuff += guildWar_inbuff
                castle_atk = cinfo[attackerGuild]["castle_atk"] * guildWar_info_member
                guildWar_castle_atk_lvl = cinfo[attackerGuild]["castle_atk_lvl"] / 100
                if guildWar_castle_atk_lvl <= 0:
                    guildWar_castle_atk_lvl = 0.001 / 100
                guildWar_castle_atk_lvl = guildWar_castle_atk_lvl / 100
                castle_drop_atkc = cinfo[attackerGuild]["castle_atk"] / 100
                if castle_drop_atkc <= 0:
                    castle_drop_atkc = 0.001 / 100
                castle_drop_atkc = castle_drop_atkc / 100
                castle_atk_lvl = guildWar_castle_atk_lvl + castle_drop_atk
                TowerAll = castle_guild_towerAll * castle_tower_lvl
                TotalTowerLVlAll = castle_tower_lvl
                TotalatkAll = castle_atk * castle_tower_lvl
                TotalatkLVlAll = castle_atk_lvl
                aall_attack = TowerAll + TotalTowerLVlAll + TotalatkAll + TotalatkLVlAll
            else:
                lvl_attack = ainfo["lvl_attack"]
                aall_attack = aall_attackv + lvl_attack + TotalTowerLVlAll + TotalatkAll + TotalatkLVlAll
                towerALL = castle_guild_towerGuild + castle_guild_towerPlayer
                castle_guild_tower_lvl = cinfo[attackerGuild]["castle_guild_tower_lvl"]
                castle_tower_lvlv += castle_guild_tower_lvl / 100
                castle_tower_lvlx = ainfo["castle_tower_lvl"]
                castle_tower_lvlvv += castle_tower_lvlx / 100
                castle_tower_lvl =  castle_tower_lvlv + castle_tower_lvlvv
                towerAtk = aall_attackv * castle_tower_lvl
                aall_attack = aall_attackv + towerAtk
        except:
            aall_attackv = ainfo["all_total_base_attack"]
        castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
        castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
        castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
        castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
        castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
        scorerock = cinfo["Rock_Castle"]["score"]
        scorebp0x0 = cinfo["BP0x0_Castle"]["score"]
        scorescissor = cinfo["Scissor_Castle"]["score"]
        scorehacker = cinfo["Hacker_Guild"]["score"]
        scorepaper = cinfo["Paper_Castle"]["score"]
        ainfo["selected_enemy_player"] = binfo["name"]
        GuildAttacker = ainfo["castle_guild_name"]
        GuildOpfer = binfo["castle_guild_name"]
        print("OK hier")
        if GuildAttackera == "RockCastle": #ROCK
            calcScore = cinfo["Rock_Castle"]["score"]
            castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
            score = ainfo["castle_count_score"]
            cinfo["Rock_Castle"]["castle_guild_lvl"] += 0.1
        if GuildAttackera == "ScissorCastle":    #SCISSOR
            calcScore = cinfo["Scissor_Castle"]["score"]
            cinfo["Scissor_Castle"]["castle_guild_lvl"] += 0.1
            castle_guild_lvla = cinfo["Scissor_Castle"]["castle_guild_lvl"]
            score = ainfo["castle_count_score"]
        if GuildAttackera == "PaperCastle": #PAPER
            calcScore = cinfo["Paper_Castle"]["score"]
            cinfo["Paper_Castle"]["castle_guild_lvl"] += 0.1
            score = ainfo["castle_count_score"]
        if GuildAttackerb == "RockCastle": #ROCK
            castle_guild_lvlb = cinfo["Rock_Castle"]["castle_guild_lvl"]
            score = binfo["castle_count_score"]
            cinfo["Rock_Castle"]["castle_guild_lvl"] -= 0.1
            if castle_guild_lvlb <= 0:
                binfo["castle_count_score"] = 0
                cinfo["Rock_Castle"]["castle_guild_lvl"] = 0
            else:
                print("rockb")
        if GuildAttackerb == "ScissorCastle":    #SCISSOR
            cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 0.1
            castle_guild_lvlb = cinfo["Scissor_Castle"]["castle_guild_lvl"]
            score = binfo["castle_count_score"]
            if castle_guild_lvlb <= 0:
                binfo["castle_count_score"] = 0
                cinfo["Scissor_Castle"]["castle_guild_lvl"] = 0
            else:
                print("scissorb")
        if GuildAttackerb == "PaperCastle": #PAPER
            cinfo["Paper_Castle"]["castle_guild_lvl"] -= 0.1
            score = binfo["castle_count_score"]
            if castle_guild_lvlb <= 0:
                cinfo["Paper_Castle"]["castle_guild_lvl"] = 0
                binfo["castle_count_score"] = 0
            else:
                print("paperb")
        print("Drausen Drine HHH")
        try: # points calc
            pointv = aall_attack - ball_defence
            this100 = calcScore / 100
            point = pointv * this100
            #pointt = pointv * this100
            #point = pointt + towerAmount + towerLv + atkLv + buff
        except:
            point = 0
            print("point except")
        try:
            point1v = aall_defence - ball_attack
            this1001 = calcScore / 100
            point1 = poin1tv * this1001
        except:
            point1 = 0
            print("point1 except")
        try:
            atk1v = ball_defence - aall_attack
            this1002 = calcScore / 100
            atk1 = atk1v * this1002
            print("Attak1 2")
            print(atk1)
        except:
            atk1 = 0
            print("atk1 except")
        try:
            atk2v = aall_defence - ball_attack
            this10025 = calcScore / 100
            atk2 = atk2v * this10025
            print("Attak1 2")
            print(atk2)
        except:
            atk2 = 0
            print("atk2 except")
        try: # bbbbb calc
            scorev = aall_attack - ball_defence
            this10024 = calcScore / 100
            score = scorev * this10024
        except:
            score = 0
            print("score except")
        try:
            point1v = aall_defence - ball_attack
            this10023 = calcScore / 100
            point1 = point1v * this10023
        except:
            point1 = 0
            print("point1 except")
        try:
            print("pointx")
            print(point)
            print("point1x")
            print(point1)
            print("aname")
            print(aname)
            print("bname")
            print(bname)
            print("cowner")
            print(cowner)
        except:
            print("1 except")
        try:
            print("pointx")
            print(point)
        except:
            print("1 except")
        try:
            print("pointx")
            print(point)
        except:
            print("1 except")
        print("Drausen Drine")
        if cowner == True :
            print("Drine")
            catk = binfo["castle_all_attack"]
            cdef = binfo["castle_all_defence"]
            clvl = binfo["castle_lvl"]
            castle_guild_namea = ainfo["castle_guild_name"] # castle_guild_name
            castle_guild_lvla = ainfo["castle_guild_lvl"]
            castle_guild_nameb = binfo["castle_guild_name"]
            castle_guild_lvlb = binfo["castle_guild_lvl"]
            pointbrake = aall_attack + catk
            point1brake = aall_defence + cdef
            point = pointbrake - aall_defence
            point1 = point1brake - ball_attack
            print("pointy")
            print(point)
            print("point1y")
            print(point1)
            cname = binfo["castle_name"]
            cname = ainfo["castle_name"]
            await ctx.send("{} is from **{}'s** and own the Castle **{}** \n with **Level {}**.\n\n".format(user.mention, castle_guild_nameb, cname, clvl))
            await ctx.send("{} are you sure to Fight\n\n+ Yes-No ?\n".format(bname))
            options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if user.id == 788709486142816267 or user.id == 617037497574359050 or user.id == 294882584201003009:
                print("hier")
                chance1 = random.randint(1, 9)
                if chance1 == 1:
                    binfo["health"] *= 2
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 2:
                    binfo["health"] *= 1
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 3:
                    binfo["health"] *= 0.5
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 4:
                    binfo["health"] *= 0.25
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 5:
                    binfo["health"] *= 0.02
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 6:
                    binfo["health"] *= 0.01
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 7:
                    binfo["health"] *= 0.005
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 8:
                    binfo["health"] *= 0.0025
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 9:
                    binfo["health"] *= 0
                    print("Bhealth")
                    print(binfo["health"])
                print("ende von demhier")
            if answer1.content in options2:
                if answer1.content == "Yes" or "yes" or "y" :
                    chance = random.randint(1, 1)
                    print(chance)
                    print("chance  cowner == True")
                    print(chance)
                    if chance == 1:
                        ainfo["infight_status"] = True
                        bname = binfo["name"]
                        bboco = binfo["boco"]
                        bgold = binfo["gold"]
                        bhealt = binfo["health"]
                        ball_attack = binfo["all_total_base_attack"]
                        ball_defence = binfo["all_defence"]
                        bbuff = binfo["buff"]
                        brank = binfo["rank"]
                        ainfo["selected_enemy"] = binfo["name"]
                        bhealt = binfo["health"]
                        ahealt = ainfo["health"]
                        point = aall_attack - ball_defence
                        minusgain = ahealt * 0.01
                        print(minusgain)
                        point1 = minusgain - ahealt
                        bhealt -= point
                        if point <= 0:
                            point = 0
                        await ctx.send("```diff\n+You damaged {}\n with {} points.```".format(bname, point))
                        if bhealt <= 0 and ahealt <= 0: #Draew
                            gain = bboco * 0.25
                            await ctx.send("```diff\n- {} has killed you.\n And you Killed {} \n It's a Draw\n- You lost {} boco```".format(bname, bname, gain))
                            ainfo["boco"] = ainfo["boco"] - gain
                            if ainfo["boco"] < 0:
                                ainfo["boco"] = 0
                                ainfo["health"] = 0
                                #binfo["boco"] = 0
                                binfo["health"] = 0
                                ainfo["selected_enemy"] = "None"
                                ainfo["selected_enemy_player"] = "None"
                                ainfo["infight_status"] = "Death"
                                binfo["infight_status"] = "Death"
                                binfo["enemieskilled"] = binfo["enemieskilled"] + 1
                                ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                                ainfo["deaths"] = ainfo["deaths"] + 1
                                binfo["deaths"] = ainfo["deaths"] + 1
                                #binfo ["castle_rank"] -= 0.1
                                #ainfo ["castle_rank"] -= 0.1
                                ainfo ["castle_count_score"] -= 0.1
                                ainfo ["castle_count_draw"] += 1
                                ainfo ["castle_count_played"] += 1
                                #ainfo ["castle_guild_lvl"] -= 0.01
                                #ainfo ["castle_guard_lvl"] -= 0.01
                                #ainfo ["castle_tower_lvl"] -= 0.01
                                #ainfo ["castle_wall_lvl"] -= 0.01
                                ainfo["selected_enemy"] = "None"
                                ainfo["selected_enemy_player"] = "None"
                                binfo["selected_enemy"] = "None"
                                binfo["selected_enemy_player"] = "None"
                                try:
                                    cinfo = fileIO("global/info.json".format(author.id), "load")
                                    castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                    #guildtoUSE = "Rock_Castle"
                                    castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
                                    #guildtoUSE = "BP0x0_Castle"
                                    castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                    #guildtoUSE = "Scissor_Castle"
                                    castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
                                    #guildtoUSE = "Hacker_Guild"
                                    castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
                                    #guildtoUSE = "Paper_Castle"
                                except:
                                    print("DATA gobal not Loaded")
                                #DRAW
                                ainfo["castle_count_score"] -= 2
                                ainfo["castle_count_draw"] += 1
                                ainfo["castle_count_played"] += 1
                                binfo["castle_count_score"] -= 2
                                binfo["castle_count_draw"] += 1
                                binfo["castle_count_played"] += 1
                                lvl = ainfo["lvl"]
                                lvl = binfo["lvl"]
                                ainfo["exp"] += 100 * lvl
                                binfo["exp"] += 100 * lvl
                                GuildAttackera = ainfo["castle_guild_name"]
                                GuildAttackerb = binfo["castle_guild_name"]
                                if GuildAttackera == "RockCastle": #ROCK
                                    castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                    score = ainfo["castle_count_score"]
                                    cinfo["Rock_Castle"]["castle_guild_lvl"] -= 2
                                    guildtoUSE = "Rock_Castle"
                                    if castle_guild_lvla <= 0:
                                        ainfo["castle_count_score"] = 0
                                        cinfo["Rock_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("rock")
                                if GuildAttackera == "ScissorCastle":    #SCISSOR
                                    cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 2
                                    castle_guild_lvla = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                    score = ainfo["castle_count_score"]
                                    guildtoUSE = "Scissor_Castle"
                                    if castle_guild_lvla <= 0:
                                        ainfo["castle_count_score"] = 0
                                        cinfo["Scissor_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("scissor")
                                if GuildAttackera == "PaperCastle": #PAPER
                                    cinfo["Paper_Castle"]["castle_guild_lvl"] -= 2
                                    score = ainfo["castle_count_score"]
                                    guildtoUSE = "Paper_Castle"
                                    if castle_guild_lvla <= 0:
                                        cinfo["Paper_Castle"]["castle_guild_lvl"] = 0
                                        ainfo["castle_count_score"] = 0
                                    else:
                                        print("paper")
                                if GuildAttackerb == "RockCastle": #ROCK
                                    castle_guild_lvlb = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                    score = binfo["castle_count_score"]
                                    cinfo["Rock_Castle"]["castle_guild_lvl"] -= 2
                                    if castle_guild_lvlb <= 0:
                                        binfo["castle_count_score"] = 0
                                        cinfo["Rock_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("rockb")
                                if GuildAttackerb == "ScissorCastle":    #SCISSOR
                                    cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 2
                                    castle_guild_lvlb = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                    score = binfo["castle_count_score"]
                                    if castle_guild_lvlb <= 0:
                                        binfo["castle_count_score"] = 0
                                        cinfo["Scissor_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("scissorb")
                                if GuildAttackerb == "PaperCastle": #PAPER
                                    cinfo["Paper_Castle"]["castle_guild_lvl"] -= 2
                                    score = binfo["castle_count_score"]
                                    if castle_guild_lvlb <= 0:
                                        cinfo["Paper_Castle"]["castle_guild_lvl"] = 0
                                        binfo["castle_count_score"] = 0
                                    else:
                                        print("paperb")
                                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                fileIO("global/info.json".format(author.id), "save", cinfo)
                        elif ahealt <= 0 and bhealt >= 0: #Lose
                            gain = bboco * 0.0025
                            await ctx.send("```diff\n- {} has killed you\n- You lost {} boco```".format(bname, gain))
                            ainfo["boco"] = ainfo["boco"] - gain
                            if ainfo["boco"] < 0:
                                if ainfo["boco"] == 0:
                                    ainfo["boco"] = 0
                                ainfo["boco"] = 0
                                ainfo["deaths"] = ainfo["deaths"] + 1
                                ainfo ["castle_rank"] -= 0.2
                                ainfo ["castle_count_score"] -= 0.2
                                ainfo ["castle_count_lose"] += 1
                                ainfo ["castle_count_played"] += 1
                                ainfo ["castle_guild_lvl"] -= 0.02
                                ainfo ["castle_guard_lvl"] -= 0.02
                                ainfo ["castle_tower_lvl"] -= 0.02
                                ainfo ["castle_wall_lvl"] -= 0.02
                                ainfo["infight_status"] = "Death"
                                ainfo["selected_enemy"] = "None"
                                ainfo["selected_enemy_player"] = "None"
                                binfo["selected_enemy"] = "None"
                                binfo["selected_enemy_player"] = "None"
                                #cinfo["Rock_Castle"]["castle_guild_lvl"] -= 0.1
                                #cinfo["BP0x0_Castle"]["castle_guild_lvl"] -= 0.1
                                #cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 0.1
                                #cinfo["Hacker_Guild"]["castle_guild_lvl"] -= 0.1
                                #cinfo["Paper_Castle"]["castle_guild_lvl"] -= 0.1
                                castle_guild_namea = ainfo["castle_guild_name"] # castle_guild_namea
                                castle_guild_lvla = ainfo["castle_guild_lvl"]
                                castle_guild_nameb = binfo["castle_guild_name"]
                                castle_guild_lvlb = binfo["castle_guild_lvl"]
                                ainfo["castle_count_score"] -= 2
                                ainfo["castle_count_draw"] += 1
                                ainfo["castle_count_played"] += 1
                                binfo["castle_count_score"] -= 2
                                binfo["castle_count_draw"] += 1
                                binfo["castle_count_played"] += 1
                                lvl = ainfo["lvl"]
                                lvl = binfo["lvl"]
                                ainfo["exp"] += 100 * lvl
                                binfo["exp"] += 1000 * lvl
                                GuildAttackera = ainfo["castle_guild_name"]
                                GuildAttackerb = binfo["castle_guild_name"]
                                if GuildAttackera == "RockCastle": #ROCK
                                    castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                    score = ainfo["castle_count_score"]
                                    cinfo["Rock_Castle"]["castle_guild_lvl"] -= 2
                                    if castle_guild_lvla <= 0:
                                        ainfo["castle_count_score"] = 0
                                        cinfo["Rock_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("rock")
                                if GuildAttackera == "ScissorCastle":    #SCISSOR
                                    cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 2
                                    castle_guild_lvla = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                    score = ainfo["castle_count_score"]
                                    if castle_guild_lvla <= 0:
                                        ainfo["castle_count_score"] = 0
                                        cinfo["Scissor_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("scissor")
                                if GuildAttackera == "PaperCastle": #PAPER
                                    cinfo["Paper_Castle"]["castle_guild_lvl"] -= 2
                                    score = ainfo["castle_count_score"]
                                    if castle_guild_lvla <= 0:
                                        cinfo["Paper_Castle"]["castle_guild_lvl"] = 0
                                        ainfo["castle_count_score"] = 0
                                    else:
                                        print("paper")
                                if GuildAttackerb == "RockCastle": #ROCK
                                    castle_guild_lvlb = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                    score = binfo["castle_count_score"]
                                    cinfo["Rock_Castle"]["castle_guild_lvl"] += 0.2
                                    if castle_guild_lvlb <= 0:
                                        binfo["castle_count_score"] = 0
                                        cinfo["Rock_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("rockb")
                                if GuildAttackerb == "ScissorCastle":    #SCISSOR
                                    cinfo["Scissor_Castle"]["castle_guild_lvl"] += 0.2
                                    castle_guild_lvlb = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                    score = binfo["castle_count_score"]
                                    if castle_guild_lvlb <= 0:
                                        binfo["castle_count_score"] = 0
                                        cinfo["Scissor_Castle"]["castle_guild_lvl"] = 0
                                    else:
                                        print("scissorb")
                                if GuildAttackerb == "PaperCastle": #PAPER
                                    cinfo["Paper_Castle"]["castle_guild_lvl"] += 0.2
                                    score = binfo["castle_count_score"]
                                    if castle_guild_lvlb <= 0:
                                        cinfo["Paper_Castle"]["castle_guild_lvl"] = 0
                                        binfo["castle_count_score"] = 0
                                    else:
                                        print("paperb")
                                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                fileIO("global/info.json".format(author.id), "save", cinfo)
                                return
                        elif bhealt < 0 and ahealt >= 0: #Win
                            num22 = random.randint(1, 2)
                            if num22 == 2 :
                                await _ran(ctx)
                            else:
                                print("no NFTS Chance")
                            gain = bboco * 0.25
                            await ctx.send("```diff\n+ You killed {}\nYou gained {} boco. and +1 kill point.```".format(bname, gain))
                            ainfo["selected_enemy"] = "None"
                            ainfo["selected_enemy_player"] = "None"
                            ainfo["boco"] += gain
                            ainfo ["rankkill"] += 0.1
                            ainfo ["castle_rank"] += 0.1
                            #ainfo ["castle_count_score"] += 0.1
                            #ainfo ["castle_count_win"] += 1
                            #ainfo ["castle_count_played"] += 1
                            #ainfo ["castle_guild_lvl"] += 0.01
                            #ainfo ["castle_guard_lvl"] += 0.01
                            #ainfo ["castle_tower_lvl"] += 0.01
                            #ainfo ["castle_wall_lvl"] += 0.01
                            binfo["infight_status"] = "Death"
                            lootbag = random.randint(1, 14)
                            lootbag100 = random.randint(1, 100)
                            ainfo["health"] -= minusgain
                            binfo["health"] -= point
                            await ctx.send("Your have {} Health\n".format(round(ainfo["health"], 0)))
                            await ctx.send("{} have {} Health\n".format(user.mention, bhealt))
                            ainfo["selected_enemy"] = "None"
                            ainfo["selected_enemy_player"] = "None"
                            binfo["selected_enemy"] = "None"
                            binfo["selected_enemy_player"] = "None"
                            ainfo["castle_count_score"] -= 2
                            ainfo["castle_count_win"] += 1
                            ainfo["castle_count_played"] += 1
                            binfo["castle_count_score"] -= 2
                            binfo["castle_count_lose"] += 1
                            binfo["castle_count_played"] += 1
                            lvl = ainfo["lvl"]
                            lvl = binfo["lvl"]
                            ainfo["exp"] += 1000 * lvl
                            binfo["exp"] += 100 * lvl
                            GuildAttackera = ainfo["castle_guild_name"]
                            GuildAttackerb = binfo["castle_guild_name"]
                            scorerock = cinfo["Rock_Castle"]["score"]
                            if GuildAttackera == "RockCastle": #ROCK
                                castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                score = ainfo["castle_count_score"]
                                cinfo["Rock_Castle"]["castle_guild_lvl"] += 0.1
                                cinfo["Rock_Castle"]["score"] += 0.01
                                cinfo["BP0x0_Castle"]["score"] += 0.01
                            if GuildAttackera == "ScissorCastle":    #SCISSOR
                                cinfo["Scissor_Castle"]["castle_guild_lvl"] += 0.1
                                castle_guild_lvla = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                score = ainfo["castle_count_score"]
                                cinfo["BP0x0_Castle"]["score"] += 0.01
                                cinfo["Scissor_Castle"]["score"] += 0.01
                            if GuildAttackera == "PaperCastle": #PAPER
                                cinfo["Paper_Castle"]["castle_guild_lvl"] += 0.1
                                score = ainfo["castle_count_score"]
                                cinfo["Paper_Castle"]["score"] += 0.01
                                cinfo["BP0x0_Castle"]["score"] += 0.01
                            if GuildAttackerb == "RockCastle": #ROCK
                                castle_guild_lvlb = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                score = binfo["castle_count_score"]
                                cinfo["Rock_Castle"]["castle_guild_lvl"] -= 0.5
                                cinfo["Rock_Castle"]["score"] -= 0.02
                                if castle_guild_lvlb <= 0:
                                    binfo["castle_count_score"] = 0
                                    cinfo["Rock_Castle"]["castle_guild_lvl"] = 0
                                else:
                                    print("rockb")
                            if GuildAttackerb == "ScissorCastle":    #SCISSOR
                                cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 0.5
                                castle_guild_lvlb = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                score = binfo["castle_count_score"]
                                cinfo["Scissor_Castle"]["score"] -= 0.02
                                if castle_guild_lvlb <= 0:
                                    binfo["castle_count_score"] = 0
                                    cinfo["Scissor_Castle"]["castle_guild_lvl"] = 0
                                else:
                                    print("scissorb")
                            if GuildAttackerb == "PaperCastle": #PAPER
                                cinfo["Paper_Castle"]["castle_guild_lvl"] -= 0.5
                                score = binfo["castle_count_score"]
                                cinfo["Paper_Castle"]["score"] -= 0.02
                                if castle_guild_lvlb <= 0:
                                    cinfo["Paper_Castle"]["castle_guild_lvl"] = 0
                                    binfo["castle_count_score"] = 0
                                else:
                                    print("paperb")
                            acastle_lvl = ainfo["castle_lvl"]
                            castle_all_attack_lvl = ainfo["castle_all_attack_lvl"] / 100
                            castle_all_defence_lvl = ainfo["castle_all_defence_lvl"] / 100
                            plus = castle_all_attack_lvl + castle_all_defence_lvl
                            gainEXP = 1000 * plus
                            acastle_exp = ainfo["castle_exp"] + gainEXP
                            acastle_exp_max = ainfo["castle_exp_max"]
                            bcastle_lvl = binfo["castle_lvl"]
                            bcastle_exp = binfo["castle_exp"]
                            bcastle_exp_max = binfo["castle_exp_max"]
                            if acastle_exp >= acastle_exp_max :
                                print("LevelUP Castle")
                                ainfo["castle_lvl"] += 1
                                acastle_exp_max *= 2
                            ainfo["castle_exp"] = acastle_exp
                            ainfo["castle_exp_max"] = acastle_exp_max
                            info["status_jump"] = "False"
                            info["status_hide"] = "False"
                            info["status_trap"] = "False"
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            fileIO("global/info.json".format(author.id), "save", cinfo)
                            return
                        else:
                            await ctx.send("```diff\n+ You killed {}\nYou gained {} boco. and +1 kill point.```".format(bname, gain))
                            ainfo ["castle_rank"] += 0.01
                            ainfo["health"] -= minusgain
                            binfo["health"] -= point
                            await ctx.send("Your have {} Health\n".format(round(ainfo["health"], 0)))
                            await ctx.send("{} have {} Health\n".format(user.mention, bhealt))
                            lvl = ainfo["lvl"]
                            lvl = binfo["lvl"]
                            ainfo["exp"] += 100 * lvl
                            binfo["exp"] += 10 * lvl
                        fileIO("players/{}/info.json".format(user.id), "save", binfo)
                        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                        fileIO("global/info.json".format(author.id), "save", cinfo)
                        return
        if cowner == None or cowner == False or cowner == "None" or cowner == "False" :
            point = aall_attack - ball_defence
            point1 = aall_defence - ball_attack
            print("pointz")
            print(point)
            print("point1z")
            print(point1)
            if bname == aname :
                 await ctx.send("cannot attack your self.\n\n".format(user.mention, bhealt, brank))
                 return
            if bhealt < 0 :
                await ctx.send("{} have {} Health\n and is {} Rank.\n\n".format(user.mention, bhealt, brank))
                await ctx.send("{} can not FIght\n\n".format(bname))
                return
            elif ahealt < 0:
                await ctx.send("{} have {} Health\n and is {} Rank.\n\n".format(user.mention, bhealt, brank))
                await ctx.send("{} can not FIght\n\n".format(bname))
                return
            try:
                binfo = fileIO("players/{}/info.json".format(user.id), "load")
                bname = binfo["name"]
                print("LOAD bname")
                print(bname)
            except:
                print("LOAD FAIL")
            try:
                ainfo = fileIO("players/{}/info.json".format(author.id), "load")
                aname = ainfo["name"]
            except:
                print("LOAD FAIL")
            await ctx.send("You have `{}` Health\n and your Rank `{}`\n\n".format(ahealt, arank))
            print("DrineNONPLAYERCASTLE")
            catk = binfo["castle_all_attack"]
            cdef = binfo["castle_all_defence"]
            clvl = binfo["castle_lvl"]
            castle_guild_namea = ainfo["castle_guild_name"] # castle_guild_name
            castle_guild_lvla = ainfo["castle_guild_lvl"]
            castle_guild_nameb = binfo["castle_guild_name"]
            castle_guild_lvlb = binfo["castle_guild_lvl"]
            pointbrake = aall_attack + catk
            point1brake = aall_defence + cdef
            point = pointbrake - aall_defence
            point1 = point1brake - ball_attack
            print("pointy")
            print(point)
            print("point1y")
            print(point1)
            cname = binfo["castle_name"]
            print(cname)
            cname1 = ainfo["castle_name"]
            print(cname1)
            await ctx.send("{} is from {}'s own the Castle **{}** \n with **Level {}**.\n\n".format(user.mention, castle_guild_nameb, cname, clvl))
            await ctx.send("{} are you sure to Fight\n\n+ Yes-No ?\n".format(bname))
            options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if user.id == 788709486142816267 or user.id == 617037497574359050 or user.id == 294882584201003009:
                print("hier")
                chance1 = random.randint(1, 9)
                if chance1 == 1:
                    binfo["health"] *= 2
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 2:
                    binfo["health"] *= 1
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 3:
                    binfo["health"] *= 0.5
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 4:
                    binfo["health"] *= 0.25
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 5:
                    binfo["health"] *= 0.02
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 6:
                    binfo["health"] *= 0.01
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 7:
                    binfo["health"] *= 0.005
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 8:
                    binfo["health"] *= 0.0025
                    print("Bhealth")
                    print(binfo["health"])
                if chance1 == 9:
                    binfo["health"] *= 0
                    print("Bhealth")
                    print(binfo["health"])
                print("ende von demhier")
            if answer1.content in options2:
                if answer1.content == "Yes" or "yes" or "y" :
                    chance = random.randint(1, 1)
                    print(chance)
                    print("chance  cowner == True")
                    print(chance)
                    if chance == 1:
                        ainfo["infight_status"] = True
                        bname = binfo["name"]
                        bboco = binfo["boco"]
                        bgold = binfo["gold"]
                        bhealt = binfo["health"]
                        ball_attack = binfo["all_total_base_attack"]
                        ball_defence = binfo["all_defence"]
                        bbuff = binfo["buff"]
                        brank = binfo["rank"]
                        ainfo["selected_enemy"] = binfo["selected_enemy_player"]
                        ainfo["selected_enemy_player"] = binfo["name"]
                        bhealt = binfo["health"]
                        ahealt = ainfo["health"]
                        point = aall_attack - ball_defence
                        minusgain = ahealt * 0.01
                        print(minusgain)
                        point1 = minusgain - ahealt
                        bhealt -= point
                        if point <= 0:
                            point = 0
                        await ctx.send("```diff\n+You damaged {}\n with {} points.```".format(bname, point))
                        if bhealt <= 0 and ahealt <= 0: #Draew
                            gain = bboco * 0.25
                            await ctx.send("```diff\n- {} has killed you.\n And you Killed {} \n It's a Draw\n- You lost {} boco```".format(bname, bname, gain))
                            ainfo["boco"] = ainfo["boco"] - gain
                            if ainfo["boco"] < 0:
                                ainfo["boco"] = 0
                                ainfo["health"] = 0
                                #binfo["boco"] = 0
                                binfo["health"] = 0
                                ainfo["selected_enemy"] = "None"
                                ainfo["selected_enemy_player"] = "None"
                                ainfo["infight_status"] = "Death"
                                binfo["infight_status"] = "Death"
                                binfo["enemieskilled"] = binfo["enemieskilled"] + 1
                                ainfo["enemieskilled"] = ainfo["enemieskilled"] + 1
                                ainfo["deaths"] = ainfo["deaths"] + 1
                                binfo["deaths"] = ainfo["deaths"] + 1
                                #binfo ["castle_rank"] -= 0.1
                                #ainfo ["castle_rank"] -= 0.1
                                ainfo ["count_titlenum"] += 1
                                ainfo ["count_pvp_draw"] += 1
                                ainfo ["count_pvp_played"] += 1
                                #ainfo ["castle_guild_lvl"] -= 0.01
                                #ainfo ["castle_guard_lvl"] -= 0.01
                                #ainfo ["castle_tower_lvl"] -= 0.01
                                #ainfo ["castle_wall_lvl"] -= 0.01
                                ainfo["selected_enemy"] = "None"
                                ainfo["selected_enemy_player"] = "None"
                                binfo["selected_enemy"] = "None"
                                binfo["selected_enemy_player"] = "None"
                                try:
                                    cinfo = fileIO("global/info.json".format(author.id), "load")
                                    castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                    castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
                                    castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
                                    castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
                                    castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
                                except:
                                    print("DATA gobal not Loaded")
                                #DRAW
                                ainfo["castle_count_score"] -= 1
                                ainfo["castle_count_draw"] += 1
                                ainfo["castle_count_played"] += 1
                                binfo["castle_count_score"] -= 1
                                binfo["castle_count_draw"] += 1
                                binfo["castle_count_played"] += 1
                                lvl = ainfo["lvl"]
                                lvl = binfo["lvl"]
                                ainfo["exp"] += 100 * lvl
                                binfo["exp"] += 100 * lvl
                                GuildAttackera = ainfo["castle_guild_name"]
                                GuildAttackerb = binfo["castle_guild_name"]
                                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                return
                        elif ahealt <= 0 and bhealt >= 0: #Lose
                            gain = bboco * 0.0025
                            await ctx.send("```diff\n- {} has killed you\n- You lost {} boco```".format(bname, gain))
                            ainfo["boco"] = ainfo["boco"] - gain
                            if ainfo["boco"] < 0:
                                if ainfo["boco"] == 0:
                                    ainfo["boco"] = 0
                                ainfo["boco"] = 0
                                ainfo["deaths"] = ainfo["deaths"] + 1
                                ainfo ["castle_rank"] -= 0.2
                                ainfo ["castle_count_score"] -= 0.2
                                ainfo ["castle_count_lose"] += 1
                                ainfo ["castle_count_played"] += 1
                                ainfo ["castle_guild_lvl"] -= 0.02
                                ainfo ["castle_guard_lvl"] -= 0.02
                                ainfo ["castle_tower_lvl"] -= 0.02
                                ainfo ["castle_wall_lvl"] -= 0.02
                                ainfo["infight_status"] = "Death"
                                ainfo["selected_enemy"] = "None"
                                ainfo["selected_enemy_player"] = "None"
                                binfo["selected_enemy"] = "None"
                                binfo["selected_enemy_player"] = "None"
                                #cinfo["Rock_Castle"]["castle_guild_lvl"] -= 0.1
                                #cinfo["BP0x0_Castle"]["castle_guild_lvl"] -= 0.1
                                #cinfo["Scissor_Castle"]["castle_guild_lvl"] -= 0.1
                                #cinfo["Hacker_Guild"]["castle_guild_lvl"] -= 0.1
                                #cinfo["Paper_Castle"]["castle_guild_lvl"] -= 0.1
                                castle_guild_namea = ainfo["castle_guild_name"] # castle_guild_namea
                                castle_guild_lvla = ainfo["castle_guild_lvl"]
                                castle_guild_nameb = binfo["castle_guild_name"]
                                castle_guild_lvlb = binfo["castle_guild_lvl"]
                                ainfo["count_titlenum"] -= 1
                                ainfo["count_pvp_lose"] += 1
                                ainfo["count_pvp_played"] += 1
                                binfo["count_pvp_score"] -= 1
                                binfo["count_pvp_win"] += 1
                                binfo["count_pvp_played"] += 1
                                lvl = ainfo["lvl"]
                                lvl = binfo["lvl"]
                                ainfo["exp"] += 100 * lvl
                                binfo["exp"] += 1000 * lvl
                                GuildAttackera = ainfo["castle_guild_name"]
                                GuildAttackerb = binfo["castle_guild_name"]
                                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                                return
                        elif bhealt < 0 and ahealt >= 0: #Win
                            num22 = random.randint(1, 60)
                            if num22 == 2 :
                                await _ran(ctx)
                            else:
                                print("no NFTS Chance")
                            gain = bboco * 0.25
                            await ctx.send("```diff\n+ You killed {}\nYou gained {} boco. and +1 kill point.```".format(bname, gain))
                            ainfo["selected_enemy"] = "None"
                            ainfo["selected_enemy_player"] = "None"
                            ainfo["boco"] += gain
                            ainfo ["rankkill"] += 0.1
                            ainfo ["castle_rank"] += 0.1
                            #ainfo ["castle_count_score"] += 0.1
                            #ainfo ["castle_count_win"] += 1
                            #ainfo ["castle_count_played"] += 1
                            #ainfo ["castle_guild_lvl"] += 0.01
                            #ainfo ["castle_guard_lvl"] += 0.01
                            #ainfo ["castle_tower_lvl"] += 0.01
                            #ainfo ["castle_wall_lvl"] += 0.01
                            binfo["infight_status"] = "Death"
                            lootbag = random.randint(1, 14)
                            lootbag100 = random.randint(1, 100)
                            ainfo["health"] -= minusgain
                            binfo["health"] -= point
                            await ctx.send("Your have {} Health\n".format(round(ainfo["health"], 0)))
                            await ctx.send("{} have {} Health\n".format(user.mention, bhealt))
                            ainfo["selected_enemy"] = "None"
                            ainfo["selected_enemy_player"] = "None"
                            binfo["selected_enemy"] = "None"
                            binfo["selected_enemy_player"] = "None"
                            ainfo["count_titlenum"] -= 1
                            ainfo["count_pvp_win"] += 1
                            ainfo["count_pvp_played"] += 1
                            binfo["count_titlenum"] -= 1
                            binfo["count_pvp_lose"] += 1
                            binfo["count_pvp_played"] += 1
                            lvl = ainfo["lvl"]
                            lvlb = binfo["lvl"]
                            ainfo["exp"] += 1000 * lvl
                            binfo["exp"] += 100 * lvlb
                            GuildAttackera = ainfo["castle_guild_name"]
                            GuildAttackerb = binfo["castle_guild_name"]
                            print("csafe")
                            cinfo = fileIO("global/info.json".format(author.id), "load")
                            GuildAttackera = ainfo["castle_guild_name"]
                            gainexpguild =  0.01 * lvlb
                            if GuildAttackera == "RockCastle": #ROCK info
                                cinfo["Rock_Castle"]["castle_guild_lvl"] += gainexpguild
                                #castle_guild_lvla = cinfo["Rock_Castle"]["castle_guild_lvl"]
                                print("rocksafe")
                                print(gainexpguild)
                            if GuildAttackera == "ScissorCastle":    #SCISSOR
                                cinfo["Scissor_Castle"]["castle_guild_lvl"] += gainexpguild
                                print("scissorsafe")
                                print(gainexpguild)
                            if GuildAttackera == "PaperCastle": #PAPER
                                cinfo["Paper_Castle"]["castle_guild_lvl"] += gainexpguild
                                print("papersafe")
                                print(gainexpguild)
                            fileIO("global/info.json".format(author.id), "save", cinfo)
                            fileIO("players/{}/info.json".format(user.id), "save", binfo)
                            fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                            return
                elif answer1.content == "No" or "no" or "N" or "n" :
                    await ctx.send("Nothing Than")
                    return
        else:
            await ctx.send("```diff\n+ You killed {}\nYou gained {} boco. and +1 kill point.```".format(bname, gain))
            ainfo ["castle_rank"] += 0.01
            ainfo["health"] -= minusgain
            binfo["health"] -= point
            await ctx.send("Your have {} Health\n".format(round(ainfo["health"], 0)))
            await ctx.send("{} have {} Health\n".format(user.mention, bhealt))
            lvl = ainfo["lvl"]
            lvl = binfo["lvl"]
            ainfo["exp"] += 100 * lvl
            binfo["exp"] += 10 * lvl
        #info["selected_enemy"] = "None"
        print("end")
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        return
@bot.command()
async def bbbnnn(ctx):
    author = ctx.author
    print("HI")
    await _check_wallet(ctx)

@bot.command()
async def setwallet(ctx, *, account=None):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return

    WalletSetupDone = info["WalletSetupDone"]
    if info["inhavenft_status"] == True:
        em = discord.Embed(description="```diff\n+ Nice you have Wax Wallet!\n Checking if you own any BP0x0 NFT's and how many!```".format(), color=discord.Color.green())
        await ctx.send(embed=em)

        success = info["successCheck"]
        account = info["account"]
        account_to_check = info["account_to_check"]
        wallet = info["account_to_check"]
        info["setwalletdone"] = 5
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print(account)
        print(assets)
        print(success)
        print(Prefix)
        em = discord.Embed(description="```diff\n Wallet: {}\n+ {}'s BP0x0 NFTs!```\n \n Token Check Done?: `{}`\n\n\n\n Use Command: `{}sync` Everytime your BoboPixel0x0 NFT Amount Changes!".format(account, assets, success,Prefix), color=discord.Color.green())
        await ctx.send(embed=em)

        print(" #await _check_wallet0ffffffffffffffffffsetwallet!")
        return

    if WalletSetupDone == 2:
        em = discord.Embed(description="```diff\n+You Already set up your Wallet! If you need to change your Wallet Address Please Call  @bobocoin#2774```".format(), color=discord.Color.green())
        await ctx.send(embed=embed)
    else:
        if account == None:
            em = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
            await ctx.send(embed=em)
            return
        if len(account) < 1 :
            em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
            await ctx.send(embed=em)
            em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
            await ctx.send(embed=em1)
            return
        if len(account) > 13 :
            em = discord.Embed(description="```diff\n- Please Check your spelling!\n {}```".format(account), color=discord.Color.red())
            await ctx.send(embed=em)
            em1 = discord.Embed(description="```diff\n- Set a propper Wallet Address!\n-Like My cn1qw.wam\n\n+ Use Command {}setwallet cn1qw.wam\n\n- Account is TypeError!\n- You Did not enter something```".format(Prefix), color=discord.Color.red())
            await ctx.send(embed=em1)
            return
        if len(account) > 1 and len(account) < 13 :
            print("account")
            print(account)
            info["account_to_check"] = account
            info["account"] = account
            fileIO("players/{}/info.json".format(author.id), "save", info)
            fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ A Moment please Safe and Check your entry...!\n- If it takes to long repeat your COmmnad\n+ {}setwallet {}```".format(Prefix, account), color=discord.Color.blue())
            await ctx.send(embed=em)
            await _check_wallet(ctx)
            
@bot.command()
async def sell(ctx):
    author = ctx.author
    message = ctx.message
    channel = ctx.channel
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    
    if ainfo["race"] and ainfo["class"] == "None":
        await ctx.send("Please start your character using `{}`start`".format(Prefix))
        return
    
    ainfo["where"] = channel.id
    ainfo["location"] = "Market I"
    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    iteminfo = fileIO("core/enemies/all.json", "load")
    location = info["location"]
    
    inv_list = info["all_inventory"]
    if len(inv_list) == 0:
        em = discord.Embed(description="```diff\n- You don't have anything else to sell!```", color=discord.Color.red())
        await ctx.send(embed=em)
        return
    
    choices = [inv_list]
    description1 = "A Friendly Market in the Shadow of the Castle.\nWhere everyone is Welcome to sell their goods.\nhttps://discord.gg/3cH32c9QyU"
    
    em = discord.Embed(title=location, description=description1, color=0x00ff00)
    em.add_field(name=location, value="2 Metal = 1 Boco\n4 Gold = 1 Boco\n8 Stone = 1 Boco\n16 Wood = 1 Boco\n32 Food = 1 Boco\n", inline=False)
    await ctx.send(embed=em)
    
    em1 = discord.Embed(description="```diff\n!==== [{}'s Inventory] ====!\n\n{}\n\n!==== [Supplies] ====!\n\n(1) Food  : {}\n(2) Wood  : {}\n(3) Stone : {}\n(4) Gold  : {}\n(5) Metal : {}\n```".format(info["name"], "\n".join(info["all_inventory"]), round(info["food"], 1), round(info["wood"], 1), round(info["stone"], 1), round(info["gold"], 1), round(info["metal"], 1)), color=discord.Color.blue())
    await ctx.send(embed=em1)
    
    options = ["food", "wood", "stone", "metal", "gold", "boco", "Food", "Wood", "Stone", "Metal", "Gold", "Boco", "1", "2", "3", "4", "5", "6"]
    
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    
    answer1 = await bot.wait_for("message", check=pred)
    
    if answer1.content in inv_list or answer1.content in options:
        em = discord.Embed(description="```diff\n+ Great to see you again!\n```", color=discord.Color.blue())
        await ctx.send(embed=em)
        
        try:
            info["all_inventory"].remove(answer1.content)
            fileIO("players/{}/info.json".format(author.id), "save", info)
            ItemtoSell = str(answer1.content)
            Sellpreis = iteminfo[ItemtoSell]["sell_price"]
            info["boco"] = info["boco"] + Sellpreis
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em2 = discord.Embed(description="```diff\n+ You have sold {} and received {} Boco!```".format(ItemtoSell, Sellpreis), color=discord.Color.green())
            await ctx.send(embed=em2)
        except:
            em3 = discord.Embed(description="```diff\n- Sorry, something went wrong. Please try again.```", color=discord.Color.red())
            await ctx.send(embed=em3)
    else:
        em4 = discord.Embed(description="```diff\n- Invalid choice. Please try again.```", color=discord.Color.red())
        await ctx.send(embed=em4)
        
@bot.command(aliases=["u"])
async def upgrade(ctx):
    message = ctx.message
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    iteminfo = fileIO("core/enemies/all.json", "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    castle_guard_lvl = info["castle_guard_lvl"]
    castle_tower_lvl = info["castle_tower_lvl"]
    box_lvl = info["box_lvl"]
    lvl_attack = info["castle_all_attack_lvl"]
    lvl_defence = info["castle_all_defence_lvl"]
    em = discord.Embed(description="<@{}>\n```diff\n Upgradeable!\n Attack  Level: {}\n Defence Level: {}\n Tower   Level: {}\n Guard   Level: {}\n Box     Level: {}\n\n What Would You Like To Upgrade\n\n 1)Attack, 2)Defence, 3)Tower, 4)Guard, 5)Box\n\n CaseSensitive!\n```".format(author.id, lvl_attack, lvl_defence, castle_tower_lvl, castle_guard_lvl, box_lvl), color=discord.Color.blue())
    await ctx.send(embed=em)
    options = ["Defence", "Attack", "Tower", "Guard", "Box", "1", "2", "3", "4", "5"]
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer1 = await bot.wait_for("message", check=pred)
    if answer1.content in options :
        answer = str(answer1.content)
        box_food_lvl = int(info["box_food_lvl"])
        box_wood_lvl = int(info["box_wood_lvl"])
        box_stone_lvl = int(info["box_stone_lvl"])
        box_gold_lvl = int(info["box_gold_lvl"])
        box_metal_lvl = int(info["box_metal_lvl"])
        box_boco_lvl = int(info["box_boco_lvl"])
        box_army_lvl = int(info["box_army_lvl"])
        box_people_lvl = int(info["box_people_lvl"])
        box_inventory_lvl = int(info["box_inventory_lvl"])
        castle_army_lvl = int(info["castle_army_lvl"])
        castle_army_rock_lvl = int(info["castle_army_rock_lvl"])
        castle_army_paper_lvl = int(info["castle_army_paper_lvl"])
        castle_army_scissor_lvl = int(info["castle_army_scissor_lvl"])
        castle_guard_lvl = int(info["castle_guard_lvl"])
        castle_tower_lvl = int(info["castle_tower_lvl"])
        castle_wall_lvl = int(info["castle_wall_lvl"])
        castle_all_attack_lvl = int(info["castle_all_attack_lvl"])
        castle_all_defence_lvl = int(info["castle_all_defence_lvl"])
        box_food_cost = box_food_lvl * 100
        box_wood_cost = box_wood_lvl * 200
        box_stone_cost = box_stone_lvl * 400
        box_gold_cost = box_gold_lvl * 800
        box_metal_cost = box_metal_lvl * 1600
        box_boco_cost = box_boco_lvl * 3200
        box_army_cost = box_army_lvl * 5000
        box_people_cost = box_people_lvl * 1000
        box_inventory_cost = box_inventory_lvl * 10000
        castle_army_cost = castle_army_lvl * 100
        castle_army_rock_cost = castle_army_rock_lvl * 10000
        castle_army_paper_cost = castle_army_paper_lvl * 10000
        castle_army_scissor_cost = castle_army_scissor_lvl * 10000
        castle_guard_cost = castle_guard_lvl * 1000
        castle_tower_cost = castle_tower_lvl * 1000
        castle_wall_cost = castle_wall_lvl * 1000
        attack_cost = lvl_attack * 100
        defence_cost = lvl_defence * 100
        #if lvl_attack > 0 :
        if answer1.content == "Attack" or answer1.content == "attack" or answer1.content == "1":
            minnum = 1
            maxnum = 26
            RandomNumber = random.randint(minnum, maxnum)
            try:
                if answer1.content == "1":
                    #Attack == answer1.content
                    answer1.content = str(Attack)
                    print("answer1.content")
                    print(answer1.content)
                    print("Attack")
                    print(Attack)
            except:
                print("lvl_attack_1")
                print(lvl_attack)
                print("answer1.content")
                print(answer1.content)
            try:
                Kostenupdate = attack_cost
                BrakeChance = 0
                em = discord.Embed(description="```diff\n+ You are upgrading your Attack!\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, lvl_attack, info["boco"]), color=discord.Color.blue())
                await ctx.send(embed=em)
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer2 = await bot.wait_for("message", check=pred)
                values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                if str(answer2.content) in values:
                    if answer2.content == "{}upgrade".format(Prefix):
                        return
                    if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                        if info["boco"] < Kostenupdate:
                            await ctx.send("Sorry your BoboCoins are not enaf.")
                            return
                        if info["boco"] >= Kostenupdate:
                            info["boco"] = info["boco"] - Kostenupdate
                        if answer1.content == "Attack":
                            minnum = 1
                            maxnum = 26
                            RandomNumber = random.randint(minnum, maxnum)
                            #ItemtoUpgrade = str(answer2.content)
                            print("RandomNumber !!!!")
                            print(RandomNumber)
                            print("castle_all_attack_lvl")
                            print(castle_all_attack_lvl)
                        if castle_all_attack_lvl > 0 and castle_all_attack_lvl < 11 or castle_all_attack_lvl == 0:
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                await ctx.send("Odds 26/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl >= 10 and castle_all_attack_lvl <= 21 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 4
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 :
                                await ctx.send("Odds 25/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 20 and castle_all_attack_lvl < 41 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 8
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 :
                                await ctx.send("Odds 24/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 40 and castle_all_attack_lvl < 81 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 16
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                await ctx.send("Odds 23/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 80 and castle_all_attack_lvl < 161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 32
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                await ctx.send("Odds 22/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 160 and castle_all_attack_lvl < 321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 64
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                await ctx.send("Odds 21/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 320 and castle_all_attack_lvl < 641 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 128
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                await ctx.send("Odds 20/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 640 and castle_all_attack_lvl < 1281 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl  + 256
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                await ctx.send("Odds 19/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 1280 and castle_all_attack_lvl < 2561 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 512
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvlcastle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                await ctx.send("Odds 18/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 2560 and castle_all_attack_lvl < 5121 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 1024
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                await ctx.send("Odds 17/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 5120 and castle_all_attack_lvl < 10241 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2048
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                await ctx.send("Odds 16/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 10240 and castle_all_attack_lvl < 20481 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 4096
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                await ctx.send("Odds 15/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 20480 and castle_all_attack_lvl < 60961 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 8192
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                await ctx.send("Odds 14/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 60920 and castle_all_attack_lvl < 163841 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 16384
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                await ctx.send("Odds 13/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 163840 and castle_all_attack_lvl < 327681 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 32768
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                await ctx.send("Odds 12/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 327681 and castle_all_attack_lvl < 1245361 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 65536
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                await ctx.send("Odds 11/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif  castle_all_attack_lvl > 1245361 and castle_all_attack_lvl < 2621441 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 131072
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                await ctx.send("Odds 10/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 2621440 and castle_all_attack_lvl < 5242881 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 262144
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                await ctx.send("Odds 9/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 5242880 and castle_all_attack_lvl < 10485761 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 524288
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                await ctx.send("Odds 8/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 10485760 and castle_all_attack_lvl < 20971521 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 1048576
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                await ctx.send("Odds 7/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 20971520 and castle_all_attack_lvl < 41943041 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2097152
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                await ctx.send("Odds 6/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 41943040 and castle_all_attack_lvl < 83886081 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 4194304
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                await ctx.send("Odds 5/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 83886080 and castle_all_attack_lvl < 167772161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                 info["castle_all_attack_lvl"] = castle_all_attack_lvl + 8388608
                                 fileIO("players/{}/info.json".format(author.id), "save", info)
                                 await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                 return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                await ctx.send("Odds 4/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 167772160 and castle_all_attack_lvl < 335544321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 16777216
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                await ctx.send("Odds 3/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 335544321 and castle_all_attack_lvl < 671088640 :
                            if RandomNumber == 1 or RandomNumber == 2 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 33554432
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                await ctx.send("Odds 2/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        elif castle_all_attack_lvl > 335544321 and castle_all_attack_lvl < 671088640 :
                            if RandomNumber == 1 :
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 67108864
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                await ctx.send("Crack the Lat ONe Uhuh\n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                            if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                await ctx.send("Odds 1/26")
                                info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_attack_lvl"]))
                                return
                        print("lvl_attack_afterEnd!!!TryLastCALL")
                        print(castle_all_attack_lvl)
                        print("Random NUmberEND11!!!!try")
                        print(RandomNumber)
                        print("castle_all_attack_lvl +2 ENDEND")
                        print(castle_all_attack_lvl)
                        info["castle_all_attack_lvl"] = castle_all_attack_lvl + 2
                        print("castle_all_attack_lvl +2 ENDENDEmd")
                        print(castle_all_attack_lvl)
                        Kostenupdate = 10000
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                        await ctx.send("Ok then.")
                    else:
                        await ctx.send("Please choose one of the options next time.")
            except:
                print("lvl_attack_afterEndTry")
                print(castle_all_attack_lvl)
                print("Random NUmberENDtry")
                print(RandomNumber)
        elif answer1.content == "Defence" or answer1.content == "defence" or answer1.content == "2":
            minnum = 1
            maxnum = 26
            RandomNumber = random.randint(minnum, maxnum)
            try:
                Kostenupdate = defence_cost
                BrakeChance = 0
                bobocoins = info["boco"]
                bobocoins = round(info["boco"], 0)
                em1 = discord.Embed(description="```diff\n+ You are upgrading your Defencens!\n\n Costs-{}\n\n Level+{}\n\n You have Bobocoins\n+{}\n\n Wanna Try?\n+ Yes-No\n```".format(Kostenupdate, castle_all_defence_lvl, bobocoins), color=discord.Color.blue())
                await ctx.send(embed=em1)
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer2 = await bot.wait_for("message", check=pred)
                values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                if str(answer2.content) in values:
                    if answer2.content == "{}upgrade".format(Prefix):
                        return
                    if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                        if info["boco"] < Kostenupdate:
                            await ctx.send("Sorry your BoboCoins  are not enaf.")
                            return
                        if info["boco"] >= Kostenupdate:
                            info["boco"] = info["boco"] - Kostenupdate
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await ctx.send("Paid.")
                        if answer1.content == "Defence" or answer1.content == "defence" or answer1.content == "2":
                            minnum = 1
                            maxnum = 26
                            RandomNumber = random.randint(minnum, maxnum)
                            #ItemtoUpgrade = str(answer2.content)
                            print("RandomNumber !!!!")
                            print(RandomNumber)
                            print("castle_all_defence_lvl")
                            print(castle_all_defence_lvl)
                        if castle_all_defence_lvl > 0 and castle_all_defence_lvl < 11 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                await ctx.send("Odds 26/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl >= 10 and castle_all_defence_lvl <= 21 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 :
                                await ctx.send("Odds 25/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 20 and castle_all_defence_lvl < 41 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 :
                                await ctx.send("Odds 24/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 40 and castle_all_defence_lvl < 81 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                await ctx.send("Odds 23/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 80 and castle_all_defence_lvl < 161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                await ctx.send("Odds 22/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 160 and castle_all_defence_lvlv < 321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                await ctx.send("Odds 21/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 320 and castle_all_defence_lvl < 641 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                await ctx.send("Odds 20/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 640 and castle_all_defence_lvl < 1281 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                await ctx.send("Odds 19/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 1280 and castle_all_defence_lvl < 2561 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                await ctx.send("Odds 18/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 2560 and castle_all_defence_lvl < 5121 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                await ctx.send("Odds 17/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 5120 and castle_all_defence_lvl < 10241 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                await ctx.send("Odds 16/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 10240 and castle_all_defence_lvl < 20481 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                await ctx.send("Odds 15/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 20480 and castle_all_defence_lvl < 60961 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                await ctx.send("Odds 14/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 60920 and castle_all_defence_lvl < 163841 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                await ctx.send("Odds 13/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 163840 and castle_all_defence_lvl < 327681 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                await ctx.send("Odds 12/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 327681 and castle_all_defence_lvl < 1245361 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                await ctx.send("Odds 11/26")
                                info["castle_all_defence_lvl"] = lvl_defencev + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif  castle_all_defence_lvl > 1245361 and castle_all_defence_lvl < 2621441 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                await ctx.send("Odds 10/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 2621440 and castle_all_defence_lvl < 5242881 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                await ctx.send("Odds 9/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 5242880 and castle_all_defence_lvl < 10485761 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                await ctx.send("Odds 8/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 10485760 and castle_all_defence_lvl < 20971521 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                await ctx.send("Odds 7/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 20971520 and castle_all_defence_lvl < 41943041 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                await ctx.send("Odds 6/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 41943040 and castle_all_defence_lvl < 83886081 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                await ctx.send("Odds 5/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 83886080 and castle_all_defence_lvl < 167772161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                 info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                 fileIO("players/{}/info.json".format(author.id), "save", info)
                                 await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                 return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                await ctx.send("Odds 4/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 167772160 and castle_all_defence_lvl < 335544321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                await ctx.send("Odds 3/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 335544321 and castle_all_defence_lvl < 671088640 :
                            if RandomNumber == 1 or RandomNumber == 2 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                await ctx.send("Odds 2/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        elif castle_all_defence_lvl > 335544321 and castle_all_defence_lvl < 671088640 :
                            if RandomNumber == 1 :
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                await ctx.send("Crack the Lat ONe Uhuh\n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                            if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                await ctx.send("Odds 1/26")
                                info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_all_defence_lvl"]))
                                return
                        print("lvl_attack_afterEnd!!!TryLastCALL")
                        print(castle_all_defence_lvl)
                        print("Random NUmberEND11!!!!try")
                        print(RandomNumber)
                        print("castle_all_defence_lvl +2 ENDEND")
                        print(lvl_defence)
                        info["castle_all_defence_lvl"] = castle_all_defence_lvl + 2
                        print("castle_all_defence_lvl +2 ENDENDEmd")
                        print(castle_all_defence_lvl)
                        Kostenupdate = 10000
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                        await ctx.send("Ok then.")
                    else:
                        await ctx.send("Please choose one of the options next time.")
            except:
                print("castle_all_defence_lvl")
                print(castle_all_defence_lvl)
                print("Random NUmberENDtry")
                print(RandomNumber)
        elif answer1.content == "Tower" or answer1.content == "tower" or answer1.content == "3":
            minnum = 1
            maxnum = 26
            RandomNumber = random.randint(minnum, maxnum)
            if info["castle_tower"] <= 0:
                em3 = discord.Embed(description="```diff\n+ You need a Tower First!\n\n- USE COMMAND {}buy > Castle > Tower\n ```".format(Prefix), color=discord.Color.blue())
                await ctx.send(embed=em3)
                return
            try:
                Kostenupdate = defence_cost
                BrakeChance = 0
                bobocoins = info["boco"]
                bobocoins = round(info["boco"], 0)
                em2 = discord.Embed(description="```diff\n+ You are upgrading your Tower!\n\n This is much stronger!\n\n Covers Wall and tower.\n\n Costs-{}\n Level+{}\n\n You have Bobocoins\n+{}\n\n Wanna Try?\n+ Yes-No \n\n```".format(Kostenupdate, castle_tower_lvl, bobocoins), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer2 = await bot.wait_for("message", check=pred)
                values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                if str(answer2.content) in values:
                    if answer2.content == "{}upgrade".format(Prefix):
                        return
                    if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                        if info["boco"] < Kostenupdate:
                            await ctx.send("Sorry your BoboCoins are not enaf.")
                            return
                        if info["boco"] >= Kostenupdate:
                            info["boco"] = info["boco"] - Kostenupdate
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await ctx.send("Paid.")
                        if answer1.content == "Tower" or answer1.content == "tower" or answer1.content == "3":
                            minnum = 1
                            maxnum = 26
                            RandomNumber = random.randint(minnum, maxnum)
                            #ItemtoUpgrade = str(answer2.content)
                            print("RandomNumber !!!!")
                            print(RandomNumber)
                            print("lvl_defence")
                            print(lvl_defence)
                        if castle_tower_lvl > 0 and castle_tower_lvl < 11 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                await ctx.send("Odds 26/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl >= 10 and castle_tower_lvl <= 21 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 :
                                await ctx.send("Odds 25/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 20 and castle_tower_lvl < 41 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 :
                                await ctx.send("Odds 24/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 40 and castle_tower_lvl < 81 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                await ctx.send("Odds 23/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 80 and castle_tower_lvl < 161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                await ctx.send("Odds 22/26")
                                info["castle_tower_lvl"] = castle_tower_lvlcastle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 160 and castle_tower_lvl < 321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                await ctx.send("Odds 21/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 320 and castle_tower_lvl < 641 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                await ctx.send("Odds 20/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 640 and castle_tower_lvl < 1281 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                await ctx.send("Odds 19/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 1280 and castle_tower_lvl < 2561 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                await ctx.send("Odds 18/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 2560 and castle_tower_lvl < 5121 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                info["castle_tower_lvl"] = lvl_defence * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["lvl_defence"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                await ctx.send("Odds 17/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["lvl_defence"]))
                                return
                        elif castle_tower_lvl > 5120 and castle_tower_lvl < 10241 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                await ctx.send("Odds 16/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 10240 and castle_tower_lvl < 20481 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                await ctx.send("Odds 15/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 20480 and castle_tower_lvl < 60961 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                await ctx.send("Odds 14/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 60920 and castle_tower_lvl < 163841 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                await ctx.send("Odds 13/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 163840 and castle_tower_lvl < 327681 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                await ctx.send("Odds 12/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 327681 and castle_tower_lvl < 1245361 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                await ctx.send("Odds 11/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif  castle_tower_lvl > 1245361 and castle_tower_lvl < 2621441 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                await ctx.send("Odds 10/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 2621440 and castle_tower_lvl < 5242881 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                await ctx.send("Odds 9/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 5242880 and castle_tower_lvl < 10485761 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                await ctx.send("Odds 8/26")
                                info["castle_tower_lvlv"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 10485760 and castle_tower_lvl < 20971521 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                await ctx.send("Odds 7/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 20971520 and castle_tower_lvlcastle_tower_lvl < 41943041 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                await ctx.send("Odds 6/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 41943040 and castle_tower_lvl < 83886081 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                await ctx.send("Odds 5/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 83886080 and castle_tower_lvl < 167772161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                 info["castle_tower_lvl"] = castle_tower_lvl * 2
                                 info["castle_wall_lvl"] = castle_wall_lvl * 2
                                 fileIO("players/{}/info.json".format(author.id), "save", info)
                                 await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                 return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                await ctx.send("Odds 4/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 167772160 and castle_tower_lvl < 335544321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                await ctx.send("Odds 3/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 335544321 and castle_tower_lvl < 671088640 :
                            if RandomNumber == 1 or RandomNumber == 2 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                await ctx.send("Odds 2/26")
                                info["castle_tower_lvl"] = castle_tower_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                return
                        elif castle_tower_lvl > 335544321 and castle_tower_lvl < 671088640 :
                            if RandomNumber == 1 :
                                info["castle_tower_lvl"] = castle_tower_lvl * 2
                                info["castle_wall_lvl"] = castle_wall_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_tower_lvl"]))
                                await ctx.send("Crack the Lat ONe Uhuh\n\n Congratulations".format(info["castle_tower_lvlcastle_tower_lvl"]))
                                return
                            if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                await ctx.send("Odds 1/26")
                                info["lvl_defence"] = lvl_defence + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["lvl_defence"]))
                                return
                        print("lvl_attack_afterEnd!!!TryLastCALL")
                        print(castle_tower_lvl)
                        print("Random NUmberEND11!!!!try")
                        print(RandomNumber)
                        print("castle_tower_lvl +2 ENDEND")
                        print(castle_tower_lvl)
                        info["castle_tower_lvl"] = lvl_defence + 2
                        print("castle_tower_lvl +2 ENDENDEmd")
                        print(castle_tower_lvl)
                        Kostenupdate = 10000
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                        await ctx.send("Ok then.")
                    else:
                        await ctx.send("Please choose one of the options next time.")
            except:
                print("tower")
                print(lvl_defence)
                print("Random NUmberENDtry")
                print(RandomNumber)
        elif answer1.content == "Guard" or answer1.content == "guard" or answer1.content == "4":
            minnum = 1
            maxnum = 26
            RandomNumber = random.randint(minnum, maxnum)
            if info["castle_guard"] <= 0:
                em3 = discord.Embed(description="```diff\n+ You need a Guard First!\n\n- USE COMMAND {}buy > Castle > Tower\n ```".format(Prefix), color=discord.Color.blue())
                await ctx.send(embed=em3)
                return
            try:
                Kostenupdate = defence_cost
                BrakeChance = 0
                bobocoins = info["boco"]
                bobocoins = round(info["boco"], 0)
                em = discord.Embed(description="```diff\n+ You are upgrading your Guard!\n\n Costs-{}\n Level+{}\n\n You have Bobocoins\n+{}\n\n Wanna Try?\n+ Yes-No ```".format(Kostenupdate, castle_guard_lvl, bobocoins), color=discord.Color.blue())
                await ctx.send(embed=em)
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer2 = await bot.wait_for("message", check=pred)
                values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                if str(answer2.content) in values:
                    if answer2.content == "{}upgrade".format(Prefix):
                        return
                    if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                        if info["boco"] < Kostenupdate:
                            await ctx.send("Sorry your BoboCoins  are not enaf.")
                            return
                        if info["boco"] >= Kostenupdate:
                            info["boco"] = info["boco"] - Kostenupdate
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            await ctx.send("Paid.")
                        if answer1.content == "Guard" or answer1.content == "guard" or answer1.content == "4":
                            minnum = 1
                            maxnum = 26
                            RandomNumber = random.randint(minnum, maxnum)
                            #ItemtoUpgrade = str(answer2.content)
                            print("RandomNumber !!!!")
                            print(RandomNumber)
                            print("castle_guard_lvlv")
                            print(castle_guard_lvl)
                        if castle_guard_lvl > 0 and castle_guard_lvl < 11 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                await ctx.send("Odds 26/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl >= 10 and castle_guard_lvl <= 21 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 :
                                await ctx.send("Odds 25/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 20 and castle_guard_lvl < 41 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 :
                                await ctx.send("Odds 24/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 40 and castle_guard_lvl < 81 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                await ctx.send("Odds 23/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 80 and castle_guard_lvl < 161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                await ctx.send("Odds 22/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 160 and castle_guard_lvl < 321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                await ctx.send("Odds 21/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 320 and castle_guard_lvl < 641 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                await ctx.send("Odds 20/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 640 and castle_guard_lvl < 1281 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                await ctx.send("Odds 19/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 1280 and castle_guard_lvl < 2561 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                await ctx.send("Odds 18/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 2560 and castle_guard_lvl < 5121 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                await ctx.send("Odds 17/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 5120 and castle_guard_lvl < 10241 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                await ctx.send("Odds 16/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 10240 and castle_guard_lvl < 20481 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                await ctx.send("Odds 15/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 20480 and castle_guard_lvl < 60961 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                await ctx.send("Odds 14/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 60920 and castle_guard_lvl < 163841 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                await ctx.send("Odds 13/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 163840 and castle_guard_lvl < 327681 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                await ctx.send("Odds 12/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 327681 and castle_guard_lvl < 1245361 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                await ctx.send("Odds 11/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif  castle_guard_lvl > 1245361 and castle_guard_lvl < 2621441 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                info["castle_guard_lvlv"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                await ctx.send("Odds 10/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 2621440 and castle_guard_lvl < 5242881 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                await ctx.send("Odds 9/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 5242880 and castle_guard_lvl < 10485761 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                await ctx.send("Odds 8/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 10485760 and castle_guard_lvl < 20971521 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                await ctx.send("Odds 7/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 20971520 and castle_guard_lvl < 41943041 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                await ctx.send("Odds 6/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 41943040 and castle_guard_lvl < 83886081 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                await ctx.send("Odds 5/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 83886080 and castle_guard_lvl < 167772161 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                 info["castle_guard_lvl"] = castle_guard_lvl * 2
                                 fileIO("players/{}/info.json".format(author.id), "save", info)
                                 await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                 return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                await ctx.send("Odds 4/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 167772160 and castle_guard_lvl < 335544321 :
                            if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                await ctx.send("Odds 3/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 335544321 and castle_guard_lvl < 671088640 :
                            if RandomNumber == 1 or RandomNumber == 2 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                await ctx.send("Odds 2/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        elif castle_guard_lvl > 335544321 and castle_guard_lvl < 671088640 :
                            if RandomNumber == 1 :
                                info["castle_guard_lvl"] = castle_guard_lvl * 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                await ctx.send("Crack the Lat ONe Uhuh\n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                            if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                await ctx.send("Odds 1/26")
                                info["castle_guard_lvl"] = castle_guard_lvl + 2
                                fileIO("players/{}/info.json".format(author.id), "save", info)
                                await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["castle_guard_lvl"]))
                                return
                        print("castle_guard_lvl!!!TryLastCALL")
                        print(castle_guard_lvl)
                        print("Random NUmberEND11!!!!try")
                        print(RandomNumber)
                        print("castle_guard_lvl +2 ENDEND")
                        print(castle_guard_lvl)
                        info["castle_guard_lvl"] = castle_guard_lvl + 2
                        print("castle_guard_lvl +2 ENDENDEmd")
                        print(castle_guard_lvl)
                        Kostenupdate = 10000
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        return
                    elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                        await ctx.send("Ok then.")
                    else:
                        await ctx.send("Please choose one of the options next time.")
            except:
                print("lvl_attack_afterEndTry")
                print(castle_guard_lvl)
                print("Random NUmberENDtry")
                print(RandomNumber)
        elif answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
            minnum = 1
            maxnum = 26
            RandomNumber = random.randint(minnum, maxnum)
            try:
                em = discord.Embed(description="<@{}>\n```diff\n Upgradeable!\n\n Food Box Level: {}\n Wood Box Level: {}\n Stone Box Level: {}\n Gold Box Level: {}\n Metal Box Level: {}\n Boco Box Level: {}\n Army Box Level: {}\n People Box Level: {}\n\n What Would You Like To Upgrade\n\n 1)Food, 2)Wood, 3)Stone, 4)Gold, 5)Metal, 6)Boco, 7)Army, 8)People\n\n CaseSensitive! or Number select.\n```".format(author.id, box_food_lvl, box_wood_lvl, box_stone_lvl, box_gold_lvl, box_metal_lvl, box_boco_lvl, box_army_lvl, box_people_lvl), color=discord.Color.blue())
                await ctx.send(embed=em)
                options = ["Food", "food", "1", "Wood", "wood", "2", "Stone", "stone", "3", "Gold", "gold", "4", "Metal", "metal", "5", "Boco", "boco", "6", "Army", "army", "7", "People", "people", "8"]
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer2 = await bot.wait_for("message", check=pred)
                if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                    if answer2.content == "Food" or answer2.content == "food" or answer2.content == "1":
                        upgradeThis = box_food_lvl
                        try:
                            Kostenupdate = box_food_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_food_lvl"] = box_food_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_food_lvl"] = box_food_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_food_lvl"] = box_food_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_food_lvl"] = box_food_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_food_lvl"] = box_food_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_food_lvl"] = box_food_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_food_lvl"] = box_food_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_food_lvl"] = box_food_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_food_lvl"] = box_food_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_food_lvl"] = box_food_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_food_lvl"] = box_food_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_food_lvl"] = box_food_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_food_lvl"] = box_food_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_food_lvl"] = box_food_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_food_lvl"] = box_food_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_food_lvl"] = box_food_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_food_lvl"] = box_food_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_food_lvl"] = box_food_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_food_lvl"] = box_food_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_food_lvl"] = box_food_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_food_lvl"] = box_food_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_food_lvl"] = box_food_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_food_lvl"] = box_food_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_food_lvl"] = box_food_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_food_lvl"] = box_food_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            await ctx.send("Crack the Lat ONe Uhuh\n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_food_lvl"] = box_food_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_food_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_food_lvl")
                            print(box_food_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "Wood" or answer2.content == "wood" or answer2.content == "2":
                        upgradeThis = box_wood_lvl
                        try:
                            Kostenupdate = box_wood_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_wood_lvl"] = box_wood_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_wood_lvl"] = box_wood_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_wood_lvl"] = box_wood_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_wood_lvl"] = box_wood_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_wood_lvl"] = box_wood_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_wood_lvl"] = box_wood_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_wood_lvl"] = box_wood_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_wood_lvl"] = box_wood_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_wood_lvl"] = box_wood_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_wood_lvl"] = box_wood_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_wood_lvl"] = box_wood_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_wood_lvl"] = box_wood_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_wood_lvl"] = box_wood_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_wood_lvl"] = box_wood_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_wood_lvl"] = box_wood_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_wood_lvl"] = box_wood_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_wood_lvl"] = box_wood_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_wood_lvl"] = box_wood_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_wood_lvl"] = box_wood_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_wood_lvl"] = box_wood_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_wood_lvl"] = box_wood_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_wood_lvl"] = box_wood_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_wood_lvl"] = box_wood_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_wood_lvl"] = box_wood_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_wood_lvl"] = box_wood_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_wood_lvl"] = box_wood_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_wood_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_wood_lvl")
                            print(box_wood_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "Stone" or answer2.content == "stone" or answer2.content == "3":
                        upgradeThis = box_stone_lvl
                        try:
                            Kostenupdate = box_stone_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_stone_lvl"] = box_stone_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_stone_lvl"] = box_stone_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_stone_lvl"] = box_stone_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_stone_lvl"] = box_stone_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_stone_lvl"] = box_stone_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_stone_lvl"] = box_stone_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_stone_lvl"] = box_stone_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_stone_lvl"] = box_stone_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_stone_lvl"] = box_stone_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_stone_lvl"] = box_stone_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_stone_lvl"] = box_stone_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_stone_lvl"] = box_stone_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_stone_lvl"] = box_stone_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_stone_lvl"] = box_stone_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_stone_lvl"] = box_stone_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_stone_lvl"] = box_stone_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_stone_lvl"] = box_stone_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_stone_lvl"] = box_stone_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_stone_lvl"] = box_stone_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_stone_lvl"] = box_stone_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_stone_lvl"] = box_stone_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_stone_lvl"] = box_stone_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_stone_lvl"] = box_stone_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_stone_lvl"] = box_stone_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_stone_lvl"] = box_stone_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_stone_lvl"] = box_stone_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_stone_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_stone_lvl")
                            print(box_stone_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "Gold" or answer2.content == "gold" or answer2.content == "4":
                        upgradeThis = box_gold_lvl
                        try:
                            Kostenupdate = box_gold_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_gold_lvl"] = box_gold_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_gold_lvl"] = box_gold_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_gold_lvl"] = box_gold_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_gold_lvl"] = box_gold_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_gold_lvl"] = box_gold_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_gold_lvl"] = box_gold_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_gold_lvl"] = box_gold_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_gold_lvl"] = box_gold_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_gold_lvl"] = box_gold_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_gold_lvl"] = box_gold_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_gold_lvl"] = box_gold_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_gold_lvl"] = box_gold_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_gold_lvl"] = box_gold_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_gold_lvl"] = box_gold_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_gold_lvl"] = box_gold_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_gold_lvl"] = box_gold_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_gold_lvl"] = box_gold_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_gold_lvl"] = box_gold_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_gold_lvl"] = box_gold_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_gold_lvl"] = box_gold_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_gold_lvl"] = box_gold_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_gold_lvl"] = box_gold_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_gold_lvl"] = box_gold_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_gold_lvl"] = box_gold_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_gold_lvl"] = box_gold_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_gold_lvl"] = box_gold_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_gold_lvl")
                            print(box_gold_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "Metal" or answer2.content == "metal" or answer2.content == "5":
                        upgradeThis = box_metal_lvl
                        try:
                            Kostenupdate = box_metal_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_metal_lvl"] = box_metal_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_metal_lvl"] = box_metal_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_metal_lvl"] = box_metal_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_metal_lvl"] = box_metal_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_metal_lvl"] = box_metal_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_metal_lvl"] = box_metal_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_metal_lvl"] = box_metal_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_metal_lvl"] = box_metal_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_metal_lvl"] = box_metal_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_metal_lvl"] = box_metal_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_metal_lvl"] = box_metal_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_metal_lvl"] = box_metal_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_metal_lvl"] = box_metal_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_metal_lvl"] = box_metal_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_metal_lvl"] = box_metal_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_metal_lvl"] = box_metal_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_metal_lvl"] = box_metal_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_metal_lvl"] = box_metal_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_metal_lvl"] = box_metal_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_metal_lvl"] = box_metal_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_metal_lvl"] = box_metal_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_metal_lvl"] = box_metal_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_metal_lvl"] = box_metal_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_metal_lvl"] = box_metal_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_metal_lvl"] = box_metal_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_metal_lvl"] = box_metal_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_metal_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_metal_lvl")
                            print(box_metal_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "Boco" or answer2.content == "boco" or answer2.content == "6":
                        upgradeThis = box_boco_lvl
                        try:
                            Kostenupdate = box_boco_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_boco_lvl"] = box_boco_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_boco_lvl"] = box_boco_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_boco_lvl"] = box_boco_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_boco_lvl"] = box_boco_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_boco_lvl"] = box_boco_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_boco_lvl"] = box_boco_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_boco_lvl"] = box_boco_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_boco_lvl"] = box_boco_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_boco_lvl"] = box_boco_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_boco_lvl"] = box_boco_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_boco_lvl"] = box_boco_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_boco_lvl"] = box_boco_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_boco_lvl"] = box_boco_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_boco_lvl"] = box_boco_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_boco_lvl"] = box_boco_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_boco_lvl"] = box_boco_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_boco_lvl"] = box_boco_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_boco_lvl"] = box_boco_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_boco_lvl"] = box_boco_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_boco_lvl"] = box_boco_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_boco_lvl"] = box_boco_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_boco_lvl"] = box_boco_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_boco_lvl"] = box_boco_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_boco_lvl"] = box_boco_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_boco_lvl"] = box_boco_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_boco_lvl"] = box_boco_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_boco_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_boco_lvl")
                            print(box_boco_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "Army" or answer2.content == "army" or answer2.content == "7":
                        upgradeThis = box_army_lvl
                        try:
                            Kostenupdate = box_army_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_army_lvl"] = box_army_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_army_lvl"] = box_army_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_army_lvl"] = box_army_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_army_lvl"] = box_army_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_army_lvl"] = box_army_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_army_lvl"] = box_army_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_army_lvl"] = box_army_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_army_lvl"] = box_army_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_army_lvl"] = box_army_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_army_lvl"] = box_army_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_army_lvl"] = box_army_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_army_lvl"] = box_army_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_army_lvl"] = box_army_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_army_lvl"] = box_army_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_army_lvl"] = box_army_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_army_lvl"] = box_army_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_army_lvl"] = box_army_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_army_lvl"] = box_army_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_army_lvl"] = box_army_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_army_lvl"] = box_army_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_army_lvl"] = box_army_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_army_lvl"] = box_army_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_army_lvl"] = box_army_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_army_lvl"] = box_army_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_army_lvl"] = box_army_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_army_lvl"] = box_army_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_army_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_army_lvl")
                            print(box_army_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
                    if answer2.content == "People" or answer2.content == "people" or answer2.content == "8":
                        upgradeThis = box_people_lvl
                        try:
                            Kostenupdate = box_people_cost
                            BrakeChance = 0
                            em = discord.Embed(description="```diff\n+ You are upgrading your Box!\n\n Costs -{}\n Level+{}\n You have Bobocoins \+{}\n\n Wanna Try?\n+ Yes-No```".format(Kostenupdate, upgradeThis, round(info["boco"], 0)), color=discord.Color.blue())
                            await ctx.send(embed=em)
                            def pred(m):
                                return m.author == message.author and m.channel == message.channel
                            answer2 = await bot.wait_for("message", check=pred)
                            values = ["y", "Y", "yes", "Yes", "n", "N", "no", "No", "{}upgrade".format(Prefix)]
                            if str(answer2.content) in values:
                                if answer2.content == "{}upgrade".format(Prefix):
                                    return
                                if answer2.content == "y" or answer2.content == "Y" or answer2.content == "yes" or answer1.content == "Yes":
                                    if info["boco"] < Kostenupdate:
                                        await ctx.send("Sorry your BoboCoins are not enaf.")
                                        return
                                    if info["boco"] >= Kostenupdate:
                                        info["boco"] = info["boco"] - Kostenupdate
                                    if answer1.content == "Box" or answer1.content == "box" or answer1.content == "5":
                                        minnum = 1
                                        maxnum = 26
                                        RandomNumber = random.randint(minnum, maxnum)
                                        #ItemtoUpgrade = str(answer2.content)
                                        print("RandomNumber !!!!")
                                        print(RandomNumber)
                                    if upgradeThis > 0 and upgradeThis < 11 or upgradeThis == 0:
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 or RandomNumber == 26 :
                                            await ctx.send("Odds 26/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis >= 10 and upgradeThis <= 21 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 or RandomNumber == 25 :
                                            info["box_people_lvl"] = box_people_lvl + 4
                                            info["box_lvl"] = box_lvl + 4
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 :
                                            await ctx.send("Odds 25/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 20 and upgradeThis < 41 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 or RandomNumber == 24 :
                                            info["box_people_lvl"] = box_people_lvl + 8
                                            info["box_lvl"] = box_lvl + 8
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 :
                                            await ctx.send("Odds 24/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 40 and upgradeThis < 81 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 or RandomNumber == 23 :
                                            info["box_people_lvl"] = box_people_lvl + 16
                                            info["box_lvl"] = box_lvl + 16
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24:
                                            await ctx.send("Odds 23/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 80 and upgradeThis < 161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 or RandomNumber == 22 :
                                            info["box_people_lvl"] = box_people_lvl + 32
                                            info["box_lvl"] = box_lvl + 32
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 :
                                            await ctx.send("Odds 22/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 160 and upgradeThis < 321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 or RandomNumber == 21 :
                                            info["box_people_lvl"] = box_people_lvl + 64
                                            info["box_lvl"] = box_lvl + 64
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 :
                                            await ctx.send("Odds 21/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 320 and upgradeThis < 641 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 or RandomNumber == 20 :
                                            info["box_people_lvl"] = box_people_lvl + 128
                                            info["box_lvl"] = box_lvl + 128
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21 :
                                            await ctx.send("Odds 20/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 640 and upgradeThis < 1281 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 or RandomNumber == 19 :
                                            info["box_people_lvl"] = box_people_lvl  + 256
                                            info["box_lvl"] = box_lvl + 256
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20 :
                                            await ctx.send("Odds 19/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 1280 and upgradeThis < 2561 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 or RandomNumber == 18 :
                                            info["box_people_lvl"] = box_people_lvl + 512
                                            info["box_lvl"] = box_lvl + 512
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19:
                                            await ctx.send("Odds 18/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 2560 and upgradeThis < 5121 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 or RandomNumber == 17 :
                                            info["box_people_lvl"] = box_people_lvl + 1024
                                            info["box_lvl"] = box_lvl + 1024
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 :
                                            await ctx.send("Odds 17/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 5120 and upgradeThis < 10241 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 or RandomNumber == 16 :
                                            info["box_people_lvl"] = box_people_lvl + 2048
                                            info["box_lvl"] = box_lvl + 2048
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18  or RandomNumber == 17 :
                                            await ctx.send("Odds 16/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 10240 and upgradeThis < 20481 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 or RandomNumber == 15 :
                                            info["box_people_lvl"] = box_people_lvl + 4096
                                            info["box_lvl"] = box_lvl + 4096
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 :
                                            await ctx.send("Odds 15/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 20480 and upgradeThis < 60961 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 or RandomNumber == 14 :
                                            info["box_people_lvl"] = box_people_lvl + 8192
                                            info["box_lvl"] = box_lvl + 8192
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15:
                                            await ctx.send("Odds 14/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 60920 and upgradeThis < 163841 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 or RandomNumber == 13 :
                                            info["box_people_lvl"] = box_people_lvl + 16384
                                            info["box_lvl"] = box_lvl + 16384
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 :
                                            await ctx.send("Odds 13/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 163840 and upgradeThis < 327681 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 or RandomNumber == 12 :
                                            info["box_people_lvl"] = box_people_lvl + 32768
                                            info["box_lvl"] = box_lvl + 32768
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 :
                                            await ctx.send("Odds 12/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 327681 and upgradeThis < 1245361 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 or RandomNumber == 11 :
                                            info["box_people_lvl"] = box_people_lvl + 65536
                                            info["box_lvl"] = box_lvl + 65536
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 :
                                            await ctx.send("Odds 11/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif  upgradeThis > 1245361 and upgradeThis < 2621441 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 or RandomNumber == 10 :
                                            info["box_people_lvl"] = box_people_lvl + 131072
                                            info["box_lvl"] = box_lvl + 131072
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11:
                                            await ctx.send("Odds 10/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 2621440 and upgradeThis < 5242881 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 or RandomNumber == 9 :
                                            info["box_people_lvl"] = box_people_lvl + 262144
                                            info["box_lvl"] = box_lvl + 262144
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10:
                                            await ctx.send("Odds 9/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_gold_lvl"]))
                                            return
                                    elif upgradeThis > 5242880 and upgradeThis < 10485761 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 or RandomNumber == 8 :
                                            info["box_people_lvl"] = box_people_lvl + 524288
                                            info["box_lvl"] = box_lvl + 524288
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 :
                                            await ctx.send("Odds 8/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 10485760 and upgradeThis < 20971521 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 or RandomNumber == 7 :
                                            info["box_people_lvl"] = box_people_lvl + 1048576
                                            info["box_lvl"] = box_lvl + 1048576
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 :
                                            await ctx.send("Odds 7/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 20971520 and upgradeThis < 41943041 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 or RandomNumber == 6 :
                                            info["box_people_lvl"] = box_people_lvl + 2097152
                                            info["box_lvl"] = box_lvl + 2097152
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7 :
                                            await ctx.send("Odds 6/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 41943040 and upgradeThis < 83886081 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 or RandomNumber == 5 :
                                            info["box_people_lvl"] = box_people_lvl + 4194304
                                            info["box_lvl"] = box_lvl + 4194304
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6:
                                            await ctx.send("Odds 5/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 83886080 and upgradeThis < 167772161 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 or RandomNumber == 4 :
                                             info["box_people_lvl"] = box_people_lvl + 8388608
                                             info["box_lvl"] = box_lvl + 8388608
                                             fileIO("players/{}/info.json".format(author.id), "save", info)
                                             await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                             return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 :
                                            await ctx.send("Odds 4/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 167772160 and upgradeThis < 335544321 :
                                        if RandomNumber == 1 or RandomNumber == 2 or RandomNumber == 3 :
                                            info["box_people_lvl"] = box_people_lvl + 16777216
                                            info["box_lvl"] = box_lvl + 16777216
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 :
                                            await ctx.send("Odds 3/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 or RandomNumber == 2 :
                                            info["box_people_lvl"] = box_people_lvl + 33554432
                                            info["box_lvl"] = box_lvl + 33554432
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        elif RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3 :
                                            await ctx.send("Odds 2/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    elif upgradeThis > 335544321 and upgradeThis < 671088640 :
                                        if RandomNumber == 1 :
                                            info["box_people_lvl"] = box_people_lvl + 67108864
                                            info["box_lvl"] = box_lvl + 67108864
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            await ctx.send("Crack the Last ONe Uhuh\n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                        if RandomNumber == 26 or RandomNumber == 25 or RandomNumber == 24 or RandomNumber == 23 or RandomNumber == 22 or RandomNumber == 21  or RandomNumber == 20  or RandomNumber == 19 or RandomNumber == 18 or RandomNumber == 17 or RandomNumber == 16 or RandomNumber == 15 or RandomNumber == 14 or RandomNumber == 13 or RandomNumber == 12 or RandomNumber == 11 or RandomNumber == 10 or RandomNumber == 9 or RandomNumber == 8 or RandomNumber == 7  or RandomNumber == 6 or RandomNumber == 5 or RandomNumber == 4 or RandomNumber == 3  or RandomNumber == 2 :
                                            await ctx.send("Odds 1/26")
                                            info["box_people_lvl"] = box_people_lvl + 2
                                            info["box_lvl"] = box_lvl + 2
                                            fileIO("players/{}/info.json".format(author.id), "save", info)
                                            await ctx.send("Kinda Fail Your New Level is {} \n\n Congratulations".format(info["box_people_lvl"]))
                                            return
                                    # info["box_food_lvl"] = box_food_lvl + 2
                                    Kostenupdate = 10000
                                    fileIO("players/{}/info.json".format(author.id), "save", info)
                                    return
                                elif answer2.content == "n" or answer2.content == "N" or answer2.content == "no" or answer2.content == "No" :
                                    await ctx.send("Ok then.")
                                else:
                                    await ctx.send("Please choose one of the options next time.")
                        except:
                            print("box_people_lvl")
                            print(box_people_lvl)
                            print("Random NUmberENDtry")
                            print(RandomNumber)
            except:
                print("BOxerror")
    await ctx.send("You upgrade {}...\nTo Level `{}.".format(answer1.content, info["lvl_defence"]))
    #await ctx.send("```diff\n- Random Number {}\n Odds:\n {}```".format(RandomNumber, BrakeChance))
    print("lvl_defence ENDEND")
    print(lvl_defence)
    fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command(aliases=["18t"])
async def vol18t(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _check_set_vol18_t(ctx)
@bot.command(aliases=["181"])
async def vol181(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_1(ctx)
    await ctx.send("<@{}> Done".format(author.id))
    await vol18i(ctx)
@bot.command(aliases=["182"])
async def vol182(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_2(ctx)
    await ctx.send("<@{}> Done".format(author.id))
    await vol18i(ctx)
@bot.command(aliases=["183"])
async def vol183(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_3(ctx)
    await ctx.send("<@{}> Done".format(author.id))
    await vol18i(ctx)
@bot.command(aliases=["184"])
async def vol184(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_4(ctx)
    await ctx.send("<@{}> Done".format(author.id))
    await vol18i(ctx)
@bot.command(aliases=["185"])
async def vol185(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_5(ctx)
    await ctx.send("<@{}> Done".format(author.id))
    await vol18i(ctx)
@bot.command(aliases=["18i"])
async def vol18i(ctx):
    # await vol18i(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    haveCollectcheck = 0
    duplicat = 0
    duplicatsAll = 0
    info = fileIO("players/{}/info.json".format(author.id), "load")
    b_1 = info["b_1"]
    if b_1 >= 0: # bigger than 1   HAVE
        haveCollectcheck += 1
    if b_1 >= 1: # bigger than 1   duplicate
        duplicat += 1
        duplicatsAll += b_1 - 1
    b_2 = info["b_2"]
    if b_2 >= 0: # bigger than 1   HAVE
        haveCollectcheck += 1
    if b_2 >= 1: # bigger than 1   duplicate
        duplicat += 1
        duplicatsAll += b_2 - 1
    b_3 = info["b_3"]
    if b_3 >= 0: # bigger than 1   HAVE
        haveCollectcheck += 1
    if b_3 >= 1: # bigger than 1   duplicate
        duplicat += 1
        duplicatsAll += b_3 - 1
    #b_1 = info["b_1"]
    #b_2 = info["b_2"]
    #b_3 = info["b_3"]
    b_4 = info["b_4"]
    b_5 = info["b_5"]
    b_6 = info["b_6"]
    b_7 = info["b_7"]
    b_8 = info["b_8"]
    b_9 = info["b_9"]
    b_10 = info["b_10"]
    b_11 = info["b_11"]
    b_12 = info["b_12"]
    b_13 = info["b_13"]
    b_14 = info["b_14"]
    b_15 = info["b_15"]
    b_16 = info["b_16"]
    b_17 = info["b_17"]
    b_18 = info["b_18"]
    b_19 = info["b_19"]
    b_20 = info["b_20"]
    b_21 = info["b_21"]
    b_22 = info["b_22"]
    b_23 = info["b_23"]
    b_24 = info["b_24"]
    b_25 = info["b_25"]
    b_26 = info["b_26"]
    b_27 = info["b_27"]
    b_28 = info["b_28"]
    b_29 = info["b_29"]
    b_30 = info["b_30"]
    b_31 = info["b_31"]
    b_32 = info["b_32"]
    b_33 = info["b_33"]
    b_34 = info["b_34"]
    b_35 = info["b_35"]
    b_36 = info["b_36"]
    b_37 = info["b_37"]
    b_38 = info["b_38"]
    b_39 = info["b_39"]
    b_40 = info["b_40"]
    b_41 = info["b_41"]
    b_42 = info["b_42"]
    b_43 = info["b_43"]
    b_44 = info["b_44"]
    b_45 = info["b_45"]
    b_46 = info["b_46"]
    b_47 = info["b_47"]
    b_48 = info["b_48"]
    b_49 = info["b_49"]
    b_50 = info["b_50"]
    b_51 = info["b_51"]
    b_52 = info["b_52"]
    b_53 = info["b_53"]
    b_54 = info["b_54"]
    b_55 = info["b_55"]
    b_56 = info["b_56"]
    b_57 = info["b_57"]
    b_58 = info["b_58"]
    b_59 = info["b_59"]
    b_60 = info["b_60"]
    b_61 = info["b_61"]
    b_62 = info["b_62"]
    b_63 = info["b_63"]
    b_64 = info["b_64"]
    b_65 = info["b_65"]
    b_66 = info["b_66"]
    b_67 = info["b_67"]
    b_68 = info["b_68"]
    b_69 = info["b_69"]
    b_a = info["b_a"]
    b_b = info["b_b"]
    b_c = info["b_c"]
    b_rR = info["b_rR"]
    b_r1 = info["b_r1"]
    b_r3 = info["b_r3"]
    b_r5 = info["b_r5"]
    b_r9 = info["b_r9"]
    totalDonationBOBOvalue = b_1+b_2+b_3+b_4+b_5+b_6+b_7+b_8+b_9+b_10+b_11+b_12+b_13+b_14+b_15+b_16+b_17+b_18+b_19+b_20+b_21+b_22+b_23+b_24+b_25+b_26+b_27+b_28+b_29+b_30+b_31+b_32+b_33+b_34+b_35+b_36+b_37+b_38+b_39+b_40+b_41+b_42+b_43+b_44+b_45+b_46+b_47+b_48+b_49+b_50+b_51+b_52+b_53+b_54+b_55+b_56+b_57+b_58+b_59+b_60+b_61+b_62+b_63+b_64+b_65+b_66+b_67+b_68+b_69
    totalDonationBOBOvaluePACK = b_a+b_b+b_c+b_rR+b_r1+b_r3+b_r5+b_r9
    missingAll = 69 - duplicat
    duplicatAll = duplicat
    info["totalvol18"] = totalDonationBOBOvalue
    em10 = discord.Embed(description="```diff\n!=== [Assets] ===!\n!=== [BoboPixel0x0NFTS\n 1/69 Donations] ===!\n\n  1/69 : {} \n  2/69 : {} \n  3/69 : {} \n  4/69 : {} \n  5/69 : {} \n  6/69 : {} \n  7/69 : {} \n  8/69 : {} \n  9/69 : {} \n 10/69 : {} \n 11/69 : {} \n 12/69 : {} \n 13/69 : {} \n 14/69 : {} \n 15/69 : {} \n 16/69 : {} \n 17/69 : {} \n 18/69 : {} \n 19/69 : {} \n 20/69 : {} \n 21/69 : {} \n 22/69 : {} \n 23/69 : {} \n 24/69 : {} \n 25/69 : {} \n 26/69 : {} \n 27/69 : {} \n 28/69 : {} \n 29/69 : {} \n 30/69 : {} \n 31/69 : {} \n 32/69 : {} \n 33/69 : {} \n 34/69 : {} \n 35/69 : {} \n 36/69 : {} \n 37/69 : {} \n 38/69 : {} \n 39/69 : {} \n 40/69 : {} \n 41/69 : {} \n 42/69 : {} \n 43/69 : {} \n 44/69 : {} \n 45/69 : {} \n 46/69 : {} \n 47/69 : {} \n 48/69 : {} \n 49/69 : {} \n 50/69 : {} \n 51/69 : {} \n 52/69 : {} \n 53/69 : {} \n 54/69 : {} \n 55/69 : {} \n 56/69 : {} \n 57/69 : {} \n 58/69 : {} \n 59/69 : {} \n 60/69 : {} \n 61/69 : {} \n 62/69 : {} \n 63/69 : {} \n 64/69 : {} \n 65/69 : {} \n 66/69 : {} \n 67/69 : {} \n 68/69 : {} \n 69/69 : {} \n\n Packages\n a/69 : {} \n b/69 : {} \n c/69 : {} \n rR/69 : {} \n r1/69 : {} \n r3/69 : {} \n r5/69 : {} \n r9/69 : {} \n\n Total {} of 1/69 NFTS \n Total {} Packs \n ```".format(b_1, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9, b_10, b_11, b_12, b_13, b_14, b_15, b_16, b_17, b_18, b_19, b_20, b_21, b_22, b_23, b_24, b_25, b_26, b_27, b_28, b_29, b_30, b_31, b_32, b_33, b_34, b_35, b_36, b_37, b_38, b_39, b_40, b_41, b_42, b_43, b_44, b_45, b_46, b_47, b_48, b_49, b_50, b_51, b_52, b_53, b_54, b_55, b_56, b_57, b_58, b_59, b_60, b_61, b_62, b_63, b_64, b_65, b_66, b_67, b_68, b_69, b_a, b_b, b_c, b_rR, b_r1, b_r3, b_r5, b_r9, totalDonationBOBOvalue, totalDonationBOBOvaluePACK), color=discord.Color.blue())
    await ctx.send(embed=em10)
    fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command(aliases=["18y"])
async def vol18ttt(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    temps = fileIO("temps/vol18.json", "load")
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_set_vol18_1(ctx)
    haveCollectcheck = 0
    duplicat = 0
    duplicatsAll = 0
    info = fileIO("players/{}/info.json".format(author.id), "load")
    b_1 = info["b_1"]
    if b_1 >= 0: # bigger than 1   HAVE
        haveCollectcheck += 1
    if b_1 >= 1: # bigger than 1   duplicate
        duplicat += 1
        duplicatsAll += b_1 - 1
    b_2 = info["b_2"]
    if b_2 >= 0: # bigger than 1   HAVE
        haveCollectcheck += 1
    if b_2 >= 1: # bigger than 1   duplicate
        duplicat += 1
        duplicatsAll += b_2 - 1
    b_3 = info["b_3"]
    if b_3 >= 0: # bigger than 1   HAVE
        haveCollectcheck += 1
    if b_3 >= 1: # bigger than 1   duplicate
        duplicat += 1
        duplicatsAll += b_3 - 1
    #b_1 = info["b_1"]
    #b_2 = info["b_2"]
    #b_3 = info["b_3"]
    b_4 = info["b_4"]
    b_5 = info["b_5"]
    b_6 = info["b_6"]
    b_7 = info["b_7"]
    b_8 = info["b_8"]
    b_9 = info["b_9"]
    b_10 = info["b_10"]
    b_11 = info["b_11"]
    b_12 = info["b_12"]
    b_13 = info["b_13"]
    b_14 = info["b_14"]
    b_15 = info["b_15"]
    b_16 = info["b_16"]
    b_17 = info["b_17"]
    b_18 = info["b_18"]
    b_19 = info["b_19"]
    b_20 = info["b_20"]
    b_21 = info["b_21"]
    b_22 = info["b_22"]
    b_23 = info["b_23"]
    b_24 = info["b_24"]
    b_25 = info["b_25"]
    b_26 = info["b_26"]
    print("26 last")
    print(b_26)
    print("26#@#@ last")
    print(info["b_26"])
    b_27 = info["b_27"]
    b_28 = info["b_28"]
    b_29 = info["b_29"]
    b_30 = info["b_30"]
    b_31 = info["b_31"]
    b_32 = info["b_32"]
    b_33 = info["b_33"]
    b_34 = info["b_34"]
    b_35 = info["b_35"]
    b_36 = info["b_36"]
    b_37 = info["b_37"]
    b_38 = info["b_38"]
    b_39 = info["b_39"]
    b_40 = info["b_40"]
    b_41 = info["b_41"]
    b_42 = info["b_42"]
    b_43 = info["b_43"]
    b_44 = info["b_44"]
    b_45 = info["b_45"]
    b_46 = info["b_46"]
    b_47 = info["b_47"]
    b_48 = info["b_48"]
    b_49 = info["b_49"]
    b_50 = info["b_50"]
    b_51 = info["b_51"]
    b_52 = info["b_52"]
    b_53 = info["b_53"]
    b_54 = info["b_54"]
    b_55 = info["b_55"]
    b_56 = info["b_56"]
    b_57 = info["b_57"]
    b_58 = info["b_58"]
    b_59 = info["b_59"]
    b_60 = info["b_60"]
    b_61 = info["b_61"]
    b_62 = info["b_62"]
    b_63 = info["b_63"]
    b_64 = info["b_64"]
    b_65 = info["b_65"]
    b_66 = info["b_66"]
    b_67 = info["b_67"]
    b_68 = info["b_68"]
    b_69 = info["b_69"]
    b_a = info["b_a"]
    b_b = info["b_b"]
    b_c = info["b_c"]
    b_rR = info["b_rR"]
    b_r1 = info["b_r1"]
    b_r3 = info["b_r3"]
    b_r5 = info["b_r5"]
    b_r9 = info["b_r9"]
    totalDonationBOBOvalue = b_1+b_2+b_3+b_4+b_5+b_6+b_7+b_8+b_9+b_10+b_11+b_12+b_13+b_14+b_15+b_16+b_17+b_18+b_19+b_20+b_21+b_22+b_23+b_24+b_25+b_26+b_27+b_28+b_29+b_30+b_31+b_32+b_33+b_34+b_35+b_36+b_37+b_38+b_39+b_40+b_41+b_42+b_43+b_44+b_45+b_46+b_47+b_48+b_49+b_50+b_51+b_52+b_53+b_54+b_55+b_56+b_57+b_58+b_59+b_60+b_61+b_62+b_63+b_64+b_65+b_66+b_67+b_68+b_69+b_a+b_b+b_c+b_rR+b_r1+b_r3+b_r5+b_r9
    missingAll = 69 - duplicat
    duplicatAll = duplicat
    info["totalvol18"] = totalDonationBOBOvalue
    em10 = discord.Embed(description="```diff\n!=== [Assets] ===!\n!=== [BoboPixel0x0NFTS\n 1/69 Donations] ===!\n\n  1/69 : {} \n  2/69 : {} \n  3/69 : {} \n  4/69 : {} \n  5/69 : {} \n  6/69 : {} \n  7/69 : {} \n  8/69 : {} \n  9/69 : {} \n 10/69 : {} \n 11/69 : {} \n 12/69 : {} \n 13/69 : {} \n 14/69 : {} \n 15/69 : {} \n 16/69 : {} \n 17/69 : {} \n 18/69 : {} \n 19/69 : {} \n 20/69 : {} \n 21/69 : {} \n 22/69 : {} \n 23/69 : {} \n 24/69 : {} \n 25/69 : {} \n 26/69 : {} \n 27/69 : {} \n 28/69 : {} \n 29/69 : {} \n 30/69 : {} \n 31/69 : {} \n 32/69 : {} \n 33/69 : {} \n 34/69 : {} \n 35/69 : {} \n 36/69 : {} \n 37/69 : {} \n 38/69 : {} \n 39/69 : {} \n 40/69 : {} \n 41/69 : {} \n 42/69 : {} \n 43/69 : {} \n 44/69 : {} \n 45/69 : {} \n 46/69 : {} \n 47/69 : {} \n 48/69 : {} \n 49/69 : {} \n 50/69 : {} \n 51/69 : {} \n 52/69 : {} \n 53/69 : {} \n 54/69 : {} \n 55/69 : {} \n 56/69 : {} \n 57/69 : {} \n 58/69 : {} \n 59/69 : {} \n 60/69 : {} \n 61/69 : {} \n 62/69 : {} \n 63/69 : {} \n 64/69 : {} \n 65/69 : {} \n 66/69 : {} \n 67/69 : {} \n 68/69 : {} \n 69/69 : {} \n\n Packages\n a/69 : {} \n b/69 : {} \n c/69 : {} \n rR/69 : {} \n r1/69 : {} \n r3/69 : {} \n r5/69 : {} \n r9/69 : {} \n\n Total {} of 1/69 NFTS \n Total {} Packs \n ```".format(b_1, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9, b_10, b_11, b_12, b_13, b_14, b_15, b_16, b_17, b_18, b_19, b_20, b_21, b_22, b_23, b_24, b_25, b_26, b_27, b_28, b_29, b_30, b_31, b_32, b_33, b_34, b_35, b_36, b_37, b_38, b_39, b_40, b_41, b_42, b_43, b_44, b_45, b_46, b_47, b_48, b_49, b_50, b_51, b_52, b_53, b_54, b_55, b_56, b_57, b_58, b_59, b_60, b_61, b_62, b_63, b_64, b_65, b_66, b_67, b_68, b_69, b_a, b_b, b_c, b_rR, b_r1, b_r3, b_r5, b_r9, totalDonationBOBOvalue, totalDonationBOBOvaluePACK), color=discord.Color.blue())
await ctx.send(embed=em10)
fileIO("players/{}/info.json".format(author.id), "save", info)

@bot.command()
async def free(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = float(curr_time) - float(info["free_cool_block"])
    if delta >= 26400.0 and delta > 0:
        info["free_cool_block"] = curr_time
        try:
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            tbpfreecandy1 = 73524
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get(
                'https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(
                    account, tbpfreecandy1, account))
            response.json()
            data = response.json()
            print(account)
            print(data)
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfreecandy"] = int(assets)
            info["successCheck"] = success
            time1 = 640
            freecandy = info["bpfreecandy"]
            free_cool_block = info["free_cool_block"]
            timereduce = time1 / freecandy
            info["free_cool_block"] += timereduce
            await ctx.send(
                "You have {} BP0x0FREECANDY!\n They will reduce the time! for the LuckySpin\n\n Time Reduce 0x0x{}\n\n USE COMMAND {}lucky or {}l for Lucky Spin".format(
                    freecandy, round(timereduce, 2), Prefix, Prefix))
            fileIO("players/{}/info.json".format(author.id), "save", info)
            await ctx.send("BP0x0-0 Discord RPG BOTFreeCandy!")
            try:
                channel = ctx.channel
                author = ctx.author
                message = ctx.message
                info = fileIO("players/{}/info.json".format(author.id), "load")
                account = info["account"]
                response = requests.get(
                    'https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(
                        account, tbpfreecandylv52))
                response.json()
                data = response.json()
                success = data["success"]
                account = data["data"][0]["account"]
                assets = data["data"][0]["assets"]
                info["account"] = account
                info["bpfreecandylv52"] = int(assets)
                info["successCheck"] = success
                fileIO("players/{}/info.json".format(author.id), "save", info)
                time1 = 640
                freecandy = info["bpfreecandylv52"]
                timereduce = time1 / freecandy
                await ctx.send(
                    "You have {} BP0x0FREECANDY!\n They will reduce the time! for the LuckySpin\n\n Time Reduce 0x0x{}\n\n USE COMMAND {}lucky or {}l for Lucky Spin".format(
                        freecandy, timereduce, Prefix, Prefix))
                await ctx.send("BP0x0-0 Discord RPG BOT!")
            except IndexError:
                pass
                await ctx.send("You DO NOT have ANY BP0x0-0 FreeCandyLv10!")
                await ctx.send(
                    "You can get them from #BPPacks0x0Vol.5@Lv10 75%/-25% #bp0x0-211!\n Did you see the Twitch stream?\n Y or N ?\n".format())
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer1 = await bot.wait_for("message", check=pred)
                if answer1.content in options2:
                    if answer1.content.lower() in ["yes", "y"]:
                        try:
                            channel = ctx.channel
                            author = ctx.author
                            message = ctx.message
                            info = fileIO("players/{}/info.json".format(author.id), "load")
                            account = info["account"]
                            response = requests.get(
                                'https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(
                                    account, tbpfreecandytwitch3))
                            response.json()
                            data = response.json()
                            success = data["success"]
                            account = data["data"][0]["account"]
                            assets = data["data"][0]["assets"]
                            info["account"] = account
                            info["bpfreecandytwitch3"] = int(assets)
                            info["successCheck"] = success
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            time1 = 640
                            freecandy = info["bpfreecandytwitch3"]
                            timereduce = time1 / freecandy
                            await ctx.send(
                                "You have {} BP0x0FREECANDY!\n They will reduce the time! for the LuckySpin\n\n Time Reduce 0x0x{}\n\n USE COMMAND {}lucky or {}l for Lucky Spin".format(
                                    freecandy, timereduce, Prefix, Prefix))
                            await ctx.send("BP0x0-0 Discord RPG BOT!")
                        except IndexError:
                            pass
                            await ctx.send("You DO NOT have ANY BP0x0-0 FreeCandyTwitch!")
                    else:
                        await ctx.send(
                            "(Live on Twitch get 100000 bobocoins and trade for #bp0x0-13 or #BP0x0FREECANDY@Lv13)[https://www.twitch.tv/bobopixel0x0_by_bobocoin]?\n Y or N ?\n")
                        return
        except IndexError:
            pass
            await ctx.send("You DO NOT have ANY BP0x0-0 FreeCandy!")
            await ctx.send("Try to get some BP0x0-0 NFTs they Improve your Game play!")
            return
        try:
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get(
                'https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(
                    account, tbpjacktick))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpjacktick"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            time1 = 640
            # freecandy = info["bpjacktick"]
            timereduce = time1 / freecandy
            await ctx.send(
                "You have {} BP0x0JackPotTicket!\n Come back when you have some\n in your wallet!\n They will Open and enhance your stats\n\n Time Reduce 0x0x{}\n\n USE COMMAND {}lucky or {}l for Lucky Spin".format(
                    freecandy, timereduce, Prefix, Prefix))
            await ctx.send("BP0x0-0 Discord RPG BOT!")
        except IndexError:
            pass
            await ctx.send("You DO NOT have ANY BP0x0-0 JackPotTickets!")
            await ctx.send("Try to get some BP0x0-0 NFTs to enhance your gameplay!")
    else:
        seconds = 26400 - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(
            description="```diff\n- You have to Wait!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(
                int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)

@bot.command(aliases=["fire"])
async def fireproof(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = float(curr_time) - float(info["free1_cool_block"])
    if delta >= 26400.0 and delta>0:
        info["free1_cool_block"] = curr_time
        try:
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            tbpfreecandy1 = 73524
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbpfreecandy1, account))
            response.json()
            data = response.json()
            print(account)
            print(data)
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            #info["account"] = account
            info["bpfreecandy"] = int(assets)
            info["successCheck"] = success
            time1 = 1000
            freecandy = info["bpfreecandy"]
            free_cool_block  = info["free1_cool_block"]
            timereduce = time1 / freecandy
            info["free_cool_block"] += timereduce
            await ctx.send("You have {} BP0x0FREECANDY!\n They will reduce the time! for the LuckySpin\n\n Time Reduce 0x0x{}\n\n USE COMMAND {}lucky or {}l for Lucky Spin".format(freecandy, round(timereduce, 2),Prefix,Prefix))
            fileIO("players/{}/info.json".format(author.id), "save", info)
            await ctx.send("BP0x0-0 Discord RPG BOTFreeCandy!")
            try:
                channel = ctx.channel
                author = ctx.author
                message = ctx.message
                info = fileIO("players/{}/info.json".format(author.id), "load")
                account = info["account"]
                response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire0))
                response.json()
                data = response.json()
                success = data["success"]
                account = data["data"][0]["account"]
                assets = data["data"][0]["assets"]
                info["account"] = account
                info["bpfire0"] = int(assets)
                info["successCheck"] = success
                fileIO("players/{}/info.json".format(author.id), "save", info)
                time1 = 1000
            except IndexError:
                pass
                await ctx.send("DO you own FIREPROOF NFT in your Wallet?\n \n Y or N ?\n".format())
                options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
                def pred(m):
                    return m.author == message.author and m.channel == message.channel
                answer1 = await bot.wait_for("message", check=pred)
                if answer1.content in options2:
                    if answer1.content == "Yes" or "yes" or "y" :
                        try:
                            channel = ctx.channel
                            author = ctx.author
                            message = ctx.message
                            info = fileIO("players/{}/info.json".format(author.id), "load")
                            account = info["account"]
                            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire1))
                            response.json()
                            data = response.json()
                            success = data["success"]
                            account = data["data"][0]["account"]
                            assets = data["data"][0]["assets"]
                            info["account"] = account
                            info["bpfire1"] = int(assets)
                            info["successCheck"] = success
                            fileIO("players/{}/info.json".format(author.id), "save", info)
                            time1 = 640
                        except IndexError:
                            pass
                            await ctx.send("You DO NOT have ANY BP0x0-0 FreeCandyTwitch!")
                    elif answer1.content == "No" or "no" or "N" or "n" :
                        await ctx.send("(Live on Twitch get 100000 bobocoins and trade for #bp0x0-13 or #BP0x0FREECANDY@Lv13)[https://www.twitch.tv/bobopixel0x0_by_bobocoin]?\n Y or N ?\n".format())
                        return
        except IndexError:
            pass
            await ctx.send("You DO NOT have ANY BP0x0-0 FireProof NFT!\nTry to get some BP0x0-0 NFTs they Improf your Game play!\n\nhttps://neftyblocks.com/c/bobopixeloxo\n")
            return
        try:
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire0))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire0"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
            pass
        except IndexError:
            pass
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire1))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire1"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire2))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire2"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire3))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire3"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire4))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire4"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire5))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire5"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire6))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire6"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire7))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire7"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire8))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire8"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire9))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire9"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire10))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire10"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire11))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire11"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire12))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire12"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire13))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire13"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire14))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire14"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire15))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire15"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire16))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire16"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire17))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire17"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire18))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire18"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire19))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire19"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire20))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire20"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire21))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire21"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire22))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire22"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire23))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire23"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire24))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire24"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, fire25))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpfire25"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("done")
        except:
            print("except")
    else:
        return


@bot.command(aliases=["c++"])
async def cplusplus(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    tbpcretro = 155041
    tbpwhite = 155039
    tbpcbwhite = 155036
    tbpcclassic = 155028
    tbpcclean = 155032
    tbpcdirty = 155026
    tbpccc = 155025
    tbpjacktick = 154962
    tbppacksv6f = 155190
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = float(curr_time) - float(info["cpp_cool_block"])
    if delta >= 26400.0 and delta>0:
        try:
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            time1 = 640
            info["cpp_cool_block"] = curr_time
            try:
                freecandy = info["bpfreecandy"]
                timereduce = time1 / freecandy
            except:
                print("FreeCandy 1")
                freecandy = 1
                timereduce = time1 / freecandy
            free_cool_block  = info["cpp_cool_block"]
            info["cpp_cool_block"] += timereduce
        except:
            print("somethingWRONG")
        try:
            print("c+cccc6") #212
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #tbpfreecandy1 = tbpccc
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbpccc, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpccc"] = int(assets)
            info["successCheck"] = success
            bpccc = info["bpccc"]
            await ctx.send("You have C++ NFTS!\n\n They Incrase your BoboValue! 0x6x{}\n\n USE COMMAND {}sw to check your Drop Rates.{}".format(bpccc,Prefix, round(timereduce, 2)))
            info["check_ccc"] = 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except IndexError:
            print("c+cccc6 IndexError")
        try:
            print("c+tbpcdirty24") #213
            print("try afterpass  tbpcdirty")
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbpcdirty, account))
            #response.json()
            #data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpcdirty"] = int(assets)
            info["successCheck"] = success
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except IndexError:
            print("c+Dirty 24")
            #await ctx.send("You DO NOT have ANY BP0x0-0 C++Dirty NFTS!")
            await ctx.send("You can get them from Sell Page!\n".format())
            pass
        try:
            print("c+clean 384") #214
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #"tbpfreecandy1 = tbpcdirty"
            tbpcclean = 1
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&template_id={}&page=1&limit=100&order=desc'.format(account, tbpcclean))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            #
            info["bpcclean"] = int(assets)
            info["successCheck"] = success
            try:
                freecandy = info["bpfreecandy"]
                timereduce = time1 / freecandy
            except:
                freecandy = 1
                timereduce = time1 / freecandy
            free_cool_block  = info["cpp_cool_block"]
            info["cpp_cool_block"] += timereduce
            #await ctx.send("You have C++ NFTS!\n\n They Incrase your BoboValue! 0x384x{}\n\n USE COMMAND !sw to check your Drop Rates.{}".format(bpcclean, round(timereduce, 2)))
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("c+clean 384")
        try:
            print("c+tbpcclassic 1536")
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #tbpfreecandy1 = tbpccc
            tbpcclassic = 155028
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbpcclassic, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpcclassic"] = int(assets)
            info["successCheck"] = success
            bpcclassic = info["bpcclassic"]
            #await ctx.send("You have C++ NFTS!\n\n They Incrase your BoboValue! 0x1536x{}\n\n USE COMMAND !sw to check your Drop Rates.{}".format(bpcclassic, round(timereduce, 2)))
            info["check_ccc"] = 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("c+tbpcclassic 1536")
        try:
            print("c+tbpcbwhite 6144")
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #tbpfreecandy1 = tbpccc
            tbpcbwhite = 155036
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbpcbwhite, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpcbwhite"] = int(assets)
            info["successCheck"] = success
            bpcbwhite = info["bpcbwhite"]
            await ctx.send("You have C++ NFTS!\n\n They Incrase your BoboValue! 0x6144x{}\n\n USE COMMAND {}sw to check your Drop Rates.{}".format(bpcbwhite,Prefix, round(timereduce, 2)))
            info["check_ccc"] = 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("c+tbpcbwhite 6144")
        try:
            print("c+t bpwhite 24576")
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #tbpfreecandy1 = tbpccc
            tbpwhite = 155039
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbpwhite, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpwhite"] = int(assets)
            info["successCheck"] = success
            bpwhite = info["bpwhite"]
            await ctx.send("You have C++ NFTS!\n\n They Incrase your BoboValue! 0x6144x{}\n\n USE COMMAND {}sw to check your Drop Rates.{}".format(bpcbwhite,Prefix, round(timereduce, 2)))
            info["check_ccc"] = 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("c++bpwhite")
        try:
            print("c++tbpcretro 24576")
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #tbpfreecandy1 = tbpccc
            tbpcretro = 155041
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbpcretro, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bpcretro"] = int(assets)
            info["successCheck"] = success
            bpcclassic = info["bpcclassic"]
            await ctx.send("You have C++ NFTS!\n\n They Incrase your BoboValue! 0x24576x{}\n\n USE COMMAND {}sw to check your Drop Rates.{}".format(bpcclassic,Prefix, round(timereduce, 2)))
            info["check_ccc"] = 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("c++bpcretro")
        try:
            channel = ctx.channel
            author = ctx.author
            message = ctx.message
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            #tbpfreecandy1 = tbpccc
            tbppacksv6f = 155190
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account,tbppacksv6f, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            info["account"] = account
            info["bppacksv6f"] = int(assets)
            info["successCheck"] = success
            bppacksv6f = info["bppacksv6f"]
            await ctx.send("You have C++ PackVol.6 NFTS!\n\n They Incrase your BoboValue!\n you have x{}\n\n USE COMMAND {}code 155190 to check your Drop Rates.{}".format(assets,Prefix, round(timereduce, 2)))
            info["check_ccc"] = 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("last test")
            #await bp0x0inv(ctx)
            #await ctx.send("BP0x0-0 Discord RPG BOT C++Coin!")
        except:
            print("c++bppacksv6f = 155190")
            #await ctx.send("You DO NOT have ANY BP0x0-0 C++Pack NFTS!")
            #await ctx.send("Try to get some BP0x0-0 NFTs they Improf your Game play!")
        #await bp0x0inv(ctx)
        cccValue = info["bpccc"] * 6
        ccdirtyV = info["bpcdirty"] * 24
        ccClasic = info["bpcclassic"] * 96
        ccclean = info["bpcclean"] * 384
        ccccbw = info["bpcbwhite"] * 1536
        cccwhit = info["bpwhite"] * 6144
        cccretro = info["bpcretro"] * 24576
        cccticket = info["bpjacktick"] * 1
        totalBOBOvalue = cccValue+ccdirtyV+ccClasic+ccclean+ccccbw+cccwhit+cccretro+cccticket
        totalrealvalue1 = info["bpccc"]+info["bpcdirty"]+info["bpcclassic"]+info["bpcclean"]+info["bpcbwhite"]+info["bpwhite"]+info["bpcretro"]+info["bpjacktick"]
        info["bpcccValue"] = totalBOBOvalue
        em10 = discord.Embed(description="```diff\n!=== [Assets] ===!\n!=== [BoboPixel0x0NFTS\n C++Coin] ===!\n\n+ <:bp0x0_212:>  : {} = {}\n+ <:bp0x0_213:>  : {} = {}\n+ <:bp0x0_214:>  : {} = {}\n+ <:bp0x0_215:>  : {} = {}\n+ <:bp0x0_216:>  : {} = {}\n+ <:bp0x0_217:>  : {} = {}\n+ <:bp0x0_218:>  : {} = {}\n+ <:bp0x0_219:>  : {} = {}\n\n Total C++ NFTs : {} \n Total BoboValue : {}\n ```".format(info["bpccc"], cccValue, info["bpcdirty"], ccdirtyV, info["bpcclassic"], ccClasic, info["bpcclean"], ccclean, info["bpcbwhite"], ccccbw, info["bpwhite"], cccwhit, info["bpcretro"], cccretro, info["bpjacktick"], cccticket, totalrealvalue1, totalBOBOvalue), color=discord.Color.blue())
        await ctx.send(embed=em10)
    else:
        seconds = 26400 - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You have to Wait!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)
        await bpinv(ctx)
        return
@bot.command(aliases=["chid"])
async def checkid(ctx, code=None):
    channel = ctx.channel
    author = ctx.author
    member = ctx.message.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    regetWallet = info["account"]
    assetsWallet = info["assets"]
    #    an_integer = 123 ; a_string = str(an_integer)
    if code == "None" or code == None:
        await ctx.send("You need to enter the TemplateID from the NFT!\n USE COMMAND \n {}check <NFTS template_id>\n example: !check 56373 ".format(Prefix))
    a_string = str(code)
    a_Int = int(code)
    a_len = len(code)
    print("a_string")
    print(a_string)
    print("a_Int")
    print(a_Int)
    print("a_len")
    print(a_len)
    print("code")
    print(code)
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["castle_name"] == "None":
        await ctx.send("Please Name your Castle\n```diff\n USE COMMAND:\n {}setcastlename <Castle Name>```\n ".format(Prefix))
        return
    if code == None:
        await ctx.send("Please select.\n Write the code of the NFTS you have in your Wallet\n code on NFTS! \n starding with BP0x0_256 till BP0x0_X\n If you own BoboPixel0x0 NFT above (BP0x0-256)\n```diff\n- USE COMMAND {}code <NFT code: x-xxx-x-xxx (above BP0x0-256)> ````\n".format(Prefix))
    if a_len >= 0 :
        #em2 = discord.Embed(title="Checking in progress...", description="```diff\n!=====[{} CODE]=====!```\n\n Wallet Address ```diff\n {} ```\n".format(code, regetWallet), color=0x00ff00)
        #await ctx.send(embed=em2)
        #info["slotnum"] = 0 num
        #info["bbvalue"] = 1
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        #channel = ctx.channel
        #author = ctx.author
        #message = ctx.message
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        material = "none"
        #account = info["account"]
        try:
            print("try1")
            print("try1startINN") #https://wax.api.atomicassets.io/atomicassets/v1/assets/1099566385062
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/assets/{}'.format(code))
            response.json()
            data = response.json()
            print("data")
            print(data)
            success = data["success"]
            print("susscc")
            print(success)
            try:
                collection_name = data["data"]["collection"]["collection_name"]
                print("collection_name oben")
                print(collection_name)
            except:
                collection_name = 0
                print("Problem NO Collection Name!!!111")
            name = collection_name
            #print("nameNFT1")
            #print(nameNFT1)
            #nameNFT = data["data"]["template"][0]["immutable_data"]["name"]
            #print("nameNFT")
            #print(nameNFT)
            try:
                collection_nameCheck = data["data"]["collection"]["collection_name"]
                print("Collection Name")
                print(collection_nameCheck)
            except:
                print("Bigger Problem NO Collection Name!!!444")
            try:
                print("Lalalo")
            except:
                print("Lalal")
            print("collection_nameCheck lalalala")
            print(collection_nameCheck)
            if collection_nameCheck == "pixilminiwax":
                print("collection_nameCheck lalalala INNNNN")
                try:
                    name = data["data"]["immutable_data"]["name"]
                    nameNFT = data["data"]["immutable_data"]["name"]
                except:
                    print(" name ")
                    name = collection_nameCheck
                    nameNFT = collection_nameCheck
                try:
                    aspect1 = data["data"]["immutable_data"]["aspect1"]
                except:
                    aspect1 = 0
                    print(" aspect1 ")
                try:
                    aspect2 = data["data"]["immutable_data"]["aspect2"]
                except:
                    print(" aspect2 ")
                    aspect2 = 0
                try:
                    strength = data["data"]["immutable_data"]["strength"]
                except:
                    print(" strength ")
                    strength = 0
                try:
                    endurance = data["data"]["immutable_data"]["endurance"]
                except:
                    print(" endurance ")
                    endurance = 0
                try:
                    wisdom = data["data"]["immutable_data"]["wisdom"]
                except:
                    print(" wisdom Fail")
                    wisdom = 0
                try:
                    intuition = data["data"]["immutable_data"]["intuition"]
                except:
                    print(" intuition Fail")
                    intuition = 0
                try:
                    agility = data["data"]["immutable_data"]["agility"]
                except:
                    print(" agility ")
                    agility = 0
                try:
                    spirit = data["data"]["immutable_data"]["spirit"]
                except:
                    print(" spirit Fail")
                    spirit = 0
                try:
                    power = data["data"]["immutable_data"]["power"]
                except:
                    power = 0
                    print(" power Fail")
                try:
                    gender = data["data"]["immutable_data"]["gender"]
                except:
                    print(" gender ")
                    gender = 0
                try:
                    head = data["data"]["immutable_data"]["head"]
                except:
                    print(" head Fail")
                    head = 0
                try:
                    hair = data["data"]["immutable_data"]["hair"]
                except:
                    print(" hair ")
                    hair = 0
                try:
                    beard = data["data"]["immutable_data"]["beard"]
                except:
                    print(" beard ")
                    beard = 0
                try:
                    mustache = data["data"]["immutable_data"]["mustache"]
                except:
                    print(" mustache ")
                    mustache = 0
                try:
                    sideburn = data["data"]["immutable_data"]["sideburn"]
                except:
                    print(" sideburn Fail")
                    sideburn = 0
                try:
                    makeup = data["data"]["immutable_data"]["makeup"]
                except:
                    print(" makeup Fail")
                    makeup = 0
                try:
                    expression = data["data"]["immutable_data"]["expression"]
                except:
                    print(" expression Fail")
                    expression = 0
                try:
                    undervariation = data["data"]["immutable_data"]["undervariation"]
                except:
                    print(" undervariation Fail")
                    undervariation = 0
                try:
                    hairColor = data["data"]["immutable_data"]["hairColor"]
                except:
                    print(" hairColor Fail")
                    hairColor = 0
                try:
                    skinColor = data["data"]["immutable_data"]["skinColor"]
                except:
                    print(" skinColor Fail")
                    skinColor = 0
                try:
                    makeupColor = data["data"]["immutable_data"]["makeupColor"]
                except:
                    print(" makeupColor Fail")
                    makeupColor = 0
                try:
                    underwearColor = data["data"]["immutable_data"]["underwearColor"]
                except:
                    print(" underwearColor ")
                    underwearColor = 0
                try:
                    backgroundColor = data["data"]["immutable_data"]["backgroundColor"]
                except:
                    print(" backgroundColor ")
                    backgroundColor = 0
                try:
                    helm = data["data"]["immutable_data"]["helm"]
                except:
                    print(" helm ")
                    helm = 0
                try:
                    accessory = data["data"]["immutable_data"]["accessory"]
                except:
                    print(" accessory ")
                    accessory = 0
                try:
                    chest = data["data"]["immutable_data"]["chest"]
                except:
                    print(" chest ")
                    chest = 0
                try:
                    legs = data["data"]["immutable_data"]["legs"]
                except:
                    print(" legs ")
                    legs = 0
                try:
                    hands = data["data"]["immutable_data"]["hands"]
                except:
                    print(" hands ")
                    hands = 0
                try:
                    feet = data["data"]["immutable_data"]["feet"]
                except:
                    print(" feet ")
                    feet = 0
                try:
                    jacket = data["data"]["immutable_data"]["jacket"]
                except:
                    print(" jacket ")
                    jacket = 0
                try:
                    edition = data["data"]["immutable_data"]["edition"]
                except:
                    edition = "Error"
                    print(" edition ")
                    edition = 0
                try:
                    tokenID = data["data"]["data"]["tokenID"]
                except:
                    print(" tokenID ")
                    tokenID = 0
                try:
                    subset = data["data"]["data"]["subset"]
                    print(" subset 1")
                except:
                    try:
                        subset = data["data"]["immutable_data"]["subset"]
                        print(" subset 2")
                    except:
                        try:
                            subset = data["data"][0]["immutable_data"]["subset"]
                            print(" subset 3")
                        except:
                            try:
                                subset = data["data"][0]["data"]["subset"]
                                print(" subset 4")
                            except:
                                subset = "Error"
                                print(" subset Error")
                try:
                    rarity = data["data"]["data"]["rarity"]
                    print(" rarity 1")
                except:
                    try:
                        rarity = data["data"]["immutable_data"]["rarity"]
                        print(" rarity 2")
                    except:
                        try:
                            rarity = data["data"][0]["immutable_data"]["rarity"]
                            print(" rarity 3")
                        except:
                            try:
                                rarity = data["data"][0]["data"]["rarity"]
                                print(" rarity 4")
                            except:
                                rarity = "Unic"
                                print(" rarity Error")
                try:
                    edition = data["data"]["data"]["edition"]
                except:
                    edition = "Error"
                    print(" edition ")
                try:
                    alternate = data["data"]["immutable_data"]["alternate"]
                    print(" alternate ")
                    print(alternate)
                except:
                    print(" alternate ")
                    try:
                        alternate = data["data"]["template"]["immutable_data"]["alternate"]
                        print("alternate edition")
                        print(alternate)
                    except:
                        alternate = "QmaShaFayMqeH9jA4Q3yhpdGUVcy6FvJKYdVKVxMuobPw4"
                        print("No alternate")
                #try:
                #    noStats = data["data"]["immutable_data"]["noStats"]
                #except:
                #    print(" noStats ")
                try:
                    noBG = data["data"]["immutable_data"]["noBG"]
                    print(" noBG ")
                    print(noBG)
                except:
                    print("no noBG ")
                    try:
                        noBG = data["data"]["template"]["immutable_data"]["noBG"]
                        print("noBG edition")
                        print(noBG)
                    except:
                        try:
                            noBG = data["data"]["template"]["immutable_data"]["flyingbastion"]
                            print("flyingbastion edition")
                            print(noBG)
                        except:
                            noBG = "QmaShaFayMqeH9jA4Q3yhpdGUVcy6FvJKYdVKVxMuobPw4"
                            print("No noBG")
                try:
                    portrait = data["data"]["immutable_data"]["portrait"]
                except:
                    print(" portrait ")
                    try:
                        portrait = data["data"]["template"]["immutable_data"]["portrait"]
                        print("portrait edition")
                        print(portrait)
                    except:
                        try:
                            portrait = data["data"]["template"]["immutable_data"]["pixilmini"]
                            print("pixilmini edition")
                            print(portrait)
                        except:
                            portrait = "QmaShaFayMqeH9jA4Q3yhpdGUVcy6FvJKYdVKVxMuobPw4"
                            print("No portrait")
                try:
                    logoHead = data["data"]["immutable_data"]["logoHead"]
                except:
                    print(" logoHead ")
                    try:
                        logoHead = data["data"]["template"]["immutable_data"]["logoHead"]
                        print("logoHead edition")
                        print(logoHead)
                    except:
                        #logoHead = "QmaShaFayMqeH9jA4Q3yhpdGUVcy6FvJKYdVKVxMuobPw4"
                        print("No logoHead")
                try:
                    challengers = data["data"]["immutable_data"]["challengers"]
                except:
                    print(" challengers ")
                    #challengers = 0
                try:
                    flyingbastion = data["data"]["immutable_data"]["flyingbastion"]
                except:
                    print(" flyingbastion ")
                    #flyingbastion = 0
                try:
                    thanks = data["data"]["immutable_data"]["thanks"]
                except:
                    print("thanks ")
                    #thanks = 0
                try:
                    img = data["data"]["immutable_data"]["img"]
                except:
                    print("img FAIL")
                    try:
                        img = data["data"]["template"]["immutable_data"]["img"]
                        print("img edition")
                        print(img)
                    except:
                        img = "QmUUqSBHRpQCxSdNMWntg5bWPobk7HgggtiQ2RpzshtCY3"
                        print("No img")
                try:
                    em = discord.Embed(description="\n!=====[{}]=====!\n```diff\n name {}\n aspect1: {} \n aspect2: {}\n strength: {}\n endurance: {} \n wisdom: {}\n intuition: {} \n agility: {} \n spirit: {}\n power: {} \n gender: {}\n head: {}\n hair: {} \n beard: {}\n mustache: {}\n sideburn: {} \n makeup: {}\n expression: {} \n undervariation: {} \n hairColor: {}\n skinColor: {} \n makeupColor: {}\n underwearColor: {}\n backgroundColor: {} \n helm: {}\n accessory: {}\n chest: {} \n legs: {}\n hands: {} \n feet: {} \n jacket: {}\n edition: {} \n tokenID: {}\n subset: {}\n rarity: {} \n alternate: {}\n portrait: {} \n logoHead: {}\n challengers: {} \n flyingbastion: {} \n thanks: {}\n```".format(collection_nameCheck,name,aspect1,aspect2,strength,endurance,wisdom,intuition,agility,spirit,power,gender,head,hair,beard,mustache,sideburn,makeup,expression,undervariation,hairColor,skinColor,makeupColor,underwearColor,backgroundColor,helm,accessory,chest,legs,hands,feet,jacket,edition,tokenID,subset,rarity,alternate,portrait,logoHead,challengers,flyingbastion,thanks), color=discord.Color.blue())
                    em.add_field(name="!= collection", value=collection_nameCheck, inline=False)
                    em.add_field(name="name", value=name, inline=True)
                    em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="!= power", value=power, inline=True)
                    em.add_field(name="strength", value=strength, inline=True)
                    em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="!= agility", value=castle_guild_sklvl, inline=True)
                    em.add_field(name="endurance", value=endurance, inline=True)
                    em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="!= wisdom", value=castle_guild_defence, inline=True)
                    em.add_field(name="intuition", value=Player_In, inline=True)
                    em.add_field(name=None, value=None, inline=False)
                    em.add_field(name="!= spirit", value=castle_rank, inline=True)##
                    em.add_field(name="rarity", value=rarity, inline=True)
                    em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="!= aspect1", value=castle_owner, inline=True)
                    em.add_field(name="aspect2", value=castle_owner, inline=True)
                    em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="!= Rank", value=castle_guild_lvl, inline=True)
                    em.add_field(name="=!", value="=!", inline=True)
                    #em2.add_field(name="You did it", value="[This is All Yours](https://ipfs.atomichub.io/ipfs/(castle_img)")
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(alternate))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(noStats))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(portrait))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(logoHead))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(challengers))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(flyingbastion))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(thanks))
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    em2 = discord.Embed(title="{}".format(collection_nameCheck), description="```diff\n!==[ {} NFT ]==!\n\n```".format("alternate"), color=0x00ff00)
                    em2.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(alternate))
                    #em3 = discord.Embed(color=0x00ff00)
                    #em3.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(noBG))
                    em4 = discord.Embed(color=0x00ff00)
                    em4.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(portrait))
                    await ctx.send(embed=em2)
                    #await ctx.send(embed=em3)
                    await ctx.send(embed=em4)
                    await ctx.send(embed=em)
                except:
                    print("No PixelImutable Data")
                #em1 = discord.Embed(title="BackImg", color=0x00ff00)
                #em1.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                #em1.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(backimg))
                try:
                    print("TRY!1 Template")
                    template_id = data["data"]["template"]["template_id"]
                    print("template_id This Here;;;;;")
                    print(template_id)
                except:
                    print("template_id This Here;;;;exceptexceptexceptexcept;")
                try:
                    try:
                        issued_supply = data["data"][0]["template"]["immutable_data"]["issued_supply"]
                    except:
                        try:
                            issued_supply = data["data"][0]["template"]["issued_supply"]
                        except:
                            issued_supply = 0
                            print("No issued_supply")
                    try:
                        print("TRY owner")
                        #template_id = data["data"]["template"]["template_id"]
                        owner =  data["data"][1]["owner"]
                        print("owner owner WORK!!!!!!!")
                        print(owner)
                        print("owner backimg WORK!!!!!!!")
                    except:
                        try:
                            print("owner2")
                            owner =  data["data"]["owner"]
                            print("ownerhhhh owner WORK!!!!!!!")
                            print(owner)
                        except:
                            owner =  0
                            print("ownerhhhh owner WORK!0000000!!!!!!")
                    try:
                        template_id =  data["data"][0]["template"]["template_id"]
                        print("aaa template_id")
                        print(template_id)
                    except:
                        print("No template_id")
                        try:
                            template_id =  data["data"]["template"]["template_id"]
                            print("aaa template_id???")
                            print(template_id)
                        except:
                            print("No template_id")
                            template_id = 0
                    try:
                        schema_name =  data["data"][0]["schema"]["schema_name"]
                        print("aaa schema_name")
                        print(schema_name)
                    except:
                        print("No schema_name")
                        try:
                            schema_name =  data["data"]["schema"]["schema_name"]
                            print("aaa schema_name11")
                            print(schema_name)
                        except:
                            print("No schema_name")
                            schema_name = 0
                    try:
                        max_supply =  data["data"][0]["template"]["max_supply"]
                        print("aaa max_supply")
                        print(max_supply)
                    except:
                        print("No max_supply")
                        try:
                            max_supply =  data["data"]["template"]["max_supply"]
                            print("aaa max_supply")
                            print(max_supply)
                        except:
                            print("No max_supply")
                            max_supply = 0
                    try:
                        is_transferable =  data["data"][0]["template"]["is_transferable"]
                        print("aaa ")
                        print(is_transferable)
                    except:
                        print("No is_transferable")
                        try:
                            is_transferable =  data["data"]["template"]["is_transferable"]
                            print("aaa ")
                            print(is_transferable)
                        except:
                            print("No is_transferable")
                            is_transferable = 0
                    try:
                        is_burnable =  data["data"][0]["template"]["is_burnable"]
                        print("aaa is_burnable")
                        print(is_burnable)
                    except:
                        print("No is_burnable")
                        try:
                            is_burnable =  data["data"]["template"]["is_burnable"]
                            print("aaa is_burnable")
                            print(is_burnable)
                        except:
                            print("No is_burnable")
                            is_burnable = 0
                    try:
                        is_transferable =  data["data"][0]["template"]["is_transferable"]
                        print("aaa is_transferable")
                        print(is_transferable)
                    except:
                        print("No is_transferable")
                        try:
                            is_transferable =  data["data"]["template"]["is_transferable"]
                            print("aaa is_transferable")
                            print(is_transferable)
                        except:
                            print("No is_transferable")
                            is_transferable = 0
                    try:
                        template_mint =  data["data"][0]["template_mint"]
                        print("aaa template_mint")
                        print(template_mint)
                    except:
                        print("template_mint") #
                        try:
                            template_mint =  data["data"]["template_mint"]
                            print("aaa template_mint")
                            print(template_mint)
                        except:
                            print("No template_mint")
                            template_mint = 0
                    try:
                        print("template_id cvcvdsdvsvxcvsdfvsdvxc1?????")
                        print(template_id)
                    except:
                        print("nop")
                    try:
                        subset = data["data"][0]["data"]["subset"]
                        print("aaa subset")
                        print(subset)
                    except:
                        try:
                            subset = data["data"]["template"]["immutable_data"]["subset"]
                            print("aaa subset")
                            print(subset)
                        except:
                            subset = 0
                            print("No subset")
                    try:
                        edition = data["data"][0]["data"]["edition"]
                        print("aaa edition")
                        print(edition)
                    except:
                        try:
                            edition = data["data"]["template"]["immutable_data"]["edition"]
                            print("aaa edition")
                            print(edition)
                        except:
                            edition = 0
                            print("No edition")
                except:
                    print("No template_id")
                em = discord.Embed(title="{}".format(collection_nameCheck), description="```diff\n!===[ {} NFTS ]===!\n \n```".format(schema_name), color=0x00ff00)
                em.add_field(name="collection", value=collection_nameCheck, inline=False)
                em.add_field(name="name", value=name, inline=False)
                em.add_field(name="Owner", value=owner, inline=True)
                em.add_field(name="edition", value=edition, inline=True)
                em.add_field(name="schema_name", value=schema_name, inline=True)
                em.add_field(name="asset_id", value= code, inline=True)
                em.add_field(name="template_id", value= template_id, inline=True)
                em.add_field(name="template_mint", value= template_mint, inline=True)
                em.add_field(name="max_supply", value= max_supply, inline=True)
                em.add_field(name="is_burnable", value=is_burnable, inline=True)
                em.add_field(name="is_transferable", value=is_transferable, inline=True)
                if power <=1:
                    print("hi unter 1")
                else:
                    em.add_field(name="power", value=power, inline=False)
                #em.add_field(name="=!", value="=!", inline=True)
                #em.add_field(name="strength", value=strength, inline=True)
                #em.add_field(name="agility", value=agility, inline=True)
                # em.add_field(name="=!", value="=!", inline=True)
                #em.add_field(name="endurance", value=endurance, inline=True)
                #em.add_field(name="wisdom", value=wisdom, inline=True)
                #em.add_field(name="=!", value="=!", inline=True)
                #em.add_field(name="intuition", value=intuition, inline=True)
                #em.add_field(name="spirit", value=spirit, inline=True)##
                #em.add_field(name="=!", value="=!", inline=True)
                if rarity == "Unic":
                    print("Unic")
                else:
                    em.add_field(name="rarity", value=rarity, inline=True)
                if aspect1 <=1:
                    print("hi unter 1")
                else:
                    em.add_field(name="aspect1", value=aspect1, inline=True)
                if aspect2 <=1:
                    print("hi unter 1")
                else:
                    em.add_field(name="aspect2", value=aspect2, inline=True)
                #em.add_field(name="=!", value="=!", inline=True)
                #em.add_field(name="=!", value="=!", inline=True)
                #em.add_field(name="Rank", value=Rank, inline=True)
                #em2.add_field(name="You did it", value="[This is All Yours](https://ipfs.atomichub.io/ipfs/(castle_img)")
                em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                em2 = discord.Embed(title="{}".format(collection_nameCheck), description="```diff\n!=[ {} NFT ]=!\n```".format("alternate"), color=0x00ff00)
                em2.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(alternate))
                em3 = discord.Embed(color=0x00ff00)
                em3.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(noBG))
                #em3 = discord.Embed(color=0x00ff00)
                #em3.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(noStats))
                em4 = discord.Embed(color=0x00ff00)
                em4.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(portrait))
                await ctx.send(embed=em2)
                await ctx.send(embed=em3)
                await ctx.send(embed=em4)
                await ctx.send(embed=em)
                #em5 = discord.Embed(color=0x00ff00)
                #em5.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(logoHead))
                #em6 = discord.Embed(color=0x00ff00)
                #em6.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(challengers))
                #em7 = discord.Embed(color=0x00ff00)
                #em7.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(flyingbastion))
                #em8 = discord.Embed(color=0x00ff00)
                #em8.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(thanks))
                #em9 = discord.Embed(title="{}".format(collection_nameCheck), description="```diff\n!==[ {} NFT ]==!\n\n```".format("img"), color=0x00ff00)
                #em9.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                #em9 = discord.Embed(color=0x00ff00)
                #em9.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                #await ctx.send(embed=em1)
                #await ctx.send(embed=em2)
                #await ctx.send(embed=em3)
                #await ctx.send(embed=em4)
                #await ctx.send(embed=em5)
                #await ctx.send(embed=em6)
                #await ctx.send(embed=em7)
                #await ctx.send(embed=em8)
                #await ctx.send(embed=em9)
                #await ctx.send(embed=em)
                #em.add_field(name="freedrop", value=freedrop, inline=False)
                if "http" in str(img):
                    print("contain Http END PIX")
                    em.set_image(url="{}".format(img))
                else:
                    print("contain NOT Http END Pix")
                    #em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    #await ctx.send(embed=em)
                return
            if collection_nameCheck == "bobopixeloxo":
                print("collection_nameCheck == bobopixeloxo")
                try:
                    img = data["data"]["data"]["img"]
                    print(" try1 img  bobo This here")
                    print(img)
                    img = data["data"][0]["template"]["immutable_data"]["img"]
                    print("img bobo")
                    print(img)
                except:
                    try:
                        img = data["data"][0]["data"]["img"]
                        print(" except try2 img bobo 2")
                        print(img)
                    except:
                        img = 0
                        print(" except try4 img  bobo 4 000000")
                        print(img)
                        print("except data 000 0 000")
                try:
                    video = data["data"][0]["template"]["immutable_data"]["video"]
                    print("video")
                    print(video)
                except:
                    print("exceptvideo")
                try:
                    print("TRY!1 Template")
                    template_id = data["data"]["template"]["template_id"]
                    print("template_id This Here;;;;;")
                    print(template_id)
                except:
                    try:
                        template_id = data["data"][0]["template"]["template_id"]
                        print("template_id 1?????")
                        print(template_id)
                    except:
                        print("No template_id")
                if "http" in str(img):
                    print("contain Http")
                #luckynr = data1["data"]["immutable_data"]["luckynr"]
                #bobovalueNFT = data1["data"]["immutable_data"]["bobovalue"]
                try:
                    print("try bobopixeloxo")
                    #print("try1startINN")
                    response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={}&page=1&limit=100&order=desc&sort=asset_id'.format(template_id))
                    response.json()
                    data = response.json()
                    print("data")
                    #print(data)
                    success = data["success"]
                    print("susscc")
                    print(success)
                    #nameNFT = data["data"][0]["name"]
                except:
                    print(" aaa ")
                template_id =  data["data"][0]["template"]["template_id"]
                print("aaa template_id")
                print(template_id)
                schema_name =  data["data"][0]["schema"]["schema_name"]
                print("aaa schema_name")
                print(schema_name)
                max_supply =  data["data"][0]["template"]["max_supply"]
                print("aaa max_supply")
                print(max_supply)
                is_transferable =  data["data"][0]["template"]["is_transferable"]
                print("aaa ")
                print(is_transferable)
                is_burnable =  data["data"][0]["template"]["is_burnable"]
                print("aaa is_burnable")
                print(is_burnable)
                is_transferable =  data["data"][0]["template"]["is_transferable"]
                print("aaa is_transferable")
                print(is_transferable)
                template_mint =  data["data"][-1]["template_mint"]
                print("aaabbb template_mint")
                print(template_mint)
                try:
                    backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
                    print("aaa backimg")
                    print(backimg)
                except:
                    print("No backimg")
                try:
                    schema_name1 = data["data"][0]["template"]["immutable_data"]["style"]
                    print("aaa schema_name1 style")
                    print(schema_name)
                except:
                    schema_name1 = "Alltime"
                    print("No style")
                info1 = data["data"][0]["template"]["immutable_data"]["info"]
                print("aaa info1")
                print(info1)
                try:
                    freedrop = data["data"]["template"]["freedrop"]
                except:
                    freedrop = 0
                    print("No freeDRop")
                try:
                    category = data["data"][0]["data"]["category"]
                    print("aaa category")
                    print(category)
                except:
                    category = 0
                    print("No category")
                try:
                    luckynr = data["data"]["template"]["luckynr"]
                except:
                    luckynr = 0
                    print("No luckynr")
                print("aaa luckynr")
                print(luckynr)
                #backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
                #try:
                #    schema_name =  data["data"][0]["template"]["immutable_data"]["style"]
                #except:
                #    schema_name = 0
                #    print("No schema_name")
                #print("aaa luckynr")
                #print(luckynr)
                try:
                    print("TRY!1 img")
                    #template_id = data["data"]["template"]["template_id"]
                    img = data["data"][0]["template"]["immutable_data"]["img"]
                    print("img img WORK!!!!!!!")
                    print(img)
                    print("img img WORK!!!!!!!")
                except:
                    print("No img")
                    backimg =  "QmQnhf3HdMTGxhK3uUFQVM4YsiwZjy683bcsnDXT74Bjg2"
                try:
                    print("TRY!1 backimg")
                    #template_id = data["data"]["template"]["template_id"]
                    backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
                    print("backimg backimg WORK!!!!!!!")
                    print(backimg)
                    print("backimg backimg WORK!!!!!!!")
                    try:
                        #em1 = discord.Embed(title="BackImg", color=0x00ff00)
                        #em1.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                        #await ctx.send(embed=em1)
                        if "http" in str(backimg):
                            print("contain Http END")
                            embackimg = discord.Embed(title="BackImg", color=0x00ff00)
                            embackimg.set_image(url="{}".format(backimg))
                            #await ctx.send(embed=em)
                            #await ctx.send(embed=em6)
                            await ctx.send(embed=embackimg)
                        else:
                            print("contain Http NOT END")
                            print("Backimgtttttt")
                            print(backimg)
                            embackimg = discord.Embed(title="BackImg", color=0x00ff00)
                            embackimg.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                            #embackimg.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                            #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(backimg))
                            #await ctx.send(embed=em)
                            #await ctx.send(embed=em6)
                            await ctx.send(embed=embackimg)
                    except:
                        print("No back img")
                except:
                    print("No backimg")
                try:
                    print("TRY!back")
                    #template_id = data["data"]["template"]["template_id"]
                    back = data["data"][0]["template"]["immutable_data"]["back"]
                    #back = back[1:]
                    print("back WORK!!!!!!!")
                    print(back)
                    print("back WORK!!!!!!!")
                    if "http" in str(back):
                        print("contain Http END")
                        emback = discord.Embed(title="Back", color=0x00ff00)
                        emback.set_image(url="{}".format(back))
                        #await ctx.send(embed=em)
                        #await ctx.send(embed=em6)
                        await ctx.send(embed=emback)
                    else:
                        print("contain Http NOT END pix")
                        print("Backimgbbbbt")
                        print(backimg)
                        emback = discord.Embed(title="Back", color=0x00ff00)
                        emback.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(back))
                        #embackimg.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                        #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(backimg))
                        #await ctx.send(embed=em)
                        #await ctx.send(embed=em6)
                        await ctx.send(embed=emback)
                except:
                    print("No back xxxxxxxxxxxxx")
                try:
                    issued_supply = data["data"][0]["template"]["immutable_data"]["issued_supply"]
                except:
                    try:
                        issued_supply = data["data"][0]["template"]["issued_supply"]
                    except:
                        issued_supply = 0
                        print("No issued_supply")
                try:
                    print("TRY owner")
                    #template_id = data["data"]["template"]["template_id"]
                    owner =  data["data"][1]["owner"]
                    print("owner owner WORK!!!!!!!")
                    print(owner)
                    print("owner backimg WORK!!!!!!!")
                except:
                    print("No owner")
                    owner = 0
                try:
                    bobovalueNFT = data["data"][0]["template"]["immutable_data"]["bobovalue"]
                except:
                    bobovalueNFT = 0
                    print("No bobovalue")
                try:
                    bobovalueNFT = data["data"][0]["template"]["immutable_data"]["bobovalue"]
                except:
                    bobovalueNFT = 0
                    print("No bobovalue")
                try:
                    bobovalueNFT = data["data"][0]["template"]["immutable_data"]["bobovalue"]
                except:
                    bobovalueNFT = 0
                    print("No bobovalue")
                print("[=============================================================================]")
                #print(data)
                print("[=============================================================================]")
                print("susscc")
                print(success)
                # if success == "True" or success == True:
                try:
                    print("nameNFT")
                    print(nameNFT)
                    nameNFT = data["data"]["template"]["immutable_data"]["name"]
                except:
                    try:
                        nameNFT = data["data"][0]["template"]["immutable_data"]["name"]
                    except:
                        nameNFT = 0
                        print("Problem NO Collection Name!!!333")
                print("nameNFT")
                print(nameNFT)
                try:
                    #try:
                    #    #em1 = discord.Embed(title="BackImg", color=0x00ff00)
                    #    #em1.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                    #    #await ctx.send(embed=em1)
                    #
                    #    if "http" in str(backimg):
                    #        print("contain Http END")
                    #        embackimg.set_image(url="{}".format(backimg))
                    #        #await ctx.send(embed=em)
                    #        #await ctx.send(embed=em6)
                    #        await ctx.send(embed=embackimg)
                    # #   else:
                    #        print("contain Http NOT END")
                    #        embackimg.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                    #        #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(backimg))
                    #        #await ctx.send(embed=em)
                    #        #await ctx.send(embed=em6)
                    #        await ctx.send(embed=embackimg)
                    #except:
                    #    print("No back img")
                    #    try:
                    #
                    #        if "http" in str(back):
                    #            print("contain Http END")
                    #            emback.set_image(url="{}".format(back))
                    #            #await ctx.send(embed=em)
                    #            #await ctx.send(embed=em6)
                    #            await ctx.send(embed=emback)
                    #        else:
                    #            print("contain Http NOT END")
                    #            emback.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(back))
                    #            #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(back))
                    #            #await ctx.send(embed=em)
                    #            #await ctx.send(embed=em6)
                    #            await ctx.send(embed=emback)
                    #
                    #        print("em2123")
                    #        print("back")
                    #        print(back)
                    #
                    #        #em2123 = discord.Embed(title="Back", color=0x00ff00)
                    #        #em2123.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(back))
                    #        #await ctx.send(embed=em2123)
                    #        #print("em2123")
                    #        #print("back")
                    #    except:
                    #        print("No back img2")
                    # #   #em3 = discord.Embed(title="BackImg", color=0x00ff00)
                    # #   #em3.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                    #    #await ctx.send(embed=em3)
                    em = discord.Embed(title="{}".format(schema_name), description="```diff\n!===[{} ]===!\n```".format(nameNFT), color=0x00ff00)
                    em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    em.add_field(name="nameNFT", value=nameNFT, inline=True)
                    em.add_field(name="Owner", value=owner, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="category", value=category, inline=True)
                    em.add_field(name="schema_name", value=schema_name, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="asset_id", value= code, inline=True)
                    em.add_field(name="template_id", value= template_id, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="template_mint", value= template_mint, inline=True)
                    em.add_field(name="max_supply", value= max_supply, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    em.add_field(name="is_burnable", value=is_burnable, inline=True)
                    em.add_field(name="is_transferable", value=is_transferable, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    if "http" in str(img):
                        print("contain Http END")
                        em.set_image(url="{}".format(img))
                        #await ctx.send(embed=em)
                        #await ctx.send(embed=em6)
                        await ctx.send(embed=em)
                    else:
                        print("contain Http NOT END bop")
                        em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                        #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                        #await ctx.send(embed=em)
                        #await ctx.send(embed=em6)
                        await ctx.send(embed=em)
                except IndexError:
                    print("indexerror img")
            else:  # any id
                print("something else")
                print("collection_nameCheck == ELse")
                response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/assets/{}'.format(code))
                response.json()
                data = response.json()
                try:
                    img = data["data"]["data"]["img"]
                    print(" try1 img  bobo This here")
                    print(img)
                    #img = data["data"][0]["template"]["immutable_data"]["img"]
                    print("img bobo")
                    print(img)
                except:
                    try:
                        img = data["data"][0]["data"]["img"]
                        print(" except try2 img bobo 2")
                        print(img)
                    except:
                        try:
                            img = data["data"][0]["data"]["video"]
                            print(" except try2 video video 2")
                            print(img)
                        except:
                            try:
                                img = data["data"]["data"][0]["video"]
                                print(" except try2 video videoooioiooioioiooio 2")
                                print(img)
                            except:
                                img = data["data"]["data"]["video"]
                                print("owner owner WORK!!!!!!! 000000000000000")
                                print(img)
                                #img = 0
                                print(" except try4 img  bobo 4 000000")
                                #print(img)
                                print("except data 000 0 000")
                try:
                    video = data["data"][0]["template"]["immutable_data"]["video"]
                    print("video")
                    print(video)
                except:
                    try:
                        video = data["data"][0]["immutable_data"]["video"]
                        print("video")
                        print(video)
                    except:
                        print("exceptvideo")
                try:
                    name = data["data"][0]["immutable_data"]["name"]
                    nameNFT = data["data"][0]["immutable_data"]["name"]
                    print(" name ")
                    print(name)
                    print(nameNFT)
                except:
                    nameNFT = collection_name
                    print(" name Fail")
                try:
                    print("TRY!1 Template")
                    template_id = data["data"]["template"]["template_id"]
                    print("template_id This Here;;;;;")
                    print(template_id)
                except:
                    try:
                        template_id = data["data"][0]["template"]["template_id"]
                        print("template_id 1?????")
                        print(template_id)
                    except:
                        print("No template_id")
                if "http" in str(img):
                    print("contain Http")
                #luckynr = data1["data"]["immutable_data"]["luckynr"]
                #bobovalueNFT = data1["data"]["immutable_data"]["bobovalue"]
                try:
                    print("try bobopixeloxo")
                    #print("try1startINN")
                    response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={}&page=1&limit=100&order=desc&sort=asset_id'.format(template_id))
                    response.json()
                    data = response.json()
                    print("data")
                    #print(data)
                    success = data["success"]
                    print("susscc")
                    print(success)
                    #nameNFT = data["data"][0]["name"]
                except:
                    print(" aaa ")
                try:
                    template_id = data["data"][0]["template"]["template_id"]
                    print("aaa template_id")
                    print(template_id)
                except:
                    print("No template_id")
                try:
                    schema_name = data["data"][0]["schema"]["schema_name"]
                    print("aaa schema_name")
                    print(schema_name)
                except:
                    print("No schema_name")
                try:
                    max_supply = data["data"][0]["template"]["max_supply"]
                    print("aaa max_supply")
                    print(max_supply)
                except:
                    print("No max_supply")
                try:
                    is_transferable = data["data"][0]["template"]["is_transferable"]
                    print("aaa ")
                    print(is_transferable)
                except:
                    print("No is_transferable")
                try:
                    is_burnable = data["data"][0]["template"]["is_burnable"]
                    print("aaa is_burnable")
                    print(is_burnable)
                except:
                    print("No is_burnable")
                try:
                    template_mint = data["data"]["template_mint"]
                    print("aaa1 template_mint")
                    print(template_mint)
                except:
                    try:
                        template_mint = data["data"][-1]["template_mint"]
                        print("aaa2 template_mint-1")
                        print(template_mint)
                        template_mint = data["data"][-0]["template_mint"]
                        print("aaa2 template_mint-0")
                        print(template_mint)
                        template_mint = data["data"][0]["template_mint"]
                        print("aaa2 template_mint0")
                        print(template_mint)
                        template_mint = data["data"][1]["template_mint"]
                        print("aaa2 template_mint1")
                        print(template_mint)
                        template_mint = data["data"][2]["template_mint"]
                        print("aaa2 template_mint2")
                        print(template_mint)
                    except:
                        try:
                            template_mint = data["data"][0]["immutable_data"]["template_mint"]
                            print("aaa3 template_mint")
                            print(template_mint)
                        except:
                            template_mint = 0
                            print("No template_mint")
                print("WHAT No template_mint")
                print(template_mint)
                #try:
                #    img = data["data"][0]["template"]["immutable_data"]["img"]
                #    print("aaa img")
                #    print(img)
                #except:
                #    try:
                #        img = #data["data"][0]["template"]["immutable_data"]["img"]
                #        print("aaa3 img")
                #        print(img)
                #    except:
                #        try:
                #            img = data["data"]["data"]["img"]
                #            print("aaa3 img")
                #            print(img)
                #        except:
                #            try:
                #                img = data["data"]["data"]["back"]
                #                print("aaa3 img back REALM !!!")
                #                print(img)
                #            except:
                #                print("No img")
                #                print("No img") # img
                try:
                    backimg = data["data"][0]["template"]["immutable_data"]["backimg"]
                    print("aaa backimg")
                    print(backimg)
                except:
                    try:
                        backimg = data["data"][0]["template"]["immutable_data"]["back"]
                        print("aaa3 back")
                        print(back)
                    except:
                        try:
                            backimg = data["data"]["data"]["back"]
                            print("aaa3 back")
                            print(back)
                        except:
                            print("No back")
                            print("No backimg") # back
                #backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
                #try:
                #    schema_name =  data["data"][0]["template"]["immutable_data"]["style"]
                #except:
                #    schema_name = 0
                #    print("No schema_name")
                #print("aaa luckynr")
                #print(luckynr)
                #try:
                #    print("TRY!back")
                #    #template_id = data["data"]["template"]["template_id"]
                #    back = data["data"][0]["template"]["immutable_data"]["back"]
                #    back = back[1:]
                #
                #    print("back WORK!!!!!!!")
                #    print(back)
                #    print("back WORK!!!!!!!")
                #except:
                #    print("No back xxxxxxxxxxxxx")
                #try:
                #    print("TRY!1 backimg")
                #    #template_id = data["data"]["template"]["template_id"]
                #    backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
                #    print("backimg backimg WORK!!!!!!!111")
                #    print(backimg)
                #    print("backimg backimg WORK!!!!!!!1111")
                #except:
                #    print("No backimg")
                #    backimg =  "QmQnhf3HdMTGxhK3uUFQVM4YsiwZjy683bcsnDXT74Bjg2"
                try:
                    issued_supply = data["data"][0]["template"]["immutable_data"]["issued_supply"]
                except:
                    try:
                        issued_supply = data["data"][0]["template"]["issued_supply"]
                    except:
                        issued_supply = 0
                        print("No issued_supply")
                try:
                    print("TRY owner")
                    #owner = data["data"]
                    owner = data["data"][-2]["owner"]
                    print("owner owner WORK!!!!!!! -2")
                    print(owner)
                    owner = data["data"][-1]["owner"]
                    print("owner owner WORK!!!!!!! -1")
                    print(owner)
                    owner = data["data"][-0]["owner"]
                    print("owner owner WORK!!!!!!! -0")
                    print(owner)
                    owner = data["data"][0]["owner"]
                    print("owner owner WORK!!!!!!! 0")
                    print(owner)
                    owner = data["data"][1]["owner"]
                    print("owner owner WORK!!!!!!! 1")
                    print(owner)
                    owner = data["data"][2]["owner"]
                    print("owner owner WORK!!!!!!! 2")
                    print(owner)
                    owner = data["data"][3]["owner"]
                    print("owner owner WORK!!!!!!! 3")
                    print(owner)
                    owner = data["data"][0]["owner"]
                    print("owner owner WORK!!!!!!! 4")
                    print(owner)
                    print("owner owner WORK!!!!!!!")
                    print(owner)
                    print("owner backimg WORK!!!!!!!")
                except:
                    print("No owner")
                    owner = 0
                try:
                    #try:
                        #em1 = discord.Embed(title="BackImg", color=0x00ff00)
                        #em1.set_image(url="https://atomichub-ipfs.com/ipfs/{}".f#ormat(backimg))
                        #await ctx.send(embed=em1)
                    #except:
                        #print("No backimg img")
                    #try:
                    #    print("em2123")
                    #    print("back")
                    #    print(back)
                    #
                    #    em2123 = discord.Embed(title="Back", color=0x00ff00)
                    #    em2123.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(back))
                    #    await ctx.send(embed=em2123)
                    #    print("em2123")
                    #    print("back")
                    #except:
                    #    print("No back img2")
                    try:
                        em3 = discord.Embed(title="BackImg", color=0x00ff00)
                        em3.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                        await ctx.send(embed=em3)
                    except:
                        print("no Fail backimg")
                    #em222 = discord.Embed(title="{}".format(schema_name), description="```diff\n!===[{} ]===!\n```".format(nameNFT), color=0x00ff00)
                    #em222.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    em22 = discord.Embed(title="{}".format(name), description="```diff\n!===[{} ]===!\n```".format(nameNFT), color=0x00ff00)
                    em22.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    em22.add_field(name="nameNFT", value=nameNFT, inline=True)
                    em22.add_field(name="Owner", value=owner, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    em22.add_field(name="template_id", value=template_id, inline=True)
                    #em.add_field(name="=!", value="=!", inline=True)
                    em22.add_field(name="asset_id", value=code, inline=True)
                    try:
                        em22.add_field(name="schema_name", value=schema_name, inline=True)
                    except:
                        pass
                    #em.add_field(name="=!", value="=!", inline=True)
                    try:
                        em22.add_field(name="template_mint", value=template_mint, inline=True)
                    except:
                        pass
                    try:
                        em22.add_field(name="max_supply", value=max_supply, inline=True)
                    except:
                        pass
                    try:
                        #em.add_field(name="=!", value="=!", inline=True)
                        em22.add_field(name="is_burnable", value=is_burnable, inline=True)
                    except:
                        pass
                    try:
                        em22.add_field(name="is_transferable", value=is_transferable, inline=True)
                        #em.add_field(name="=!", value="=!", inline=True)
                    except:
                        pass
                    try:
                        if "http" in str(img):
                            print("contain Http END")
                            em.set_image(url="{}".format(img))
                            await ctx.send(embed=em)
                        else:
                            print("contain Http NOT END else")
                            print("img")
                            print(img)
                            em35 = discord.Embed(title="FrontImg", color=0x00ff00)
                            em35.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                            #em35.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                            await ctx.send(embed=em35)
                            #await ctx.send(embed=em222)
                            await ctx.send(embed=em22)
                    except:
                        pass
                except IndexError:
                    print("indexerror img")
        except IndexError:
                print("ERRRORRRRRRANNNNNNDD1")
                await ctx.send("```diff\n+ CODE OK!!!! Somthing WORNG!!! The NFT YOU ARE LOOKING FOR MIGHT NOT BE BORN!!!\n NO DATA!!!INDEX ERROR!\n\n FAIL... {}\n```".format(code))
                return
@bot.command(aliases=["ch"])
async def check(ctx, code=None):
    channel = ctx.channel
    author = ctx.author
    member = ctx.message.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    regetWallet = info["account"]
    assetsWallet = info["assets"]
    #    an_integer = 123 ; a_string = str(an_integer)
    if code == "None" or code == None:
        await ctx.send("You need to enter the TemplateID from the NFT!\n USE COMMAND \n {}check <NFTS template_id>\n example: !check 56373 ".format(Prefix))
    a_string = str(code)
    a_Int = int(code)
    a_len = len(code)
    print("a_string")
    print(a_string)
    print("a_Int")
    print(a_Int)
    print("a_len")
    print(a_len)
    print("code")
    print(code)
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["castle_name"] == "None":
        await ctx.send("Please Name your Castle\n```diff\n USE COMMAND:\n {}setcastlename <Castle Name>```\n ".format(Prefix))
        return
    if code == None:
        await ctx.send("Please select.\n Write the code of the NFTS you have in your Wallet\n code on NFTS! \n starding with BP0x0_256 till BP0x0_X\n If you own BoboPixel0x0 NFT above (BP0x0-256)\n```diff\n- USE COMMAND {}code <NFT code: x-xxx-x-xxx (above BP0x0-256)> ````\n".format(Prefix))
    if a_len >= 0 :
        #em2 = discord.Embed(title="Checking in progress...", description="```diff\n!=====[{} CODE]=====!```\n\n Wallet Address ```diff\n {} ```\n".format(code, regetWallet), color=0x00ff00)
        #await ctx.send(embed=em2)
        #info["slotnum"] = 0 num
        #info["bbvalue"] = 1
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        #channel = ctx.channel
        #author = ctx.author
        #message = ctx.message
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        material = "none"
        #account = info["account"]
        try:
            print("try1")
            print("try1startINN")
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={}&page=1&limit=100&order=desc&sort=asset_id'.format(code))
            response.json()
            data = response.json()
            print("data")
            print(data)
            success = data["success"]
            print("susscc")
            print(success)
            nameNFT = data["data"][0]["name"]
            #print("nameNFT1")
            #print(nameNFT1)
            #nameNFT = data["data"]["template"][0]["immutable_data"]["name"]
            #print("nameNFT")
            #print(nameNFT)
            try:
                img = data["data"][0]["template"]["immutable_data"]["img"]
                print("img")
                print(img)
            except:
                try:
                    img = data["data"][0]["data"]["img"]
                    print("img")
                    print(img)
                except:
                    print("except data")
                try:
                    video = data["data"][0]["template"]["immutable_data"]["video"]
                    print("video")
                    print(video)
                except:
                    print("exceptvideo")
            if "http" in str(img):
                print("contain Http")
            #luckynr = data1["data"]["immutable_data"]["luckynr"]
            #bobovalueNFT = data1["data"]["immutable_data"]["bobovalue"]
            template_id =  data["data"][0]["template"]["template_id"]
            schema_name =  data["data"][0]["schema"]["schema_name"]
            max_supply =  data["data"][0]["template"]["max_supply"]
            is_transferable =  data["data"][0]["template"]["is_transferable"]
            is_burnable =  data["data"][0]["template"]["is_burnable"]
            is_transferable =  data["data"][0]["template"]["is_transferable"]
            template_mint =  data["data"][0]["template_mint"]
            #backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
            #schema_name =  data["data"][0]["template"]["immutable_data"]["style"]
            #info1 = data["data"][0]["template"]["immutable_data"]["info"]
            #freedrop = data["data"][0]["template"]["immutable_data"]["freedrop"]
            #category = data["data"][0]["data"]["category"]
            #luckynr = data["data"][0]["template"]["immutable_data"]["luckynr"]
            #bobovalueNFT = data["data"][0]["template"]["immutable_data"]["bobovalue"]
            #backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
            print("[=============================================================================]")
            print(data)
            print("[=============================================================================]")
            print("susscc")
            print(success)
            # if success == "True" or success == True:
            try:
                print("ON TRY")
                schema_name =  data["data"][0]["template"]["immutable_data"]["style"]
                try:
                    print("TRY!1")
                    backimg =  data["data"][0]["template"]["immutable_data"]["backimg"]
                    print("backimg")
                    print(backimg)
                except:
                    print("No backimg")
                    backimg =  "QmQnhf3HdMTGxhK3uUFQVM4YsiwZjy683bcsnDXT74Bjg2"
                try:
                    print("TRY!2")
                    if len(category) >= 2:
                        category = data["data"][0]["immutable_data"]["category"]
                        print("category")
                        print(category)
                except:
                    category = "0"
                try:
                    print("TRY!3")
                    if len(info1) >= 2:
                        info1 = data["data"][0]["data"]["info"]
                        print("info1")
                        print(info1)
                except:
                    info1 = "0"
                try:
                    print("TRY!3")
                    if len(info1) >= 2:
                        info1 = data["data"][0]["data"]
                        print("info1")
                        print(info1)
                except:
                    info1 = "0"
                try:
                    print("TRY!33")
                    if len(info1) >= 2:
                        info1 = data["data"][0]["template"]["immutable_data"][0]["info"]
                        print("info1")
                        print(info1)
                except:
                    info1 = "0"
                try:
                    print("TRY!3333")
                    if len(info1) >= 2:
                        info1 = data["data"][0]["template"]["immutable_data"]["info"]
                        print("info1")
                        print(info1)
                except:
                    info1 = "0"
                try:
                    print("TRY!333")
                    if len(info1) >= 2:
                        info1 = data["data"][0]["data"][0]["info"]
                        print("info1")
                        print(info1)
                except:
                    info1 = "0"
                try:
                    print("TRY!3333")
                    if len(info1) >= 2:
                        info1 = data["data"][0]["immutable_data"]["info"]
                        print("info1")
                        print(info1)
                except:
                    info1 = "0"
                try:
                    print("TRY!53333")
                    if len(bobovalueNFT) >= 0:
                        info121 = data["data"][0]["template"]["immutable_data"]["info"]
                        print("info121")
                        print(info121)
                except:
                    bobovalueNFT = "0"
                try:
                    print("TRY!4")
                    if len(bobovalueNFT) >= 0:
                        bobovalueNFT1 = data["data"][0]["data"]["bobovalue"]
                        print("bobovalueNFT1")
                        print(bobovalueNFT1)
                except:
                    bobovalueNFT = "0"
                try:
                    print("TRY!5")
                    if len(bobovalueNFT) >= 0:
                        bobovalueNFT = data["data"][0]["template"]["immutable_data"]["bobovalue"]
                        print("bobovalueNFT")
                        print(bobovalueNFT)
                except:
                    bobovalueNFT = "0"
                try:
                    print("TRY!44")
                    if len(bobovalueNFT) >= 0:
                        info1 = data["data"][0]["data"]["info"]
                        print("info1")
                        print(info1)
                except:
                    bobovalueNFT = "0"
                try:
                    print("TRY!55")
                    if len(bobovalueNFT) >= 0:
                        category = data["data"][0]["template"]["immutable_data"]["category"]
                        print("category")
                        print(category)
                except:
                    bobovalueNFT = "0"
                try:
                    print("TRY!6")
                    if len(luckynr) >= 0:
                        luckynr1 = data["data"][0]["data"]["luckynr"]
                        print("luckynr1")
                        print(luckynr1)
                except:
                    luckynr = "0"
                try:
                    print("TRY!7")
                    if len(luckynr) >= 0:
                        luckynr = data["data"][0]["template"]["immutable_data"]["luckynr"]
                        print("luckynr")
                        print(luckynr)
                except:
                    luckynr = "0"
                em1 = discord.Embed(title="BackImg", color=0x00ff00)
                em1.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(backimg))
                #em1.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(backimg))
                await ctx.send(embed=em1)
                em = discord.Embed(title="{}".format(category), description="```diff\n!==[ {} NFT ]==!\n\n \n```".format(nameNFT), color=0x00ff00)
                em.add_field(name="nameNFT", value=nameNFT, inline=False)
                em.add_field(name="category", value=category, inline=False)
                em.add_field(name="template_id", value=template_id, inline=True)
                em.add_field(name="schema_name", value=schema_name, inline=True)
                em.add_field(name="luckynr", value=luckynr, inline=False)
                em.add_field(name="bobovalueNFT", value=bobovalueNFT, inline=False)
                em.add_field(name="template_mint", value=template_mint, inline=False)
                em.add_field(name="max_supply", value=max_supply, inline=True)
                em.add_field(name="is_burnable", value=is_burnable, inline=True)
                em.add_field(name="is_transferable", value=is_transferable, inline=False)
                em.add_field(name="info", value=info1, inline=True)
                #em.add_field(name="freedrop", value=freedrop, inline=False)
                if "http" in str(img):
                    print("contain Http END")
                    em.set_image(url="{}".format(img))
                else:
                    print("contain NOT Http END")
                    em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    await ctx.send(embed=em)
            except KeyError:
                try:
                    schema_name = data["data"][0]["schema"]["schema_name"]
                    em = discord.Embed(title="{}".format(schema_name), description="```diff\n!=====[ {} NFT ]=====!\n\n \n```".format(nameNFT), color=0x00ff00)
                    #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    em.add_field(name="nameNFT", value=nameNFT, inline=False)
                    #em.add_field(name="category", value=category, inline=False)
                    em.add_field(name="template_id", value=template_id, inline=True)
                    em.add_field(name="schema_name", value=schema_name, inline=True)
                    em.add_field(name="template_mint", value=template_mint, inline=False)
                    em.add_field(name="max_supply", value=max_supply, inline=True)
                    em.add_field(name="is_burnable", value=is_burnable, inline=True)
                    em.add_field(name="is_transferable", value=is_transferable, inline=False)
                    if "http" in str(img):
                        print("contain Http END")
                        em.set_image(url="{}".format(img))
                    else:
                        print("contain Http NOT END")
                        em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                        #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                        await ctx.send(embed=em)
                except IndexError:
                    print("indexerror img")
        except IndexError:
                print("ERRRORRRRRRANNNNNNDD1")
                await ctx.send("```diff\n+ CODE OK!!!! Somthing WORNG!!! The NFT YOU ARE LOOKING FOR MIGHT NOT BE BORN!!!\n NO DATA!!!INDEX ERROR!\n\n FAIL... {}\n```".format(code))
                return
@bot.command()
async def code(ctx, code=None):
    channel = ctx.channel
    author = ctx.author
    member = ctx.message.author
    message = ctx.message
    await _create_user(author)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    regetWallet = info["account"]
    assetsWallet = info["assets"]
    whereServer = ctx.message.guild.id
    if whereServer == streetsServer:
        await ctx.send("Sorry no Codes HERE!!!")
        return
    else:
        print("You are JUCIE")
        #    an_integer = 123 ; a_string = str(an_integer)
    if code == "None" or code == None:
        await ctx.send("You need to enter the Code from the NFT in your wallet!\n USE COMMAND \n {}code <NFTS above BP0x0_270 code on details on NFT>\n example: {}code 10001270 ".format(Prefix,Prefix))
    a_string = str(code)
    a_Int = int(code)
    a_len = len(code)
    print("a_string")
    print(a_string)
    print("a_Int")
    print(a_Int)
    print("a_len")
    print(a_len)
    print("code")
    print(code)
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["castle_name"] == "None":
        await ctx.send("Please Name your Castle\n```diff\n USE COMMAND:\n {}setcastlename <Castle Name>```\n ".format(Prefix))
        return
    if code == None:
        await ctx.send("Please select write the code of the NFTS you have in your Wallet\n code on NFTS! \n starding with BP0x0_256 till BP0x0_X\n If you own BoboPixel0x0 NFT above (BP0x0-256)\n```diff\n- USE COMMAND {}code <NFT code: x-xxx-x-xxx (above BP0x0-256)> ````\n".format(Prefix))
    if a_len == 8 or a_len == 5 or a_len == 6:
        em2 = discord.Embed(title="Checking in progress...", description="```diff\n!=====[{} CODE]=====!```\n\n Wallet Address ```diff\n {} ```\n BoboPixel0x0 NFTS last time ```diff\n {} ```\n".format(code, regetWallet, assetsWallet), color=0x00ff00)
        await ctx.send(embed=em2)
        #info["slotnum"] = 0 num
        #info["bbvalue"] = 1
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        #channel = ctx.channel
        #author = ctx.author
        #message = ctx.message
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        material = "none"
        account = info["account"]
        if code == "{}code".format(Prefix):
            print("return")
            return
        if code == "30003187" or code == "66928":
            code = "66928"
            material = "nftb"
            print("mit Klamer ")
        #if code == 40004258:
        #    code = 66928
        #    material = "Castle"
        #    print("ohne Klamer ")
        if code == "10001000" or code == "56373":
            code = "56373"
            material = "nftb"
        if code == "10001freecandy" or code == "73524":
            code = "73524"
            material = "nftb"
        if code == "10001006" or code == "65287":
            code = "65287"
            material = "nftb"
        if code == "10001212" or code == "155025":
            code = "155025"
            material = "nftb"
        if code == "10001219" or code == "154962":
            code = "154962"
            material = "nftb"
        if code == "10001270" or code == "441295":
            code = "441295"
            material = "MVORPG_tools"
        if code == "10001270" or code == "441295":
            code = "441295"
            material = "MVORPG_tools"
        if code == "10001271" or code == "441296":
            code = "441296"
            material = "MVORPG_tools"
        if code == "10001272" or code == "441297":
            code = "441297"
            material = "MVORPG_tools"
        if code == "10001273" or code == "441298":
            code = "441298"
            material = "MVORPG_tools"
        if code == "10001274" or code == "441301":
            code = "441301"
            material = "MVORPG_tools"
        if code == "10001275" or code == "441302":
            code = "441302"
            material = "MVORPG_tools"
        if code == "10001276" or code == "441303":
            code = "441303"
            material = "MVORPG_tools"
        if code == "10001277" or code == "441304":
            code = "441304"
            material = "MVORPG_tools"
        if code == "10001278" or code == "441305":
            code = "441305"
            material = "MVORPG_tools"
        if code == "10001279" or code == "441306":
            code = "441306"
            material = "MVORPG_tools"
        if code == "10001280" or code == "441308":
            code = "441308"
            material = "MVORPG_tools"
        if code == "10001281" or code == "441309":
            code = "441309"
            material = "MVORPG_tools"
        if code == "10001282" or code == "441310":
            code = "441310"
            material = "MVORPG_tools"
        if code == "10001283" or code == "441312":
            code = "441312"
            material = "MVORPG_tools"
        if code == "10001284" or code == "441313":
            code = "441313"
            material = "MVORPG_tools"
        if code == "10001285" or code == "441315":
            code = "441315"
            material = "MVORPG_tools"
        if code == "10001286" or code == "441316":
            code = "441316"
            material = "MVORPG_tools"
        if code == "10001287" or code == "441317":
            code = "441317"
            material = "MVORPG_tools"
        if code == "10001288" or code == "441318":
            code = "441318"
            material = "MVORPG_tools"
        if code == "10001289" or code == "441319":
            code = "441319"
            material = "MVORPG_tools"
        if code == "10001290" or code == "441323":
            code = "441323"
            material = "MVORPG_tools"
        if code == "10001291" or code == "441324":
            code = "441324"
            material = "MVORPG_tools"
        if code == "10001292" or code == "441325":
            code = "441325"
            material = "MVORPG_tools"
        if code == "10001293" or code == "441326":
            code = "441326"
            material = "MVORPG_tools"
        if code == "10001294" or code == "441327":
            code = "441327"
            material = "MVORPG_tools"
        if code == "10001295" or code == "441355":
            code = "441355"
            material = "MVORPG_tools"
        if code == "10001296" or code == "441356":
            code = "441356"
            material = "MVORPG_tools"
        if code == "10001297" or code == "441357":
            code = "441357"
            material = "MVORPG_tools"
        if code == "10001298" or code == "441358":
            code = "441358"
            material = "MVORPG_tools"
        if code == "10001299" or code == "441359":
            code = "441359"
            material = "MVORPG_tools"
        if code == "10001300" or code == "441360":
            code = "441360"
            material = "MVORPG_tools"
        if code == "10001301" or code == "441361":
            code = "441361"
            material = "MVORPG_tools"
        if code == "10001302" or code == "441362":
            code = "441362"
            material = "MVORPG_tools"
        if code == "10001303" or code == "441363":
            code = "441363"
            material = "MVORPG_tools"
        if code == "10001304" or code == "441364":
            code = "441364"
            material = "MVORPG_tools"
        if code == "10001305" or code == "441365":
            code = "441365"
            material = "MVORPG_tools"
        if code == "10001306" or code == "441366":
            code = "441366"
            material = "MVORPG_tools"
        if code == "10001307" or code == "441367":
            code = "441367"
            material = "MVORPG_tools"
        if code == "10001308" or code == "441368":
            code = "441368"
            material = "MVORPG_tools"
        if code == "10001309" or code == "441369":
            code = "441369"
            material = "MVORPG_tools"
        if code == "10001310" or code == "441370":
            code = "441370"
            material = "MVORPG_tools"
        if code == "10001311" or code == "441371":
            code = "441371"
            material = "MVORPG_tools"
        if code == "10001312" or code == "441372":
            code = "441372"
            material = "MVORPG_tools"
        if code == "10001313" or code == "441373":
            code = "441373"
            material = "MVORPG_tools"
        if code == "10001314" or code == "441374":
            code = "441374"
            material = "MVORPG_tools"
        if code == "10001315" or code == "441375":
            code = "441375"
            material = "MVORPG_tools"
        print("code111255555")
        print(code)
        if code == "40004316" or code == "442946":
            code = "442946"
            material = "Castle"
        if code == "40004317" or code == "442947":
            code = "442947"
            material = "Castle"
        if code == "40004318" or code == "442948":
            code = "442948"
            material = "Castle"
        if code == "40004319" or code == "442949":
            code = "442949"
            material = "Castle"
        if code == "40004320" or code == "442950":
            code = "442950"
            material = "Castle"
        if code == "40004321" or code == "442951":
            code = "442951"
            material = "Castle"
        if code == "40004322" or code == "442952":
            code = "442952"
            material = "Castle"
        if code == "40004323" or code == "442953":
            code = "441303"
            material = "Castle"
        if code == "40004324" or code == "442954":
            code = "442954"
            material = "Castle"
        if code == "40004325" or code == "442955":
            code = "442955"
            material = "Castle"
        if code == "40004326" or code == "442956":
            code = "442956"
            material = "Castle"
        if code == "40004327" or code == "442957":
            code = "442957"
            material = "Castle"
        if code == "40004328" or code == "442958":
            code = "442958"
            material = "Castle"
        if code == "40004329" or code == "442960":
            code = "442960"
            material = "Castle"
        if code == "40004330" or code == "442959":
            code = "442959"
            material = "Castle"
        if code == "40004331" or code == "442961":
            code = "442961"
            material = "Castle"
        if code == "40004332" or code == "442962":
            code = "442962"
            material = "Castle"
        if code == "40004333" or code == "442965":
            code = "442965"
            material = "Castle"
        if code == "40004334" or code == "442963":
            code = "442963"
            material = "Castle"
        if code == "40004335" or code == "442964":
            print("code 40004335 erste 442964")
            code = "442964"
            material = "Castle"
        if code == "40004336" or code == "442966":
            code = "442966"
            material = "Castle"
        if code == "40004337" or code == "442967":
            code = "442967"
            material = "Castle"
        if code == "40004338" or code == "442968":
            code = "442968"
            material = "Castle"
        if code == "40004339" or code == "442969":
            code = "442969"
            material = "Castle"
        if code == "40004340" or code == "442970":
            code = "442970"
            material = "Castle"
        if code == "40004341" or code == "442971":
            code = "442971"
            material = "Castle"
        if code == "40004342" or code == "442977":
            code = "442977"
            material = "Castle"
        if code == "40004343" or code == "442978":
            code = "442978"
            material = "Castle"
        if code == "40004344" or code == "442979":
            code = "442979"
            material = "Castle"
        if code == "40004345" or code == "442980":
            code = "442980"
            material = "Castle"
        if code == "40004346" or code == "442981":
            code = "442981"
            material = "Castle"
        if code == "40004347" or code == "442982":
            code = "442982"
            material = "Castle"
        if code == "40004348" or code == "442983":
            code = "442983"
            material = "Castle"
        if code == "40004349" or code == "442984":
            code = "442984"
            material = "Castle"
        if code == "40004350" or code == "442985":
            code = "442985"
            material = "Castle"
        if code == "40004351" or code == "442986":
            code = "442986"
            material = "Castle"
        if code == "40004352" or code == "442987":
            code = "442987"
            material = "Castle"
        if code == "40004353" or code == "442988":
            code = "442988"
            material = "Castle"
        if code == "40004354" or code == "442989":
            code = "442989"
            material = "Castle"
        if code == "20002361" or code == "451641": #BOX
            code = "451641"
            material = "MVORPG_tools"
        if code == "20002360" or code == "451640":
            code = "451640"
            material = "MVORPG_tools"
        if code == "20002359" or code == "451639":
            code = "451639"
            material = "MVORPG_tools"
        if code == "20002358" or code == "451638":
            code = "451638"
            material = "MVORPG_tools"
        if code == "20002357" or code == "451636":
            code = "451636"
            material = "MVORPG_tools"
        if code == "20002356" or code == "451635":
            code = "451635"
            material = "MVORPG_tools"
        if code == "20002355" or code == "451634":
            code = "451634"
            material = "MVORPG_tools"
        if code == "20002300" or code == "441360":  #OVEN
            code = "441360"
            material = "MVORPG_tools"
        if code == "BeggerI" or code == "510836": #Roll
            code = "510836"
            material = "Roll"
        if code == "BeggerII" or code == "510837":
            code = "510837"
            material = "Roll"
        if code == "BeggerIII" or code == "510838":
            code = "510838"
            material = "Roll"
        if code == "Blender" or code == "510840":
            code = "510840"
            material = "Roll"
        if code == "F5MD" or code == "510839":   #Roll
            code = "510839"
            material = "Roll"
        ######## TIl here
        ######## TIll here
        ######## TIll here
        ######## TIll here
        print("code1on here")
        print(code)
        #response = requests.get('https://wax.api.atomicassets.io/atomicmarket/v1/assets?collection_name=bobopixeloxo&template_id=66928&owner=zfjaw.wam&page=1&limit=100&order=desc&sort=asset_id'.format(account, code))
        print("try1start")
        try:
            print("try1")
            print("account")
            print(account)
            print("code")
            print(code)
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, code, account))
            response.json()
            data = response.json()
            success = data["success"]
            print("[=============================================================================]")
            print(data)
            print("[=============================================================================]")
            print("susscc")
            print(success)
            try:
                print("try2")
                account = data["data"][0]["account"]
                print("account")
                print(account)
            except IndexError:
                await ctx.send("```diff\n- Account FAIL !!!! Is this {} the right Wallet?\n and Code {} !!!INDEX ERROR!\n\n FAIL... {}\n```".format(regetWallet, code))
                return
            try:
                print("try3")
                assets = data["data"][0]["assets"]
                print("assets data in Tha House")
                print(assets)
                print("CODE")
                print(code)
                print("material")
                print(material)
                print("Assets SAVE")
                info["assets_to_add"] = assets
                info["code"] = code
                fileIO("players/{}/info.json".format(author.id), "save", info)
                print("check_code_add NFTS")
                await _check_code(ctx)
                print("done")
            except IndexError:
                print("no ASSETS")
                print("ERRRORRRRRRANNNNNNDD")
                await ctx.send("```diff\n+ CODE OK!!!! YOU NEED THAT NFT IN YOUR WALLET !!!INDEX ERROR!\n\n FAIL... {}\n```".format(code))
                return
        except IndexError:
                print("ERRRORRRRRRANNNNNNDD1")
                await ctx.send("```diff\n+ CODE OK!!!! Somthing WORNG YOU NEED THAT NFT IN YOUR WALLET !!!INDEX ERROR!\n\n FAIL... {}\n Please try Again if You Own it!```".format(code))
                return
        #print("END SAVE")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        if assets >= "0" or code >= "0":
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("savecode over 0 OHNE")
        if code >= "0":
            info["code"] = code
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print("savecode over 0")
        #else:
        #    await ctx.send("```deliff\n+ CODE Fail!!!! YOU NEED THE NFT CODE!!!\n- CAN'T FIND THIS CODE!!!\n\n FAIL... {}\n```".format(code))
        #    print("END OF THE ELIF")
            #info["assets"] = assets
        #    #info["account"] = account
        if assets >= "0":
            print("try1ALL END")
            print("============================================================")
            print(data)
            print("============================================================")
            print("success")
            print(success)
            print("assets")
            print(assets)
            print("============================================================")
            info["successCheck"] = success
        if success == True or success == "True":
            print("TRUEllllll")
            author = ctx.author
            message = ctx.message
            member = message.author #gets the member to edit
            guild = ctx.guild
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/templates/bobopixeloxo/{}'.format(code))
            response.json()
            data1 = response.json()
            print("============================================================")
            print("data")
            print(data)
            print("============================================================")
            print("============================================================")
            print("data1")
            print(data1)
            print("============================================================")
            success = data1["success"]
            #account = data["data"][0]["account"]
            #assets = data["data"][0]["assets"]
            nameNFT = data1["data"]["immutable_data"]["name"]
            cardid = data1["data"]["immutable_data"]["cardid"]
            img = data1["data"]["immutable_data"]["img"]
            luckynr = data1["data"]["immutable_data"]["luckynr"]
            bobovalueNFT = data1["data"]["immutable_data"]["bobovalue"]
            template_id =  data1["data"]["template_id"]
            print("template_id")
            print(template_id)
            try:
                categoryNFT = data1["data"]["immutable_data"]["category"]
                print("categoryN")
                print(category)
            except:
                print("no Category")
            print("codeN")
            print(code)
            print("materialN")
            print(material)
            print("bobovalueNFT")
            print(bobovalueNFT)
            print("nameNFT")
            print(nameNFT)
            print("cardid")
            print(cardid)
            print("luckynr")
            print(luckynr)
            #info["castle_total"] += int(assets)
            info["all_inventory"].append(nameNFT)
            #  await delete()
            #  ".format(nameNFT,account)
            #cinfo["starttime"] = starttime
            #nameUser = info["name"]
            print("material")
            print(material)
            if material == "nft" or material == "Castle" or material == "nftb" or material == "MVORPG_tools" or material == "ccc":
                info["code"] = code
                fileIO("players/{}/info.json".format(author.id), "save", info)
                if material == "Castle":
                    print("castle check up")
                    #await _check_wallet_nft_Castle(ctx)
                    #cinfo = fileIO("players/{}/info.json".format(author.id), "load")
                    nameNFT = data1["data"]["immutable_data"]["name"]
                    print("nameNFT")
                    print(nameNFT)
                    cardid = data1["data"]["immutable_data"]["cardid"]
                    print("cardid")
                    print(cardid)
                    img = data1["data"]["immutable_data"]["img"]
                    print("img")
                    print(img)
                    luckynr = data1["data"]["immutable_data"]["luckynr"]
                    print("luckynr")
                    print(luckynr)
                    #materialNFT = data1["data"]["immutable_data"]["material"]
                    #codeNFT = data1["data"]["immutable_data"]["code"]
                    info["castle_owner"] = success
                    print("info castle_owner")
                    print(info["castle_owner"])
                    template_id =  data1["data"]["template_id"]
                    print("template_id")
                    print(template_id)
                    #asset_id =  data1["data"]["asset_id"]
                    #print("asset_id")
                    #print(asset_id)
                    #cinfo["castle_name"] = nameNFT
                    #cinfo["img"] = img
                    #cinfo["cardid"] = cardid
                    #cinfo["luckynr"] = luckynr
                    try:
                        print("Trying1")
                        categoryNFT = data1["data"]["immutable_data"]["category"]
                        print("categoryNFT")
                        print(categoryNFT)
                    except IndexError:
                        print("NO Category in Immutable_data")
                    print("Category in Immutable_data")
                    nameUser = info["name"]
                    print("nameUser")
                    print(nameUser)
                    try:
                        collection = data1["data"]["collection"]
                        schema = data1["data"]["schema"]
                        print("collection info")
                        print(collection)
                        print("schema info")
                        print(schema)
                    except IndexError:
                        print("NO collection  schemain Immutable_data")
                        return
                        #info["castle_total"]
                        #info["castle_total  category
                        #cinfo = fileIO("core/{}/castleNFTS.json".format(author.id), "load")
                    print("collection  schemain Immutable_data")
                    ainfo = fileIO("core/enemies/allNFTS.json", "load")
                    print("[==============================================================================================================================================================================================]")
                    print("ainfo")
                    print(ainfo)
                    print("[==============================================================================================================================================================================================]")
                    print("nameNFT")
                    print(nameNFT)
                    newitemname = nameNFT
                    print("newitemname")
                    print(newitemname)
                    castle_drop_atk = ainfo[newitemname]["castle_drop_atk"]
                    print("ATK_drop1")
                    print(castle_drop_atk)
                    castle_drop_def = ainfo[newitemname]["castle_drop_def"]
                    castle_drop_exp = ainfo[newitemname]["castle_drop_exp"]
                    castle_drop_max = ainfo[newitemname]["castle_drop_max"]
                    castle_drop_skexp = ainfo[newitemname]["castle_drop_skexp"]
                    castle_drop_wall = ainfo[newitemname]["castle_drop_wall"]
                    castle_drop_food = ainfo[newitemname]["castle_drop_food"]
                    castle_drop_wood = ainfo[newitemname]["castle_drop_wood"]
                    castle_drop_stone = ainfo[newitemname]["castle_drop_stone"]
                    castle_drop_metal = ainfo[newitemname]["castle_drop_metal"]
                    castle_drop_gold = ainfo[newitemname]["castle_drop_gold"]
                    castle_drop_boco = ainfo[newitemname]["castle_drop_boco"]
                    castle_drop_key = ainfo[newitemname]["castle_drop_key"]
                    castle_drop_mp = ainfo[newitemname]["castle_drop_mp"]
                    castle_drop_hp = ainfo[newitemname]["castle_drop_hp"]
                    castle_drop_sp = ainfo[newitemname]["castle_drop_sp"]
                    castle_drop_people = ainfo[newitemname]["castle_drop_people"]
                    castle_drop_door = ainfo[newitemname]["castle_drop_door"]
                    castle_drop_rabbat = ainfo[newitemname]["castle_drop_rabbat"]
                    print("0000000000044444")
                    castle_drop_smallpot = ainfo[newitemname]["castle_drop_smallpot"]
                    info["castle_power"] += castle_drop_max
                    info["castle_total"] += 1
                    #print("guild")
                    #print(guild)
                    castle_name = info["castle_name"]
                    GuildAttacker = info["castle_guild_name"]
                    if GuildAttacker == "RockCastle":
                        await _check_setCitizenRock(ctx)
                    if GuildAttacker == "ScissorCastle":
                        await _check_setCitizenScissor(ctx)
                    if GuildAttacker == "PaperCastle":
                        await _check_setCitizenPaper(ctx)
                    em = discord.Embed(description=" NFT COPY Created Good Luck...\n\n+You can copy as much as you want!\n '{}', '{}'\n".format(nameNFT, cardid), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    await ctx.send(f'{member}! is now Verifide Hurry.')
                    guild = ctx.message.guild
                    cat = discord.utils.get(ctx.guild.categories, name="NFT-Castles") # guild id  944205801814384710 NFT_Owner  NFT-Castles
                    print("castle_name")
                    print(castle_name)
                    print("guild")
                    print(guild)
                    print("cat")
                    print(cat)
                    channel = await guild.create_text_channel("'{}, {}'".format(castle_name, template_id), category=cat)
                    #@client.command()
                    #async def create(s, arg: str):
                    #   guild = s.message.guild
                    #   cat = discord.utils.get(s.guild.categories, name="FORUM")
                    #   channel = await guild.create_text_channel(arg, category=cat)
                    print("assets BEFOR CastleBuils")
                    assets = data["data"][0]["assets"]
                    print(assets)
                    await _check_setBuildaCastle(ctx)
                    print("assets after")
                    print(assets)
                    #
                    em = discord.Embed(description=" Channel Created Good Luck to Protect it....\n Muahahahahah\n\n '{}', '{}'\n".format(nameNFT, cardid), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    em = discord.Embed(title="Castle", description="```diff\n!=====[{} NFT]=====!\n\n castle_drop_atk {}\n castle_drop_def {}\n castle_drop_exp {}\n castle_drop_max {}\n castle_drop_skexp {}\n castle_drop_wall {}\n castle_drop_food {}\n castle_drop_wood {}\n castle_drop_stone {}\n castle_drop_metal {}\n castle_drop_gold {}\n castle_drop_boco {}\n castle_drop_key {}\n castle_drop_mp {}\n castle_drop_hp {}\n castle_drop_sp {}\n castle_drop_people {}\n castle_drop_door {}\n castle_drop_rabbat {}\n castle_drop_smallpot {}\n```".format(nameNFT, castle_drop_atk, castle_drop_def, castle_drop_exp, castle_drop_max, castle_drop_skexp, castle_drop_wall, castle_drop_food, castle_drop_wood, castle_drop_stone, castle_drop_metal, castle_drop_gold, castle_drop_boco, castle_drop_key, castle_drop_mp, castle_drop_hp, castle_drop_sp, castle_drop_people, castle_drop_door, castle_drop_rabbat,castle_drop_smallpot), color=0x00ff00)
                    #em.add_field(name="CastleName", value=castle_name, inline=False)
                    #em.add_field(name="CastleOwner", value=castle_owner, inline=False)
                    #em.add_field(name="Level", value=castle_lvl, inline=True)
                    #em.add_field(name="Attack", value=castle_all_attack, inline=True)
                    #em.add_field(name="Defence", value=castle_all_defence, inline=True)
                    #em.add_field(name="Members", value=Player_In, inline=False)
                    #em.add_field(name="Rank", value=castle_rank, inline=True)
                    em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    await ctx.send(embed=em)
                    await ctx.send("You have BP0x0Code Value!\n\n It will Incrase the Drop! for the Total\n\n Time BP0x0 Power\n\n USE COMMAND {}bp0x0 <slot_num> to equipt your Rarity.\n\n {}lucky or {}l for Lucky Spin.\n\n  ".format(Prefix,Prefix,Prefix))
                    info["castle_img"] = img
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    #fileIO("castleplayers/{}/castleNFTS.json".format(author.id), "save", cinfo)
                if material == "MVORPG_tools":
                    print("MVORPG_tools check up")
                    await _check_wallet_nft_tools(ctx)
                    #info = fileIO("players/{}/info.json".format(author.id), "load")
                    check_nft = info["check_nft"]
                    print("check_nft")
                    print(check_nft)
                    em = discord.Embed(description=" NFT COPY Created Good Luck...\n\n+You can copy as much as you want!\n '{}', '{}'\n".format(nameNFT, cardid, code), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    if check_nft >= 2:
                        ainfo = fileIO("core/enemies/allNFTS.json".format(author.id), "load")
                        nameNFT = data1["data"]["immutable_data"]["name"]
                        cardid = data1["data"]["immutable_data"]["cardid"]
                        img = data1["data"]["immutable_data"]["img"]
                        luckynr = data1["data"]["immutable_data"]["luckynr"]
                        try:
                            bobovalue = data1["data"]["immutable_data"]["bobovalue"]
                        except:
                            bobovalue = 0
                        print("bobovalue")
                        print(bobovalue)
                        #info["castle_owner"] = success
                        #cinfo["castle_name"] = nameNFT
                        cinfo["img"] = img
                        #cinfo["cardid"] = cardid
                        #cinfo["luckynr"] = luckynr
                        assets = data["data"][0]["assets"]
                        materialNFT = data1["data"]["immutable_data"]["material"]
                        codeNFT = data1["data"]["immutable_data"]["code"]
                        template_id =  data1["data"]["template_id"]
                        asset_id =  data1["data"]["asset_id"]
                        try:
                            tagThat = "bprpg_{}".format(luckynr)
                            print("tagThat")
                            print(tagThat)
                        except:
                            tagThat = "bprpg_0"
                            print("NO tagThat in tagThat")
                        try:
                            categoryNFT = data1["data"]["immutable_data"]["category"]
                        except:
                            ategoryNFT = "None"
                            print("NO Category in Immutable_data")
                        nameUser = info["name"]
                    #info["castle_total"]
                    #info["castle_total"]
                    #cinfo = fileIO("core/{}/castleNFTS.json".format(author.id), "load")
                    ainfo = fileIO("core/enemies/allNFTS.json", "load")
                    newitemname = nameNFT
                    castle_drop_atk = ainfo[newitemname]["max_dmg"]
                    print("ATK_drop1")
                    print(castle_drop_atk)
                    castle_drop_def = ainfo[newitemname]["max_def"]
                    castle_drop_exp = ainfo[newitemname]["max_exp"]
                    castle_drop_max = ainfo[newitemname]["max_drop"]
                    castle_drop_skexp = ainfo[newitemname]["skexp_drop"]
                    castle_drop_wall = ainfo[newitemname]["castle_drop_wall"]
                    castle_drop_food = ainfo[newitemname]["food_drop"]
                    castle_drop_wood = ainfo[newitemname]["wood_drop"]
                    castle_drop_stone = ainfo[newitemname]["stone_drop"]
                    castle_drop_metal = ainfo[newitemname]["metal_drop"]
                    castle_drop_gold = ainfo[newitemname]["gold_drop"]
                    castle_drop_boco = ainfo[newitemname]["boco_drop"]
                    castle_drop_key = ainfo[newitemname]["key_drop"]
                    castle_drop_mp = ainfo[newitemname]["all_drop_mp"]
                    castle_drop_hp = ainfo[newitemname]["all_drop_hp"]
                    castle_drop_sp = ainfo[newitemname]["all_drop_sp"]
                    castle_drop_people = ainfo[newitemname]["all_drop_people"]
                    castle_drop_door = ainfo[newitemname]["all_drop_door"]
                    castle_drop_rabbat = ainfo[newitemname]["rabbat"]
                    print("0000000000055555")
                    castle_drop_smallpot = ainfo[newitemname]["smallpot_drop"]
                    #info["castle_power"] += castle_drop_max
                    #info["castle_total"] += 1
                    #castle_name = nameNFT
                    #channel = await guild.create_text_channel("'{}'".format(castle_name))
                    print("MVORPG_tools ")
                    print(assets)
                    #await _check_setBuildaCastle(ctx)
                    print("assets after")
                    print(assets)
                    #
                    em = discord.Embed(description=" NFT COPY Created Good Luck...\n\n+You can copy as much as you want!\n '{}', '{}'\n".format(nameNFT, cardid), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    em = discord.Embed(title="MVORPG_tools", description="```diff\n!=====[{} NFT]=====!\n\n drop_atk {}\n drop_def {}\n drop_exp {}\n drop_max {}\n drop_skexp {}\n drop_wall {}\n drop_food {}\n drop_wood {}\n drop_stone {}\n drop_metal {}\n drop_gold {}\n drop_boco {}\n drop_key {}\n drop_mp {}\n drop_hp {}\n drop_sp {}\n drop_people {}\n drop_door {}\n drop_rabbat {}\n drop_smallpot {}\n```".format(nameNFT, castle_drop_atk, castle_drop_def, castle_drop_exp, castle_drop_max, castle_drop_skexp, castle_drop_wall, castle_drop_food, castle_drop_wood, castle_drop_stone, castle_drop_metal, castle_drop_gold, castle_drop_boco, castle_drop_key, castle_drop_mp, castle_drop_hp, castle_drop_sp, castle_drop_people, castle_drop_door, castle_drop_rabbat,castle_drop_smallpot), color=0x00ff00)
                    #em.add_field(name="CastleName", value=castle_name, inline=False)
                    #em.add_field(name="CastleOwner", value=castle_owner, inline=False)
                    #em.add_field(name="Level", value=castle_lvl, inline=True)
                    #em.add_field(name="Attack", value=castle_all_attack, inline=True)
                    #em.add_field(name="Defence", value=castle_all_defence, inline=True)
                    #em.add_field(name="Members", value=Player_In, inline=False)
                    #em.add_field(name="Rank", value=castle_rank, inline=True)
                    em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                    #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    await ctx.send(embed=em)
                    await ctx.send("You have BP0x0Code Value!\n\n It will Incrase the Drop! for the Total\n\n Time BP0x0 Power\n\n USE COMMAND {}bp0x0 <slot_num> to equipt your Rarity.\n\n {}lucky or {}l for Lucky Spin.\n\n  ".format(Prefix,Prefix,Prefix))
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    #fileIO("castleplayers/{}/castleNFTS.json".format(author.id), "save", cinfo)
                if material == "nftb":
                    print("nftb check up")
                    print("Material nftb")
                    await _check_wallet_nft(ctx)
                    print("BACK from Cheack")
                    info = fileIO("players/{}/info.json".format(author.id), "load")
                    #assetesall = info["assets"]
                    nameNFT = data1["data"]["immutable_data"]["name"]
                    #template_id =  data1["data"]["template_id"]
                    #asset_id =  data1["data"]["asset_id"]
                    #categoryNFT = data1["data"]["immutable_data"]["category"]
                    check_nft = info["check_nft"]
                    print("check_nft")
                    print(check_nft)
                    em = discord.Embed(description=" NFT COPY Created Good Luck...\n\n+You can copy as much as you want!\n '{}', '{}'\n".format(nameNFT, cardid, code), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    if check_nft >= 2:
                        print("check_nft INN")
                        print("[==============================================DATA1=================================================================================================================================================]")
                        print("data1")
                        print(data1)
                        print("[==============================================DATA=================================================================================================================================================]")
                        print("data")
                        print(data)
                        print("[===============================================================================================================================================================================================]")
                        try:
                            print("TRY11")
                            ainfo = fileIO("core/enemies/allNFTS.json", "load")
                            print("data loaded!!!")
                        except Error:
                            print("data loade FAIL!!!")
                        try:
                            print("TRY12")
                            nameNFT = data1["data"]["immutable_data"]["name"]
                            print("nameNFT")
                            print(nameNFT)
                        except Error:
                            print("data loade FAIL!!!")
                        try:
                            print("TRY13")
                            cardid = data1["data"]["immutable_data"]["cardid"]
                            print("cardid")
                            print(cardid)
                        except Error:
                            print("data loade FAIL!!!")
                        try:
                            print("TRY14")
                            img = data1["data"]["immutable_data"]["img"]
                            print("img")
                            print(img)
                        except Error:
                            print("data loade FAIL!!!")
                        #try:
                        #    print("TRY15")
                        #    asset_id =  data1["data"]["asset_id"]
                        #    print("asset_id")
                        #    print(asset_id)
                        except Error:
                            print("data loade FAIL!!!")
                        try:
                            print("TRY16")
                            template_id =  data1["data"]["template_id"]
                            print("template_id")
                            print(template_id)
                        except Error:
                            print("data loade FAIL!!!")
                        try:
                            print("TRY17")
                            assets = data["data"][0]["assets"]
                            print("assets")
                            print(assets)
                        except Error:
                            print("data loade FAIL!!!")
                        try:
                            print("TRY18")
                            em = discord.Embed(title="NFT-In your Wallet", description="```diff\n!=====[NFT {} NFT]=====!\n\n USE COMMAND \n {}slot <SlotNR> \n\n```".format(nameNFT,Prefix), color=0x00ff00)
                            em.add_field(name="nameNFT", value=nameNFT, inline=False)
                            em.add_field(name="cardid", value=cardid, inline=False)
                            em.add_field(name="template_id", value=template_id, inline=True)
                            #em.add_field(name="asset_id", value=asset_id, inline=True)
                            em.add_field(name="assets", value=assets, inline=False)
                            em.set_image(url="https://atomichub-ipfs.com/ipfs/{}".format(img))
                            #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                            await ctx.send(embed=em)
                        except Error:
                            print("data loade FAIL!!!")
                        #info["castle_owner"] = success
                        #cinfo["castle_name"] = nameNFT
                        #cinfo["img"] = img
                        #cinfo["cardid"] = cardid
                        #cinfo["luckynr"] = luckynr
                        #em = discord.Embed(title="NFTS-In your Wallet", description="```diff\n!=====[NFT {} NFT]=====!\n\n USE COMMAND \n !slot <SlotNR> \n\n```".format(nameNFT), color=0x00ff00)
                        #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                        #await ctx.send(embed=em)
                        print("[===============================================check_nft >= 2=================================================================================================================================================]")
                        print("assets")
                        print(assets)
                        print("template_id")
                        print(template_id)
                        #print("asset_id")
                        #print(asset_id)
                        print("[================================================================================================================================================================================================]")
                        try:
                            luckynr = data1["data"]["immutable_data"]["luckynr"]
                            print("luckynr")
                            print(luckynr)
                            try:
                                tagThat = "bprpg_{}".format(luckynr)
                                print("tagThat")
                                print(tagThat)
                            except:
                                print("NO tagThat in tagThat")
                        except:
                            print("NO tagThat in tagThat")
                        try:
                            codeNFT = data1["data"]["immutable_data"]["code"]
                            print("codeNFT")
                            print(codeNFT)
                        except:
                            print("NO tagThat in tagThat")
                        try:
                            materialNFT = data1["data"]["immutable_data"]["material"]
                            print("materialNFT")
                            print(materialNFT)
                        except:
                            print("NO tagThat in tagThat")
                        try:
                            categoryNFT = data1["data"]["immutable_data"]["category"]
                        except:
                            print("NO Category in Immutable_data")
                    #await ctx.send(f'{member}! is now Verifide Hurry.')
                    #guild = ctx.message.guild
                    #cat = discord.utils.get(ctx.guild.categories, name="NFT_Owner") # guild id  944205801814384710 NFT_Owner  NFT-Castles
                    print("nameNFT")
                    print(nameNFT)
                    #print("guild")
                    #print(guild)
                    #print("cat")
                    #print(cat)
                    #channel = await guild.create_text_channel("'{}, {}'".format(nameNFT, template_id), category=cat)
                    #@client.command()
                    #async def create(s, arg: str):
                    #   guild = s.message.guild
                    #   cat = discord.utils.get(s.guild.categories, name="FORUM")
                    #   channel = await guild.create_text_channel(arg, category=cat)
                    print("assets BEFOR CastleBuils")
                    assets = data["data"][0]["assets"]
                    print(assets)
                    #await _check_setBuildaCastle(ctx)
                    print("assets after")
                    print(assets)
                    #channel = await guild.create_text_channel("'{}'".format(cardid))    A New Channel is Created...\n
                    #em.add_field(name="CastleName", value=castle_name, inline=False)
                    #em.add_field(name="CastleOwner", value=castle_owner, inline=False)
                    #em.add_field(name="Level", value=castle_lvl, inline=True)
                    #em.add_field(name="Attack", value=castle_all_attack, inline=True)
                    #em.add_field(name="Defence", value=castle_all_defence, inline=True)
                    #em.add_field(name="Members", value=Player_In, inline=False)
                    #em.add_field(name="Rank", value=castle_rank, inline=True)
                    #em.set_image(url="https://ipfs.atomichub.io/ipfs/{}".format(img))
                    #await ctx.send(embed=em)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                print("check_code_add NFTS")
                await _check_code(ctx)
                info = fileIO("players/{}/info.json".format(author.id), "load")
                print("check_cccout")
                print(info["check_ccc"])
                print("done")
                print("assets FORM ENDE")
                print(assets)
                randomfff = random.randint(0, 33554432)
                print("randomNumber")
                print(randomfff)
                assetesall = info["assets"]
                info["lottery_tickets"].append(int(randomfff))
                em = discord.Embed(title="Lucky Number", description="```diff\n!=====[{} Lucky Number]=====!\n\n {} LuckyNumber is {} ```\n And your Lucky Number is... \n```diff\n {} ```\n NFTS in Wallet {} Have Fun...\n".format(nameNFT,nameNFT, luckynr, randomfff, assetesall), color=0x00ff00)
                await ctx.send(embed=em)
                if randomfff == luckynr:
                    em1 = discord.Embed(title="Lucky Number", description="```diff\n**!=====[{} Lucky Number]=====!\n\n OMG you made something very spazial!\n".format(nameNFT), color=0x00ff00)
                    await ctx.send(embed=em1)
                info["check_ccc"] = 2
                fileIO("players/{}/info.json".format(author.id), "save", info)
                print("assets ENDE")
                print(assets)
                template_id =  data1["data"][0]["template_id"]
                print("template_id END")
                print(template_id)
                #await _check_setBoboValue(ctx)
                em = discord.Embed(title="Done", description="```diff\n!=====[All Done \n\n+ USE COMMAND **{}inv** or **{}bpinv** or **{}st** to check\n".format(Prefix,Prefix, Prefix), color=0x00ff00)
                await ctx.send(embed=em)
                return
        else:
            await ctx.send("BP0x0-0 Discord RPG Code!")
    else:
        await ctx.send("Sorry I don't know this CODE if it's Value let me know it\n ```diff\n @bobocoin#2774\n```\n".format(Prefix))
@bot.command()
async def lvl(ctx):
    await _check_setExpLVL(ctx)
    await _check_setSkLVL(ctx)
@bot.command()
async def bal(ctx, token=None):
    #await _check_setExpLVL(ctx)
    #await _check_setSkLVL(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if token == None:
        print("Token ist echt NONE")
    if info["race"] and info["class"] == "None":
            await ctx.send("Please start your character using `{}start`".format(Prefix))
            return
    # Load PERSONAL DATA
    account = info["account"]
    bopiDict = info["bopiDict"]
    goldDict = info["goldDict"]
    bgoldDict = info["bgoldDict"]
    wgoldDict = info["wgoldDict"]
    bocoDict = info["bocoDict"]
    sciDict = info["sciDict"]
    rocDict = info["rocDict"]
    papDict = info["papDict"]
    stodDict = info["stodDict"]
    metDict = info["metDict"]
    wooDict = info["wooDict"]
    fooDict = info["fooDict"]
    peoDict = info["peoDict"]
    antDict = info["antDict"]
    deptDict = info["deptDict"]
    keyDict = info["keyDict"]
    doorDict = info["doorDict"]
    waxDict = info["waxDict"]
    wojakDict = info["wojakDict"]
    pixelDict = info["pixelDict"]
    if token == "bopi":
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        data0 = response.json()
        bal = data0[0]
        print("bal")
        print(bal)
        txt = bal
        print("txt")
        print(txt)
        x = txt.split()
        print("x")
        print(x)
        k0x0mmm12 = x[0]
        print("k0x0mmm12")
        print(k0x0mmm12)
        print(x)
        print("AMOUNTIN BOPIXBO")
        #print(x0mmm) # HOW MUCH DO YOU HAVE
        try:
            info["bopiDict"]["balances_amount_BOPIXBO"] = k0x0mmm12
        except:
            print("ne3")
        try:
            info["bopiDict"]["balance"] = k0x0mmm12
        except:
            print("ne2")
        try:
            info["token_bopixbo"] = k0x0mmm12
        except:
            print("ne1")
        try:
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("Safefail")
        return
@bot.command()
async def sync(ctx):
    author = ctx.author
    message = ctx.message
    channel = ctx.channel
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_wallet0(ctx)
    #await check_tokens(ctx)
@bot.command()
async def sync3(ctx):
    await _check_set3(ctx)
@bot.command()
async def sync4(ctx):
    await _check_set4(ctx)
@bot.command()
async def sync2(ctx):
    await _check_set2(ctx)
@bot.command(aliases=["twax"])
async def tickerwax(ctx):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    account = info["account"]
    #32238\wax id 90bitcoin
    # https://api.coinlore.net/api/ticker/?id=32238
    # 'https://api.coinlore.net/api/tickers/?start=100&limit=1000
    # https://api.coinlore.net/api/coin/markets/?id=32238
    # https://api.coinlore.net/api/coin/social_stats/?id=32238
    #r = requests.post('https://api.coinlore.net/api/ticker/?id=32238').json()
    #jsonData = json.dumps(r)
    #print("jsondata")
    #print(jsonData)
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    response = requests.get('https://api.coinlore.net/api/ticker/?id=32238')
    response.json()
    data = response.json()
    print(data)
    #with open("WAXTICKER.json", "w") as outfile:
        #json.dump(jsonData, outfile)
    #
    #
    #
    #
    #try:
        #info = fileIO("WAXTICKER.json".format(), "load")
    #except:
        #print("No WAXTICKER.json")
    print("here")
    #data = response.json()
    try:
        print("id")
        idd = data[0]["id"]
        print(idd)
    except:
        print(" NO id ")
        idd = 0
    try:
        print("symbol")
        symbol = data[0]["symbol"]
        print(symbol)
    except:
        print(" NO symbol ")
        symbol = x
    try:
        name = data[0]["name"]
    except:
        print(" NO name ")
        name = 0
    try:
        nameid = data[0]["nameid"]
    except:
        print(" NO nameid ")
        nameid = 0
    try:
        rank = data[0]["rank"]
    except:
        print(" NO rank ")
        rank = 0
    try:
        price_usd = data[0]["price_usd"]
    except:
        print(" NO price_usd ")
        price_usd = 0
    try:
        percent_change_24h = data[0]["percent_change_24h"]
    except:
        print(" NO percent_change_24h ")
        percent_change_24h = 0
    try:
        percent_change_1h = data[0]["percent_change_1h"]
    except:
        print(" NO percent_change_1h ")
        percent_change_1h = 0
    try:
        percent_change_7d = data[0]["percent_change_7d"]
    except:
        print(" NO percent_change_7d ")
        percent_change_7d = 0
    try:
        market_cap_usd = data[0]["market_cap_usd"]
    except:
        print(" NO market_cap_usd ")
        market_cap_usd = 0
    try:
        volume24 = data[0]["volume24"]
    except:
        print(" NO volume24 ")
        volume24 = 0
    try:
        volume24_native = data[0]["volume24_native"]
    except:
        print(" NO volume24_native ")
        volume24_native = 0
    try:
        volume24_native = data[0]["volume24_native"]
    except:
        print(" NO volume24_native ")
        volume24_native = 0
    try:
        csupply = data[0]["csupply"]
    except:
        print(" NO csupply ")
        csupply = 0
    try:
        tsupply = data[0]["tsupply"]
    except:
        print(" NO tsupply ")
        tsupply = 0
    try:
        msupply = data[0]["msupply"]
    except:
        print(" NO msupply ")
        msupply = 0
    try:
        price_btc = data[0]["price_btc"]
    except:
        print(" NO price_btc ")
        price_btc = 0
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        print(account)
        print("load user")
        response1 = requests.get('https://wax.light-api.net/api/account/wax/{}?pretty=1'.format(account))
        response1.json()
        data1 = response1.json()
        print("data1")
        print(data1)
        #data1 = response3.json()
        #print(data)
        #account_name = data["account_name"]
        balances = dict(data1["balances"][0])
        print("balances")
        print(balances)
        #datalist = tinfo["Items_List_this"]["material"][material]
    except:
        print("Nothing")
        balances = account
    print(balances)
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        balances_amount_BOPIXBO = info["bopiDict"]["balances_amount_BOPIXBO"]
        balances_amount_GOLD = info["goldDict"]["balances_amount_GOLD"]
        balances_amount_BOPIGOL = info["bgoldDict"]["balances_amount_BOPIGOL"]
    except:
        print("Fail")
        balances_amount_BOPIXBO = 0
        balances_amount_GOLD = 0
        balances_amount_BOPIGOL = 0
    em = discord.Embed(description="\n!=====[WAX Stats]=====!\n```diff\n percent_change_1h:\n{}\n percent_change_24h:\n{}\n percent_change_7d:\n{}\n\n volume24\n{}\n volume24_native:\n{}\n\n msupply:\n{}\n tsupply:\n{}\n csupply:\n{}\n\n market_cap_usd:\n{}\n```\n" .format(percent_change_1h, percent_change_24h, percent_change_7d, volume24, volume24_native, msupply, tsupply, csupply, market_cap_usd), color=discord.Color.blue())
    em.add_field(name="Symbol", value=symbol, inline=True)
    em.add_field(name="Name", value=name, inline=True)
    em.add_field(name="Rank", value=rank, inline=False)
    em.add_field(name="1WaxPrice_USD", value=price_usd, inline=True)
    em.add_field(name="1WAXPrice_BTC", value=price_btc, inline=True)
    em.add_field(name="BOPIXBO_BAL", value=balances_amount_BOPIXBO, inline=False)
    em.add_field(name="GOLD_BAL", value=balances_amount_GOLD, inline=True)
    em.add_field(name="BOPIGOL_BAL", value=balances_amount_BOPIGOL, inline=True)
    em.add_field(name="Liquid", value="https://alcor.exchange/swap?output=BOPIXBO-bobocoin.gm&input=GOLD-bobocoin.gm", inline=True)
    em.add_field(name="TRADE", value="https://alcor.exchange/trade/bopixbo-bobocoin.gm_wax-eosio.token", inline=True)
    await ctx.send(embed=em)
@bot.command()
async def send(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    await ctx.send("use Command {}sendfood, {}sendwood, {}sendstone, {}sendgold, {}sendmetal, {}sendboco, {}sendpeople <@user> <amount> ".format(Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,))
    await ctx.send("example {}sendfood @bobtherobot 2".format(Prefix))
    return
@bot.command()
async def sendfood(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["food"]
    aname = str(ainfo["name"])
    afood = ainfo["food"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Food".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Food".format(afood))
        await ctx.send("You will send {} Food".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["food"] = int(binfo["food"]) + int(amount)
                ainfo["food"] = int(ainfo["food"]) - int(amount)
                afood = ainfo["food"]
                bfood = binfo["food"]
                await ctx.send("You have {} Food left.".format(ainfo["food"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendwood(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["wood"]
    aname = str(ainfo["name"])
    afood = ainfo["wood"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Wood".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Wood".format(afood))
        await ctx.send("You will send {} Wood".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["wood"] = int(binfo["wood"]) + int(amount)
                ainfo["wood"] = int(ainfo["wood"]) - int(amount)
                afood = ainfo["wood"]
                bfood = binfo["wood"]
                await ctx.send("You have {} Wood left.".format(ainfo["wood"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendstone(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["stone"]
    aname = str(ainfo["name"])
    afood = ainfo["stone"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Stone".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Stone".format(afood))
        await ctx.send("You will send {} Stone".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["stone"] = int(binfo["stone"]) + int(amount)
                ainfo["stone"] = int(ainfo["stone"]) - int(amount)
                afood = ainfo["stone"]
                bfood = binfo["stone"]
                await ctx.send("You have {} Stone left.".format(ainfo["stone"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendmetal(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["metal"]
    aname = str(ainfo["name"])
    afood = ainfo["metal"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Metal".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Metal".format(afood))
        await ctx.send("You will send {} Metal".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["metal"] = int(binfo["metal"]) + int(amount)
                ainfo["metal"] = int(ainfo["metal"]) - int(amount)
                afood = ainfo["metal"]
                bfood = binfo["metal"]
                await ctx.send("You have {} Metal left.".format(ainfo["metal"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendgold(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["gold"]
    aname = str(ainfo["name"])
    afood = ainfo["gold"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Gold".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Gold".format(afood))
        await ctx.send("You will send {} Gold".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["gold"] = int(binfo["gold"]) + int(amount)
                ainfo["gold"] = int(ainfo["gold"]) - int(amount)
                afood = ainfo["gold"]
                bfood = binfo["gold"]
                await ctx.send("You have {} Gold left.".format(ainfo["gold"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendboco(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["boco"]
    aname = str(ainfo["name"])
    afood = ainfo["boco"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if user == None or amount == None:
        await ctx.send("!sendboco @bobtherobot#3641 100\n\n".format())
        return
    if afood < 0.01 :
        await ctx.send("You Do not have any Boco".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Boco".format(afood))
        await ctx.send("You will send {} Boco".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["boco"] = int(binfo["boco"]) + int(amount)
                ainfo["boco"] = int(ainfo["boco"]) - int(amount)
                afood = ainfo["boco"]
                bfood = binfo["boco"]
                await ctx.send("You have {} Boco left.".format(ainfo["boco"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendpeople(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_people"]
    aname = str(ainfo["name"])
    afood = ainfo["castle_people"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if user == None or amount == None:
        await ctx.send("!sendpeople @bobtherobot#3641 100\n\n".format())
        return
    if afood < 0.01 :
        await ctx.send("You Do not have any People".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} People".format(afood))
        await ctx.send("You will send {} People".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_people"] = int(binfo["castle_people"]) + int(amount)
                ainfo["castle_people"] = int(ainfo["castle_people"]) - int(amount)
                afood = ainfo["castle_people"]
                bfood = binfo["castle_people"]
                await ctx.send("You have {} People left.".format(ainfo["castle_people"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["sra"])
async def sendrockarmy(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    castle_name_op = str(binfo["castle_name"])
    castle_owner_op = binfo["castle_inventory"]
    castle_owner_op = binfo["castle_owner"]
    araa0x0l = ainfo["castle_army_total"]
    castle_name0x0 = str(ainfo["castle_name"])
    castle_owner0x0 = str(ainfo["castle_inventory"])
    castle_owner0x0x_castle_owner = str(ainfo["castle_owner"])
    castle_army_total = ainfo["castle_army_total"]
    castle_army_rock = ainfo["castle_army_rock"]
    print("amount")
    print(amount)
    #values = int(answer1.content)
    values = ["All", "all", "1", "half", "Half"]
    try:
        answer1contentint = int(amount)
        print(answer1contentint)
    except Error:
        em = discord.Embed(description="```diff\n+ValueErrorValueError\n```".format(), color=discord.Color.green())
    try:
        answer1contentstr = str(amount)
        print("answer1contentstr")
        print(answer1contentstr)
        if answer1contentstr in values or answer1contentstr in values:
            if values == "all" or values == "All":
                info["castle_army_total"] = 0
                await ctx.send("Senda all".format())
    except ValueError:
        em = discord.Embed(description="```diff\n+ValueErrorValueError\n```".format(), color=discord.Color.green())
    print("values")
    print(values)
    if answer1contentstr in values or answer1contentstr in values :
        if values == "all" or values == "All":
            info["castle_army_total"] = 0
            await ctx.send("Senda all".format())
    elif answer1contentstr in values :
        if values == "half" or values == "Half":
            toseend = plusCASTLE / 2
            info["castle_army_total"] -= toseend
            await ctx.send("Send half".format())
    if not answer1contentstr in values:
        if answer1contentint in values :
            if answer1contentint >= 0 or answer1contentint <= castle_army_rock :
                info["castle_army_rock"] -= amount
                await ctx.send("Send {}amount\n have {}castle_army_rock".format(amount, castle_army_rock))
        elif int(amount) <= 0:
            await ctx.send("No Negative Number".format())
    elif user == None or amount == None:
        await ctx.send(" USE COMMAND {}sendrockarmy ({}sra) <@bobtherobot#3641> <amount>\n\n".format(Prefix,Prefix))
        await ctx.send("You have {} RockArmy".format(castle_army_rock))
        await ctx.send("You will send {} RockArmy to {}".format(castle_army_total, bname))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer2 = await bot.wait_for("message", check=pred)
        if answer2.content in options2:
            if answer2.content == "Yes" or answer2.content =="yes" or answer2.content =="y" or answer2.content =="Y":
                aramulty = ara * aralvl
                binfo["castle_army_rock"] = int(binfo["castle_people"]) + int(raamound)
                ainfo["castle_people"] = int(ainfo["castle_people"]) - int(raamound)
                ara = ainfo["castle_people"]
                bsa = binfo["castle_people"]
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                await ctx.send("You have {} People left.".format(ainfo["castle_people"]))
                return
            elif answer2.content == "No" or answer2.content =="no" or answer2.content =="N" or answer2.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command()
async def sendrock(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bcastle_army_rock = binfo["castle_army_rock"]
    bcastle_army_paper = binfo["castle_army_paper"]
    bcastle_army_scissor = binfo["castle_army_scissor"]
    bpeople = binfo["castle_people"]
    bcastle_guild_name = binfo["castle_guild_name"]
    aname = str(ainfo["name"])
    afood = ainfo["castle_army_rock"]
    acastle_army_rock = ainfo["castle_army_rock"]
    acastle_army_paper = ainfo["castle_army_paper"]
    acastle_army_scissor = ainfo["castle_army_scissor"]
    acastle_guild_name = ainfo["castle_guild_name"]
    apeople = ainfo["castle_people"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if user == None or amount == None:
        await ctx.send("!sendboco @bobtherobot#3641 100\n\n".format())
        return
    if afood < 0.01 :
        await ctx.send("You Do not have any Boco".format())
        return
    elif afood > 0 :
        if afood > 0.01 :
            await ctx.send("What Army would you like to Attack with?".format())
            options2 = ["ArmyPaper", "armypaper", "ArmyRock", "ArmyScissor", "armyscissor", "armyrock"]
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in options2:
                if answer1.content == "ArmyRock" or answer1.content =="armyrock" or answer1.content =="1" or answer1.content =="Armyrock":
                    randomnumber - randomintint(1, 3)
                    print("randomint")
                    print(randomnumber)
                    if acastle_guild_name  == "RockCastle" and bcastle_guild_name == "ScissorCastle" :
                        await ctx.send("Yor Attacking a Weaker ScissorCastle with".format())
                        #return
                    if acastle_guild_name  == "RockCastle" and bcastle_guild_name == "PaperCastle" :
                        await ctx.send("Yor Attacking a Weaker PaperCastle with".format())
                        #return
                    if acastle_guild_name  == "RockCastle" and bcastle_guild_name == "RockCastle" :
                        await ctx.send("Yor Attacking a Weaker RockCastle with".format())
                        #return
                    if acastle_guild_name  == "ScissorCastle" and bcastle_guild_name == "ScissorCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "ScissorCastle" and bcastle_guild_name == "PaperCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "ScissorCastle" and bcastle_guild_name == "RockCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "PaperCastle" and bcastle_guild_name == "ScissorCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "PaperCastle" and bcastle_guild_name == "PaperCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "PaperCastle" and bcastle_guild_name == "RockCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    #if randomnumber == 1 and acastle_army_rock >= 0.9 :
                    #    abfail = acastle_army_rock - bcastle_army_rock
                    #    print("abfail")
                    #    print(abfail)
                    #
                    #if randomnumber == 2 and acastle_army_rock >= 0.9 :
                    #    bawin = bcastle_army_rock - acastle_army_rock
                    #   print("bawin")
                    # ##   print(bawin)
                    #if randomnumber == 3 and acastle_army_rock >= 0.9 :
                    #    aadraw = acastle_army_rock - acastle_army_rock
                    #    print("aadraw")
                    #    print(aadraw)
                    binfo["boco"] = int(binfo["boco"]) + int(amount)
                    ainfo["boco"] = int(ainfo["boco"]) - int(amount)
                    afood = ainfo["boco"]
                    bfood = binfo["boco"]
                    await ctx.send("You have {} Boco left.".format(ainfo["boco"]))
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    fileIO("players/{}/info.json".format(user.id), "save", binfo)
        await ctx.send("You have {} Boco".format(afood))
        await ctx.send("You will send {} ArmyRock".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                randomnumber - randint(1, 3)
                print("randomint")
                print(randomnumber)
                if randomnumber == 1 and acastle_army_rock >= 0.9 :
                    acastle_army_rock - bcastle_army_rock
                if randomnumber == 2 and acastle_army_rock >= 0.9 :
                    bcastle_army_rock - acastle_army_rock
                if randomnumber == 3 and acastle_army_rock >= 0.9 :
                    acastle_army_rock - acastle_army_rock
                if randomnumber == 1 and acastle_army_paper >= 0.9 :
                    acastle_army_paper - bcastle_army_paper
                if randomnumber == 2 and acastle_army_paper >= 0.9 :
                    bcastle_army_paper - acastle_army_paper
                if randomnumber == 3 and acastle_army_paper >= 0.9 :
                    acastle_army_paper - acastle_army_paper
                if randomnumber == 1 and acastle_army_scissor >= 0.9 :
                    acastle_army_scissor - bcastle_army_scissor
                if randomnumber == 2 and acastle_army_scissor >= 0.9 :
                    bcastle_army_scissor - acastle_army_scissor
                if randomnumber == 3 and acastle_army_scissor >= 0.9 :
                    acastle_army_scissor - acastle_army_scissor
                binfo["boco"] = int(binfo["boco"]) + int(amount)
                ainfo["boco"] = int(ainfo["boco"]) - int(amount)
                afood = ainfo["boco"]
                bfood = binfo["boco"]
                await ctx.send("You have {} Boco left.".format(ainfo["boco"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["deposit"])
async def takecastle(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    em = discord.Embed(description="\n+ USE COMMAND:\n```diff\n{}sendfoodcastle = {}depfo {}sendwoodcastle = {}depwo {}sendstonecastle = {}depst {}sendgoldcastle = {}depgo {}sendmetalcastle = {}depme {}sendbococastle = {}depbo {}sendpeoplecastle = {}deppe <@user> <amount> ```\n```diff\n-example\n{}depgo @bobtherobot 2\n ```".format(Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix), color=discord.Color.blue())
    await ctx.send(embed=em)
    return
@bot.command(aliases=["withdraw"])
async def sendcastle(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    em = discord.Embed(description="\n+ USE COMMAND:\n```diff\n{}sendfoodcastle = {}depfo {}sendwoodcastle = {}depwo {}sendstonecastle = {}depst {}sendgoldcastle = {}depgo {}sendmetalcastle = {}depme {}sendbococastle = {}depbo {}sendpeoplecastle = {}deppe <@user> <amount> ```\n```diff\n-example\n{}depgo @bobtherobot 2\n ```".format(Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix,Prefix), color=discord.Color.blue())
    await ctx.send(embed=em)
    return
@bot.command(aliases=["depfo"])
async def sendfoodcastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_food"]
    aname = str(ainfo["name"])
    afood = ainfo["food"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Food".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Food".format(afood))
        await ctx.send("You will send {} Food".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_food"] = int(binfo["castle_food"]) + int(amount)
                ainfo["food"] = int(ainfo["food"]) - int(amount)
                afood = ainfo["food"]
                bfood = binfo["castle_food"]
                await ctx.send("You have {} Food left.".format(ainfo["food"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["depwo"])
async def sendwoodcastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_wood"]
    aname = str(ainfo["name"])
    afood = ainfo["wood"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Wood".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Wood".format(afood))
        await ctx.send("You will send {} Wood".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_wood"] = int(binfo["castle_wood"]) + int(amount)
                ainfo["wood"] = int(ainfo["wood"]) - int(amount)
                afood = ainfo["castle_wood"]
                bfood = binfo["wood"]
                await ctx.send("You have {} Wood left.".format(ainfo["wood"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["depst"])
async def sendstonecastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_stone"]
    aname = str(ainfo["name"])
    afood = ainfo["stone"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Stone".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Stone".format(afood))
        await ctx.send("You will send {} Stone".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_stone"] = int(binfo["castle_stone"]) + int(amount)
                ainfo["stone"] = int(ainfo["stone"]) - int(amount)
                afood = ainfo["castle_stone"]
                bfood = binfo["stone"]
                await ctx.send("You have {} Stone left.".format(ainfo["stone"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["depme"])
async def sendmetalcastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_metal"]
    aname = str(ainfo["name"])
    afood = ainfo["metal"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Metal".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Metal".format(afood))
        await ctx.send("You will send {} Metal".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_metal"] = int(binfo["castle_metal"]) + int(amount)
                ainfo["metal"] = int(ainfo["metal"]) - int(amount)
                afood = ainfo["metal"]
                bfood = binfo["metal"]
                await ctx.send("You have {} Metal left.".format(ainfo["metal"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["depgo"])
async def sendgoldcastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_gold"]
    aname = str(ainfo["name"])
    afood = ainfo["gold"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Gold".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Gold".format(afood))
        await ctx.send("You will send {} Gold".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_gold"] = int(binfo["castle_gold"]) + int(amount)
                ainfo["gold"] = int(ainfo["gold"]) - int(amount)
                afood = ainfo["gold"]
                bfood = binfo["gold"]
                await ctx.send("You have {} Gold left.".format(ainfo["gold"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["depbo"])
async def sendbococastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_boco"]
    aname = str(ainfo["name"])
    afood = ainfo["boco"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if user == None or amount == None:
        await ctx.send("!sendboco @bobtherobot#3641 100\n\n".format())
        return
    if afood < 0.01 :
        await ctx.send("You Do not have any Boco".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Boco".format(afood))
        await ctx.send("You will send {} Boco".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_boco"] = int(binfo["castle_boco"]) + int(amount)
                ainfo["boco"] = int(ainfo["boco"]) - int(amount)
                afood = ainfo["boco"]
                bfood = binfo["boco"]
                await ctx.send("You have {} Boco left.".format(ainfo["boco"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["deppe"])
async def sendpeoplecastle(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_people"]
    aname = str(ainfo["name"])
    afood = ainfo["castle_people"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if user == None or amount == None:
        await ctx.send("!sendpeople @bobtherobot#3641 100\n\n".format())
        return
    if afood < 0.01 :
        await ctx.send("You Do not have any People".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} People".format(afood))
        await ctx.send("You will send {} People".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_people"] = int(binfo["castle_people"]) + int(amount)
                ainfo["castle_people"] = int(ainfo["castle_people"]) - int(amount)
                afood = ainfo["castle_people"]
                bfood = binfo["castle_people"]
                await ctx.send("You have {} People left.".format(ainfo["castle_people"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["deprock"])
async def sendrockcastle1(ctx, user: discord.Member, *,amount=None,):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bcastle_army_rock = binfo["castle_army_rock"]
    bcastle_army_paper = binfo["castle_army_paper"]
    bcastle_army_scissor = binfo["castle_army_scissor"]
    bpeople = binfo["castle_people"]
    bcastle_guild_name = binfo["castle_guild_name"]
    aname = str(ainfo["name"])
    afood = ainfo["castle_army_rock"]
    acastle_army_rock = ainfo["castle_army_rock"]
    acastle_army_paper = ainfo["castle_army_paper"]
    acastle_army_scissor = ainfo["castle_army_scissor"]
    acastle_guild_name = ainfo["castle_guild_name"]
    apeople = ainfo["castle_people"]
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if user == None or amount == None:
        await ctx.send("!sendboco @bobtherobot#3641 100\n\n".format())
        return
    if afood < 0.01 :
        await ctx.send("You Do not have any Boco".format())
        return
    elif afood > 0 :
        if afood > 0.01 :
            await ctx.send("What Army would you like to Attack with?".format())
            options2 = ["ArmyPaper", "armypaper", "ArmyRock", "ArmyScissor", "armyscissor", "armyrock"]
            def pred(m):
                return m.author == message.author and m.channel == message.channel
            answer1 = await bot.wait_for("message", check=pred)
            if answer1.content in options2:
                if answer1.content == "ArmyRock" or answer1.content =="armyrock" or answer1.content =="1" or answer1.content =="Armyrock":
                    randomnumber - randomintint(1, 3)
                    print("randomint")
                    print(randomnumber)
                    if acastle_guild_name  == "RockCastle" and bcastle_guild_name == "ScissorCastle" :
                        await ctx.send("Yor Attacking a Weaker ScissorCastle with".format())
                        #return
                    if acastle_guild_name  == "RockCastle" and bcastle_guild_name == "PaperCastle" :
                        await ctx.send("Yor Attacking a Weaker PaperCastle with".format())
                        #return
                    if acastle_guild_name  == "RockCastle" and bcastle_guild_name == "RockCastle" :
                        await ctx.send("Yor Attacking a Weaker RockCastle with".format())
                        #return
                    if acastle_guild_name  == "ScissorCastle" and bcastle_guild_name == "ScissorCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "ScissorCastle" and bcastle_guild_name == "PaperCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "ScissorCastle" and bcastle_guild_name == "RockCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "PaperCastle" and bcastle_guild_name == "ScissorCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "PaperCastle" and bcastle_guild_name == "PaperCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    if acastle_guild_name  == "PaperCastle" and bcastle_guild_name == "RockCastle" :
                        await ctx.send("Please start your character using `{}start`".format(Prefix))
                        #return
                    #if randomnumber == 1 and acastle_army_rock >= 0.9 :
                    #    abfail = acastle_army_rock - bcastle_army_rock
                    #    print("abfail")
                    #    print(abfail)
                    #
                    #if randomnumber == 2 and acastle_army_rock >= 0.9 :
                    #    bawin = bcastle_army_rock - acastle_army_rock
                    #   print("bawin")
                    # ##   print(bawin)
                    #if randomnumber == 3 and acastle_army_rock >= 0.9 :
                    #    aadraw = acastle_army_rock - acastle_army_rock
                    #    print("aadraw")
                    #    print(aadraw)
                    binfo["boco"] = int(binfo["boco"]) + int(amount)
                    ainfo["boco"] = int(ainfo["boco"]) - int(amount)
                    afood = ainfo["boco"]
                    bfood = binfo["boco"]
                    await ctx.send("You have {} Boco left.".format(ainfo["boco"]))
                    fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                    fileIO("players/{}/info.json".format(user.id), "save", binfo)
        await ctx.send("You have {} Boco".format(afood))
        await ctx.send("You will send {} ArmyRock".format(amount))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                randomnumber - randint(1, 3)
                print("randomint")
                print(randomnumber)
                if randomnumber == 1 and acastle_army_rock >= 0.9 :
                    acastle_army_rock - bcastle_army_rock
                if randomnumber == 2 and acastle_army_rock >= 0.9 :
                    bcastle_army_rock - acastle_army_rock
                if randomnumber == 3 and acastle_army_rock >= 0.9 :
                    acastle_army_rock - acastle_army_rock
                if randomnumber == 1 and acastle_army_paper >= 0.9 :
                    acastle_army_paper - bcastle_army_paper
                if randomnumber == 2 and acastle_army_paper >= 0.9 :
                    bcastle_army_paper - acastle_army_paper
                if randomnumber == 3 and acastle_army_paper >= 0.9 :
                    acastle_army_paper - acastle_army_paper
                if randomnumber == 1 and acastle_army_scissor >= 0.9 :
                    acastle_army_scissor - bcastle_army_scissor
                if randomnumber == 2 and acastle_army_scissor >= 0.9 :
                    bcastle_army_scissor - acastle_army_scissor
                if randomnumber == 3 and acastle_army_scissor >= 0.9 :
                    acastle_army_scissor - acastle_army_scissor
                binfo["boco"] = int(binfo["boco"]) + int(amount)
                ainfo["boco"] = int(ainfo["boco"]) - int(amount)
                afood = ainfo["boco"]
                bfood = binfo["boco"]
                await ctx.send("You have {} Boco left.".format(ainfo["boco"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["dep1"])
async def sendto(ctx, user: discord.Member, good=None, *, sendamount=0):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    membername = user
    goodtype = good
    sendamount = sendamount
    if sendamount < 1:
        sendamount = "None"
    if goodtype == int :
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> <what to send> <amount to send>\n- INT!`".format(Prefix))
    if goodtype == None or sendamount == None or membername == None :
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> <what to send> <amount to send>\n- USE YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODS  goodtype < 1 None x3!`".format(Prefix))
        #return
    if sendamount == None:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n sendto(@user: discord.Member, good=food, sendamount=How much do you want to send\n".format())
    if sendamount > 1:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> \n- YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODS  sendamount > 1  !`".format(Prefix))
        return
    if sendamount < 1:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> \n- YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODS  sendamount < 1  !`".format(Prefix))
        return
    try:
        await ctx.send("Please start your character 5611165using `{}start`".format(Prefix))
        #return
    except ArgumentError:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> \n- YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODS111!`".format(Prefix))
    try:
        await ctx.send("Please start your character 56612225using `{}start`".format(Prefix))
        #return
    except argparse.TypeError:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> \n- YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODSType!`".format(Prefix))
    try:
        await ctx.send("Please start your character TypeError `{}start`".format(Prefix))
        #return
    except TypeError:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> \n- YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODS333!`".format(Prefix))
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    bname = str(binfo["name"])
    bfood = binfo["castle_food"]
    await ctx.send("You deposit to {}".format(bname))
    aname = str(ainfo["name"])
    afood = ainfo["food"]
    #try:
    #
    #except RequiredArgumentError:
    try:
        em = discord.Embed(description="```diff\n!=====[{}'s {} Castle]=====!\n\n CastleName :{}\n CastleOwner:{}\n Level      :{}\n PlayerInn  :{}\n Attack     :{}\n Defence    :{}\n Tower      :{}\n Guard	     :{}\n People     :{}\n\n ArmyPaper  :{}\n ArmyRock   :{}\n ArmyScissor :{}\n\n ArmyTotal  :{} \n\n+Castle Pocket :\n Food     : {}\n Wood     : {}\n Stone    : {}\n Metal    : {}\n Gold     : {}\n BoCo     : {}\n```\n\n ```diff\n! CastleInv !\n {}```\n```diff\n! OpenInv !\n {}```\n```diff\n!=====[{}'s KillStats]=====!\n\n+Name 	: {}\n+Status   : {}\n+Race 	: {}\n+Wallet   : {}\n+NFTs	 : {}\n+Class    : {}\n+Castlelvl: {}\n\n+CastleType: {}\n+Guildlvl  : {}\n\n!=============!\n\n! count_win: {}!\n- count_lose: {}\n= count_played: {}\n# count_draw: {}\n?\n\n!=============!```".format(ainfo["name"], ainfo["castle_status"], ainfo["castle_name"], ainfo["castle_owner"], ainfo["castle_lvl"], ainfo["Player_In"], ainfo["castle_all_attack"], ainfo["castle_all_defence"], ainfo["castle_tower"], ainfo["castle_guard"], ainfo["castle_people"], ainfo["castle_army_paper"], ainfo["castle_army_rock"], ainfo["castle_army_scissor"], ainfo["castle_army_total"], ainfo["castle_food"], ainfo["castle_wood"], ainfo["castle_stone"], ainfo["castle_metal"], ainfo["castle_gold"], ainfo["castle_boco"], ainfo["castle_inventory"], ainfo["all_inventory"], ainfo["name"], ainfo["name"], ainfo["status"], ainfo["race"], ainfo["account"], ainfo["assets"], ainfo["class"], ainfo["castle_lvl"], ainfo["castle_guild_name"], ainfo["castle_guard_lvl"], ainfo["count_win"], ainfo["count_lose"], ainfo["count_played"], ainfo["count_draw"]), color=discord.Color.blue())
        await ctx.send(embed=em)
    except TypeError:
        print("ErrorType")
    try:
        em5 = discord.Embed(description="```diff\n!==== [{}'s Inventory] ====!\n\n!==== [Supplies] ====!\n Food:\n+ {}\n Wood:\n+ {}\n Stone:\n+ {}\n Metal:\n+ {}\n Gold:\n+ {}\n BoboCoin:\n+ {}\n Key's :\n+ {}\n\n!===== [Pot] =====!\n+ smallPot   : {}\n+ MediumPot  : {}\n+ BIGPOT     : {}\n+ SpeedPot   : {}\n+ AmnesiaPot : {}\n+ WindPot    : {}\n+ WaterPot   : {}\n+ FirePot    : {}\n+ EarthPot   : {}\n\n!===== [Bag] =====!\n+ Food Bag   : {}\n+ Wood Bag   : {}\n+ Stone Bag  : {}\n+ Metal Bag  : {}\n+ Gold Bag   : {} \n+ BoCo Bag   : {} \n+ Key Bag    : {}\n\n```".format(ainfo["name"], round(ainfo["food"], 0), round(ainfo["wood"], 0), round(ainfo["stone"], 0), round(ainfo["metal"], 0), round(ainfo["gold"], 0), round(ainfo["boco"], 0), round(ainfo["key"], 0), ainfo["smallpot"], ainfo["mediumpot"], ainfo["bigpot"],ainfo["speedpot"],ainfo["amnesiapot"],ainfo["ammo_wind_pot"], ainfo["ammo_water_pot"], ainfo["ammo_fire_pot"], ainfo["ammo_earth_pot"], ainfo["bag_food"], ainfo["bag_wood"], ainfo["bag_stone"], ainfo["bag_metal"], ainfo["bag_gold"], ainfo["bag_boco"], ainfo["bag_key"], "\n+ ".join(ainfo["all_inventory"])), color=discord.Color.blue())
        await ctx.send(embed=em5)
    except TypeError:
        print("ErrorType")
    try:
        await ctx.send("What would you like to send?\n".format())
        options2 = ["Cfood", "cf", "cwood", "cw", "Cstone", "cs", "Cmetal", "cm", "Cgold", "cg", "Cboco", "cb", "Ckey", "ck","Food", "f", "Wood", "w", "Stone", "s", "Metal", "m", "Gold", "g", "Boco", "b", "Key", "k", "ArmyRock", "ArmyPaper", "ArmyScissor", "ar", "ap", "as"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            whatTosell = answer1.content
            if answer1.content == "Food" or answer1.content =="food" or answer1.content =="f" or answer1.content =="F":
                try:
                    youSellthis = "food"
                except TypeError:
                    print("ErrorType")
                    await ctx.send("You have".format())
    except TypeError:
        print("ErrorType")
        await ctx.send("You have ErrorType".format())
     #
    #try:
    #    if int(amount) > int(afood):
    #
    #except TypeError:
    #    print("ErrorType")
    #    await ctx.send("You have ErrorType".format())
#
#
    #try:
    #    if int(amount) > int(afood):
    #
    #    amount = int(afood)
    #    if int(amount) < 0:
    #    amount = int(afood)
    #
    #except TypeError:
    #    print("ErrorType")
    #
    #    await ctx.send("You have ErrorType".format())
    #
    #
    #
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Food".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Food".format(afood))
        await ctx.send("You will send {} Food to\n {}".format(amount, bname))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["castle_food"] = int(binfo["castle_food"]) + int(amount)
                ainfo["food"] = int(ainfo["food"]) - int(amount)
                afood = ainfo["food"]
                bfood = binfo["castle_food"]
                await ctx.send("You have {} Food left.".format(ainfo["food"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["cas"])
async def castlego(ctx, user: discord.Member, good=None, *, sendamount=0):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    membername = user
    goodtype = good
    sendamount = sendamount
    ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    binfo = fileIO("players/{}/info.json".format(user.id), "load")
    ainfo = fileIO("enemies/castleall.json", "load")
    if sendamount < 1:
        sendamount = "None"
    if sendamount == None:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n sendto(@user: discord.Member, good=food, sendamount=How much do you want to send\n".format())
    if sendamount > 1:
        await ctx.send("```diff\n!=============!USE COMMAND!=============!```\n `{}send <@userName> \n- YOUR OWN NAME WHEN YOU WANT TO WITDRAW YOUR GOODS  sendamount > 1  !`".format(Prefix))
        return
    try:
        await ctx.send("What would you like to send?\n".format())
        options2 = ["Cfood", "cf", "cwood", "cw", "Cstone", "cs", "Cmetal", "cm", "Cgold", "cg", "Cboco", "cb", "Ckey", "ck","Food", "f", "Wood", "w", "Stone", "s", "Metal", "m", "Gold", "g", "Boco", "b", "Key", "k", "ArmyRock", "ArmyPaper", "ArmyScissor", "ar", "ap", "as"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            whatTosell = answer1.content
            if answer1.content == "Food" or answer1.content =="food" or answer1.content =="f" or answer1.content =="F":
                try:
                    youSellthis = "food"
                except TypeError:
                    print("ErrorType")
                    await ctx.send("You have".format())
    except TypeError:
        print("ErrorType")
        await ctx.send("You have ErrorType".format())
    if int(amount) > int(afood):
        amount = int(afood)
    if int(amount) < 0:
        amount = int(afood)
    if afood < 0.01 :
        await ctx.send("You Do not have any Food".format())
        return
    elif afood > 0 :
        await ctx.send("You have {} Food".format(afood))
        await ctx.send("You will send {} Food to\n {}".format(amount, bname))
        await ctx.send("Are you sure?\n\n Y or N".format())
        options2 = ["Yes", "yes", "y", "Y", "No", "no", "n"]
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        if answer1.content in options2:
            if answer1.content == "Yes" or answer1.content =="yes" or answer1.content =="y" or answer1.content =="Y":
                binfo["food"] = int(binfo["food"]) + int(amount)
                ainfo["castle_food"] = int(ainfo["castle_food"]) - int(amount)
                afood = ainfo["castle_food"]
                bfood = binfo["food"]
                await ctx.send("You have {} Food left.".format(ainfo["food"]))
                fileIO("players/{}/info.json".format(author.id), "save", ainfo)
                fileIO("players/{}/info.json".format(user.id), "save", binfo)
                return
            elif answer1.content == "No" or answer1.content =="no" or answer1.content =="N" or answer1.content =="n" :
                await ctx.send("Nothing Than")
                return
        fileIO("players/{}/info.json".format(author.id), "save", ainfo)
        fileIO("players/{}/info.json".format(user.id), "save", binfo)
@bot.command(aliases=["b"])
async def clime(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = float(curr_time) - float(info["free_cool_block1"])
    if delta >= 1.0 and delta>0:
        if info["class"] == "None" and info["race"] == "None":
            await ctx.send("Please start your player using `{}start`".format(Prefix))
            return
        info["bpf0"] += 1
        info["bpf0"] *= 2
        info["bpvf0"] = info["bpf0"] *1
        info["free_cool_block1"] = curr_time
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        climtry = info["clime_try"]
        info["clime_try"] += 1
        if climtry <= 2:
            em = discord.Embed(description="```diff\n+ You recieved a 5MinDrop of an fictinary digital value...\n\n Sound more bad than it is\n With this Value you can add it to your BoboValue for even more Multiplyer!\n But be carfull what comes easy goes easy!\n Muahahahahha\n- NO NFT ```".format(), color=discord.Color.blue())
            await ctx.send(embed=em)
        else:
            em = discord.Embed(description="```diff\n+ You recieved a 5MinDrop of an fictinary digital value...\n\n- NO NFT ```".format(), color=discord.Color.blue())
            await ctx.send(embed=em)
        info["count_click"] += 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        if climtry >= 2:
            randomNum = random.randint(1, 4) # 50%50
            if randomNum >= 2:
                info["bpf0"] /= 2
                #info["clime_try"] = 0
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setBoboValue(ctx)
                if climtry <= 4:
                    em = discord.Embed(description="```diff\n+ You lost some of your BP1x1 NO NFTS `/2` !\n Muahahahahha\n+ USE COMMAND {}bpinv to check for sure.\n- RiskLvl: {} ```".format(Prefix,round(info["clime_try"], 0)), color=discord.Color.blue())
                    await ctx.send(embed=em)
                else:
                    em = discord.Embed(description="```diff\n+ You lost some of your BP1x1 NO NFTS `/2` !\n Last Chance Take with `{}p`\n+ USE COMMAND `{}bpinv` to check for sure.\n- RiskLvl: {} ```".format(Prefix,Prefix,round(info["clime_try"], 0)), color=discord.Color.blue())
                    await ctx.send(embed=em)
        if climtry >= 5:
            randomNum = random.randint(1, 3)  # 2/3
            if randomNum == 1:
                info["bpf0"] = 0
                info["clime_try"] = 0
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setBoboValue(ctx)
                em = discord.Embed(description="```diff\n+ You lost some of your BP1x1 Fungables `0` !\n Muahahahahha\n+ USE COMMAND {}bpinv to check for sure.\n- RiskLvl: {} ```".format(Prefix,round(info["clime_try"], 0)), color=discord.Color.blue())
                await ctx.send(embed=em)
            if randomNum == 2:
                info["bpf0"] /= 2
                info["clime_try"] = 0
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setBoboValue(ctx)
                em = discord.Embed(description="```diff\n+ You lost some of your BP1x1 Fungables `/2` !\n But You Can Start From Beginning\n+ USE COMMAND {}b to check for sure.\n- RiskLvl: {} ```".format(Prefix,round(info["clime_try"], 0)), color=discord.Color.blue())
                await ctx.send(embed=em)
            if randomNum == 3:
                info["bpf0"] /= 4
                info["clime_try"] = 0
                fileIO("players/{}/info.json".format(author.id), "save", info)
                await _check_setBoboValue(ctx)
                em = discord.Embed(description="```diff\n+ You lost some of your BP1x1 Fungables `/4` !\n Lets see what Happens\n+ USE COMMAND {}b to check for sure.\n- RiskLvl: {} ```".format(Prefix,round(info["clime_try"], 0)), color=discord.Color.blue())
                await ctx.send(embed=em)
            else:
                print("  climtry")
                print(climtry)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        em5 = discord.Embed(description="```diff\n!=== [BoboValue1x1] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:1x1_0:>  : {} x1 ={}\n+ <:1x1_1:>  : {} x2 ={}\n+ <:1x1_2:>  : {} x4 ={}\n+ <:1x1_3:>  : {} x8 ={}\n+ <:1x1_4:>  : {} x16 ={}\n+ <:1x1_5:>  : {} x32 ={}\n+ <:1x1_6:>  : {} x64 ={}\n+ <:1x1_7:>  : {} x128 ={}\n+ <:1x1_8:>  : {} x256 ={}\n+ <:1x1_9:>  : {} x512 ={}\n+ <:1x1_10:> : {} x1024 ={}\n+ <:1x1_11:> : {} x2048 ={}\n+ <:1x1_12:> : {} x4096 ={}\n+ <:1x1_13:> : {} x8196 ={}\n+ <:1x1_14:> : {} x16392 ={}\n+ <:1x1_15:> : {} x32784 ={}\n+ <:1x1_16:> : {} x65568 ={}\n+ <:1x1_17:> : {} x131136 ={}\n+ <:1x1_18:> : {} x262272 ={}\n+ <:1x1_19:> : {} x524544 ={}\n+ <:1x1_20:> : {} x1M ={}\n+ <:1x1_21:> : {} x2M ={}\n+ <:1x1_22:> : {} x4M ={}\n+ <:1x1_23:> : {} x8M ={}\n+ <:1x1_24:> : {} x16M ={}\n+ <:1x1_25:> : {} x33M ={}\n\n Total BoboValue1x1   : {} ```".format(round(info["bpf0"], 2), round(info["bpvf0"], 2), round(info["bpf1"], 2), round(info["bpvf1"], 2), round(info["bpf2"], 2), info["bpvf2"], round(info["bpf3"], 2), info["bpvf3"], round(info["bpf4"], 2), info["bpvf4"], round(info["bpf5"], 2), info["bpvf5"], round(info["bpf6"], 2), info["bpvf6"], round(info["bpf7"], 0), info["bpvf7"], round(info["bpf8"], 2), info["bpvf8"], round(info["bpf9"], 0), info["bpvf9"], round(info["bpf10"], 2), info["bpvf10"], round(info["bpf11"], 2), info["bpvf11"], round(info["bpf12"], 2), info["bpvf12"], round(info["bpf13"], 2), info["bpvf13"], round(info["bpf14"], 2), info["bpvf14"], round(info["bpf15"], 2), info["bpvf15"], round(info["bpf16"], 2), info["bpvf16"], round(info["bpf17"], 2), info["bpvf17"], round(info["bpf18"], 2), info["bpvf18"], round(info["bpf19"], 2), info["bpvf19"], round(info["bpf20"], 2), info["bpvf20"], round(info["bpf21"], 2), info["bpvf21"], round(info["bpf22"], 2), info["bpvf22"], round(info["bpf23"], 2), info["bpvf23"], round(info["bpf24"], 2), info["bpvf24"], round(info["bpf25"], 2), info["bpvf25"], info["bbvaluef"], "\n".join(info["inventory"])), color=discord.Color.blue())
        #await ctx.send(embed=em5)
        em55 = discord.Embed(description="```diff\n!=== [BoboValue1x1] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:1x1_25:> : {} x33M ={}\n+ <:1x1_24:> : {} x16M ={}\n+ <:1x1_23:> : {} x8M ={}\n+ <:1x1_22:> : {} x4M ={}\n+ <:1x1_21:> : {} x2M ={}\n+ <:1x1_20:> : {} x1M ={}\n+ <:1x1_19:> : {} x524544 ={}\n+ <:1x1_18:> : {} x262272 ={}\n+ <:1x1_17:> : {} x131136 ={}\n+ <:1x1_16:> : {} x65568 ={}\n+ <:1x1_15:> : {} x32784 ={}\n+ <:1x1_14:> : {} x16392 ={}\n+ <:1x1_13:> : {} x8196 ={}\n+ <:1x1_12:> : {} x4096 ={}\n+ <:1x1_11:> : {} x2048 ={}\n+ <:1x1_10:> : {} x1024 ={}\n+ <:1x1_9:>  : {} x512 ={}\n+ <:1x1_8:>  : {} x256 ={}\n+ <:1x1_7:>  : {} x128 ={}\n+ <:1x1_6:>  : {} x64 ={}\n+ <:1x1_5:>  : {} x32 ={}\n+ <:1x1_4:>  : {} x16 ={}\n+ <:1x1_3:>  : {} x8 ={}\n+ <:1x1_2:>  : {} x4 ={}\n+ <:1x1_1:>  : {} x2 ={}\n+ <:1x1_0:>  : {} x1 ={}\n\n Total BoboValue1x1   : {} ```".format(round(info["bpf25"], 0),info["bpvf25"], round(info["bpf24"], 0), info["bpvf24"], round(info["bpf23"], 0), info["bpvf23"], round(info["bpf22"], 0), info["bpvf22"], round(info["bpf21"], 0), info["bpvf21"], round(info["bpf20"], 0), info["bpvf20"], round(info["bpf19"], 0), info["bpvf19"], round(info["bpf18"], 0), info["bpvf18"], round(info["bpf17"], 0), info["bpvf17"], round(info["bpf16"], 0), info["bpvf16"], round(info["bpf15"], 0), info["bpvf15"], round(info["bpf14"], 0), info["bpvf14"], round(info["bpf13"], 0), info["bpvf13"], round(info["bpf12"], 0), info["bpvf12"], round(info["bpf11"], 0), info["bpvf11"], round(info["bpf10"], 0), info["bpvf10"], round(info["bpf9"], 0), info["bpvf9"], round(info["bpf8"], 0), info["bpvf8"], round(info["bpf7"], 0), info["bpvf7"], round(info["bpf6"], 0), info["bpvf6"], round(info["bpf5"], 0), info["bpv5"], round(info["bpf4"], 0), info["bpvf4"], round(info["bpf3"], 0), info["bpvf3"], round(info["bpf2"], 0), info["bpvf2"], round(info["bpf1"], 0), info["bpvf1"], round(info["bpf0"], 0), info["bpvf0"], info["bbvaluef"], "\n".join(info["inventory"])), color=discord.Color.blue())
        #await ctx.send(embed=em55)
        em55a = discord.Embed(description="```diff\n!=== [BoboValue1x1] ===!\n!=== [{}bpinv to check] ===!\n!=== [{}p to blend all] ===!\n\n+ <:1x1_1:>  : {} x1 ={}\n+ <:1x1_0:>  : {} x1 ={}\n\n Total BoboValue1x1   : {} ```".format(Prefix,Prefix,round(info["bpf1"], 0), info["bpvf1"],round(info["bpf0"], 0), info["bpvf0"], info["bbvaluef"], ), color=discord.Color.blue())
        await ctx.send(embed=em55a) #"\n".join(info["inventory"])
    else:
        seconds = 1 - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't claim your all % Minutes for an 5MinDrop reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)
        await _check_setBoboValue(ctx)
@bot.command(aliases=["p"])
async def blend(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    curr_time = time.time()
    delta = float(curr_time) - float(info["free_cool_block1"])
    if delta >= 3.0 and delta>0:
        if info["class"] == "None" and info["race"] == "None":
            await ctx.send("Please start your player using `{}start`".format(Prefix))
            return
        eins = info["bpf0"] / 2
        zwei = info["bpf1"] / 2
        drei = info["bpf2"] / 2
        vier = info["bpf3"] / 2
        funf = info["bpf4"] / 2
        secks = info["bpf5"] / 2
        sieben = info["bpf6"] / 2
        acht = info["bpf7"] / 2
        neun = info["bpf8"] / 2
        zen = info["bpf9"] / 2
        elf = info["bpf10"] / 2
        zwolf = info["bpf11"] / 2
        a13 = info["bpf12"] / 2
        a14 = info["bpf13"] / 2
        a15 = info["bpf14"] / 2
        a16 = info["bpf15"] / 2
        a17 = info["bpf16"] / 2
        a18 = info["bpf17"] / 2
        a19 = info["bpf18"] / 2
        a20 = info["bpf19"] / 2
        a21 = info["bpf20"] / 2
        a22 = info["bpf21"] / 2
        a23 = info["bpf22"] / 2
        a24 = info["bpf23"] / 2
        a25 = info["bpf24"] / 2
        if eins >= 1:
            amount = eins
            info["bpf0"] -= info["bpf0"]
            info["bpf1"] += amount
            all_total_base_drop = info["all_total_base_drop"] / 33554432
            info["bpvf1"] = info["bpf1"] * all_total_base_drop
            bpf0 = info["bpf0"]
            bpf1 = info["bpf1"]
            bpvf1 = info["bpvf1"]
            print("info[bpf0] ")
            print(bpf0)
            print("info[bpf1]")
            print(bpf1)
            print("info[bpvf1")
            print(bpvf1)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if zwei >= 1:
            amount = zwei
            info["bpf1"] -= zwei * 2
            info["bpf2"] += amount
            info["bpvf2"] = info["bpf2"] * 4
            bpf1 = info["bpf1"]
            bpf2 = info["bpf2"]
            bpvf2 = info["bpvf2"]
            print("info[bpf1] ")
            print(bpf1)
            print("info[bpf2]")
            print(bpf2)
            print("info[bpvf2")
            print(bpvf2)
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if drei >= 1:
            amount = drei
            info["bpf2"] -= drei * 2
            info["bpf3"] += amount
            info["bpvf3"] = info["bpf3"] * 8
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if vier >= 1:
            amount = vier
            info["bpf3"] -= vier * 2
            info["bpf4"] += amount
            info["bpvf4"] = info["bpf4"] *16
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if funf >= 1:
            amount = funf
            info["bpf4"] -= funf * 2
            info["bpf5"] += amount
            info["bpvf5"] = info["bpf5"] *32
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if secks >= 1:
            amount = secks
            info["bpf5"] -= secks * 2
            info["bpf6"] += amount
            info["bpvf6"] = info["bpf6"] *64
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if sieben >= 1:
            amount = sieben
            info["bpf6"] -= sieben * 2
            info["bpf7"] += amount
            info["bpvf7"] = info["bpf7"] *128
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if acht >= 1:
            amount = acht
            info["bpf7"] -= acht * 2
            info["bpf8"] += amount
            info["bpvf8"] = info["bpf8"] *256
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if neun >= 1:
            amount = neun
            info["bpf8"] -= neun * 2
            info["bpf9"] += amount
            info["bpvf9"] = info["bpf9"] *512
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if zen >= 1:
            amount = zen
            info["bpf9"] -= zen * 2
            info["bpf10"] += amount
            info["bpvf10"] = info["bpf10"] *1024
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if elf >= 1:
            amount = elf
            info["bpf10"] -= elf * 2
            info["bpf11"] += amount
            info["bpvf12"] = info["bpf12"] *2048
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if zwolf >= 1:
            amount = zwolf
            info["bpf11"] -= zwolf * 2
            info["bpf12"] += amount
            info["bpvf12"] = info["bpf12"] *4096
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a13 >= 1:
            amount = a13
            info["bpf12"] -= a13 * 2
            info["bpf13"] += amount
            info["bpvf13"] = info["bpf13"] *8192
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a14 >= 1:
            amount = a14
            info["bpf13"] -= a14 * 2
            info["bpf14"] += amount
            info["bpvf14"] = info["bpf14"] *16384
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a15 >= 1:
            amount = a15
            info["bpf14"] -= a15 * 2
            info["bpf15"] += amount
            info["bpvf15"] = info["bpf15"] *32768
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a16 >= 1:
            amount = a16
            info["bpf15"] -= a16 * 2
            info["bpf16"] += amount
            info["bpvf16"] = info["bpf16"] *65536
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a17 >= 1:
            amount = a17
            info["bpf16"] -= a17 * 2
            info["bpf17"] += amount
            info["bpvf17"] = info["bpf17"] *131072
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a18 >= 1:
            amount = a18
            info["bpf17"] -= a18 * 2
            info["bpf18"] += amount
            info["bpvf18"] = info["bpf18"] *262144
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a19 >= 1:
            amount = a19
            info["bpf18"] -= a19 * 2
            info["bpf19"] += amount
            info["bpvf19"] = info["bpf19"] *524288
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a20 >= 1:
            amount = a20
            info["bpf19"] -= a20 * 2
            info["bpf20"] += amount
            info["bpvf20"] = info["bpf20"] *1048576
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a21 >= 1:
            amount = a21
            info["bpf20"] -= a21 * 2
            info["bpf21"] += amount
            info["bpvf21"] = info["bpf21"] *2097152
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a22 >= 1:
            amount = a22
            info["bpf21"] -= a22 * 2
            info["bpf22"] += amount
            info["bpvf22"] = info["bpf22"] *4194304
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a23 >= 1:
            amount = a23
            info["bpf22"] -= a23 * 2
            info["bpf23"] += amount
            info["bpvf23"] = info["bpf23"] *8388608
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a24 >= 1:
            amount = a24
            info["bpf23"] -= a24 * 2
            info["bpf24"] += amount
            info["bpvf24"] = info["bpf24"] *16777216
            fileIO("players/{}/info.json".format(author.id), "save", info)
        if a25 >= 1:
            amount = a25
            info["bpf24"] -= a25 * 2
            info["bpf25"] += amount
            info["bpvf25"] = info["bpf25"] *33554432
            fileIO("players/{}/info.json".format(author.id), "save", info)
        info["bpf0"] += 1
        info["free_cool_block1"] = curr_time
        info["clime_try"] = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        em = discord.Embed(description="```diff\n+ You Blend all your Possibil BoboPixel1x1 NO NFTS to there next higher Value!\n+ ```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        em5 = discord.Embed(description="```diff\n!=== [BoboValue1x1] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:1x1_0:>  : {} x1 ={}\n+ <:1x1_1:>  : {} x2 ={}\n+ <:1x1_2:>  : {} x4 ={}\n+ <:1x1_3:>  : {} x8 ={}\n+ <:1x1_4:>  : {} x16 ={}\n+ <:1x1_5:>  : {} x32 ={}\n+ <:1x1_6:>  : {} x64 ={}\n+ <:1x1_7:>  : {} x128 ={}\n+ <:1x1_8:>  : {} x256 ={}\n+ <:1x1_9:>  : {} x512 ={}\n+ <:1x1_10:> : {} x1024 ={}\n+ <:1x1_11:> : {} x2048 ={}\n+ <:1x1_12:> : {} x4096 ={}\n+ <:1x1_13:> : {} x8196 ={}\n+ <:1x1_14:> : {} x16392 ={}\n+ <:1x1_15:> : {} x32784 ={}\n+ <:1x1_16:> : {} x65568 ={}\n+ <:1x1_17:> : {} x131136 ={}\n+ <:1x1_18:> : {} x262272 ={}\n+ <:1x1_19:> : {} x524544 ={}\n+ <:1x1_20:> : {} x1M ={}\n+ <:1x1_21:> : {} x2M ={}\n+ <:1x1_22:> : {} x4M ={}\n+ <:1x1_23:> : {} x8M ={}\n+ <:1x1_24:> : {} x16M ={}\n+ <:1x1_25:> : {} x33M ={}\n\n Total BoboValue1x1   : {} ```".format(round(info["bpf0"], 0),info["bpvf0"], round(info["bpf1"], 0), info["bpvf1"], round(info["bpf2"], 0), info["bpvf2"], round(info["bpf3"], 0), info["bpvf3"], round(info["bpf4"], 0), info["bpvf4"], round(info["bpf5"], 0), info["bpvf5"], round(info["bpf6"], 0), info["bpvf6"], round(info["bpf7"], 0), info["bpvf7"], round(info["bpf8"], 0), info["bpvf8"], round(info["bpf9"], 0), info["bpvf9"], round(info["bpf10"], 0), info["bpvf10"], round(info["bpf11"], 0), info["bpvf11"], round(info["bpf12"], 0), info["bpvf12"], round(info["bpf13"], 0), info["bpvf13"], round(info["bpf14"], 0), info["bpvf14"], round(info["bpf15"], 0), info["bpvf15"], round(info["bpf16"], 0), info["bpvf16"], round(info["bpf17"], 0), info["bpvf17"], round(info["bpf18"], 0), info["bpvf18"], round(info["bpf19"], 0), info["bpvf19"], round(info["bpf20"], 0), info["bpvf20"], round(info["bpf21"], 0), info["bpvf21"], round(info["bpf22"], 0), info["bpvf22"], round(info["bpf23"], 0), info["bpvf23"], round(info["bpf24"], 0), info["bpvf24"], round(info["bpf25"], 0), info["bpvf25"], info["bbvaluef"], "\n".join(info["inventory"])), color=discord.Color.blue())
        #await ctx.send(embed=em5)
        em55 = discord.Embed(description="```diff\n!=== [BoboValue1x1] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:1x1_25:> : {} x33M ={}\n+ <:1x1_24:> : {} x16M ={}\n+ <:1x1_23:> : {} x8M ={}\n+ <:1x1_22:> : {} x4M ={}\n+ <:1x1_21:> : {} x2M ={}\n+ <:1x1_20:> : {} x1M ={}\n+ <:1x1_19:> : {} x524544 ={}\n+ <:1x1_18:> : {} x262272 ={}\n+ <:1x1_17:> : {} x131136 ={}\n+ <:1x1_16:> : {} x65568 ={}\n+ <:1x1_15:> : {} x32784 ={}\n+ <:1x1_14:> : {} x16392 ={}\n+ <:1x1_13:> : {} x8196 ={}\n+ <:1x1_12:> : {} x4096 ={}\n+ <:1x1_11:> : {} x2048 ={}\n+ <:1x1_10:> : {} x1024 ={}\n+ <:1x1_9:>  : {} x512 ={}\n+ <:1x1_8:>  : {} x256 ={}\n+ <:1x1_7:>  : {} x128 ={}\n+ <:1x1_6:>  : {} x64 ={}\n+ <:1x1_5:>  : {} x32 ={}\n+ <:1x1_4:>  : {} x16 ={}\n+ <:1x1_3:>  : {} x8 ={}\n+ <:1x1_2:>  : {} x4 ={}\n+ <:1x1_1:>  : {} x2 ={}\n+ <:1x1_0:>  : {} x1 ={}\n\n Total BoboValue1x1   : {} ```".format(round(info["bpf25"], 0), round(info["bpvf25"], 0), round(info["bpf24"], 0), round(info["bpvf24"], 0), round(info["bpf23"], 0), round(info["bpvf23"], 0), round(info["bpf22"], 0), round(info["bpvf22"], 0), round(info["bpf21"], 0), round(info["bpvf21"], 0), round(info["bpf20"], 0), round(info["bpvf20"], 0), round(info["bpf19"], 0), round(info["bpvf19"], 0), round(info["bpf18"], 0), round(info["bpvf18"], 0), round(info["bpf17"], 0), round(info["bpvf17"], 0), round(info["bpf16"], 0), round(info["bpvf16"], 0), round(info["bpf15"], 0), round(info["bpvf15"], 0), round(info["bpf14"], 0), round(info["bpvf14"], 0), round(info["bpf13"], 0), round(info["bpvf13"], 0), round(info["bpf12"], 0), round(info["bpvf12"], 0), round(info["bpf11"], 0), round(info["bpvf11"], 0), round(info["bpf10"], 0), round(info["bpvf10"], 0), round(info["bpf9"], 0), round(info["bpvf9"], 0), round(info["bpf8"], 0), round(info["bpvf8"], 0), round(info["bpf7"], 0), round(info["bpvf7"], 0), round(info["bpf6"], 0), round(info["bpvf6"], 0), round(info["bpf5"], 0), round(info["bpv5"], 0), round(info["bpf4"], 0), round(info["bpvf4"], 0), round(info["bpf3"], 0), round(info["bpvf3"], 0), round(info["bpf2"], 0), round(info["bpvf2"], 0), round(info["bpf1"], 0), round(info["bpvf1"], 0), round(info["bpf0"], 0), round(info["bpvf0"], 0), info["bbvaluef"], "\n".join(info["inventory"])), color=discord.Color.blue())
        await ctx.send(embed=em55)
    else:
        seconds = 3 - delta
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        em = discord.Embed(description="```diff\n- You can't claim your all % Minutes for an 5MinDrop reward yet!\n\n- Time left:\n- {} Hours, {} Minutes, and {} Seconds```".format(int(h), int(m), int(s)), color=discord.Color.red())
        await ctx.send(embed=em)
        await _check_setBoboValue(ctx)
@bot.command(aliases=["pass"])
async def passport(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["account_to_check"] and info["account"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    else:
        em = discord.Embed(description="```diff\n- Hi and Welcome\n Checking your Documents...\n\n```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        await _check_setTraveler(ctx)
@bot.command(aliases=["lice"])
async def licenze(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["account_to_check"] and info["account"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    else:
        em = discord.Embed(description="```diff\n- Hi and Welcome\n Setting your Documents together...\n\n```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        await _check_setTrader(ctx)
@bot.command(aliases=["accept"])
async def rules(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    if info["account_to_check"] and info["account"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    else:
        em = discord.Embed(description="```diff\n- {} You accept the Rules\n Setting your Documents together...\n\n```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        await _check_setaccept(ctx)
@bot.command(aliases=["otto"])
async def foto(ctx, arg: str):
    #$*,amount=None,*,amount=None,
    await ctx.send("Let's a go".format(Prefix))
    await _check_channelauthormembermessage(ctx)
@bot.command(aliases=["high"])
async def score(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    #$*,amount=None,*,amount=None,
    config = fileIO("config/config.json", "load")
    walletinfo = fileIO("wallets/wallets.json", "load")
    cinfo = fileIO("global/info.json", "load")
    walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    info = fileIO("players/{}/info.json".format(author.id), "load")
    nameList = walletinfo["Wallets"]["Response"]["Names_whitelist"]["Name"]
    walletList = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    if info["race"] and info["class"] == "None":
        await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    await _check_setBoboValue(ctx)
    status_ddos = info["status_ddos"]
    status_confuse = info["status_confuse"]
    status_crack = info["status_crack"]
    status_hide = info["status_hide"]
    status_install = info["status_install"]
    status_install_who = info["status_install_who"]
    status_jump = info["status_jump"]
    status_scan = info["status_scan"]
    status_trap = info["status_trap"]
    zombie_kill_count_total = info["zombie_kill_count_total"]
    cinfo = fileIO("global/info.json".format(author.id), "load")
    castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
    castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
    castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
    castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
    GuildAttacker = info["castle_guild_name"]
    print("go CastleCheck")
    wieVieleinRock = config["rock_member"]
    wieVieleinScissor = config["scissor_member"]
    wieVieleinPaper = config["paper_member"]
    wieVieleinHacker = config["hacker_member"]
    wieVieleinbp0x0VIP = config["vip_member"]
    embed = discord.Embed(title='BoboPixel0x0Universe Score')
    if castle_guild_lvlrock >= 0.01:
        embed.add_field(name = 'Rock-LV', value = round(castle_guild_lvlrock,2), inline = True)
        embed.add_field(name = 'Members', value = round(wieVieleinRock,2), inline = True)
        embed.add_field(name='** **', value='** **', inline=True)
        embed.add_field(name='** **', value='** **', inline=False)
    if castle_guild_lvlscissor >= 0.01:
        embed.add_field(name = 'Scissor-LV', value = round(castle_guild_lvlscissor,2), inline = True)
        embed.add_field(name = 'Members', value = round(wieVieleinScissor,2), inline = True)
        embed.add_field(name='** **', value='** **', inline=True)
        embed.add_field(name='** **', value='** **', inline=False)
    if castle_guild_lvlpaper >= 0.01:
        embed.add_field(name = 'Paper-LV', value = round(castle_guild_lvlpaper,2), inline = True)
        embed.add_field(name = 'Members', value= round(wieVieleinPaper,2), inline = True)
        embed.add_field(name='** **', value='** **', inline=True)
        embed.add_field(name='** **', value='** **', inline=False)
    if castle_guild_lvlhacker >= 0.01:
        embed.add_field(name = 'Hacker-LV', value = round(castle_guild_lvlhacker,2), inline = True)
        embed.add_field(name = 'Members', value = round(wieVieleinHacker,2), inline = True)
        embed.add_field(name='** **', value='** **', inline=True)
        embed.add_field(name='** **', value='** **', inline=False)
    if castle_guild_lvlbp0x0 >= 0.01:
        embed.add_field(name = 'BP0x0-LV', value = round(castle_guild_lvlbp0x0,2), inline = True)
        embed.add_field(name = 'Members', value = round(wieVieleinbp0x0VIP,2), inline = True)
        embed.add_field(name='** **', value='** **', inline=True)
        embed.add_field(name='** **', value='** **', inline=False)
    #embed.add_field(name = 'Champion', value = "Something", inline = True)
    #embed.add_field(name = 'Rank', value = "Something", inline = True)
    #embed.add_field(name = 'Red Team ', value = "Something", inline = True)
    #embed.add_field(name = 'Champion', value = "Something", inline = True)
    #embed.add_field(name = 'Rank', value = "Something", inline = False)
    embed.set_footer(text=ctx.author.name) #, text1=GuildAttacker
    await ctx.send(embed=embed)
@bot.command(aliases=["showl"])
async def showwhitlist(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    #$*,amount=None,*,amount=None,
    config = fileIO("config/config.json", "load")
    walletinfo = fileIO("wallets/wallets.json", "load")
    #walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    nameList = walletinfo["Wallets"]["Response"]["name_list"]["Names_list"]
    walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    embed = discord.Embed(title='BoboPixel0x0')
    embed.add_field(name='White List', value="\n".join(walleto), inline=False)
    #embed.add_field(name = 'Rank', value = "Something", inline = True)
    embed.set_footer(text=ctx.author.name) #, icon_url = ctx.author.avatar_url
    await ctx.send(embed=embed)
@bot.command(aliases=["showml"])
async def showmemberlist(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    #$*,amount=None,*,amount=None,
    config = fileIO("config/config.json", "load")
    walletinfo = fileIO("wallets/wallets.json", "load")
    #walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    nameList = walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"]
    #walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    embed = discord.Embed(title='BoboPixel0x0')
    embed.add_field(name='Member List', value="\n".join(nameList), inline=False)
    #embed.add_field(name = 'Rank', value = "Something", inline = True)
    embed.set_footer(text=ctx.author.name) #, icon_url = ctx.author.avatar_url
    await ctx.send(embed=embed)
@bot.command(aliases=["delwal"])
async def delwallet(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    guild = ctx.guild
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #$*,amount=None,*,amount=None,
    config = fileIO("config/config.json", "load")
    walletinfo = fileIO("wallets/wallets.json", "load")
    nameList = walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"]
    data5 = str(ctx.author.roles)
    if "GameMaster" in data5:
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        em = discord.Embed(description="```diff\n-What wallet would you like to delete?```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        text = str(answer1.content)
        print("text")
        print(text)
        if answer1.content in nameList:
            options = ["Yes","yes","YES","y","1","Y"]
            em1 = discord.Embed(description="```diff\n-{}``` to delete?\n\n Yes-NO?".format(text), color=discord.Color.blue())
            await ctx.send(embed=em1)
            def pred1(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred1)
            if answer2.content in options:
                em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                await ctx.send(embed=em2)
                walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"].remove(text)
                #list.pop(walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"])
                fileIO("wallets/wallets.json", "save", walletinfo)
                print("safe Delete member")
        else:
            em3 = discord.Embed(description="```diff\n- {}```\n Not in List".format(text), color=discord.Color.blue())
            await ctx.send(embed=em3)
            await showmemberlist(ctx)
    else:
        em = discord.Embed(description="```diff\n- You need to be GameMaster!!!```".format(), color=discord.Color.red())
        await ctx.send(embed=em)
        await ctx.send("You are Not Admin!")
        return
@bot.command(aliases=["ediwal"])
async def editwallet(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    guild = ctx.guild
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #$*,amount=None,*,amount=None,
    config = fileIO("config/config.json", "load")
    walletinfo = fileIO("wallets/wallets.json", "load")
    nameList = walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"]
    data5 = str(ctx.author.roles)
    if "GameMaster" in data5:
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        em = discord.Embed(description="```diff\n-What wallet would you like to edit?```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        text = str(answer1.content)
        print("text")
        print(text)
        if answer1.content in nameList:
            options = ["Yes","yes","YES","y","1","Y"]
            em1 = discord.Embed(description="```diff\n-{}``` to edit?\nWhat is the New Address?\n".format(text), color=discord.Color.blue())
            await ctx.send(embed=em1)
            def pred2(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred2)
            text1 = str(answer2.content)
            text1leng = len(text1)
            if text1leng >= 0:
                em2 = discord.Embed(description="```diff\n-{}```\n Change to\n ```{}``` ?\n\nYes-No?\n".format(text,text1), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"].remove(text)
                    walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"].append(text1)
                    #list.pop(walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"])
                    fileIO("wallets/wallets.json", "save", walletinfo)
                    print("safe edit member")
                    return
        else:
            em3 = discord.Embed(description="```diff\n- {}```\n Not in List".format(text), color=discord.Color.blue())
            await ctx.send(embed=em3)
            await showmemberlist(ctx)
    else:
        em = discord.Embed(description="```diff\n- You need to be GameMaster!!!```".format(), color=discord.Color.red())
        await ctx.send(embed=em)
        await ctx.send("You are Not Admin!")
        return
@bot.command(aliases=["addvar"])
async def addvariable(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message #userid
    guild = ctx.guild
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #binfo = fileIO("players/{}/info.json".format(userid), "load")
    #$*,amount=None,*,amount=None,
    data5 = str(ctx.author.roles)
    if "GameMaster" in data5:
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        em = discord.Embed(description="```diff\n-What Variable would you like to add?```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        VariableToadd = str(answer1.content)
        print("text")
        print(VariableToadd)
        info["variable"] = str(VariableToadd)
        if answer1.content != 0:
            print("answer bigger than 0")
            options = ["Yes","yes","YES","y","1","Y"]
            em1 = discord.Embed(description="```diff\n- {}``` Update Now\n\nYes-No?".format(VariableToadd), color=discord.Color.blue())
            await ctx.send(embed=em1)
            def pred2(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred2)
            variableNEW = str(answer2.content)
            if answer2.content in options:
                fileIO("players/{}/info.json".format(author.id), "save", info)
                info = fileIO("players/{}/info.json".format(author.id), "load")
                VariableToadd = info["variable"]
                info.update(VariableToadd)
                em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                await ctx.send(embed=em2)
                #binfo["name"] = variableNEW
                #binfo.update(VariableToadd)
                #info.delete(variableSelected)
                #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                fileIO("players/{}/info.json".format(author.id), "save", info)
                print("safe edit member")
                return
        else:
            em3 = discord.Embed(description="```diff\n- {}```\n Not in List".format(variableSelected), color=discord.Color.blue())
            await ctx.send(embed=em3)
            #await showmemberlist(ctx)
    else:
        em = discord.Embed(description="```diff\n- You need to be GameMaster!!!```".format(), color=discord.Color.red())
        await ctx.send(embed=em)
        await ctx.send("You are Not Admin!")
        return
@bot.command(aliases=["edius"])
async def edituser(ctx, userid="None"):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    guild = ctx.guild
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if userid == "None":
        em = discord.Embed(description="```diff\n-add the discord.id```".format(), color=discord.Color.red())
        await ctx.send(embed=em)
        return
    binfo = fileIO("players/{}/info.json".format(userid), "load")
    #$*,amount=None,*,amount=None,
    data5 = str(ctx.author.roles)
    if "GameMaster" in data5:
        print("contaon role is GameMaster!!!!!!!!!!!!!!!!!!")
        em = discord.Embed(description="```diff\n-What Variable would you like to edit? name, account , castle_channel , castle_guild_name , channel  , class, castle_name, pet_name\n```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        variableSelected = str(answer1.content)
        print("text")
        print(variableSelected)
        variableninINFO = ["name","account","castle_channel","castle_guild_name","channel","class","castle_name","pet_name"]
        if answer1.content in variableninINFO:
            print("anser in binfo")
            options = ["Yes","yes","YES","y","1","Y"]
            em1 = discord.Embed(description="```diff\n-{}``` to edit?\nWhat is NEW?\n".format(variableSelected), color=discord.Color.blue())
            await ctx.send(embed=em1)
            def pred2(m):
                return m.author == message.author and m.channel == message.channel
            answer2 = await bot.wait_for("message", check=pred2)
            variableNEW = str(answer2.content)
            if variableSelected == "name":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["name"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "acount":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["acount"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "castle_channel":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["castle_channel"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "castle_guild_name":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["castle_guild_name"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "channel":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["channel"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "class":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["class"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "castle_name":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["castle_name"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
            elif variableSelected == "pet_name":
                em2 = discord.Embed(description="```diff\n- {}```\n Change to\n ```diff\n\n+ {}```\n\nYes-No?\n".format(variableSelected,variableNEW), color=discord.Color.blue())
                await ctx.send(embed=em2)
                def pred3(m):
                    return m.author == message.author and m.channel == message.channel
                answer3 = await bot.wait_for("message", check=pred3)
                #text1 = str(answer3.content)
                if answer3.content in options:
                    em2 = discord.Embed(description="```diff\n+ It's Done!```".format(), color=discord.Color.green())
                    await ctx.send(embed=em2)
                    binfo["pet_name"] = variableNEW
                    #binfo.update(variableNEW)
                    #info.delete(variableSelected)
                    #binfo["({}.format(variableSelected))"] = binfo["({}.format(variableNEW))"]
                    fileIO("players/{}/info.json".format(userid), "save", binfo)
                    print("safe edit member")
                    return
        else:
            em3 = discord.Embed(description="```diff\n- {}```\n Not in List".format(variableSelected), color=discord.Color.blue())
            await ctx.send(embed=em3)
            await showmemberlist(ctx)
    else:
        em = discord.Embed(description="```diff\n- You need to be GameMaster!!!```".format(), color=discord.Color.red())
        await ctx.send(embed=em)
        await ctx.send("You are Not Admin!")
        return
@bot.command(aliases=["ches"])
async def chess(ctx, arg: str):
    #$*,amount=None,*,amount=None,
    await ctx.send("Let's ChessIT".format(Prefix))
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    response = requests.get('https://api.chess.com/pub/player/{}'.format(arg))
    response.json()
    data = response.json()
    #await ctx.send(" {} ".format(data))
    try:
        avatar = data["avatar"]
        print("avatar")
        print(avatar)
    except:
        print("not OK 1")
    try:
        player_id = data["player_id"]
        print("player_id")
        print(player_id)
    except:
        print("not OK 2")
    try:
        atid = data["@id"]
        print("id")
        print(atid)
    except:
       print("not OK 3")
    try:
        url = data["url"]
        print("url")
        print(url)
    except:
        print("not OK 4")
    try:
        username = data["username"]
        print("username")
        print(username)
    except:
        print("not OK 5")
    try:
        followers = data["followers"]
        print("followers")
        print(followers)
    except:
        print("not OK 6")
    try:
        country = data["country"]
        print("country")
        print(country)
    except:
        print("not OK 7")
    try:
        last_online1 = data["last_online"]
        last_online = datetime.datetime.fromtimestamp(last_online1).strftime('%c')
        print("last_online")
        print(last_online)
        print("last_online1")
        print(last_online1)
    except:
        print("not OK 8")
    try:
        joined1 = data["joined"]
        joined = datetime.datetime.fromtimestamp(joined1).strftime('%c')
        print("joined")
        print(joined)
        #await ctx.send(joined)
    except:
        print("aaa 2 ")
    try:
        status = data["status"]
        print("status")
        print(status)
    except:
        print("not OK 10")
    try:
        is_streamer = data["is_streamer"]
        print("is_streamer")
        print(is_streamer)
    except:
        print("not OK 11")
    try:
        print("Search")
        print(arg)
        responseOnline = requests.get('https://api.chess.com/pub/player/{}/stats'.format(arg))
        data1 = responseOnline.json()
        print("data 1stats11111111111gggggggggggggggggggggggggggggggg")
        print(data1)
        try:
            chess_rapid = data1["chess_rapid"]
            print("chess_rapid")
            print(chess_rapid)
            try:
                last = data1["chess_rapid"]["last"]
                print("last")
                print(last)
            except:
                print("chess_rapidaaa 222222")
            try:
                date = data1["chess_rapid"]["last"]["date"]
                print(" last rating   data")
                print(date)
                try:
                    joinedDate = datetime.datetime.fromtimestamp(date).strftime('%c')
                    print("joinedDate")
                    print(joinedDate)
                    date = joinedDate
                    ##########################################################################################################################################################
                    #await ctx.send(joined)
                except:
                    print("joineddDate Fail")
            except:
                print("date Fail chess rapid last date")
        #except:
        #    print("chess_rapidaaa 3333333 Next to go")
            try:
                rd = data1["chess_rapid"]["last"]["rd"]
                print("last  rating    rd")
                print(rd)
            except:
                print("chess_rapidaaa 44444")
            try:
                rating = data1["chess_rapid"]["best"]["rating"]### Funkt
                print(" last date   rating")
                print(rating)
            except:
                print("chess_rapidaaa 55555") ###funkt
            try:
                date1best = data1["chess_rapid"]["best"]["date"]
                print("best rating   date")
                print(date1best)
                try:
                    date = data1["chess_rapid"]["last"]["date"]
                    print(" last rating   data")
                    print(date)
                except:
                    print("date Fail chess rapidd last date  joinedDateBest")
                try:
                    joinedDateBest = datetime.datetime.fromtimestamp(date1best).strftime('%c')
                    print("joinedDateBest")
                    print(joinedDateBest)
                    date1best = joinedDateBest
                    ##########################################################################################################################################################
                    #await ctx.send(joined)
                except:
                    print("joinedDateBest Fail")
            except:
                print("date Fail chess rapidd last date  joinedDateBest")
                print("joinedDateBest 959595")
            try:
                gamebest = data1["chess_rapid"]["best"]["game"]### Funkt
                print("best date   game")
                print(gamebest)
            except:
                print("chess_rapidaaa 777777") ###funkt
            try:
                winrec = data1["chess_rapid"]["record"]["win"]### Funkt
                print("live game   win")
                print(winrec)
            except:
                print("chess_rapidaaa 888888") ###funkt
            try:
                lossrec = data1["chess_rapid"]["record"]["loss"]
                print("chess_rapid   loss")
                print(lossrec)
            except:
                print("chess_rapidaaa 9999999")
            try:
                drawrec = data1["chess_rapid"]["record"]["draw"]### Funkt
                print("live game   draw")
                print(drawrec)
            except:
                print("chess_rapidaaa aaaaa") ###funkt
            try:
                lastcb = data1["chess_bullet"]["last"]
                print("chess_bullet   last")
                print(lastcb)
            except:
                print("chess_rapidaaa  bbbbb")
            try:
                ratingcb = data1["chess_bullet"]["last"]["rating"]
                print("chess_bullet   rating")
                print(ratingcb)
            except:
                print("chess_rapidaaa ccccc")
            try:
                rdcb = data1["chess_bullet"]["last"]["rd"]
                print("chess_bullet   rd")
                print(rdcb)
            except:
                print("chess_rapidaaa 00000")
            gamecb = data1["chess_bullet"]["record"]["game"]
            print("chess_bullet   game")
            print(gamecb)
            try:
                gamecb = data1["chess_bullet"]["record"]["game"]
                print("chess_bullet                              game")
                print(gamecb)
            except:
                print("chess_rapidaaa 11111")
            try:
                wincb = data1["chess_bullet"]["record"]["win"]
                print("chess_bullet   win")
                print(wincb)
            except:
                print("chess_rapidaaa 22222")
            try:
                losscb = data1["chess_bullet"]["record"]["loss"]
                print("chess_bullet   loss")
                print(losscb)
            except:
                print("chess_rapidaaa 33333")
            try:
                drawcb = data1["chess_bullet"]["record"]["draw"]
                print("chess_bullet  draw")
                print(drawcb)
            except:
                print("chess_rapidaaa 44446")
        except:
            print("chess_rapidaaa ENDDENDDDNENDDDDNENENDDN")
        try:
            ratingh = data1["tactics"]["highest"]["rating"]
            print("highest  rating")
            print(ratingh)
        except:
            print("aaa 2")
        try:
            datah = data1["tactics"]["highest"]["date"]
            print("gametacticshighestdata2222")
            print(datah)
            try:
                joinedDateBestdatah = datetime.datetime.fromtimestamp(datah).strftime('%c')
                print("datah tactics highest date ")
                print(joinedDateBestdatah)
                datah = joinedDateBestdatah
                ########################################################################################################################################################
                #await ctx.send(joined)
            except:
                print("joinedDateBestdatah Fail")
        except:
            print("aaa 3")
        online = "Do not Known"
        print("Online END")
        try:
            ratingl = data1["tactics"]["lowest"]["rating"]
            print("tactics low rating")
            print(ratingl)
        except:
            print("aaa 4")
        try:
            datel = data1["tactics"]["lowest"]["date"]
            print("tactics low data")
            print(datel)
            try:
                joinedDateBestdatel = datetime.datetime.fromtimestamp(datel).strftime('%c')
                print("datel tactics highest date ")
                print(joinedDateBestdatel)
                datel = joinedDateBestdatel
                ########################################################################################################################################################
                #await ctx.send(joined)
            except:
                print("joinedDateBestdatel Fail")
        except:
            print("aaa 5")
        try:
            puzzle_rush = data1["puzzle_rush"]
            print("puzzle_rush")
            print(puzzle_rush)
        except:
            print("aaa 5")
        try:
            lessons = data1["lessons"]
            print("lessons")
            print(lessons)
        except:
            print("aaa 5")
        try:
            tactics = data1["tactics"]
            print("tactics")
            print(tactics)
        except:
            print("aaa 3")
        try:
            chess_rapid = data1["chess_rapid"]
            print("chess_rapid")
            print(chess_rapid)
        except:
            print("aaa tactics")
        try:
            chess_bullet = data1["chess_bullet"]
            print("chess_bullet")
            print(chess_bullet)
        except:
            print("aaa tactics")
            #online = "Do not Known"
            #print("Online END")
    except:
        print("aaa tactics")
    try:
        datecb = data1["chess_bullet"]["last"]["date"]
        print("chess_bullet   date")
        print(datecb)
        joinedDateBestdatecb = datetime.datetime.fromtimestamp(datecb).strftime('%c')
        print("joinedDateBestdatecb")
        print(joinedDateBestdatecb)
        datacb = joinedDateBestdatecb
    except:
        print("joinedDateBestdatecb Fail")
        #print("Online")
        #print(online)
    try:
        rdcb = data1["chess_bullet"]["last"]["rd"]
        print("chess_bullet   rd")
        print(rdcb)
    except:
        print("chess_rapidaaa 00000")
        gamecb = data1["chess_bullet"]["record"]["game"]
        print("chess_bullet   game")
        print(gamecb)
    try:
        gamecb = data1["chess_bullet"]["record"]["game"]
        print("chess_bullet                              game")
        print(gamecb)
    except:
        print("chess_rapidaaa 11111")
    try:
        wincb = data1["chess_bullet"]["record"]["win"]
        print("chess_bullet   win")
        print(wincb)
    except:
        print("chess_rapidaaa 22222")
    try:
        losscb = data1["chess_bullet"]["record"]["loss"]
        print("chess_bullet   loss")
        print(losscb)
    except:
        print("chess_rapidaaa 33333")
    try:
        drawcb = data1["chess_bullet"]["record"]["draw"]
        print("chess_bullet  draw")
        print(drawcb)
    except:
        print("chess_rapidaaa 44446")
    em4 = discord.Embed(title="Castle", description="```diff\n!===[{} Chess.com Stats]===!\n\nPlayer_id:\n {}\Online:\n {}\n\nURL:\n {}\n\nUserName: {}\nFollowers: {}\nCountry:\n {}\n\nLast_Online\n {}\n\n Joined:\n {}\n\n Status: {}\n Is_Streamer: {}\n```".format(arg, player_id, online, url, username, followers, country, last_online, joined, status, is_streamer), color=0x00ff00)
    em4.add_field(name="Name", value=username, inline=False)
    em4.add_field(name="Followers", value=followers, inline=False)
    em4.add_field(name="Country", value=country, inline=True)
    em4.add_field(name="Status", value=status, inline=True)
    em4.add_field(name="Last_Online", value=last_online, inline=True)
    em4.add_field(name="Streamer", value=is_streamer, inline=False)
    em4.add_field(name="Joined", value=joined, inline=True)
    em4.add_field(name="@id", value=atid, inline=True)
    em4.add_field(name="Page", value=url, inline=True)
    #em.add_field(name="URL", value=url, inline=True) em
    #em.set_image(url="url")
    em4.set_image(url="{}".format(avatar))
    await ctx.send(embed=em4)
    await ctx.send(" {} ".format(url))
    #em46mmmm = discord.Embed(title="chess_bullet", description="f\nLast:\n```{}```\nRating:\n ```{}```\n\Date:\n ```{}```\n\RD:```{}```\nRecord Game:\n ```{}```\nRecord Win:\n ```{}```\nRecord Lose:\n ```{}```\n Record Draw:\n ```{}```\n Joined:\n ```{}```\n".format(lastcb, ratingcb, datecb, rdcb, gamecb, wincb, losscb, drawcb, joined), color=0x00ff00)
    #await ctx.send(embed=em46mmmm)
    try:
        em45 = discord.Embed(title="chess_rapid", description="\nDate:\n ```{}```\nRD:\n ```{}```\nBest Rating:\n ```{}```\nBest Date:\n ```{}```\nBest Game: ```{}```\n\nWin\n ```{}```\nLose:\n ```{}```\nDraw:\n```{}```\n".format(joinedDate, rd, rating, date1best, gamebest, winrec, lossrec, drawrec), color=0x00ff00)
        await ctx.send(embed=em45)
    except:
        print("em chess_rapid Fail")
    try:
        em46 = discord.Embed(title="chess_bullet", description="\nRating:\n ```{}```\nDate:\n ```{}```\nRD:\n```{}```\nRecord Win:\n ```{}```\nRecord Lose:\n ```{}```\n Record Draw:\n ```{}```\n Joined:\n ```{}```\n".format(ratingcb, joinedDateBestdatecb, rdcb, wincb, losscb, drawcb, joined), color=0x00ff00)
        await ctx.send(embed=em46)
    except:
        print("em chess_bullet Fail")
    try:
        em477 = discord.Embed(title="tactics", description="\nHighest Rating:\n ```{}```\nhighest date:\n ```{}```\nLowest Rating:\n ```{}```\nLowsest Date:\n ```{}```\n".format(ratingh, datah, ratingl, datel), color=0x00ff00)
        await ctx.send(embed=em477)
    except:
        print("em tactics Fail")
    try:
        em447 = discord.Embed(title="puzzle_rush", description="\npuzzle_rush:\n ```{}```\n".format(puzzle_rush), color=0x00ff00)
        await ctx.send(embed=em447)
    except:
        print("em puzzle_rush Fail")
    try:
        em448 = discord.Embed(title="lessons", description="\nlessons:\n ```{}```\n".format(lessons), color=0x00ff00)
        await ctx.send(embed=em448)
    except:
        print("em lessons Fail")
    em44855 = discord.Embed(title="lessons", description="\nTurn after Turn:\n https://play.chess.com/vjPiw\n\nTurn after Turn:\n https://play.chess.com/SV9VE\n".format(lessons), color=0x00ff00)
    await ctx.send(embed=em44855)
    return
@bot.command(aliases=["pa"])
async def pay(ctx):
    print("pay")
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    try:
        info = fileIO("players/{}/info.json".format(author.id), "load")
        if info["race"] and info["class"] == "None":
            try:
                infofirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
            except:
                print("None of start")
    except:
        print("Tr Error NO DATA of start")
    streets_location = info["streets_location"]                         #   int
    streets_location_old_roll = info["streets_location_old_roll"]       #   str
    streets_check_pair = info["streets_check_pair"]                     #   int
    check_prison = info["streets_check_prison"]                         #   bol
    check_depts_bol = info["check_depts_bol"]                         #   bol
    check_depts_int = info["check_depts_int"]                         #   bol
    await _check_Depts_roll(ctx)
@bot.command(aliases=["ro"])
async def roll(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    #await _check_Depts_roll(ctx)
    try:
        info = fileIO("players/{}/info.json".format(author.id), "load")
        if info["race"] and info["class"] == "None":
            try:
                infofirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
            except:
                print("None of start")
    except:
        await ctx.send("<@{}> Welcome This is The Beginning of your Journey through the Infinity World of BoboPixel0x0\n please Select a Guild use {}start come back and enjoymon the Game".format(author.id, Prefix))
        embed = discord.Embed()
        embed.description = ("Please go to Verify Channel in Guild Server #verify and Write **{}start** to Verify your Wallet and get Role's! Invite_Link_1st! Select your Main Element <Rock> <Scissor> <Paper>! Please select the Channel to Start there!\n Each Castle Guild has its Own Level Rank and Drop Rates as well as Attack Advantage! PixelMinis NFTS Collection can be used as Charackter soon!\nBP0x0Poker is for Tabel Games with Giveaways\n\n \n\n[Rock_Invite_Link_1st](https://discord.gg/36gzxxF4Q8)\n\n[Scissor_Invite_Link_1st](https://discord.gg/gS46rQmHNg)\n \n[Paper_Invite_Link_1st](https://discord.gg/frtvfuhGJ9)\n\n[PixelMinisBastion](https://discord.gg/r2KDxQJuz6)\n\n\n- USE Invite Link 1st \n\n USE COMMAND {}start in the #verify channel on the Other Server!".format(Prefix,Prefix))
        await ctx.send(embed=embed)
        return
    streets_location = info["streets_location"]                         #   int
    streets_location_old_roll = info["streets_location_old_roll"]       #   str
    streets_check_pair = info["streets_check_pair"]                     #   int
    check_prison = info["streets_check_prison"]                         #   bol
    check_depts_bol = info["check_depts_bol"]                         #   bol
    check_depts_int = info["check_depts_int"]                         #   bol
    print("streets_location")
    print(streets_location)
    print("streets_location_old_roll")
    print(streets_location_old_roll)
    print("streets_check_pair")
    print(streets_check_pair)
    print("check_prison")
    print(check_prison)
    print("check_depts_bol")
    print(check_depts_bol)
    print("check_depts_int")
    print(check_depts_int)
    if check_depts_bol == False:
        print("False HERERe")
        await _check_Depts_roll(ctx)
    else:
        await _check_Depts_roll(ctx)
@bot.command(aliases=["bal2"]) #DEATH
async def bopi(ctx, user=None):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    #Database mit allen addrresen namen und wallets LOAD
    try:
        info = fileIO("players/{}/info.json".format(author.id), "load")
    except:
        print("Faild to loead Player wallteinfoT")
    try:
        bopiDict = info["bopiDict"]
        print("bopiDict = info bopiDict")
        print(bopiDict)
    except:
        print("sone Failed to see dict")
    try:
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
    except:
        print("Failed to send")
    try:
        print("Hi")
        # penguincoins  penguincoins  PIXEL@penguincoins
        # mdcryptonfts @ WOJAK
        bopiDict = info["bopiDict"]
        goldDict = info["goldDict"]
        bgoldDict = info["bgoldDict"]
        wgoldDict = info["wgoldDict"]
        bocoDict = info["bocoDict"]
        sciDict = info["sciDict"]
        rocDict = info["rocDict"]
        papDict = info["papDict"]
        stodDict = info["stodDict"]
        metDict = info["metDict"]
        wooDict = info["wooDict"]
        fooDict = info["fooDict"]
        peoDict = info["peoDict"]
        antDict = info["antDict"]
        deptDict = info["deptDict"]
        keyDict = info["keyDict"]
        waxDict = info["waxDict"]
        jsonData = json.dumps(bopiDict)
        requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response1 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= goldDict)
        response2 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bgoldDict)
        response3 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wgoldDict)
        response4 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bocoDict)
        response5 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= waxDict)
        response6 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= sciDict)
        response7 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= rocDict)
        response8 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= papDict)
        response9 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= stodDict)
        response10 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= metDict)
        response11 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wooDict)
        response12 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= fooDict)
        response13 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= peoDict)
        response14 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= antDict)
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= deptDict)
        response16 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= keyDict)
    except:
        print("Failt to lode MAX AMOUNT")
    try:
        print(" DDD ")
        print(" DDD ")
        print(" bopixbo ")
        print(response.json())
        print(" gold ")
        print(response1.json())
        print(" bopixbogold ")
        print(response2.json())
        print(" waxgold ")
        print(response3.json())
        print(" bobocoin ")
        print(response4.json())
        print(" wax ")
        print(response5.json())
        print(response6.json())
        print(response7.json())
        print(response8.json())
        print(response9.json())
        print(response10.json())
        print(response11.json())
        print(response12.json())
        print(response13.json())
        print(response14.json())
        print(response15.json())
        print("Thanks")
        bopidata = response.json()
        goldata = response1.json()
        bgolddata = response2.json()
        wgolddata = response3.json()
        bocodata = response4.json()
        waxdata = response5.json()
        scidata = response6.json()
        rocdata = response7.json()
        papdata = response8.json()
        stoddata = response9.json()
        metdata = response10.json()
        woodata = response11.json()
        foodata = response12.json()
        peodata = response13.json()
        antdata = response14.json()
        deptdata = response15.json()
        keydata = response16.json()
        print(bopidata)
        em = discord.Embed(description="```diff\n+>>>{}<<<Balances>>>\n```\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}```\n ```".format(info["name"],bopidata,goldata,bgolddata,wgolddata,bocodata,waxdata,scidata,rocdata,rocdata,papdata,stoddata,metdata,woodata,foodata,peodata,antdata,deptdata,keydata), color=discord.Color.red())
        await ctx.send(embed=em)
    except:
        print("No Balance")
@bot.command(aliases=["coll"])
async def collab(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    #$*,amount=None,*,amount=None,
    #config = fileIO("config/config.json", "load")
    #walletinfo = fileIO("wallets/wallets.json", "load")
    #cinfo = fileIO("global/info.json", "load")
    #walleto = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    #info = fileIO("players/{}/info.json".format(author.id), "load")
    #nameList = walletinfo["Wallets"]["Response"]["Names_whitelist"]["Name"]
    #walletList = walletinfo["Wallets"]["Response"]["Names_whitelist"]["whitelist"]
    em = discord.Embed(description="```diff\n+>>>{}<<<Balances>>>\n```\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}```\n ```".format(info["name"],bopidata,goldata,bgolddata,wgolddata,bocodata,waxdata,scidata,rocdata,rocdata,papdata,stoddata,metdata,woodata,foodata,peodata,antdata,deptdata,keydata), color=discord.Color.red())
    await ctx.send(embed=em)
    #if info["race"] and info["class"] == "None":
    #    await ctx.send("Please start your character using `{}start`".format(Prefix))
    #    return
    await _check_tokensCOLLAB(ctx)
@bot.command(aliases=["bal1"]) #DEATH
async def meister(ctx):
    #$*,amount=None,*,amount=None,
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    try:
        info = fileIO("players/{}/info.json".format(author.id), "load")
    except:
        print("Faild to loead Player wallteinfoT")
    try:
        bopiDict = info["bopiDict"]
        print("bopiDict = info bopiDict")
        print(bopiDict)
    except:
        print("sone Failed to see dict")
    try:
        print("Hi")
        # penguincoins  penguincoins  PIXEL@penguincoins
        # mdcryptonfts @ WOJAK
        bopiDict = info["bopiDict"]
        goldDict = info["goldDict"]
        bgoldDict = info["bgoldDict"]
        wgoldDict = info["wgoldDict"]
        bocoDict = info["bocoDict"]
        sciDict = info["sciDict"]
        rocDict = info["rocDict"]
        papDict = info["papDict"]
        stodDict = info["stodDict"]
        metDict = info["metDict"]
        wooDict = info["wooDict"]
        fooDict = info["fooDict"]
        peoDict = info["peoDict"]
        antDict = info["antDict"]
        deptDict = info["deptDict"]
        keyDict = info["keyDict"]
        waxDict = info["waxDict"]
        jsonData = json.dumps(bopiDict)
        requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response1 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= goldDict)
        response2 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bgoldDict)
        response3 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wgoldDict)
        response4 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bocoDict)
        response5 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= waxDict)
        response6 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= sciDict)
        response7 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= rocDict)
        response8 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= papDict)
        response9 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= stodDict)
        response10 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= metDict)
        response11 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wooDict)
        response12 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= fooDict)
        response13 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= peoDict)
        response14 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= antDict)
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= deptDict)
        response16 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= keyDict)
    except:
        print("Failt to lode MAX AMOUNT")
    try:
        print(" DDD ")
        print(" DDD ")
        print(" bopixbo ")
        print(response.json())
        print(" gold ")
        print(response1.json())
        print(" bopixbogold ")
        print(response2.json())
        print(" waxgold ")
        print(response3.json())
        print(" bobocoin ")
        print(response4.json())
        print(" wax ")
        print(response5.json())
        print(response6.json())
        print(response7.json())
        print(response8.json())
        print(response9.json())
        print(response10.json())
        print(response11.json())
        print(response12.json())
        print(response13.json())
        print(response14.json())
        print(response15.json())
        print("Thanks")
        bopidata = response.json()
        goldata = response1.json()
        bgolddata = response2.json()
        wgolddata = response3.json()
        bocodata = response4.json()
        waxdata = response5.json()
        scidata = response6.json()
        rocdata = response7.json()
        papdata = response8.json()
        stoddata = response9.json()
        metdata = response10.json()
        woodata = response11.json()
        foodata = response12.json()
        peodata = response13.json()
        antdata = response14.json()
        deptdata = response15.json()
        keydata = response16.json()
        print(bopidata)
        em = discord.Embed(description="```diff\n+>>>{}<<<Balances>>>\n```\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}```\n ```".format(info["name"],bopidata,goldata,bgolddata,wgolddata,bocodata,waxdata,scidata,rocdata,rocdata,papdata,stoddata,metdata,woodata,foodata,peodata,antdata,deptdata,keydata), color=discord.Color.red())
        await ctx.send(embed=em)
    except:
        print("No Balance")
@heal.error # Name of the command + .error
async def heal_error(ctx, error):
    # Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("You need to ping someone with @\n example:\n `{}heal @bobtherobot`".format(Prefix))
@skill.error # Name of the command + .error
async def skill_error(ctx, error):
    #Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("You need to ping someone with @\n example:\n `{}skill | {}s @bobtherobot`".format(Prefix,Prefix))
@attack.error # Name of the command + .error
async def attack_error(ctx, error):
    #Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("You need to ping someone with @\n example:\n `{}attack | {}a @bobtherobot`".format(Prefix,Prefix))
@steal.error # Name of the command + .error
async def steal_error(ctx, error):
    # Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("You need to ping someone with @\n example:\n `{}steal | {}s @bobtherobot`".format(Prefix,Prefix))
    elif isinstance(error, commands.CommandInvokeError):
        # Send something
        await ctx.send("Try the Command Again something whent wrong!!\n `{}steal | {}s @bobtherobot`".format(Prefix,Prefix))
@search.error # Name of the command + .error
async def search_error(ctx, error):
    # Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("You need to ping someone with @\n example:\n `{}search | {}look @bobtherobot`".format(Prefix,Prefix))
@code.error # Name of the command + .error
async def code_error(ctx, error):
    # Checking the type of the error
    #if isinstance(error, commands.CommandInvokeError):
        # Send something
        # await ctx.send("Something is Wrong with the Internet Please Try again!\n If the Error stay please leave\n The API is not able to handle your request!\n The Net is Full\n".format())
    # Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("You need to enter the Code from the NFT in your wallet!\n USE COMMAND \n {}code <NFTS above BP0x0_270 code on details on NFT>\n example: {}code 10001270 ".format(Prefix,Prefix))
@attack.error # Name of the command + .error
async def help_error(ctx, error):
    # Checking the type of the error
    if isinstance(error, commands.MissingRequiredArgument):
        # Send something
        await ctx.send("Use Prefix {} @\n example:\n `{}fight | {}f @bobtherobot`".format(Prefix, Prefix,Prefix))
async def _ran(ctx):
    # await ran(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #print("Checking LINK LIST")
    infoLINK = fileIO("links/links.json", "load")
    random1_10 = random.randint(0, 26)
    if random1_10 == 13:
        await _check_LINK(ctx)
        return
    else:
        await ctx.send("NO NFTS! No Luck this (t)ime!")
        #print("Nothing")
        #print(random1_10)
        return
async def _check_LINK(ctx):#DEATH
    #calc all stats MAX TOKEN BALANCE#
    #await _check_LINK(ctx):
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #print("Checking LINK LIST")
    infoLINK = fileIO("links/links.json", "load")
    print("====================================")
    print("===============START=====================")
    print("====================================")
    try:
        print("Checking LINK LIST")
        infoLINK = fileIO("links/links.json", "load")
        #print("infoLINK")
        #print(infoLINK)
    except:
        print("FAiled to lode LIST")
    set10_checked = infoLINK["Wallets"]["Response"]["set10"]["checked"]
    set10_num = infoLINK["Wallets"]["Response"]["set10"]["num"]
    print("====================================")
    print("set10_checked")
    print(set10_checked)
    print("set10_num")
    print(set10_num)
    print("====================================")
    if set10_num >= 2:
        print("set10_num >= 1 Set to True!!!!!!!!!!!!!")
        infoLINK["Wallets"]["Response"]["set10"]["checked"] = "True"
    # infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
    if set10_checked == "True":
        print("set10_checked True!!!!!!!!!! Return")
        print("====================================")
        print("==============Retrun END======================")
        print("====================================")
        return
    try:
        print("Checking RandomNumber")
        random1_10 = random.randint(0, 13)
        print("random1_10")
        print(random1_10)
        if random1_10 == 0:
            random1_10 = "z0"
        if random1_10 == 1:
            random1_10 = "o1"
        if random1_10 == 2:
            random1_10 = "t2"
        if random1_10 == 3:
            random1_10 = "t3"
        if random1_10 == 4:
            random1_10 = "f4"
        if random1_10 == 5:
            random1_10 = "f5"
        if random1_10 == 6:
            random1_10 = "s6"
        if random1_10 == 7:
            random1_10 = "s7"
        if random1_10 == 8:
            random1_10 = "e8"
        if random1_10 == 9:
            random1_10 = "n9"
        if random1_10 == 10:
            random1_10 = "t10"
        if random1_10 >= 10:
            random1_10 = "e11"
        print("random1_10")
        print(random1_10)
    except:
        print("FAiled to lode Random111")
    try: # 0-10 Links
        if random1_10 == "z0":
            print("=================0===================")
            print("random 0")
            #print(infoLINK)
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            print("aaa")
            print(aaa)
            if aaa == "True":
                print("check 0 True jump Next")
                await _check_LINK(ctx)
            else:
                link_0 = infoLINK["Wallets"]["Response"][random1_10]["link"]
                print("LINK")
                print(link_0)
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
                print("==============0End======================")
        if random1_10 == "o1":
            print("=================1===================")
            print("random 1")
            #print(infoLINK)
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            print("aaa")
            print(aaa)
            if aaa == "True":
                print("check 1 True jump Next")
                await _check_LINK(ctx)
            else:
                link_0 = infoLINK["Wallets"]["Response"][random1_10]["link"]
                print("LINK")
                print(link_0)
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
                print("==============1End======================")
        if random1_10 == "t2":
            print("=================2===================")
            print("random 2")
            #print(infoLINK)
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            print("aaa")
            print(aaa)
            if aaa == "True":
                print("check 2 True jump Next")
                await _check_LINK(ctx)
            else:
                link_0 = infoLINK["Wallets"]["Response"][random1_10]["link"]
                print("LINK")
                print(link_0)
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
                print("==============2End======================")
        if random1_10 == "t3":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            print("aaa")
            print(aaa)
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "f4":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "f5":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "s6":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "s7":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "e8":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "n9":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "t10":
            aaa = infoLINK["Wallets"]["Response"][random1_10]["checked"]
            if aaa == "True":
                await _check_LINK(ctx)
            else:
                linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
                em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
                await ctx.send(embed=em)
                infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
                #infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
                fileIO("links/links.json", "save", infoLINK)
        if random1_10 == "e11":
            linkk = infoLINK["Wallets"]["Response"][random1_10]["link"]
            em = discord.Embed(description="**Congratulations!!**\n`{}`\n\n".format(linkk), color=discord.Color.blue())
            await ctx.send(embed=em)
            infoLINK["Wallets"]["Response"]["set10"]["num"] += 1
            infoLINK["Wallets"]["Response"][random1_10]["checked"] = "True"
            fileIO("links/links.json", "save", infoLINK)
        print("====================================")
        print("====================================")
    except:
        print("hi FAIL")
        print(random1_10)
    return
async def _chessOnline(ctx):
    await _chessOnline(ctx)
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["account"] == "None":
        return
    #else:
        #info["inhavenft_status"] = "true"
    if info["inhavenft_status"] == False:
        #await ctx.send("You have not set up a Wallet yet!\n- USE COMMAND:\n !setwallet <your WAXP Wallet Address HERE> \n To Enjoy Even more of BP0x0!\n+ If you Totally NEW give me A sign in Chat I SEE YOU!")
        em = discord.Embed(description="```diff\n You have not set up a Wallet yet!\n- USE COMMAND:\n {}setwallet <your WAXP Wallet Address HERE> \n To Enjoy Even more of BP0x0!\n+ If you Totally NEW\n+ give me A sign in Chat I SEE YOU!```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    else:
        is_online = data["is_online"]
async def _chess1(ctx):
    await _chess(ctx)
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["account"] == "None":
        return
    #else:
        #info["inhavenft_status"] = "true"
    if info["inhavenft_status"] == False:
        #await ctx.send("You have not set up a Wallet yet!\n- USE COMMAND:\n !setwallet <your WAXP Wallet Address HERE> \n To Enjoy Even more of BP0x0!\n+ If you Totally NEW give me A sign in Chat I SEE YOU!")
        em = discord.Embed(description="```diff\n You have not set up a Wallet yet!\n- USE COMMAND:\n {}setwallet <your WAXP Wallet Address HERE> \n To Enjoy Even more of BP0x0!\n+ If you Totally NEW\n+ give me A sign in Chat I SEE YOU!```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    else:
        try:
            author = ctx.author
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp0, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            bbvalue = int(assets) * 1
            info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
            info["account"] = account
            info["bp0"] = int(assets)
            info["successCheck"] = success
            info["setdone"] = 1
            info["bpv0"] = bbvalue
            fileIO("players/{}/info.json".format(author.id), "save", info)
            await ctx.send("You have {} BP0x0-0!".format(assets))
            await _check_wallet1(ctx)
        except IndexError:
            pass
            await ctx.send("You DO NOT have ANY BP0x0-0!")
            await _check_wallet1(ctx)
            return
        except :
            em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix), color=discord.Color.blue())
            await ctx.send(embed=em)
            pass
async def _check_guess(ctx):
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    name = info["name"]
    checkguess = int(info["check_guess"])
    versuch = int(info["try_guess100"])
    #info["number_guess100"] = number_to_guess
    bet = int(info["bet_guess100"])
    number_to_guess = int(info["number_guess100"])
    boco = info["boco"]
    em = discord.Embed(description="```diff\n What Number do I Think OF?\n\n- Note:\n anything else than a number End the Game.\n no Money BAck!.```".format(), color=discord.Color.green())
    await ctx.send(embed=em)
    while int(versuch) <= 10:
        if int(versuch) > 11:
            em = discord.Embed(description="```diff\n Ten in a Row!\n Number_to_Guess was {} Soooo Close\n This is your {} BoboCoin Balance\n.```".format(versuch, boco), color=discord.Color.red())
            await ctx.send(embed=em)
            info["number_guess100"] = 0
            info["bet_guess100"] = 0
            info["try_guess100"] = 0
            fileIO("players/{}/info.json".format(author.id), "save", info)
            return
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        try:
            ans = int(answer1.content)
        except ValueError:
            em = discord.Embed(description="```diff\n What Is the Number?\n A Number Between:\n 1 and 100 \n\n You Put Something else than a Number!\n- Lost your bet!\n\n```".format(), color=discord.Color.red())
            await ctx.send(embed=em)
            info["number_guess100"] = 0
            info["bet_guess100"] = 0
            info["try_guess100"] = 0
            fileIO("players/{}/info.json".format(author.id), "save", info)
            return
        if int(answer1.content) > 0 and int(answer1.content) < 101 :
            if int(answer1.content) == "{}guess100".format(Prefix):
                return
            if int(answer1.content) >= 0 and  int(answer1.content) <= 101 :
                if int(answer1.content) < int(number_to_guess):
                    versuch + 1
                    info["try_guess100"] = info["try_guess100"] +1
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em = discord.Embed(description="```diff\n Number is Grader!\n This is you {}.try!```".format(versuch), color=discord.Color.red())
                    await ctx.send(embed=em)
                    return await _check_guess(ctx)
                if int(answer1.content) > int(number_to_guess):
                    versuch + 1
                    info["try_guess100"] = info["try_guess100"] +1
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em = discord.Embed(description="```diff\n Number is Lower!\n This is you {}.try!```".format(versuch), color=discord.Color.red())
                    await ctx.send(embed=em)
                    return await _check_guess(ctx)
                if int(answer1.content) == int(number_to_guess) :
                    versuch + 1
                    em = discord.Embed(description="```diff\n+ Number {}\n\n+ Is Correct!\n\n+ You Win!\n```".format(answer1.content), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    #await ctx.send(versuch)
                    info["try_guess100"] = info["try_guess100"] +1
                    info["skexp"] = info["skexp"] +100
                    if versuch == 1:
                        betbet = bet * 512
                    elif versuch == 2:
                        betbet = bet * 256
                    elif versuch == 3:
                        betbet = bet * 128
                    elif versuch == 4:
                        betbet = bet * 64
                    elif versuch == 5:
                        betbet = bet * 32
                    elif versuch == 6:
                        betbet = bet * 16
                    elif versuch == 7:
                        betbet = bet * 8
                    elif versuch == 8:
                        betbet = bet * 4
                    elif versuch == 9:
                        betbet = bet * 2
                    elif versuch == 10:
                        betbet = bet * 1
                    elif versuch == 11:
                        em = discord.Embed(description="```diff\n- {} You Lose the game start again!```".format(name), color=discord.Color.green())
                    bocoafter = info["boco"]  + betbet
                    info["try_guess100"] = 0
                    info["boco"] = info["boco"] + betbet
                    bocoafter = info["boco"]
                    info["try_guess100"] = 0
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    em = discord.Embed(description="```diff\n {} You got the Number Right on the {}.Try \n You Won {}. BoboCoins. and have now\n Bobocoins:\n {}```".format(name, versuch, betbet, bocoafter), color=discord.Color.green())
                    await ctx.send(embed=em)
                    return
            elif int(versuch) >= 10:
                em = discord.Embed(description="```diff\n Ten in a Row!\n Number_to_Guess was {} Soooo Close\n This is your {} BoboCoin Balance\n.```".format(versuch, boco), color=discord.Color.red())
                await ctx.send(embed=em)
                return
            elif answer1.content == "n" or answer1.content == "N" or answer1.content == "no" or answer1.content == "No":
                await ctx.send("Ok then.")
        else:
            em = discord.Embed(description="```diff\n What Is the Number?\n A Number Between:\n 1 and 100 \n\n You Put Something else than a Number!\n- Lost your bet!\n\n Nymber to guess was {}```".format(number_to_guess), color=discord.Color.red())
            await ctx.send(embed=em)
    else:
        em = discord.Embed(description="```diff\n What Is the Number?\n A Number Between:\n 1 and 100 \n\n You Put Something else than a Number!\n- Lost your bet!\n\n Nymber to guess was {}```".format(number_to_guess), color=discord.Color.red())
        await ctx.send(embed=em)
        info["number_guess100"] = 0
        info["bet_guess100"] = 0
        info["try_guess100"] = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return
async def _check_setItems(ctx):
    #calc all stats#
    #await _check_setItems(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    info = fileIO("players/{}/info.json".format(author.id), "load")
    bp0_slot = info["zslot_0_inventory"]
    bp1_slot = info["zslot_1_inventory"]
    bp2_slot = info["zslot_2_inventory"]
    bp3_slot = info["zslot_3_inventory"]
    bp4_slot = info["zslot_4_inventory"]
    bp5_slot = info["zslot_5_inventory"]
    bp6_slot = info["zslot_6_inventory"]
    bp7_slot = info["zslot_7_inventory"]
    bp8_slot = info["zslot_8_inventory"]
    bp9_slot = info["zslot_9_inventory"]
    bp10_slot = info["zslot_10_inventory"]
    bp11_slot = info["zslot_11_inventory"]
    bp12_slot = info["zslot_12_inventory"]
    bp13_slot = info["zslot_13_inventory"]
    bp14_slot = info["zslot_14_inventory"]
    bp15_slot = info["zslot_15_inventory"]
    bp16_slot = info["zslot_16_inventory"]
    bp17_slot = info["zslot_17_inventory"]
    bp18_slot = info["zslot_18_inventory"]
    bp19_slot = info["zslot_19_inventory"]
    bp20_slot = info["zslot_20_inventory"]
    bp21_slot = info["zslot_21_inventory"]
    bp22_slot = info["zslot_22_inventory"]
    bp23_slot = info["zslot_23_inventory"]
    bp24_slot = info["zslot_24_inventory"]
    bp25_slot = info["zslot_25_inventory"]
    if bp0_slot == "None" or bp0_slot == []:
        print("bp0_slot Emty!")
    else:
        newitemname = info["zslot_0_inventory"]
        print("bp0_slot Not Emty!!!")
    fileIO("players/{}/info.json".format(author.id), "save", info)
async def _check_channelauthormembermessage(ctx):
    #await _check_channelauthormembermessage(ctx)
    try:
        channel = ctx.channel
        author = ctx.author
        member = ctx.message.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        # account = data["data"][0]["account"]
        # assets = data["data"][0]["assets"]
        # boco = info["boco"]
        # setdone = info["setdone"]
        #account = data["account"]
        castle_name = info["castle_name"]
        print("[==============================print(channel)===============================================]")
        print(channel)
        print("[=============================================================================]")
        print("[==============================print(author)===============================================]")
        print(author)
        print("[=============================================================================]")
        print("[==============================print(member)===============================================]")
        print(member)
        print("[=============================================================================]")
        print("[==============================print(message)===============================================]")
        print(message)
        print("[=============================================================================]")
        await ctx.send(f'{member}! is now Verifide Hurry.')
        guild = ctx.message.guild
        cat = discord.utils.get(ctx.guild.categories, name="NFT_Owner") # guild id  944205801814384710 NFT_Owner
        print("castle_name")
        print(castle_name)
        print("guild")
        print(guild)
        print("cat")
        print(cat)
        channel = await guild.create_text_channel("'{}'".format(castle_name), category=cat)
        #@client.command()
                    #async def create(s, arg: str):
                    #   guild = s.message.guild
                    #   cat = discord.utils.get(s.guild.categories, name="FORUM")
                    #   channel = await guild.create_text_channel(arg, category=cat)
        #info["successCheck"] = success
        #info["WalletSetupDone"] = 2
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        #await ctx.send("```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}".format(author, account, assets, info["boco"], success))
        return
    except IndexError:
        pass
        print("!set ""_check_channelauthormembermessage"" !")
        return
async def _check_code(ctx):
    #calc all stats#
    #await _check_code(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    info = fileIO("players/{}/info.json".format(author.id), "load")
    assets = info["assets_to_add"]
    code = info["code"]
    if assets >= "0":
        print("Assets over 1 CheckCODE")
        if assets >= "0" and code == "56373":
            info["bprpg_56373"] = int(assets)
            code = "56373"
            material = "nftb"
            print("CODE")
            print(code)
        if assets >= "0" and code == "66928":
            info["bp0x0_6"] = int(assets)
            code = "66928"
            print("CODEpass")
            print(code)
        if assets >= "0" and code == "155025":
            info["bpccc"] = int(assets)
            info["check_ccc"] = 2
            code = "155025"
            material = "nftb"
            print("CODEpass")
            print(code)
        if assets >= "0" and code == "154962":
            info["bpjacktick"] = int(assets)
            info["check_ccc"] = int(2)
            code = "154962"
            material = "nftb"
            print("CODEpassjack")
            print(code)
        if assets >= "0" and code == "65287":
            print("bprpg_65287 over Assets")
            info["bprpg_65287"] = assets
        if assets >= "0" and code == "441295":
            info["bprpg_270"] = assets
        if assets >= "0" and code == "441296":
            info["bprpg_271"] = assets
        if assets >= "0" and code == "441297":
            info["bprpg_272"] = assets
        if assets >= "0" and code == "441298":
            info["bprpg_273"] = assets
        if assets >= "0" and code == "441301":
            info["bprpg_274"] = assets
        if assets >= "0" and code == "441302":
            info["bprpg_275"] = assets
        if assets >= "0" and code == "441303":
            info["bprpg_276"] = assets
        if assets >= "0" and code == "441304":
            info["bprpg_277"] = assets
        if assets >= "0" and code == "441305":
            info["bprpg_278"] = assets
        if assets >= "0" and code == "441306":
            info["bprpg_279"] = assets
        if assets >= "0" and code == "441308":
            info["bprpg_280"] = assets
        if assets >= "0" and code == "441309":
            info["bprpg_281"] = assets
        if assets >= "0" and code == "441310":
            info["bprpg_282"] = assets
        if assets >= "0" and code == "441312":
            info["bprpg_283"] = assets
        if assets >= "0" and code == "441313":
            info["bprpg_284"] = assets
        if assets >= "0" and code == "441315":
            info["bprpg_285"] = assets
        if assets >= "0" and code == "441316":
            info["bprpg_286"] = assets
        if assets >= "0" and code == "441317":
            info["bprpg_287"] = assets
        if assets >= "0" and code == "441318":
            info["bprpg_288"] = assets
        if assets >= "0" and code == "441319":
            info["bprpg_289"] = assets
        if assets >= "0" and code == "441323":
            info["bprpg_290"] = assets
        if assets >= "0" and code == "441324":
            info["bprpg_291"] = assets
        if assets >= "0" and code == "441325":
            info["bprpg_292"] = assets
        if assets >= "0" and code == "441326":
            info["bprpg_293"] = assets
        if assets >= "0" and code == "441327":
            info["bprpg_294"] = assets
        if assets >= "0" and code == "441355":
            info["bprpg_295"] = assets
        if assets >= "0" and code == "441356":
            info["bprpg_296"] = assets
        if assets >= "0" and code == "441357":
            info["bprpg_297"] = assets
        if assets >= "0" and code == "441358":
            info["bprpg_298"] = assets
        if assets >= "0" and code == "441359":
            info["bprpg_299"] = assets
        if assets >= "0" and code == "441360":
            info["bprpg_300"] = assets
        if assets >= "0" and code == "441361":
            info["bprpg_301"] = assets
        if assets >= "0" and code == "441362":
            info["bprpg_302"] = assets
        if assets >= "0" and code == "441363":
            info["bprpg_303"] = assets
        if assets >= "0" and code == "441364":
            info["bprpg_304"] = assets
        if assets >= "0" and code == "441365":
            info["bprpg_305"] = assets
        if assets >= "0" and code == "441366":
            info["bprpg_306"] = assets
        if assets >= "0" and code == "441367":
            info["bprpg_307"] = assets
        if assets >= "0" and code == "441368":
            info["bprpg_308"] = assets
        if assets >= "0" and code == "441369":
            info["bprpg_309"] = assets
        if assets >= "0" and code == "441370":
            info["bprpg_310"] = assets
        if assets >= "0" and code == "441371":
            info["bprpg_311"] = assets
        if assets >= "0" and code == "441372":
            info["bprpg_312"] = assets
        if assets >= "0" and code == "441373":
            info["bprpg_313"] = assets
        if assets >= "0" and code == "441374":
            info["bprpg_314"] = assets
        if assets >= "0" and code == "441375":
            info["bprpg_315"] = assets
        if assets >= "0" and code == "442946":
            info["bprpg_316"] = assets
        if assets >= "0" and code == "442947":
            info["bprpg_317"] = assets
        if assets >= "0" and code == "442948":
            info["bprpg_318"] = assets
        if assets >= "0" and code == "442949":
            info["bprpg_319"] = assets
        if assets >= "0" and code == "442950":
            info["bprpg_320"] = assets
        if assets >= "0" and code == "442951":
            info["bprpg_321"] = assets
        if assets >= "0" and code == "442952":
            info["bprpg_322"] = assets
        if assets >= "0" and code == "442953":
            info["bprpg_323"] = assets
        if assets >= "0" and code == "442954":
            info["bprpg_324"] = assets
        if assets >= "0" and code == "442955":
            info["bprpg_325"] = assets
        if assets >= "0" and code == "442956":
            info["bprpg_326"] = assets
        if assets >= "0" and code == "442957":
            info["bprpg_327"] = assets
        if assets >= "0" and code == "442958":
            info["bprpg_328"] = assets
        if assets >= "0" and code == "442960":
            info["bprpg_329"] = assets
        if assets >= "0" and code == "442959":
            info["bprpg_330"] = assets
        if assets >= "0" and code == "442961":
            info["bprpg_331"] = assets
        if assets >= "0" and code == "442962":
            info["bprpg_332"] = assets
        if assets >= "0" and code == "442965":
            info["bprpg_333"] = assets
        if assets >= "0" and code == "442963":
            info["bprpg_334"] = assets
        if assets >= "0" and code == "442964" : # or code == int(442964) or code == 442964 or code == "40004335"  or code == int(40004335) or code == 40004335 :
            print("CODEin code nft up 442964")
            print(code)
            info["bprpg_335"] = assets
            code = "442964"
            material = "Castle"
            print("CODE")
            print(code)
        if assets >= "0" and code == "442966":
            info["bprpg_336"] = assets
        if assets >= "0" and code == "442967":
            info["bprpg_337"] = assets
        if assets >= "0" and code == "442968":
            info["bprpg_338"] = assets
        if assets >= "0" and code == "442969":
            info["bprpg_339"] = assets
        if assets >= "0" and code == "442970":
            info["bprpg_340"] = assets
        if assets >= "0" and code == "442971":
            info["bprpg_341"] = assets
        if assets >= "0" and code == "442977":
            info["bprpg_342"] = assets
        if assets >= "0" and code == "442978":
            info["bprpg_343"] = assets
        if assets >= "0" and code == "442979":
            info["bprpg_344"] = assets
        if assets >= "0" and code == "442980":
            info["bprpg_345"] = assets
        if assets >= "0" and code == "442981":
            info["bprpg_346"] = assets
        if assets >= "0" and code == "442982":
            info["bprpg_347"] = assets
        if assets >= "0" and code == "442983":
            info["bprpg_348"] = assets
        if assets >= "0" and code == "442984":
            info["bprpg_349"] = assets
        if assets >= "0" and code == "442985":
            info["bprpg_350"] = assets
        if assets >= "0" and code == "442986":
            info["bprpg_351"] = assets
        if assets >= "0" and code == "442987":
            info["bprpg_352"] = assets
        if assets >= "0" and code <= "442988":
            info["bprpg_353"] = assets
        if assets >= "0" and code == "442989":
            info["bprpg_354"] = assets
        if assets >= "0" and code == "451641": #BOX
            info["bprpg_361"] = assets
        if assets >= "0" and code == "451640":
            info["bprpg_360"] = assets
        if assets >= "0" and code == "451639":
            info["bprpg_359"] = assets
        if assets >= "0" and code == "451638":
            info["bprpg_358"] = assets
        if assets >= "0" and code == "451636":
            info["bprpg_357"] = assets
        if assets >= "0" and code == "451635":
            info["bprpg_356"] = assets
        if assets >= "0" and code == "451634":
            info["bprpg_355"] = assets
        if assets >= "0" and code == "441360": #OVEN
            info["bprpg_300"] = assets
        if assets >= "0" and code == "510836": #ROLL
            info["bprpg_394"] = assets
        if assets >= "0" and code == "510837":
            info["bprpg_395"] = assets
        if assets >= "0" and code == "510838":
            info["bprpg_396"] = assets
        if assets >= "0" and code <= "510840":
            info["bprpg_398"] = assets
        if assets >= "0" and code == "510839": #ROLL
            info["bprpg_397"] = assets
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("save add assets   check_code")
        print("check_ccc")
        print(info["check_ccc"])
async def _check_set(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&page=1&limit=100&order=descm'.format(account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        boco = info["boco"]
        setdone = info["setdone"]
        #account = data["account"]
        print(account)
        print(assets)
        print(success)
        await ctx.send(f'{account}! is now Verifide Hurry.')
        info["account"] = account
        info["assets"] = assets
        info["successCheck"] = success
        info["WalletSetupDone"] = 2
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}".format(author, account, assets, info["boco"], success))
        return
    except IndexError:
        pass
        await ctx.send("You do not Own that NFT!")
        return
async def _check_set2(ctx):
    ###ara0x0xr0 = info["castle_army_rock"]
    try:
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        ara0x0xr0 = info["castle_army_rock"]
        ara0x0xp0 = info["castle_army_paper"]
        ara0x0xs0 = info["castle_army_scissor"]
        castlelvl = info["castle_lvl"]
        araa0x0t0 = info["castle_army_total"]
        allattack = info["castle_all_attack"]
        print("araa0x0t01")
        print(araa0x0t0)
        print(ara0x0xr0)
        print(ara0x0xp0)
        print(ara0x0xs0)
    except:
        pass
async def _check_set3(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n! count_win: {}!\n- count_lose: {}\n= count_played: {}\n# count_played: {}\n?```".format(count_win, count_lose, count_played, count_draw, count_played))
    except IndexError:
        pass
        await ctx.send("!set ""YOUR WALLETSet3"" !")
async def _check_set4(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        #response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&page=1&limit=100&order=descm'.format(account))
        #response.json()
        #data = response.json()
        ##
        #
        #
        #Calculate##
        ##
        #
        ##
        ##
        count_win = info["count_win"]
        count_lose = info["count_lose"]
        count_played = info["count_played"]
        count_draw = info["count_draw"]
        box_stone = info["box_stone"]
        box_wood = info["box_wood"]
        aralvl1 = info["castle_boco"]
        aralvl2 = info["castle_metal"]
        aralvl3 = info["castle_gold"]
        aralvl4 = info["castle_stone"]
        aralvl5 = info["castle_wood"]
        aralvl6 = info["castle_food"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        em = discord.Embed(description="```diff\n!===== [{}'s KillStats]=====!\n\n+Name 	: {}\n+Status   : {}\n+Race 	: {}\n+Wallet   : {}\n+NFTs	 : {}\n+Class    : {}\n+Castlelvl   : {}\n\n+CastleType   : {}\n\n+Guildlvl   : {}\n! count_win: {}!\n- count_lose: {}\n= count_played: {}\n# count_draw: {}\n?```".format(info["name"],info["name"],info["status"], info["race"], info["account"], info["assets"], info["class"], castle_lvl, castle_guild_lvl, count_win, count_lose, count_played, count_draw), color=discord.Color.blue())
        await ctx.send(embed=em)
        await ctx.send("```diff\n! count_win: {}!\n- count_lose: {}\n= count_played: {}\n# count_played: {}\n?```".format(count_win, count_lose, count_played, count_draw, count_played))
    except IndexError:
        pass
        await ctx.send("!set ""YOUR WALLETSet4"" !")
async def _check_set6011(ctx):
    #calc all stats#
    #await _check_set60(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "NEWBE")
    # This will get the role you want to edit^
    await member.add_roles(var) # adds the role
    await var.edit(color=0x008000, reason="The reason")
async def _check_waxticker(ctx):#DEATH
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&page=1&limit=100&order=descm'.format(account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        boco = info["boco"]
        setdone = info["setdone"]
        #account = data["account"]
        print(account)
        print(assets)
        print(success)
        await ctx.send(f'{account}! is now Verifide Hurry.')
        info["account"] = account
        info["assets"] = assets
        info["successCheck"] = success
        info["WalletSetupDone"] = 2
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}".format(author, account, assets, info["boco"], success))
        return
    except IndexError:
        pass
        await ctx.send("You do not Own that NFT!")
        return
async def _check_bopi(ctx):#DEATH
    #calc all stats MAX TOKEN BALANCE#Check BOPIXBO
    #await _check_bopi(ctx):
    try:
        bopiDict = info["bopiDict"]
        print("bopiDict = info bopiDict")
        print(bopiDict)
    except:
        print("sone Failed to see dict")
    try:
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
    except:
        print("Failed to send")
    try:
        print("Hi")
        # penguincoins  penguincoins  PIXEL@penguincoins
        # mdcryptonfts @ WOJAK
        bopiDict = info["bopiDict"]
        goldDict = info["goldDict"]
        bgoldDict = info["bgoldDict"]
        wgoldDict = info["wgoldDict"]
        bocoDict = info["bocoDict"]
        sciDict = info["sciDict"]
        rocDict = info["rocDict"]
        papDict = info["papDict"]
        stodDict = info["stodDict"]
        metDict = info["metDict"]
        wooDict = info["wooDict"]
        fooDict = info["fooDict"]
        peoDict = info["peoDict"]
        antDict = info["antDict"]
        deptDict = info["deptDict"]
        keyDict = info["keyDict"]
        waxDict = info["waxDict"]
        jsonData = json.dumps(bopiDict)
        requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response1 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= goldDict)
        response2 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bgoldDict)
        response3 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wgoldDict)
        response4 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bocoDict)
        response5 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= waxDict)
        response6 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= sciDict)
        response7 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= rocDict)
        response8 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= papDict)
        response9 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= stodDict)
        response10 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= metDict)
        response11 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wooDict)
        response12 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= fooDict)
        response13 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= peoDict)
        response14 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= antDict)
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= deptDict)
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= keyDict)
    except:
        print("Failt to lode MAX AMOUNT")
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&page=1&limit=100&order=descm'.format(account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        boco = info["boco"]
        setdone = info["setdone"]
        #account = data["account"]
        print(account)
        print(assets)
        print(success)
        await ctx.send(f'{account}! is now Verifide Hurry.')
        info["account"] = account
        info["assets"] = assets
        info["successCheck"] = success
        info["WalletSetupDone"] = 2
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}".format(author, account, assets, info["boco"], success))
        return
    except IndexError:
        pass
        await ctx.send("You do not Own that NFT!")
        return
async def _check_tokensCOLLAB(ctx):#111
    #calc all stats MAX TOKEN BALANCE#
    #await _check_tokensCOLLAB(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
    except:
        print("FAiled to lode Player")
    try:
        print("Hi")
        # penguincoins  penguincoins  PIXEL@penguincoins
        # mdcryptonfts @ WOJAK
        bopiDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "BOPIXBO"
        }
        goldDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "GOLD"
        }
        bgoldDict = {
          "code": "alcorammswap",
          "account": "bobocoin.gm",
          "symbol": "BOPIGOL"
        }
        wgoldDict = {
          "code": "alcorammswap",
          "account": "bobocoin.gm",
          "symbol": "WAXGOLI"
        }
        bocoDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "BOCO"
        }
        sciDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "SCISSOR"
        }
        rocDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "ROCK"
        }
        papDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "PAPER"
        }
        stodDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "STONE"
        }
        metDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "METAL"
        }
        wooDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "WOOD"
        }
        fooDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "FOOD"
        }
        peoDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "PEOPLE"
        }
        antDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "ANTIMAT"
        }
        deptDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "DEPT"
        }
        keyDict = {
          "code": "bobocoin.gm",
          "account": "bobocoin.gm",
          "symbol": "KEY"
        }
        waxDict = {
          "code": "eosio.token",
          "account": "bobocoin.gm",
          "symbol": "WAX"
        }
        jsonData = json.dumps(bopiDict)
        requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        response1 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= goldDict)
        response2 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bgoldDict)
        response3 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wgoldDict)
        response4 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bocoDict)
        response5 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= waxDict)
        response6 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= sciDict)
        response7 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= rocDict)
        response8 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= papDict)
        response9 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= stodDict)
        response10 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= metDict)
        response11 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wooDict)
        response12 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= fooDict)
        response13 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= peoDict)
        response14 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= antDict)
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= deptDict)
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= keyDict)
    except:
        print("Failt to lode MAX AMOUNT")
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts/{}?collection_whitelist=pixilminiwax'.format(account))
        response.json() #  https://wax.api.atomicassets.io/atomicassets/v1/accounts/cn1qw.wam/pixilminiwax     ####   https://wax.api.atomicassets.io/atomicassets/v1/accounts/cn1qw.wam?collection_whitelist=pixilminiwax%2Cbobopixeloxo%2Choodpunknfts%2Cpixellabs123  $$$$ ,bobopixeloxo,hoodpunknfts,pixellabs123
        #    #{'schemas': [{'schema_name': 'package', 'assets': '356'}, {'schema_name': 'six', 'assets': '86'}, {'schema_name': 'thirteen', 'assets': '51'}, {'schema_name': 'rollplaygame', 'assets': '44'}, {'schema_name': 'dropscoin', 'assets': '31'}, {'schema_name': 'zero', 'assets': '6'}, {'schema_name': 'paper.oxo', 'assets': '3'}, {'schema_name': 'twelve', 'assets': '3'}, {'schema_name': 'ten', 'assets': '2'}, {'schema_name': 'nine', 'assets': '2'}, {'schema_name': 'eleven', 'assets': '2'}, {'schema_name': 'scissor.oxo', 'assets': '2'}, {'schema_name': 'rock.oxo', 'assets': '2'}, {'schema_name': 'one', 'assets': '1'}, {'schema_name': 'two', 'assets': '1'}, {'schema_name': 'three', 'assets': '1'}]
        #
        #
        data = response.json()
        success = data["success"]
        #account = data["data"][0]["account"]
        assets = data["data"]["collections"][0]["assets"]
        boco = info["boco"]
        setdone = info["setdone"]
        account = info["account"]
        print(account)
        print(assets)
        print(success)
        await ctx.send(f'{account}! is now Verifide Hurry.')
        info["assetspixilminiwax"] = assets
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts/{}?collection_whitelist=pixellabs123'.format(account))
            response.json()
            data = response.json()
            assets = data["data"]["collections"][0]["assets"]
            info["assetspixellabs123"] = assets
        except:
            info["assetspixellabs123"] = 0
            print("No pixlab")
        try:
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts/{}?collection_whitelist=hoodpunknfts'.format(account))
            response.json()
            data = response.json()
            assets = data["data"]["collections"][0]["assets"]
            info["assetshoodpunknfts"] = assets
        except:
            info["assetshoodpunknfts"] = 0
            print("NO HOODPunks")
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts/{}/bobopixeloxo'.format(account))
        response.json()
        data = response.json()
        print(" aaaesdfsdf TEST DATA")
        assetsrock = data["data"]
        print("data")
        print("data")
        print("data")
        print(assetsrock)
        print("data")
        print("data")
        print("data")
        try:
            print(" assetsrockb -0 ")
            assets = data["data"]["schemas"][-0]["assets"]
            schema_name = data["data"]["schemas"][-0]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb  -0 FAIL")
        try:
            print(" assetsrockb 0 ")
            assets = data["data"]["schemas"][0]["assets"]
            schema_name = data["data"]["schemas"][0]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb  0 FAIL")
        try:
            print(" assetsrockb 1 ")
            assets = data["data"]["schemas"][1]["assets"]
            schema_name = data["data"]["schemas"][1]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb  1 FAIL")
        try:
            print(" assetsrockb 2 ")
            assets = data["data"]["schemas"][2]["assets"]
            schema_name = data["data"]["schemas"][2]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 2 FAIL")
        try:
            print(" assetsrockb 3 ")
            assets = data["data"]["schemas"][3]["assets"]
            schema_name = data["data"]["schemas"][3]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 3 FAIL")
        try:
            print(" assetsrockb 4 ")
            assets = data["data"]["schemas"][4]["assets"]
            schema_name = data["data"]["schemas"][4]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 4 FAIL")
        try:
            print(" assetsrockb 5 ")
            assets = data["data"]["schemas"][5]["assets"]
            schema_name = data["data"]["schemas"][5]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 5 FAIL")
        try:
            print(" assetsrockb 6 ")
            assets = data["data"]["schemas"][6]["assets"]
            schema_name = data["data"]["schemas"][6]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 6 FAIL")
        try:
            print(" assetsrockb 7 ")
            assets = data["data"]["schemas"][7]["assets"]
            schema_name = data["data"]["schemas"][7]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 7 FAIL")
        try:
            print(" assetsrockb 8 ")
            assets = data["data"]["schemas"][8]["assets"]
            schema_name = data["data"]["schemas"][8]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 8 FAIL")
        try:
            print(" assetsrockb 9 ")
            assets = data["data"]["schemas"][9]["assets"]
            schema_name = data["data"]["schemas"][9]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 9 FAIL")
        try:
            print(" assetsrockb 10 ")
            assets = data["data"]["schemas"][10]["assets"]
            schema_name = data["data"]["schemas"][10]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 10 FAIL")
        try:
            print(" assetsrockb 11 ")
            assets = data["data"]["schemas"][11]["assets"]
            schema_name = data["data"]["schemas"][11]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 11 FAIL")
        try:
            print(" assetsrockb 12 ")
            assets = data["data"]["schemas"][12]["assets"]
            schema_name = data["data"]["schemas"][12]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 12 FAIL")
        try:
            print(" assetsrockb 13 ")
            assets = data["data"]["schemas"][13]["assets"]
            schema_name = data["data"]["schemas"][13]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 13 FAIL")
        try:
            print(" assetsrockb 14 ")
            assets = data["data"]["schemas"][14]["assets"]
            schema_name = data["data"]["schemas"][14]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 14 FAIL")
        try:
            print(" assetsrockb 15 ")
            assets = data["data"]["schemas"][15]["assets"]
            schema_name = data["data"]["schemas"][15]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 15 FAIL")
        try:
            print(" assetsrockb 16 ")
            assets = data["data"]["schemas"][16]["assets"]
            schema_name = data["data"]["schemas"][16]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 16 FAIL")
        try:
            print(" assetsrockb 17 ")
            assets = data["data"]["schemas"][17]["assets"]
            schema_name = data["data"]["schemas"][17]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 17 FAIL")
        try:
            print(" assetsrockb 18 ")
            assets = data["data"]["schemas"][18]["assets"]
            schema_name = data["data"]["schemas"][18]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 19 FAIL")
        try:
            print(" assetsrockb 19 ")
            assets = data["data"]["schemas"][19]["assets"]
            schema_name = data["data"]["schemas"][19]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 19 FAIL")
        try:
            print(" assetsrockb 20 ")
            assets = data["data"]["schemas"][20]["assets"]
            schema_name = data["data"]["schemas"][20]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 20 FAIL")
        try:
            print(" assetsrockb 21 ")
            assets = data["data"]["schemas"][21]["assets"]
            schema_name = data["data"]["schemas"][21]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 21 FAIL")
        try:
            print(" assetsrockb 22 ")
            assets = data["data"]["schemas"][22]["assets"]
            schema_name = data["data"]["schemas"][22]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 22 FAIL")
        try:
            print(" assetsrockb 23 ")
            assets = data["data"]["schemas"][23]["assets"]
            schema_name = data["data"]["schemas"][23]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 23 FAIL")
        try:
            print(" assetsrockb 24 ")
            assets = data["data"]["schemas"][24]["assets"]
            schema_name = data["data"]["schemas"][24]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 24 FAIL")
        try:
            print(" assetsrockb 25 ")
            assets = data["data"]["schemas"][25]["assets"]
            schema_name = data["data"]["schemas"][25]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 25 FAIL")
        try:
            print(" assetsrockb 26 ")
            assets = data["data"]["schemas"][26]["assets"]
            schema_name = data["data"]["schemas"][26]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 26 FAIL")
        try:
            print(" assetsrockb 27 ")
            assets = data["data"]["schemas"][27]["assets"]
            schema_name = data["data"]["schemas"][27]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 27 FAIL")
        try:
            print(" assetsrockb 28 ")
            assets = data["data"]["schemas"][28]["assets"]
            schema_name = data["data"]["schemas"][28]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 28 FAIL")
        try:
            print(" assetsrockb 29 ")
            assets = data["data"]["schemas"][29]["assets"]
            schema_name = data["data"]["schemas"][29]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 29 FAIL")
        try:
            print(" assetsrockb 30 ")
            assets = data["data"]["schemas"][30]["assets"]
            schema_name = data["data"]["schemas"][30]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 30 FAIL")
        try:
            print(" assetsrockb 31 ")
            assets = data["data"]["schemas"][31]["assets"]
            schema_name = data["data"]["schemas"][31]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 31 FAIL")
        try:
            print(" assetsrockb 32 ")
            assets = data["data"]["schemas"][32]["assets"]
            schema_name = data["data"]["schemas"][32]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 32 FAIL")
        try:
            print(" assetsrockb 33 ")
            assets = data["data"]["schemas"][33]["assets"]
            schema_name = data["data"]["schemas"][33]["schema_name"]
            if schema_name == "rock.oxo":
                info["assetsrock"] = assets
            elif schema_name == "scissor.oxo":
                info["assetsscissor"] = assets
            elif schema_name == "paper.oxo":
                info["assetspaper"] = assets
            elif schema_name == "memberpass":
                info["assetsmemberpass"] = assets
            elif schema_name == "coffee.oxo":
                info["assetscoffee"] = assets
            elif schema_name == "space.oxo":
                info["assetsspace"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
            elif schema_name == "package":
                info["assetspackage"] = assets
        except:
            print(" assetsrockb 33 FAIL")
        try:
            assetsscissor = data["data"]["schemas"][0]["schema_name"]["rock.oxo"]["assets"]
            print("assetssock")
            print(assetssock)
            info["assetssock"] = assetssock
        except:
            print("Nope")
        try:
            assetsscissor = data["data"]["schemas"][0]["schema_name"]["scissor.oxo"]["assets"]
            print("assetsscissor")
            print(assetsscissor)
            info["assetsscissor"] = assetsscissor
        except:
            print("Nope")
        try:
            assetspaper = data["data"][0]["schemas"]["schema_name"]["paper.oxo"]["assets"]
            print("assetspaper")
            print(assetspaper)
            info["assetspaper"] = assetspaper
        except:
            print("Nope")
        try:
            assetscoffee = data["data"][0]["schemas"]["schema_name"]["coffee.oxo"]["assets"]
            print("assetscoffee")
            print(assetscoffee)
            info["assetscoffee"] = assetscoffee
        except:
            print("Nope")
        try:
            assetsspace = data["data"][0]["schemas"]["schema_name"]["space.oxo"]["assets"]
            print("assetsspace")
            print(assetsspace)
            info["assetsspace"] = assetsspace
        except:
            print("Nope")
        #info["account"] = account
        #info["assets"] = assets
        #info["successCheck"] = success
        #info["WalletSetupDone"] = 2
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}".format(author, account, assets, info["boco"], success))
        return
    #except IndexError:
    except :
        pass
        await ctx.send("You do not Own that NFT!")
        return
@bot.command(aliases=["bals"])
async def check_tokens(ctx):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
            await ctx.send("Please start your character using `{}start`".format(Prefix))
            return
    # Load PERSONAL DATA
    account = info["account"]
    bopiDict = info["bopiDict"]
    bpvDict = info["bpvDict"]
    goldDict = info["goldDict"]
    bgoldDict = info["bgoldDict"]
    wgoldDict = info["wgoldDict"]
    bocoDict = info["bocoDict"]
    sciDict = info["sciDict"]
    rocDict = info["rocDict"]
    papDict = info["papDict"]
    stodDict = info["stodDict"]
    metDict = info["metDict"]
    wooDict = info["wooDict"]
    fooDict = info["fooDict"]
    peoDict = info["peoDict"]
    antDict = info["antDict"]
    deptDict = info["deptDict"]
    keyDict = info["keyDict"]
    doorDict = info["doorDict"]
    waxDict = info["waxDict"]
    wojakDict = info["wojakDict"]
    pixelDict = info["pixelDict"]
    accountX = info["account"]
    bopiDictX = info["bopiDict"]
    goldDictX = info["goldDict"]
    bgoldDictX = info["bgoldDict"]
    wgoldDictX = info["wgoldDict"]
    bocoDictX = info["bocoDict"]
    sciDictX = info["sciDict"]
    rocDictX = info["rocDict"]
    papDictX = info["papDict"]
    stodDictX = info["stodDict"]
    metDictX = info["metDict"]
    wooDictX = info["wooDict"]
    fooDictX = info["fooDict"]
    peoDictX = info["peoDict"]
    antDictX = info["antDict"]
    deptDictX = info["deptDict"]
    keyDictX = info["keyDict"]
    doorDictX = info["doorDict"]
    waxDictX = info["waxDict"]
    wojakDictX = info["wojakDict"]
    pixelDictX = info["pixelDict"]
    strDict = info["strDict"]
    vitDict = info["vitDict"]
    agiDict = info["agiDict"]
    dexDict = info["dexDict"]
    intDict = info["intDict"]
    lukDict = info["lukDict"]
    jsonData = json.dumps(bopiDict)
    requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
    em = discord.Embed(description="**\n!====[{}'s]====!\nThis Takes Time!!!\n Please dont write any commands till done! to safe properly.\n+ Check Bot response with {}info\n**".format(info["name"], Prefix), color=discord.Color.blue())
    #await ctx.send(embed=em2)
    await ctx.send(embed=em)
    try:    # bopiDict
        try: # bopiDict
            response = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
            data0 = response.json()
            bal = data0[0]
        except:
            print("1")
        try:
            txt = bal
            x = txt.split()
            x0mmm = x[0]
            print(x)
            print("AMOUNTIN BOPIXBO")
            print(x0mmm) # HOW MUCH DO YOU HAVE
            if x0mmm > 0:
                em.add_field(name="Wallet Balances", value=account, inline=False)
                em.add_field(name="BOPIXBO", value=x0mmm, inline=True)
            try:
                info["bopiDict"]["balances_amount_BOPIXBO"] = x0mmm
            except:
                print("ne3")
            try:
                info["bopiDict"]["balance"] = x0mmm
            except:
                print("ne2")
            try:
                info["token_bopixbo"] = x0mmm
            except:
                print("ne1")
            fileIO("players/{}/info.json".format(author.id), "save", info)
        except:
            print("fail")
    except IndexError:
        info["bopiDict"]["balances_amount_BOPIXBO"] = 0
        info["token_bopixbo"] = 0
        info["castle_bopixbo"] = 0
        x0mmm = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS BOPIXBO")
        pass
    try:    # bpvDict
        response1bp = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bpvDict)
        data1bp = response1bp.json()
        bal1bp = data1bp[0]
        try:
            txt = bal1bp
            x = txt.split()
            x0mmmbp = x[0]
            print(x)
            print("AMOUNTIN BPVALUE")
            print(x0mmmbp) # HOW MUCH DO YOU HAVE
            info["bpvDict"]["balances_amount_BPVALUE"] = x0mmmbp
            info["bpvDict"]["balance"] = x0mmmbp
            info["castle_bpv"] = x0mmmbp
            info["token_bpv"] = x0mmmbp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x0mmmbp > 0:
                em.add_field(name="BPVALUE", value=x0mmmbp, inline=True)
        except:
            print("fail")
    except IndexError:
        info["bpvDict"]["balances_amount_BPVALUE"] = 0
        info["bpvDict"]["balance"] = 0
        info["castle_bpv"] = 0
        info["token_bpv"] = 0
        aaa = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS BPVALUE")
        pass
    try:
        response1 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= goldDict)
        data1 = response1.json()
        bal1 = data1[0]
        try:
            txt = bal1
            x = txt.split()
            aaa = x[0]
            print(x)
            print("AMOUNTIN GOLD")
            print(aaa) # HOW MUCH DO YOU HAVE
            info["goldDict"]["balances_amount_GOLD"] = aaa
            info["goldDict"]["balance"] = aaa
            info["castle_gold"] = aaa
            info["token_gold"] = aaa
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if aaa > 0:
                em.add_field(name="GOLD", value=aaa, inline=True)
        except:
            print("fail")
    except IndexError:
        info["goldDict"]["balances_amount_GOLD"] = 0
        info["goldDict"]["balance"] = 0
        info["castle_gold"] = 0
        info["token_gold"] = 0
        aaa = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS GOLD")
        pass
    try:       # bgoldDict
        response2 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bgoldDict)
        data2 = response2.json()
        bal2 = data2[0]
        try:
            txt = bal2
            x = txt.split()
            x02m = x[0]
            print(x)
            print("AMOUNTIN BOPIGOL")
            print(x02m) # HOW MUCH DO YOU HAVE
            info["bgoldDict"]["balances_amount_BOPIGOL"] = x02m
            info["bgoldDict"]["balance"] = x02m
            info["token_bgold"] = x02m
            info["castle_bgold"] = x02m
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x02m > 0:
                em.add_field(name="BOPIGOL", value=x02m, inline=True)
        except:
            print("fail")
    except IndexError:
        info["bgoldDict"]["balances_amount_BOPIGOL"] = 0
        info["bgoldDict"]["balance"] = 0
        info["token_bgold"] = 0
        info["castle_bgold"] = 0
        x02m = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS BOPIGOL")
        pass
    try:       # wgoldDict
        response3 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wgoldDict)
        data3 = response3.json()
        bal3 = data3[0]
        try:
            txt = bal3
            x = txt.split()
            x03 = x[0]
            print(x)
            print("AMOUNTIN WAXGOLI")
            print(x03) # HOW MUCH DO YOU HAVE
            info["wgoldDict"]["balances_amount_WAXGOLI"] = x03
            info["wgoldDict"]["balance"] = x03
            info["token_wgold"] = x03
            info["castle_wgold"] = x03
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x03 > 0:
                em.add_field(name="WAXGOLI", value=x03, inline=True)
        except:
            print("fail")
    except IndexError:
        info["wgoldDict"]["balances_amount_WAXGOLI"] = 0
        info["wgoldDict"]["balance"] = 0
        info["token_wgold"] = 0
        info["castle_wgold"] = 0
        x03 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS WAXGOLI")
        pass
    try:       # bocoDict
        response4 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bocoDict)
        data4 = response4.json()
        bal4 = data4[0]
        try:
            txt = bal4
            x = txt.split()
            x04 = x[0]
            print(x)
            print("AMOUNTIN BOBOCOIN")
            print(x04) # HOW MUCH DO YOU HAVE
            info["bocoDict"]["balances_amount_BOCO"] = x04
            info["bocoDict"]["balance"] = x04
            info["token_boco"] = x04
            info["castle_boco"] = x04
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x04 > 0:
                em.add_field(name="BOCO", value=x04, inline=True)
        except:
            print("fail")
    except IndexError:
        info["bocoDict"]["balances_amount_BOCO"] = 0
        info["bocoDict"]["balance"] = 0
        info["token_boco"] = 0
        info["castle_boco"] = 0
        x04 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS BOCO")
        pass
    try:       # waxDict
        response5 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= waxDict)
        data5 = response5.json()
        bal = data5[0]
        try:
            txt = bal
            x = txt.split()
            x05 = x[0]
            print(x)
            print("AMOUNTIN WAX")
            print(x05) # HOW MUCH DO YOU HAVE
            info["waxDict"]["balances_amount_WAX"] = x05
            info["waxDict"]["balance"] = x05
            info["token_wax"] = x05
            info["castle_wax"] = x05
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x05 > 0:
                em.add_field(name="WAX", value=x05, inline=True)
        except:
            print("fail")
    except IndexError:
        info["waxDict"]["balances_amount_WAX"] = 0
        info["waxDict"]["balance"] = 0
        info["token_wax"] = 0
        info["castle_wax"] = 0
        x05 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS WAX")
        pass
    try:   # sciDict
        response6 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= sciDict)
        data6 = response6.json()
        bal = data6[0]
        try:
            txt = bal
            x = txt.split()
            x06 = x[0]
            print(x)
            print("AMOUNTIN SCISSOR")
            print(x06) # HOW MUCH DO YOU HAVE
            info["sciDict"]["balances_amount_SCISSOR"] = x06
            info["sciDict"]["balance"] = x06
            info["token_scissor"] = x06
            info["castle_scissor"] = x06
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x06 > 0:
                em.add_field(name="SCISSOR", value=x06, inline=True)
        except:
            print("fail")
    except IndexError:
        info["sciDict"]["balances_amount_SCISSOR"] = 0
        info["sciDict"]["balance"] = 0
        info["token_scissor"] = 0
        info["castle_scissor"] = 0
        x06 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS SCISSOR")
        pass
    try:       # rocDict
        response7 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= rocDict)
        data7 = response7.json()
        bal = data7[0]
        try:
            txt = bal
            x = txt.split()
            x07 = x[0]
            print(x)
            print("AMOUNTIN ROCK")
            print(x07) # HOW MUCH DO YOU HAVE
            info["rocDict"]["balances_amount_ROCK"] = x07
            info["rocDict"]["balance"] = x07
            info["token_rock"] = x07
            info["castle_rock"] = x07
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x07 > 0:
                em.add_field(name="ROCK", value=x07, inline=True)
        except:
            print("fail")
    except IndexError:
        info["rocDict"]["balances_amount_ROCK"] = 0
        info["rocDict"]["balance"] = 0
        info["token_rock"] = 0
        info["castle_rock"] = 0
        x07 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS ROCK")
        pass
    try:       # papDict
        response8 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= papDict)
        data8 = response8.json()
        bal = data8[0]
        try:
            txt = bal
            x = txt.split()
            x08 = x[0]
            print(x)
            print("AMOUNTIN PAPER")
            print(x08) # HOW MUCH DO YOU HAVE
            info["papDict"]["balances_amount_PAPER"] = x08
            info["papDict"]["balance"] = x08
            info["token_paper"] = x08
            info["castle_paper"] = x08
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x08 > 0:
                em.add_field(name="PAPER", value=x08, inline=True)
        except:
            print("fail")
    except IndexError:
        info["papDict"]["balances_amount_PAPER"] = 0
        info["papDict"]["balance"] = 0
        info["token_paper"] = 0
        info["castle_paper"] = 0
        x08 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS PAPER")
        pass
    try:       # stodDict
        response9 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= stodDict)
        data9 = response9.json()
        bal = data9[0]
        try:
            txt = bal
            x = txt.split()
            x09 = x[0]
            print(x)
            print("AMOUNTIN STONE")
            print(x09) # HOW MUCH DO YOU HAVE
            info["stodDict"]["balances_amount_STONE"] = int(x09)
            info["stodDict"]["balance"] = int(x09)
            info["token_stone"] = int(x09)
            info["castle_stone"] = int(x09)
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x09 > 0:
                em.add_field(name="STONE", value=x09, inline=True)
        except:
            print("fail")
    except IndexError:
        info["stodDict"]["balances_amount_STONE"] = 0
        info["stodDict"]["balance"] = 0
        info["token_stone"] = 0
        info["castle_stone"] = 0
        x09 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS STONE")
        pass
    try:       # metDict
        response10 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= metDict)
        data10 = response10.json()
        bal = data10[0]
        try:
            txt = bal
            x = txt.split()
            x10 = x[0]
            print(x)
            print("AMOUNTIN METAL")
            print(x10) # HOW MUCH DO YOU HAVE
            info["metDict"]["balances_amount_METAL"] = x10
            info["metDict"]["balance"] = x10
            info["token_metal"] = x10
            info["castle_metal"] = x10
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x10 > 0:
                em.add_field(name="METAL", value=x10, inline=True)
        except:
            print("fail")
    except IndexError:
        info["metDict"]["balances_amount_METAL"] = 0
        info["metDict"]["balance"] = 0
        info["token_metal"] = 0
        info["castle_metal"] = 0
        x10 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS METAL")
        pass
    try:       # wooDict
        response11 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wooDict)
        data11 = response11.json()
        bal = data11[0]
        try:
            txt = bal
            x = txt.split()
            x00 = x[0]
            print(x)
            print("AMOUNTIN WOOD")
            print(x00) # HOW MUCH DO YOU HAVE
            info["wooDict"]["balances_amount_WOOD"] = x00
            info["wooDict"]["balance"] = x00
            info["token_wood"] = x00
            info["castle_wood"] = x00
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x00 > 0:
                em.add_field(name="WOOD", value=x00, inline=True)
        except:
            print("fail")
    except IndexError:
        info["wooDict"]["balances_amount_WOOD"] = 0
        info["wooDict"]["balance"] = 0
        info["token_wood"] = 0
        info["castle_wood"] = 0
        x00 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS WOOD")
        pass
    try:       # fooDict
        response12 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= fooDict)
        data12 = response12.json()
        bal = data12[0]
        try:
            txt = bal
            x = txt.split()
            x001 = x[0]
            print(x)
            print("AMOUNTIN FOOD")
            print(x001) # HOW MUCH DO YOU HAVE
            info["fooDict"]["balances_amount_FOOD"] = x001
            info["fooDict"]["balance"] = x001
            info["token_food"] = x001
            info["castle_food"] = x001
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x001 > 0:
                em.add_field(name="FOOD", value=x001, inline=True)
        except:
            print("fail")
    except IndexError:
        info["fooDict"]["balances_amount_FOOD"] = 0
        info["fooDict"]["balance"] = 0
        info["token_food"] = 0
        info["castle_food"] = 0
        x001 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS FOOD")
        pass
    try:       # peoDict
        response13 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= peoDict)
        data13 = response13.json()
        bal = data13[0]
        try:
            txt = bal
            x = txt.split()
            x01010 = x[0]
            print(x)
            print("AMOUNTIN PEOPLE")
            print(x01010) # HOW MUCH DO YOU HAVE
            info["peoDict"]["balances_amount_PEOPLE"] = x01010
            info["peoDict"]["balance"] = x01010
            info["token_people"] = x01010
            info["castle_people"] = x01010
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x01010 > 0:
                em.add_field(name="PEOPLE", value=x01010, inline=True)
        except:
            print("fail")
    except IndexError:
        info["peoDict"]["balances_amount_PEOPLE"] = 0
        info["peoDict"]["balance"] = 0
        info["token_people"] = 0
        info["castle_people"] = 0
        x01010 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS PEOPLE")
        pass
    try:       # antDict
        response14 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= antDict)
        data14 = response14.json()
        bal4 = data14[0]
        try:
            txt = bal
            x = txt.split()
            x002 = x[0]
            print(x14)
            print("AMOUNTIN ANTIMAT")
            print(x0) # HOW MUCH DO YOU HAVE
            info["antDict"]["balances_amount_ANTIMAT"] = x002
            info["antDict"]["balance"] = x002
            info["token_antimat"] = x002
            info["castle_antimat"] = x002
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x002 > 0:
                em.add_field(name="ANTIMAT", value=x002, inline=True)
        except:
            print("fail")
    except IndexError:
        info["antDict"]["balances_amount_ANTIMAT"] = 0
        info["antDict"]["balance"] = 0
        info["token_antimat"] = 0
        info["castle_antimat"] = 0
        x002 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS ANTIMAT")
        pass
    try:       # deptDict
        response15 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= deptDict)
        data15 = response15.json()
        bal = data15[0]
        try:
            txt = bal
            x = txt.split()
            x003 = x[0]
            print(x)
            print("AMOUNTIN DEPT")
            print(x003) # HOW MUCH DO YOU HAVE
            info["deptDict"]["balances_amount_DEPT"] = x003
            info["deptDict"]["balance"] = x003
            info["token_dept"] = x003
            info["castle_dept"] = x003
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x003 > 0:
                em.add_field(name="DEPT", value=x003, inline=True)
        except:
            print("fail")
    except IndexError:
        info["deptDict"]["balances_amount_DEPT"] = 0
        info["deptDict"]["balance"] = 0
        info["token_dept"] = 0
        info["castle_dept"] = 0
        x003 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS DEPT")
        pass
    try:       # keyDict
        response16 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= keyDict)
        data16 = response16.json()
        bal = data16[0]
        try:
            txt = bal
            x = txt.split()
            x004 = x[0]
            print(x)
            print("AMOUNTIN KEY")
            print(x004) # HOW MUCH DO YOU HAVE
            info["keyDict"]["balances_amount_KEY"] = x004
            info["keyDict"]["balance"] = x004
            info["token_key"] = x004
            info["castle_key"] = x004
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x004 > 0:
                em.add_field(name="KEY", value=x004, inline=True)
        except:
            print("fail")
    except IndexError:
        info["keyDict"]["balances_amount_KEY"] = 0
        info["keyDict"]["balance"] = 0
        info["token_key"] = 0
        info["castle_key"] = 0
        x004 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS KEY")
        pass
    try:       # doorDict
        response17 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= doorDict)
        data17 = response17.json()
        bal = data17[0]
        try:
            txt = bal
            x = txt.split()
            x005 = x[0]
            print(x)
            print("AMOUNTIN dooyDict")
            print(x005) # HOW MUCH DO YOU HAVE
            info["doorDict"]["balances_amount_DOOR"] = x005
            info["doorDict"]["balance"] = x005
            info["token_door"] = x005
            info["castle_door"] = x005
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x005 > 0:
                em.add_field(name="DOOR", value=x005, inline=True)
        except:
            print("fail")
    except IndexError:
        info["doorDict"]["balances_amount_DOOR"] = 0
        info["doorDict"]["balance"] = 0
        info["token_door"] = 0
        info["castle_door"] = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS DOOR")
        pass
    try:      # wojakDict
        #wojakDict = info["wojakDict"]
        response18 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= wojakDict)
        data18 = response18.json()
        bal = data18[0]
        try:
            txt = bal
            x = txt.split()
            x006 = x[0]
            print(x)
            print("AMOUNTIN WOJAK")
            print(x006) # HOW MUCH DO YOU HAVE
            info["wojakDict"]["balances_amount_WOJAK"] = x006
            info["wojakDict"]["balance"] = x006
            info["castle_wojak"] = x006
            info["token_wojak"] = x006
            x006 = 0
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x006 > 0:
                em.add_field(name="WOJAK", value=x006, inline=True)
        except:
            print("fail")
    except IndexError:
        info["wojakDict"]["balances_amount_WOJAK"] = 0
        info["wojakDict"]["balance"] = 0
        info["castle_wojak"] = 0
        info["token_wojak"] = 0
        x006 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS WOJAK")
        pass
    try:       # pixelDict
        response19 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= pixelDict)
        data19 = response19.json()
        bal = data19[0]
        try:
            txt = bal
            x = txt.split()
            x007 = x[0]
            print(x)
            print("AMOUNTIN PIXL")
            print(x007) # HOW MUCH DO YOU HAVE
            info["pixelDict"]["balances_amount_PIXEL"] = x007
            info["pixelDict"]["balance"] = x007
            info["token_pixel"] = x007
            info["castle_pixel"] = x007
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007 > 0:
                em.add_field(name="PIXEL", value=x007, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["pixelDict"]["balances_amount_PIXEL"] = 0
        info["pixelDict"]["balance"] = 0
        info["token_pixel"] = 0
        info["castle_pixel"] = 0
        x007 = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS pixel")
        pass
    try:       # strDict
        response20 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= strDict)
        data20 = response20.json()
        bal = data20[0]
        try:
            txt = bal
            x = txt.split()
            x007str = x[0]
            print(x)
            print("AMOUNTIN STR")
            print(x007str) # HOW MUCH DO YOU HAVE
            info["strDict"]["balances_amount_STR"] = x007str
            info["strDict"]["balance"] = x007str
            info["token_str"] = x007str
            info["castle_str"] = x007str
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007str > 0:
                em.add_field(name="STR", value=x007str, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["strDict"]["balances_amount_STR"] = 0
        info["strDict"]["balance"] = 0
        info["token_str"] = 0
        info["castle_str"] = 0
        x007str = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS STR")
        pass
    try:       # vitDict
        response21 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= vitDict)
        data21 = response21.json()
        bal = data21[0]
        try:
            txt = bal
            x = txt.split()
            x007vit = x[0]
            print(x)
            print("AMOUNTIN STR")
            print(x007vit) # HOW MUCH DO YOU HAVE
            info["vitDict"]["balances_amount_VIT"] = x007vit
            info["vitDict"]["balance"] = x007vit
            info["token_vit"] = x007vit
            info["castle_vit"] = x007vit
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007vit > 0:
                em.add_field(name="VIT", value=x007vit, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["vitDict"]["balances_amount_VIT"] = 0
        info["vitDict"]["balance"] = 0
        info["token_vit"] = 0
        info["castle_vit"] = 0
        x007vit = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS VIT")
        pass
    try:       # agiDict
        response22 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= agiDict)
        data22 = response22.json()
        bal = data22[0]
        try:
            txt = bal
            x = txt.split()
            x007agi = x[0]
            print(x)
            print("AMOUNTIN AGI")
            print(x007agi) # HOW MUCH DO YOU HAVE
            info["agiDict"]["balances_amount_AGI"] = x007agi
            info["agiDict"]["balance"] = x007agi
            info["token_agi"] = x007agi
            info["castle_agi"] = x007agi
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007agi > 0:
                em.add_field(name="AGI", value=x007agi, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["agiDict"]["balances_amount_AGI"] = 0
        info["agiDict"]["balance"] = 0
        info["token_agi"] = 0
        info["castle_agi"] = 0
        x007agi = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS AGI")
        pass
    try:       # dexDict
        response23 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= dexDict)
        data23 = response23.json()
        bal = data23[0]
        try:
            txt = bal
            x = txt.split()
            x007dex = x[0]
            print(x)
            print("AMOUNTIN DEX")
            print(x007dex) # HOW MUCH DO YOU HAVE
            info["dexDict"]["balances_amount_DEX"] = x007dex
            info["dexDict"]["balance"] = x007dex
            info["token_dex"] = x007dex
            info["castle_dex"] = x007dex
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007dex > 0:
                em.add_field(name="DEX", value=x007dex, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["dexDict"]["balances_amount_DEX"] = 0
        info["dexDict"]["balance"] = 0
        info["token_dex"] = 0
        info["castle_dex"] = 0
        x007dex = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS DEX")
        pass
    try:       # intDict
        response24 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= intDict)
        data24 = response22.json()
        bal = data24[0]
        try:
            txt = bal
            x = txt.split()
            x007int = x[0]
            print(x)
            print("AMOUNTIN INT")
            print(x007int) # HOW MUCH DO YOU HAVE
            info["intDict"]["balances_amount_INT"] = x007int
            info["intDict"]["balance"] = x007int
            info["token_int"] = x007int
            info["castle_int"] = x007int
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007int > 0:
                em.add_field(name="INT", value=x007int, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["intDict"]["balances_amount_INT"] = 0
        info["intDict"]["balance"] = 0
        info["token_int"] = 0
        info["castle_int"] = 0
        x007int = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS INT")
        pass
    try:       # lukDict
        response25 = requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= lukDict)
        data25 = response25.json()
        bal = data25[0]
        try:
            txt = bal
            x = txt.split()
            x007luk = x[0]
            print(x)
            print("AMOUNTIN LUK")
            print(x007luk) # HOW MUCH DO YOU HAVE
            info["lukDict"]["balances_amount_LUK"] = x007luk
            info["lukDict"]["balance"] = x007luk
            info["token_int"] = x007luk
            info["castle_int"] = x007luk
            fileIO("players/{}/info.json".format(author.id), "save", info)
            if x007luk > 0:
                em.add_field(name="LUK", value=x007luk, inline=True)
            #balances_currency_GOLD
        except:
            print("fail")
    except IndexError:
        info["lukDict"]["balances_amount_LUK"] = 0
        info["lukDict"]["balance"] = 0
        info["token_luk"] = 0
        info["castle_luk"] = 0
        x007luk = 0
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("IndexError NO COINS LUK")
        pass
    em3 = discord.Embed(description="**!====[{}'s]====!\n!====[1x1 TOKEN]====!**```diff\n\n\n BOCO:{}\n KEY:{}\n DOOR:{}\n PEOPLE:{}\n ROCK:{}\n SCISSOR:{}\n PAPER:{}\n METAL:{}\n WOOD:{}\n STONE:{}\n FOOD:{}\n```**!====[{}'s]====!\n!====[0x0 TOKEN]====!**".format(info["name"], info["boco"], info["key"], info["door"], info["people"], info["castle_army_rock"], info["castle_army_scissor"], info["castle_army_paper"], info["metal"], info["wood"], info["stone"], info["food"],info["name"]), color=discord.Color.blue())
    #em3 = discord.Embed(description="**\n!====[{}'s]====!\n!====[WALLET TOKEN]====!**```diff\n\n**{}wallet & {}w**```\n```BOPIXBO: {}\nGOLD:{}\nBOPIGOL:{}\nWAXGOLI:{}\nBOCO:{}\nANTIMAT:{}\nDEPTS:{}\nKEY:{}\nDOOR:{}\nPEOPLE:{}\nROCK:{}\nSCISSOR:{}\nPAPER:{}\nMetal:{}\nWOOD:{}\nSTONE:{}\nFOOD:{}\n\nWOJAK:{}\nPIXEL:{}\nWAX:{}```\n\n".format(info["name"],Prefix,Prefix, info["bopiDict"]["balances_amount_BOPIXBO"], info["goldDict"]["balances_amount_GOLD"], info["bgoldDict"]["balances_amount_BOPIGOL"], info["wgoldDict"]["balances_amount_WAXGOLI"], info["bocoDict"]["balances_amount_BOCO"], info["antDict"]["balances_amount_ANTIMAT"], info["deptDict"]["balances_amount_DEPT"], info["keyDict"]["balances_amount_KEY"], info["doorDict"]["balances_amount_DOOR"], info["peoDict"]["balances_amount_PEOPLE"], info["rocDict"]["balances_amount_ROCK"], info["sciDict"]["balances_amount_SCISSOR"], info["papDict"]["balances_amount_PAPER"], info["metDict"]["balances_amount_METAL"], info["wooDict"]["balances_amount_WOOD"], info["stodDict"]["balances_amount_STONE"], info["fooDict"]["balances_amount_FOOD"], info["wojakDict"]["balances_amount_WOJAK"], info["pixelDict"]["balances_amount_PIXEL"], info["waxDict"]["balances_amount_WAX"]), color=discord.Color.blue())
    try: # GOLD
        if len(aaa) > 0:
            em3.add_field(name="GOLD", value=aaa, inline=True)
        else:
            print("No len aaa GOLD")
    except:
        print("No len aaa GOLD")
    try:
        if len(x05) > 0:
            em3.add_field(name="WAX", value=x05, inline=True)
        else:
            print("No len x05 WAX")
    except:
        print("No len x05 WAX")
    try:
        if len(x0mmm) > 0:
            em3.add_field(name="BOPIXBO", value=x0mmm, inline=True)
        else:
            print("No len x0mmm BOPIXBO")
    except:
        print("No len x0mmm BOPIXBO")
    try:
        if len(x0mmmbp) > 0:
            em3.add_field(name="BPVALUE", value=x0mmmbp, inline=True)
        else:
            print("No len x0mmmbp BPVALUE")
    except:
        print("No len x0mmmbp BPVALUE")
    try:
        if len(x03) > 0:
            em3.add_field(name="WAXGOLI", value=x03, inline=True)
        else:
            print("No len x03 WAXGOLI")
    except:
        print("No len x03 WAXGOLI")
    try:
        if len(x04) > 0:
            em3.add_field(name="BOCO", value=x04, inline=True)
        else:
            print("No len x04 BOCO")
    except:
        print("No len x04 BOCO")
    try:
        if len(x06) > 0:
            em3.add_field(name="SCISSOR", value=x06, inline=True)
        else:
            print("No len x06 SCISSOR")
    except:
        print("No len x06 SCISSOR")
    try:
        if len(x07) > 0:
            em3.add_field(name="ROCK", value=x07, inline=True)
        else:
            print("No len x07 ROCK")
    except:
        print("No len x07 ROCK")
    try:
        if len(x08) > 0:
            em3.add_field(name="PAPER", value=x08, inline=True)
        else:
            print("No len x08 PAPER")
    except:
        print("No len x08 PAPER")
    try:
        if len(x09) > 0:
            em3.add_field(name="STONE", value=x09, inline=True)
        else:
            print("No len x09 STONE")
    except:
        print("No len x09 GOLDSTONE")
    try:
        if len(x10) > 0:
            em3.add_field(name="METAL", value=x10, inline=True)
        else:
            print("No len x10 METAL")
    except:
        print("No len x10 METAL")
    try:
        if len(x00) > 0:
            em3.add_field(name="WOOD", value=x00, inline=True)
        else:
            print("No len x00 WOOD")
    except:
        print("No len x00 WOOD")
    try:
        if len(x001) > 0:
            em3.add_field(name="FOOD", value=x001, inline=True)
        else:
            print("No len x001 FOOD")
    except:
        print("No len x001 FOOD")
    try:
        if len(x01010) > 0:
            em3.add_field(name="PEOPLE", value=x01010, inline=True)
        else:
            print("No len x01010 PEOPLE")
    except:
        print("No len x01010 PEOPLE")
    try:
        if len(x002) > 0:
            em3.add_field(name="ANTIMAT", value=x002, inline=True)
        else:
            print("No len x002 ANTIMAT")
    except:
        print("No len x002 ANTIMAT")
    try:
        if len(x003) > 0:
            em3.add_field(name="DEPT", value=x003, inline=True)
        else:
            print("No len x003 DEPT")
    except:
        print("No len x003 DEPT")
    try:
        if len(x004) > 0:
            em3.add_field(name="KEY", value=x004, inline=True)
        else:
            print("No len x004 KEY")
    except:
        print("No len x004 KEY")
    try:
        if len(x005) > 0:
            em3.add_field(name="DOOR", value=x005, inline=True)
        else:
            print("No len x005 DOOR")
    except:
        print("No len x005 DOOR")
    try:
        if len(x006) > 0:
            em3.add_field(name="WOJAK", value=x006, inline=True)
        else:
            print("No len x006 WOJAK")
    except:
        print("No len x006 WOJAK")
    try:
        if len(x007) > 0:
            em3.add_field(name="PIXL", value=x007, inline=True)
        else:
            print("No len x007 PIXL")
    except:
        print("No len x007 PIXL")
    try: #str
        if len(x007str) > 0:
            em3.add_field(name="STR", value=x007str, inline=True)
        else:
            print("No len x007str STR")
    except:
        print("No len x007 STR")
    try: #vit
        if len(x007vit) > 0:
            em3.add_field(name="VIT", value=x007vit, inline=True)
        else:
            print("No len x007vit VIT")
    except:
        print("No len x007 VIT")
    try: #agi
        if len(x007agi) > 0:
            em3.add_field(name="AGI", value=x007agi, inline=True)
        else:
            print("No len x007agu AGI")
    except:
        print("No len x007agi AGI")
    try: #dex
        if len(x007dex) > 0:
            em3.add_field(name="DEX", value=x007dex, inline=True)
        else:
            print("No len x007dex DEX")
    except:
        print("No len x007dex DEX")
    try: #int
        if len(x007int) > 0:
            em3.add_field(name="INT", value=x007int, inline=True)
        else:
            print("No len x007int INT")
    except:
        print("No len x007int INT")
    try: #luk
        if len(x007luk) > 0:
            em3.add_field(name="LUK", value=x007luk, inline=True)
        else:
            print("No len x007luk LUK")
    except:
        print("No len x007luk LUK")
    await ctx.send(embed=em3)
    await _check_bpvalue_token(ctx)
    return #await sync(ctx)
async def _check_baloo(ctx):#DEATH
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #if GuildAttacker == "RockCastle":
        #    print("r")
        ##    await _check_setCastleValue(ctx)
         #   #GuildCastleLVl= cinfo["Rock_Castle"]["castle_guild_lvl"]
         #   castle_guild_lvl = cinfo["Rock_Castle"]["castle_guild_lvl"]
        #if GuildAttacker == "ScissorCastle":
        #    print("s")
        #    castle_guild_lvl = cinfo["Scissor_Castle"]["castle_guild_lvl"]
        #if GuildAttacker == "PaperCastle":
        #    print("p")
         #   castle_guild_lvl = cinfo["Paper_Castle"]["castle_guild_lvl"]
        response = requests.get('https://api.coinlore.net/api/ticker/?id=32238')
        response.json()
        data = response.json()
        print("Data FOR Ticker id 32238")
        print(data)
        #with open("WAXTICKER.json", "w") as outfile:
            #json.dump(jsonData, outfile)
        #try:
            #info = fileIO("WAXTICKER.json".format(), "load")
        #except:
            #print("No WAXTICKER.json")
        print("here")
        #data = response.json()
        try:
            print("id")
            idd = data[0]["id"]
            print(idd)
        except:
            print(" NO id ")
            idd = 0
        try:
            print("symbol")
            symbol = data[0]["symbol"]
            print(symbol)
        except:
            print(" NO symbol ")
            symbol = x
        try:
            name = data[0]["name"]
        except:
            print(" NO name ")
            name = 0
        try:
            nameid = data[0]["nameid"]
        except:
            print(" NO nameid ")
            nameid = 0
        try:
            rank = data[0]["rank"]
        except:
            print(" NO rank ")
            rank = 0
        try:
            price_usd = data[0]["price_usd"]
        except:
            print(" NO price_usd ")
            price_usd = 0
        try:
            percent_change_24h = data[0]["percent_change_24h"]
        except:
            print(" NO percent_change_24h ")
            percent_change_24h = 0
        try:
            percent_change_1h = data[0]["percent_change_1h"]
        except:
            print(" NO percent_change_1h ")
            percent_change_1h = 0
        try:
            percent_change_7d = data[0]["percent_change_7d"]
        except:
            print(" NO percent_change_7d ")
            percent_change_7d = 0
        try:
            market_cap_usd = data[0]["market_cap_usd"]
        except:
            print(" NO market_cap_usd ")
            market_cap_usd = 0
        try:
            volume24 = data[0]["volume24"]
        except:
            print(" NO volume24 ")
            volume24 = 0
        try:
            volume24_native = data[0]["volume24_native"]
        except:
            print(" NO volume24_native ")
            volume24_native = 0
        try:
            volume24_native = data[0]["volume24_native"]
        except:
            print(" NO volume24_native ")
            volume24_native = 0
        try:
            csupply = data[0]["csupply"]
        except:
            print(" NO csupply ")
            csupply = 0
        try:
            tsupply = data[0]["tsupply"]
        except:
            print(" NO tsupply ")
            tsupply = 0
        try:
            msupply = data[0]["msupply"]
        except:
            print(" NO msupply ")
            msupply = 0
        try:
            price_btc = data[0]["price_btc"]
        except:
            print(" NO price_btc ")
            price_btc = 0
        WAXtoDOLLA = price_usd
        print("WAXtoDOLLA")
        print(WAXtoDOLLA) # wax
        em3 = discord.Embed(description="**\n!====[{}'s]====!\n!====[WALLET TOKEN]====!**```diff\nBOPIXBO: {}\nGOLD:{}\nBOPIGOL:{}\nWAXGOLI:{}\nBOCO:{}\nANTIMAT:{}\nDEPTS:{}\nKEY:{}\nDOOR:{}\nPEOPLE:{}\nROCK:{}\nSCISSOR:{}\nPAPER:{}\nMetal:{}\nWOOD:{}\nSTONE:{}\nFOOD:{}\n\nWOJAK:{}\nPIXEL:{}\nWAX:{}```\n\n".format(info["name"], info["bopiDict"]["balances_amount_BOPIXBO"], info["goldDict"]["balances_amount_GOLD"], info["bgoldDict"]["balances_amount_BOPIGOL"], info["wgoldDict"]["balances_amount_WAXGOLI"], info["bocoDict"]["balances_amount_BOCO"], info["antDict"]["balances_amount_ANTIMAT"], info["deptDict"]["balances_amount_DEPT"], info["keyDict"]["balances_amount_KEY"], info["doorDict"]["balances_amount_DOOR"], info["peoDict"]["balances_amount_PEOPLE"], info["rocDict"]["balances_amount_ROCK"], info["sciDict"]["balances_amount_SCISSOR"], info["papDict"]["balances_amount_PAPER"], info["metDict"]["balances_amount_METAL"], info["wooDict"]["balances_amount_WOOD"], info["stodDict"]["balances_amount_STONE"], info["fooDict"]["balances_amount_FOOD"], info["wojakDict"]["balances_amount_WOJAK"], info["pixelDict"]["balances_amount_PIXEL"], info["waxDict"]["balances_amount_WAX"]), color=discord.Color.blue())
        await ctx.send(embed=em3)
        #response1 = requests.get('https://api.coinlore.net/api/ticker/?id=32238')
        response1 = requests.get('https://wax.alcor.exchange/api/markets')
        response1.json()
        data1 = response1.json()
        try:
            print("CHECKING GOLD")
            try:
                last_price_gold = data1[626]
                print("price_goldgold11last_price___626  ??? id:642")
                print(last_price_gold)
            except:
                print(" NO quote_token1last_price] ")
                last_price_gold = 0
            try:
                last_price_gold = data1[626]["last_price"]
                print("price_goldgold11last_price")
                print(last_price_gold)
            except:
                print(" NO quote_token1last_price] ")
                last_price_gold = 0
            try:
                quote_tokengold = data1[626]["quote_token"]
                print("quote_tokengold")
                print(quote_tokengold)
            except:
                print(" NO quote_token1]quote_token ")
                quote_tokengold = 0
            try:
                str1gold = data1[626]["str"]
                print("str1")
                print(str1gold)
            except:
                print(" NO quote_token1]str ")
                str1gold = 0
            try:
                min_buygold = data1[626]["min_buy"]
                print("min_buy")
                print(min_buygold)
            except:
                print(" NO mingold_buy] ")
                min_buygold = 0
            try:
                min_sellgold = data1[626]["min_sell"]
                print("min_sellgold")
                print(min_sellgold)
            except:
                print(" NO min_sgoldell] ")
                min_sellgold = 0
            try:
                frozengold = data1[626]["frozen"]
                print("frozegoldn")
                print(frozengold)
            except:
                print(" NO frozen] ")
                frozengold = 0
            try:
                feegold = data1[626]["fee"]
                print("fee")
                print(feegold)
            except:
                print(" NO fee] ")
                feegold = 0
            try:
                ticker_idgold = data1[626]["ticker_id"]
                print("ticker_igoldd")
                print(ticker_idgold)
            except:
                print(" NO ticker_idgold] ")
                ticker_idgold = 0
            try:
                volume24gold = data1[626]["volume24"]
                print("volume2gold4")
                print(volume24gold)
            except:
                print(" NO vogoldlume24] ")
                volume24gold = 0
            try:
                quote_volumegold = data1[626]["quote_volume"]
                print("quote_volumgolde")
                print(quote_volumegold)
            except:
                print(" NO quote_vogoldlume] ")
                quote_volumegold = 0
            try:
                base_volumegold = data1[626]["base_volume"]
                print("base_volumegold")
                print(base_volumegold)
            except:
                print(" NO base_volume]gold ")
                base_volumegold = 0
            try:
                volumeWeekgold = data1[626]["volumeWeek"]
                print("volumeWeekgold")
                print(volumeWeekgold)
            except:
                print(" NO volumeWeek] ")
                volumeWeekgold = 0
            try:
                volumeMonthgold = data1[626]["volumeMonth"]
                print("volumeMonthgold")
                print(volumeMonthgold)
            except:
                print(" NO volumeMonth] ")
                volumeMonthgold = 0
            try:
                change24gold = data1[626]["change24"]
                print("change24")
                print(change24gold)
            except:
                print(" NO change24] ")
                change24gold = 0
            try:
                changeWeekgold = data1[626]["changeWeek"]
                print("changeWeek")
                print(changeWeekgold)
            except:
                print(" NO changeWeek] ")
                changeWeekgold = 0
            try:
                high24gold = data1[626]["high24"]
                print("high24gold")
                print(high24gold)
            except:
                print(" NO high24] ")
                high24gold = 0
            try:
                low24gold = data1[626]["low24"]
                print("low24")
                print(low24gold)
            except:
                print(" NO low24] ")
                low24gold = 0
            try:
                askgold = data1[626]["ask"]
                print("gold")
                print(gold)
            except:
                print(" NO ask] ")
                askgold = 0
            try:
                bidgold = data1[626]["bid"]
                print("bidgold")
                print(bidgold)
            except:
                print(" NO bid] ")
                bidgold = 0
        except:
            print(" NO GOLD")
        try:
            print("Checking BOPIXBO")
            try:
                last_price_bopixbo = data1[588]
                print("price_bopixbobopixbo11_____588     id: 604   ???")
                print(last_price_bopixbo)
            except:
                print(" NO quote_token1_last_price] ")
                last_price_bopixbo = 0
            try:
                last_price_bopixbo = data1[588]["last_price"]
                print("price_bopixbobopixbo11")
                print(last_price_bopixbo)
            except:
                print(" NO quote_token1_last_price] ")
                last_price_bopixbo = 0
            try:
                quote_tokenbopixbo = data1[588]["quote_token"]
                print("quote_token_bopixbo")
                print(quote_tokenbopixbo)
            except:
                print(" NO price_bopixbo_TO_waxbopixbo] ")
                price_bopixboTOwaxbopixbo = 0
            try:
                str1bopixbo = data1[588]["str"]
                print("str1")
                print(str1bopixbo)
            except:
                print(" NO quote_token1str] ")
                str1bopixbo = 0
            try:
                min_buybopixbo = data1[588]["min_buy"]
                print("min_buy")
                print(min_buybopixbo)
            except:
                print(" NO min-bopixbo_buy] ")
                min_buybopixbo = 0
            try:
                min_sellbopixbo = data1[588]["min_sell"]
                print("min_sellbopixbo")
                print(min_sellbopixbo)
            except:
                print(" NO min_sbopixboell]min_sell ")
                min_sellbopixbo = 0
            try:
                frozenbopixbo = data1[588]["frozen"]
                print("froze_bopixbo_or_not")
                print(frozenbopixbo)
            except:
                print(" NO frozen] ")
                frozenbopixbo = 0
            try:
                feebopixbo = data1[588]["fee"]
                print("fee")
                print(fee_bopixbo)
            except:
                print(" NO fee] ")
                feebopixbo = 0
            try:
                ticker_idbopixbo = data1[588]["ticker_id"]
                print("ticker_id_bopixbo _d")
                print(ticker_idbopixbo)
            except:
                print(" NO ticker_idbopixbo] ")
                ticker_idbopixbo = 0
            try:
                volume24bopixbo = data1[588]["volume24"]
                print("volume_2_bopixbo4")
                print(volume24bopixbo)
            except:
                print(" NO vobopixbolume24] ")
                volume24bopixbo = 0
            try:
                quote_volumebopixbo = data1[588]["quote_volume"]
                print("quote_volum_bopixbo_e")
                print(quote_volumebopixbo)
            except:
                print(" NO quote_vo_bopixbo_volume] ")
                quote_volumebopixbo = 0
            try:
                base_volumebopixbo = data1[588]["base_volume"]
                print("base_volume_bopixbo")
                print(base_volumebopixbo)
            except:
                print(" NO base_volume]_bopixbo ")
                base_volumebopixbo = 0
            try:
                volumeWeekbopixbo = data1[588]["volumeWeek"]
                print("volume_Week_bopixbo")
                print(volumeWeekbopixbo)
            except:
                print(" NO volume_Week] ")
                volumeWeekbopixbo = 0
            try:
                volumeMonthbopixbo = data1[588]["volumeMonth"]
                print("volume_Month_bopixbo")
                print(volumeMonthbopixbo)
            except:
                print(" NO volume_Month] ")
                volumeMonthbopixbo = 0
            try:
                change24bopixbo = data1[588]["change24"]
                print("change_24")
                print(change24bopixbo)
            except:
                print(" NO change_24] ")
                change24bopixbo = 0
            try:
                changeWeekbopixbo = data1[588]["changeWeek"]
                print("change_Week")
                print(changeWeekbopixbo)
            except:
                print(" NO chang_eWeek] ")
                changeWeekbopixbo = 0
            try:
                high24bopixbo = data1[588]["high24"]
                print("high_24_bopixbo")
                print(high24bopixbo)
            except:
                print(" NO high24] ")
                high24bopixbo = 0
            try:
                low24bopixbo = data1[588]["low24"]
                print("low_24")
                print(low24bopixbo)
            except:
                print(" NO low24] ")
                low24bopixbo = 0
            try:
                askbopixbo = data1[588]["ask"]
                print("ask_bopixbo")
                print(askbopixbo)
            except:
                print(" NO ask] ")
                askbopixbo = 0
            try:
                bidbopixbo = data1[588]["bid"]
                print("bid_bopixbo")
                print(bidbopixbo)
            except:
                print(" NO bid] ")
                bidbopixbo = 0
        except:
            print(" NO BOPIXBO")
        #em1 = discord.Embed(title="{}'s balances", description="```diff\n\n **DATA**:\n\n {} \n\n```" .format(info["name"], last_price ), color=discord.Color.blue())
        #await ctx.send(embed=em1)
        last_priceBOPIXBO = last_price_bopixbo
        print(last_priceBOPIXBO)
        aaagold = info["goldDict"]["balances_amount_GOLD"]
        aaa = info["bopiDict"]["balances_amount_BOPIXBO"]
        print("aaa Balance BOPIXBO")
        print(aaa)
        #bbb = aaa * BOPIXBOtoWAX
        print(WAXtoDOLLA)
        balanceBOPIX = info["bopiDict"]["balances_amount_BOPIXBO"]
        balanceGOLD = info["goldDict"]["balances_amount_GOLD"]
        balanceWAX = info["waxDict"]["balances_amount_WAX"]
        BOPIXBOtoWAX = float(last_price_bopixbo) * float(balanceBOPIX)#   {'symbol': {'name': 'PGL', 'precision': 4}, 'contract': 'prospectorsw', 'str': 'PGL@prospectorsw'}
        GOLDtoWAX = float(last_price_gold) * float(balanceGOLD)#   {'symbol': {'name': 'PGL', 'precision': 4}, 'contract': 'prospectorsw', 'str': 'PGL@prospectorsw'}
        bbb = float(aaa) * float(BOPIXBOtoWAX)
        bbbf = float(WAXtoDOLLA) * float(BOPIXBOtoWAX)
        print("aaabbbfff WAXtoUSD x BOPIXBO")
        print(bbbf)
        print("aaabbb BOPIXBO BALNACE x BOPIXBOtoWAX")
        print(bbb)
        ddd = WAXtoDOLLA
        ccc = float(bbb) * float(ddd)
        print("aaaccc BOPIXBO x BOtoWAX x WAXtoUSD")
        print(ccc)
        bbbfd = float(last_price_bopixbo) * float(balanceBOPIX)
        bbbfd111 = float(WAXtoDOLLA) * float(bbbfd)
        eee = float(WAXtoDOLLA) * float(balanceWAX)
        print("eee WAXtoDOLLA x balanceWAX")
        print(eee)
        #eee = float(WAXtoBOPIXBO) * float(balanceWAX)
        goldpricetowax = float(last_price_gold) * float(balanceGOLD)
        bbbfd111gold = float(WAXtoDOLLA) * float(goldpricetowax)
        goldpricetowax = goldpricetowax
        em = discord.Embed(title="{}'s balances".format(info["name"]), description="```diff\n\n **bobocoin.gm**:\n:BOPIXBO: {} \nBOPIXBO (‚âà WAXP {})(‚âà ${})\n Last Price: {} \n HIGH {} \n LOW {}\n BID {} \n ASK {}\n\n **WAX**:\n:WAXP: {} WAXP (‚âà ${})\n\n **GOLD**:\n:1/400WAX: {} GOLD (‚âà WAXP{})(‚âà ${})\n \n```" .format(balanceBOPIX, bbbfd, bbbfd111, last_price_bopixbo, high24bopixbo, low24bopixbo, bidbopixbo, askbopixbo, balanceWAX, eee, balanceGOLD, bbbfd111gold, goldpricetowax), color=discord.Color.blue())
        #em.add_field(name="Guild Name", value=info["castle_guild_name"], inline=True)
        #em.add_field(name="Guild Level", value=round(castle_guild_lvl,2), inline=True)
        #em.add_field(name="Player Name", value=info["name"], inline=False)
        #em.add_field(name="Race", value=info["race"], inline=True)
        #em.add_field(name="Level", value=info["lvl"], inline=True)
        #em.add_field(name="Status", value=info["status"], inline=False)
        #em.add_field(name="Class", value=info["class"], inline=True)
        #em.add_field(name="JobLv", value=info["sklvl"], inline=True)
        #em.add_field(name="BoboValue", value=info["bbvalue_stats"], inline=True)
        #em.add_field(name="Rank", value=info["count_click"], inline=True)
        #em.add_field(name="Wallet", value=info["account"], inline=False)
        #em.add_field(name="NFTs", value=info["assets"], inline=True)
        #em.add_field(name="Zombie Kills", value=info["zombie_kill_count_total"], inline=True)
        await ctx.send(embed=em)
        #await ctx.send("```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}".format(author, account, assets, info["boco"], success))
        return
    except IndexError:
        pass
        await ctx.send("You do not Own that NFT!")
        return
async def _check_set_vol18_1(ctx):
    temps = fileIO("temps/vol18.json", "load")
    #DONATIONS 1/69
    print("AAA")
    b_1 = temps["b_1"]
    b_2 = temps["b_2"]
    b_3 = temps["b_3"]
    b_4 = temps["b_4"]
    b_5 = temps["b_5"]
    b_6 = temps["b_6"]
    b_7 = temps["b_7"]
    b_8 = temps["b_8"]
    b_9 = temps["b_9"]
    b_10 = temps["b_10"]
    b_11 = temps["b_11"]
    b_12 = temps["b_12"]
    b_13 = temps["b_13"]
    b_14 = temps["b_14"]
    b_15 = temps["b_15"]
    b_16 = temps["b_16"]
    b_17 = temps["b_17"]
    b_18 = temps["b_18"] #
    try:
        #print("b_1") #637665-637733
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        #tbpfreecandy1 = tbpccc
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_1, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        #print("assets")
        #print(assets)
        info["account"] = account
        info["b_1"] = int(assets)
        info["successCheck"] = success
        #b_1 = info["b_1"]
        await ctx.send("Great You have Beggar.oxo NFTS!\n\n Ther BoboValue! depents on your need 0x0\n\n USE COMMAND {}vol18 again when you have more of them.\n This Action takes around 1 Minute".format(Prefix))
        #info["check_ccc"] = 2
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_1 IndexError No assets")
        await ctx.send("<@{}> That are many API calls are you sure to continue?\y or n?".format(author.id))
        def pred1(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred1)
        values = ["2", "No", "NO", "no", "1", "Yes", "ye", "Y", "y", "yes", "YES", "{}start".format(Prefix)]
        if str(answer1.content) in values:
            if answer1.content == "{}vol18".format(Prefix):
                return
            elif answer1.content == "yes" or answer1.content == "Yes" or answer1.content == "1":
                pass
                #info["checkVol18"] = amountoCheck
                fileIO("players/{}/info.json".format(author.id), "save", info)
                #await _check_1/69(ctx)
            elif answer1.content == "No" or answer1.content == "no" or answer1.content == "2":
                #info["race"] = "Human"
                return                    #fileIO("players/{}/info.json".format(author.id), "save", info)
                #await _pick_class(ctx)
                fileIO("players/{}/info.json".format(author.id), "save", info)
                #await _pick_class(ctx)
        else:
            await ctx.send("Next time choose one of the options.")
            return
    try:
        ##print("b_2") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_2, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_2"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ 2 IndexError")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_3 IndexError") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_3, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_3"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ 3 IndexError")
        #await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_4") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_4, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_4"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ 4 IndexError")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_5") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_5, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_5"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ 5 END RETURN more than not have")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_6") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_6, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_6"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ 6 IndexError")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_7 IndexError") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_7, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_7"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ 7 IndexError")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_8") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_8, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_8"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_8 IndexError")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_9") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_9, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_9"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ b_9 IndexError")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_10") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_10, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_10"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_10")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_11") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_11, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_11"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_11")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_12") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_12, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_12"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_12")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_13") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_13, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_13"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_13")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_14") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_14, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_14"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_14")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_15") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_15, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_15"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ b_15")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_16") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_16, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_16"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_16")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_17") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_17, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_17"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_17")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_18") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_18, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_18"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_18")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    #await _check_set_vol18_2(ctx)
    return
async def _check_set_vol18_2(ctx):
    temps = fileIO("temps/vol18.json", "load")
    print("BBB")
    #DONATIONS 1/69
    b_19 = temps["b_19"]
    b_20 = temps["b_20"]
    b_21 = temps["b_21"]
    b_22 = temps["b_22"]
    b_23 = temps["b_23"]
    b_24 = temps["b_24"]
    b_25 = temps["b_25"]
    b_26 = temps["b_26"]
    b_27 = temps["b_27"]
    b_28 = temps["b_28"]
    b_29 = temps["b_29"]
    b_30 = temps["b_30"]
    b_31 = temps["b_31"]
    b_32 = temps["b_32"]
    b_33 = temps["b_33"]
    b_34 = temps["b_34"]
    b_35 = temps["b_35"]
    b_36 = temps["b_36"] #
    try:
        ##print("b_19") #637664
        print("BBB try")
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_19, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_19"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("data")
        print(data)
    except IndexError:
        print("b_ b_2 index")
        await ctx.send("<@{}> That are many API calls are you sure to continue?\y or n?".format(author.id))
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    print("data HERE")
    try:
        ##print("b_20") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_20, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_20"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_20")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_21") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_21, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_21"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_21")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_22") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_22, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_22"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_22")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_23") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_23, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_23"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_23")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_24") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_24, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_24"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_24")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_25") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_25, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_25"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_25")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_26") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_26, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_26"] = int(assets)
        #print("26 assets amount")
        #print(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_26")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_27") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_27, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_27"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_27")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_28") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_28, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_28"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_28")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_29") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_29, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_29"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_29")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_30") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_30, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_30"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_30")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_31") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_31, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_31"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_31")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_32") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_32, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_32"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_32")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_33") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_33, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_33"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_33")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_34") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_34, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_34"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_34")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_35") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_35, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_35"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        pass
    except IndexError:
        #print("b_ b_35")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_36") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_36, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_36"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return
    except IndexError:
        #print("b_ b_36")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        return
    #await _check_set_vol18_3(ctx)
    return
async def _check_set_vol18_3(ctx):
    temps = fileIO("temps/vol18.json", "load")
    print("CCC")
    b_37 = temps["b_37"]
    b_38 = temps["b_38"]
    b_39 = temps["b_39"]
    b_40 = temps["b_40"]
    b_41 = temps["b_41"]
    b_42 = temps["b_42"]
    b_43 = temps["b_43"]
    b_44 = temps["b_44"]
    b_45 = temps["b_45"]
    b_46 = temps["b_46"]
    b_47 = temps["b_47"]
    b_48 = temps["b_48"]
    b_49 = temps["b_49"]
    b_50 = temps["b_50"]
    b_51 = temps["b_51"]
    b_52 = temps["b_52"]
    b_53 = temps["b_53"]
    b_54 = temps["b_54"] #
    try:
        ##print("b_37") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_37, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_37"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
       #pass
    except IndexError:
        #print("b_ b_37")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_38") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_38, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_38"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_38")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_39") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_39, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_39"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_39")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_40") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_40, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_40"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_40")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_41") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_41, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_41"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_41")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_42") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_42, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_42"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_42")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_43") #637664
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_43, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_43"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ b_43")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_44") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_44, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_44"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_44")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_45") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_45, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_45"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_45")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_46") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_46, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_46"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_46")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        #rint("b_47") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_47, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_47"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_47")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_48") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_48, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_48"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_48")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_49") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_49, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_49"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_48")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_50") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_50, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_50"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #ass
    except IndexError:
        #print("b_ b_48")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_51") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_51, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_51"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_48")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_52") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_52, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_52"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_48")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_53") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_53, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_53"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_48")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_54") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_54, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_54"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_54")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    #await _check_set_vol18_4(ctx)
    return
async def _check_set_vol18_4(ctx):
    print("DDD")
    temps = fileIO("temps/vol18.json", "load")
    b_55 = temps["b_55"]
    b_56 = temps["b_56"]
    b_57 = temps["b_57"]
    b_58 = temps["b_58"]
    b_59 = temps["b_59"]
    b_60 = temps["b_60"]
    b_61 = temps["b_61"]
    b_62 = temps["b_62"]
    b_63 = temps["b_63"]
    b_64 = temps["b_64"]
    b_65 = temps["b_65"]
    b_66 = temps["b_66"]
    b_67 = temps["b_67"]
    b_68 = temps["b_68"]
    b_69 = temps["b_69"]
    try:
        ##print("b_55") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_55, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_55"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_55")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_56") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_56, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_56"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_56")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_57") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_57, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_57"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ b_57")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_58") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_58, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_58"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_58")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_59") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_59, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_59"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_59")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_60") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_60, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_60"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_60")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_61") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_61, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_61"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_61")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_62") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_62, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_62"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_62")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_63") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_63, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_63"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_63")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_64") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_64, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_64"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ b_64")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        pass
    try:
        ##print("b_65") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_65, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_65"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_65")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_66") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_66, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_66"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_66")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_67") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_67, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_67"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_67")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_68") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_68, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_68"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_68")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_69") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_69, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_69"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #pass
    except IndexError:
        #print("b_ b_69")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\nHERE\nhttps://neftyblocks.com/collection/bobopixeloxo/drops/148911+147007+147004+146898\n".format())
        return
    return
async def _check_set_vol18_5(ctx):
    print("EEE")
    temps = fileIO("temps/vol18.json", "load")
    b_a = temps["b_a"]
    b_b = temps["b_b"]
    b_c = temps["b_c"]
    b_rR = temps["b_rR"]
    b_r1 = temps["b_r1"]
    b_r3 = temps["b_r3"]
    b_r5 = temps["b_r5"]
    b_r9 = temps["b_r9"]
    try:
        ##print("b_a") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_a, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_a"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_a")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_b") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_b, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_b"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_b")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_c") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_c, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_c"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_c")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_rR") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_rR, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_rR"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_rR")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r1") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r1, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r1"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_r1")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r3") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r3, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r3"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_r3")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r5") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r5, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r5"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_r5")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r9") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r9, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r9"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        ##print("b_ b_r9")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    return
async def _check_set_globalstats(ctx):
    print("EEE")
    temps = fileIO("temps/vol18.json", "load")
    b_a = temps["b_a"]
    b_b = temps["b_b"]
    b_c = temps["b_c"]
    b_rR = temps["b_rR"]
    b_r1 = temps["b_r1"]
    b_r3 = temps["b_r3"]
    b_r5 = temps["b_r5"]
    b_r9 = temps["b_r9"]
    try:
        ##print("b_a") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_a, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_a"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_a")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_b") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_b, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_b"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_b")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_c") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_c, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_c"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_c")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_rR") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_rR, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_rR"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_rR")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r1") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r1, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r1"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_r1")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r3") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r3, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r3"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_r3")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r5") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r5, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r5"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        #print("b_ b_r5")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    try:
        ##print("b_r9") #AAA
        channel = ctx.channel
        author = ctx.author
        message = ctx.message
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, b_r9, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        info["account"] = account
        info["b_r9"] = int(assets)
        info["successCheck"] = success
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except IndexError:
        ##print("b_ b_r9")
       # await ctx.send("You DO NOT have ANY BP0x0-0 1/69 NFTS!")
        #await ctx.send("You can get them from PackageVol.18 or at Market!\n".format())
        pass
    return
@bot.command(aliases=["sr"])
async def sync_roll(ctx):# s, arg: str
    #message = ctx.message
    #s = str(901411021082746970)
    print("Load Rolls")
    #
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    member = message.author
    guild = ctx.guild
    info = fileIO("players/{}/info.json".format(author.id), "load")
    discord_rolls = info["discord_rolls"]
    choices = []
    inv_list = [i for i in info["discord_rolls"]]
    choices.append(inv_list)
    if choices in inv_list or inv_list in choices :
        print("111")
        try:
            print("Show Rols")
            guildRollsAllauro = author.roles
            print("guildRollsAllauro")
            print(guildRollsAllauro)
            saferols = []
            saferols.append(guildRollsAllauro)
            #info["discord_rolls"] = saferols
            #info = fileIO("config/config.json", "load")  choices.append(inv_list)
            #info["fighter_member"] += 1
            #fileIO("config/config.json", "save", info)
        except:
            print("No Safe")
        try:
            print("Safe")
            role_names = [role.name for role in author.roles]
            if "Unborn" in role_names or "Unborn" in discord_rolls:
                var = discord.utils.get(message.guild.roles, name = "Unborn")
                # This will get the role you want to edit^
                try:
                    await member.add_roles(var) # adds the role
                    await var.edit(color=0x008000, reason="Universe0x0")
                except:
                    print("No Unborn")
            if "Wallet_OFF" in role_names or "Wallet_OFF" in discord_rolls:
                var = discord.utils.get(message.guild.roles, name = "Wallet_OFF")
                # This will get the role you want to edit^
                try:
                    await member.add_roles(var) # adds the role
                    await var.edit(color=0x008000, reason="Set Your Wallet")
                except:
                    print("No Wallet_OFF")
            if "Wallet_ON" in role_names:
                var = discord.utils.get(message.guild.roles, name = "Wallet_ON")
                # This will get the role you want to edit^
                try:
                    await member.add_roles(var) # adds the role
                    await var.edit(color=0x008000, reason="Good Luck")
                    var1 = discord.utils.get(message.guild.roles, name = "Base_Lv_0")
                    # This will get the role you want to edit^
                    try:
                        await member.add_roles(var1) # adds the role
                        await var1.edit(color=0x008000, reason="Base_Lv_0 Good Luck")
                    except:
                        print("No Base_Lv_0")
                except:
                    print("No Wallet_ON")
            if "Base_Lv_0" in role_names:
                var = discord.utils.get(message.guild.roles, name = "Base_Lv_0")
                # This will get the role you want to edit^
                try:
                    await member.add_roles(var) # adds the role
                    await var.edit(color=0x008000, reason="Base_Lv_0")
                except:
                    print("No Base_Lv_0")
            #
            #
        except:
            print("No Safe")
    ##
    ##
    ##
    ## ##
    ##    ##
    ##    ##
    ## ## ##    ##
    ## ## ##    ##
async def _check_setFighter(ctx):
    #calc all stats#
    #await _check_setFighter(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "Fighter")
    # This will get the role you want to edit^
    try:
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
    except:
        print("No Fighter")
    #and edits the color  async def _check_setNewbe(ctx):
    try:
        role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
        await member.remove_roles(role)
    except:
        print("No Novice")
    try:
        info = fileIO("config/config.json", "load")
        info["fighter_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        print("No Safe")
    #
    guild = ctx.guild
    role_GameMaster=discord.utils.get(ctx.guild.roles, name="GameMaster")
    role_GameMaster_0=discord.utils.get(ctx.guild.roles, name="GameMaster_0")
    role_GameMaster_1=discord.utils.get(ctx.guild.roles, name="GameMaster_1")
    role_GameMaster_2=discord.utils.get(ctx.guild.roles, name="GameMaster_2")
    role_gangster_0=discord.utils.get(ctx.guild.roles, name="gangster_0")
    role_gangster_I=discord.utils.get(ctx.guild.roles, name="gangster_I")
    role_gangster_II=discord.utils.get(ctx.guild.roles, name="gangster_II")
    role_gangster_III=discord.utils.get(ctx.guild.roles, name="gangster_III")
    role_police_0=discord.utils.get(ctx.guild.roles, name="police_0")
    role_police_I=discord.utils.get(ctx.guild.roles, name="police_I")
    role_police_II=discord.utils.get(ctx.guild.roles, name="police_II")
    role_police_III=discord.utils.get(ctx.guild.roles, name="police_III")
    role_mafia_0=discord.utils.get(ctx.guild.roles, name="mafia_0")
    role_mafia_I=discord.utils.get(ctx.guild.roles, name="mafia_I")
    role_mafia_II=discord.utils.get(ctx.guild.roles, name="mafia_II")
    role_mafia_III=discord.utils.get(ctx.guild.roles, name="mafia_III")
    role_Wanted_0=discord.utils.get(ctx.guild.roles, name="wanted_0")
    role_Wanted_I=discord.utils.get(ctx.guild.roles, name="wanted_I")
    role_Wanted_II=discord.utils.get(ctx.guild.roles, name="wanted_II")
    role_Wanted_III=discord.utils.get(ctx.guild.roles, name="wanted_III")
    role_hacker_0=discord.utils.get(ctx.guild.roles, name="hacker_0")
    role_hacker_I=discord.utils.get(ctx.guild.roles, name="hacker_I")
    role_hacker_II=discord.utils.get(ctx.guild.roles, name="hacker_II")
    role_hacker_III=discord.utils.get(ctx.guild.roles, name="hacker_III")
    role_Unborn=discord.utils.get(ctx.guild.roles, name="Unborn")
    role_Death=discord.utils.get(ctx.guild.roles, name="Death")
    role_Wallet_ON=discord.utils.get(ctx.guild.roles, name="Wallet_ON")
    role_Wallet_OFF=discord.utils.get(ctx.guild.roles, name="Wallet_OFF")
    role_Bot=discord.utils.get(ctx.guild.roles, name="Bot")
    role_Trader=discord.utils.get(ctx.guild.roles, name="Trader")
    role_Travler=discord.utils.get(ctx.guild.roles, name="Travler")
    role_Guild_Member=discord.utils.get(ctx.guild.roles, name="guild_member")
    role_Zombie_Lv_28=discord.utils.get(guild.roles, name="Zombie_Lv_28")
    role_Zombie_Lv_27=discord.utils.get(guild.roles, name="Zombie_Lv_27")
    role_Zombie_Lv_26=discord.utils.get(guild.roles, name="Zombie_Lv_26")
    role_Zombie_Lv_25=discord.utils.get(guild.roles, name="Zombie_Lv_25")
    role_Zombie_Lv_24=discord.utils.get(guild.roles, name="Zombie_Lv_24")
    role_Zombie_Lv_23=discord.utils.get(guild.roles, name="Zombie_Lv_23")
    role_Zombie_Lv_22=discord.utils.get(guild.roles, name="Zombie_Lv_22")
    role_Zombie_Lv_21=discord.utils.get(guild.roles, name="Zombie_Lv_21")
    role_Zombie_Lv_20=discord.utils.get(guild.roles, name="Zombie_Lv_20")
    role_Zombie_Lv_19=discord.utils.get(guild.roles, name="Zombie_Lv_19")
    role_Zombie_Lv_18=discord.utils.get(guild.roles, name="Zombie_Lv_18")
    role_Zombie_Lv_17=discord.utils.get(guild.roles, name="Zombie_Lv_17")
    role_Zombie_Lv_16=discord.utils.get(guild.roles, name="Zombie_Lv_16")
    role_Zombie_Lv_15=discord.utils.get(guild.roles, name="Zombie_Lv_15")
    role_Zombie_Lv_14=discord.utils.get(guild.roles, name="Zombie_Lv_14")
    role_Zombie_Lv_13=discord.utils.get(guild.roles, name="Zombie_Lv_13")
    role_Zombie_Lv_12=discord.utils.get(guild.roles, name="Zombie_Lv_12")
    role_Zombie_Lv_11=discord.utils.get(guild.roles, name="Zombie_Lv_11")
    role_Zombie_Lv_10=discord.utils.get(guild.roles, name="Zombie_Lv_10")
    role_Zombie_Lv_9=discord.utils.get(guild.roles, name="Zombie_Lv_9")
    role_Zombie_Lv_8=discord.utils.get(guild.roles, name="Zombie_Lv_8")
    role_Zombie_Lv_7=discord.utils.get(guild.roles, name="Zombie_Lv_7")
    role_Zombie_Lv_6=discord.utils.get(guild.roles, name="Zombie_Lv_6")
    role_Zombie_Lv_5=discord.utils.get(guild.roles, name="Zombie_Lv_5")
    role_Zombie_Lv_4=discord.utils.get(guild.roles, name="Zombie_Lv_4")
    role_Zombie_Lv_3=discord.utils.get(guild.roles, name="Zombie_Lv_3")
    role_Zombie_Lv_2=discord.utils.get(guild.roles, name="Zombie_Lv_2")
    role_Zombie_Lv_1=discord.utils.get(guild.roles, name="Zombie_Lv_1")
    role_Zombie_Lv_0=discord.utils.get(guild.roles, name="Zombie_Lv_0")
    role_Base_Lv_28=discord.utils.get(guild.roles, name="Base_Lv_28")
    role_Base_Lv_27=discord.utils.get(guild.roles, name="Base_Lv_27")
    role_Base_Lv_26=discord.utils.get(guild.roles, name="Base_Lv_26")
    role_Base_Lv_25=discord.utils.get(guild.roles, name="Base_Lv_25")
    role_Base_Lv_24=discord.utils.get(guild.roles, name="Base_Lv_24")
    role_Base_Lv_23=discord.utils.get(guild.roles, name="Base_Lv_23")
    role_Base_Lv_22=discord.utils.get(guild.roles, name="Base_Lv_22")
    role_Base_Lv_21=discord.utils.get(guild.roles, name="Base_Lv_21")
    role_Base_Lv_20=discord.utils.get(guild.roles, name="Base_Lv_20")
    role_Base_Lv_19=discord.utils.get(guild.roles, name="Base_Lv_19")
    role_Base_Lv_18=discord.utils.get(guild.roles, name="Base_Lv_18")
    role_Base_Lv_17=discord.utils.get(guild.roles, name="Base_Lv_17")
    role_Base_Lv_16=discord.utils.get(guild.roles, name="Base_Lv_16")
    role_Base_Lv_15=discord.utils.get(guild.roles, name="Base_Lv_15")
    role_Base_Lv_14=discord.utils.get(guild.roles, name="Base_Lv_14")
    role_Base_Lv_13=discord.utils.get(guild.roles, name="Base_Lv_13")
    role_Base_Lv_12=discord.utils.get(guild.roles, name="Base_Lv_12")
    role_Base_Lv_11=discord.utils.get(guild.roles, name="Base_Lv_11")
    role_Base_Lv_10=discord.utils.get(guild.roles, name="Base_Lv_10")
    role_Base_Lv_9=discord.utils.get(guild.roles, name="Base_Lv_9")
    role_Base_Lv_8=discord.utils.get(guild.roles, name="Base_Lv_8")
    role_Base_Lv_7=discord.utils.get(guild.roles, name="Base_Lv_7")
    role_Base_Lv_6=discord.utils.get(guild.roles, name="Base_Lv_6")
    role_Base_Lv_5=discord.utils.get(guild.roles, name="Base_Lv_5")
    role_Base_Lv_4=discord.utils.get(guild.roles, name="Base_Lv_4")
    role_Base_Lv_3=discord.utils.get(guild.roles, name="Base_Lv_3")
    role_Base_Lv_2=discord.utils.get(guild.roles, name="Base_Lv_2")
    role_Base_Lv_1=discord.utils.get(guild.roles, name="Base_Lv_1")
    role_Base_Lv_0=discord.utils.get(guild.roles, name="Base_Lv_0")
    role_Guild_Lv_28=discord.utils.get(guild.roles, name="Guild_Lv_28")
    role_Guild_Lv_27=discord.utils.get(guild.roles, name="Guild_Lv_27")
    role_Guild_Lv_26=discord.utils.get(guild.roles, name="Guild_Lv_26")
    role_Guild_Lv_25=discord.utils.get(guild.roles, name="Guild_Lv_25")
    role_Guild_Lv_24=discord.utils.get(guild.roles, name="Guild_Lv_24")
    role_Guild_Lv_23=discord.utils.get(guild.roles, name="Guild_Lv_23")
    role_Guild_Lv_22=discord.utils.get(guild.roles, name="Guild_Lv_22")
    role_Guild_Lv_21=discord.utils.get(guild.roles, name="Guild_Lv_21")
    role_Guild_Lv_20=discord.utils.get(guild.roles, name="Guild_Lv_20")
    role_Guild_Lv_19=discord.utils.get(guild.roles, name="Guild_Lv_19")
    role_Guild_Lv_18=discord.utils.get(guild.roles, name="Guild_Lv_18")
    role_Guild_Lv_17=discord.utils.get(guild.roles, name="Guild_Lv_17")
    role_Guild_Lv_16=discord.utils.get(guild.roles, name="Guild_Lv_16")
    role_Guild_Lv_15=discord.utils.get(guild.roles, name="Guild_Lv_15")
    role_Guild_Lv_14=discord.utils.get(guild.roles, name="Guild_Lv_14")
    role_Guild_Lv_13=discord.utils.get(guild.roles, name="Guild_Lv_13")
    role_Guild_Lv_12=discord.utils.get(guild.roles, name="Guild_Lv_12")
    role_Guild_Lv_11=discord.utils.get(guild.roles, name="Guild_Lv_11")
    role_Guild_Lv_10=discord.utils.get(guild.roles, name="Guild_Lv_10")
    role_Guild_Lv_9=discord.utils.get(guild.roles, name="Guild_Lv_9")
    role_Guild_Lv_8=discord.utils.get(guild.roles, name="Guild_Lv_8")
    role_Guild_Lv_7=discord.utils.get(guild.roles, name="Guild_Lv_7")
    role_Guild_Lv_6=discord.utils.get(guild.roles, name="Guild_Lv_6")
    role_Guild_Lv_5=discord.utils.get(guild.roles, name="Guild_Lv_5")
    role_Guild_Lv_4=discord.utils.get(guild.roles, name="Guild_Lv_4")
    role_Guild_Lv_3=discord.utils.get(guild.roles, name="Guild_Lv_3")
    role_Guild_Lv_2=discord.utils.get(guild.roles, name="Guild_Lv_2")
    role_Guild_Lv_1=discord.utils.get(guild.roles, name="Guild_Lv_1")
    role_Guild_Lv_0=discord.utils.get(guild.roles, name="Guild_Lv_0")
    role_x_value_Lv_28=discord.utils.get(guild.roles, name="x_value_Lv_28")
    role_x_value_Lv_27=discord.utils.get(guild.roles, name="x_value_Lv_27")
    role_x_value_Lv_26=discord.utils.get(guild.roles, name="x_value_Lv_26")
    role_x_value_Lv_25=discord.utils.get(guild.roles, name="x_value_Lv_25")
    role_x_value_Lv_24=discord.utils.get(guild.roles, name="x_value_Lv_24")
    role_x_value_Lv_23=discord.utils.get(guild.roles, name="x_value_Lv_23")
    role_x_value_Lv_22=discord.utils.get(guild.roles, name="x_value_Lv_22")
    role_x_value_Lv_21=discord.utils.get(guild.roles, name="x_value_Lv_21")
    role_x_value_Lv_20=discord.utils.get(guild.roles, name="x_value_Lv_20")
    role_x_value_Lv_19=discord.utils.get(guild.roles, name="x_value_Lv_19")
    role_x_value_Lv_18=discord.utils.get(guild.roles, name="x_value_Lv_18")
    role_x_value_Lv_17=discord.utils.get(guild.roles, name="x_value_Lv_17")
    role_x_value_Lv_16=discord.utils.get(guild.roles, name="x_value_Lv_16")
    role_x_value_Lv_15=discord.utils.get(guild.roles, name="x_value_Lv_15")
    role_x_value_Lv_14=discord.utils.get(guild.roles, name="x_value_Lv_14")
    role_x_value_Lv_13=discord.utils.get(guild.roles, name="x_value_Lv_13")
    role_x_value_Lv_12=discord.utils.get(guild.roles, name="x_value_Lv_12")
    role_x_value_Lv_11=discord.utils.get(guild.roles, name="x_value_Lv_11")
    role_x_value_Lv_10=discord.utils.get(guild.roles, name="x_value_Lv_10")
    role_x_value_Lv_9=discord.utils.get(guild.roles, name="x_value_Lv_9")
    role_x_value_Lv_8=discord.utils.get(guild.roles, name="x_value_Lv_8")
    role_x_value_Lv_7=discord.utils.get(guild.roles, name="x_value_Lv_7")
    role_x_value_Lv_6=discord.utils.get(guild.roles, name="x_value_Lv_6")
    role_x_value_Lv_5=discord.utils.get(guild.roles, name="x_value_Lv_5")
    role_x_value_Lv_4=discord.utils.get(guild.roles, name="x_value_Lv_4")
    role_x_value_Lv_3=discord.utils.get(guild.roles, name="x_value_Lv_3")
    role_x_value_Lv_2=discord.utils.get(guild.roles, name="x_value_Lv_2")
    role_x_value_Lv_1=discord.utils.get(guild.roles, name="x_value_Lv_1")
    role_x_value_Lv_0=discord.utils.get(guild.roles, name="x_value_Lv_0")
    role_BPvalv_28=discord.utils.get(guild.roles, name="BPvalv_28")
    role_BPvalv_27=discord.utils.get(guild.roles, name="BPvalv_27")
    role_BPvalv_26=discord.utils.get(guild.roles, name="BPvalv_26")
    role_BPvalv_25=discord.utils.get(guild.roles, name="BPvalv_25")
    role_BPvalv_24=discord.utils.get(guild.roles, name="BPvalv_24")
    role_BPvalv_23=discord.utils.get(guild.roles, name="BPvalv_23")
    role_BPvalv_22=discord.utils.get(guild.roles, name="BPvalv_22")
    role_BPvalv_21=discord.utils.get(guild.roles, name="BPvalv_21")
    role_BPvalv_20=discord.utils.get(guild.roles, name="BPvalv_20")
    role_BPvalv_19=discord.utils.get(guild.roles, name="BPvalv_19")
    role_BPvalv_18=discord.utils.get(guild.roles, name="BPvalv_18")
    role_BPvalv_17=discord.utils.get(guild.roles, name="BPvalv_17")
    role_BPvalv_16=discord.utils.get(guild.roles, name="BPvalv_16")
    role_BPvalv_15=discord.utils.get(guild.roles, name="BPvalv_15")
    role_BPvalv_14=discord.utils.get(guild.roles, name="BPvalv_14")
    role_BPvalv_13=discord.utils.get(guild.roles, name="BPvalv_13")
    role_BPvalv_12=discord.utils.get(guild.roles, name="BPvalv_12")
    role_BPvalv_11=discord.utils.get(guild.roles, name="BPvalv_11")
    role_BPvalv_10=discord.utils.get(guild.roles, name="BPvalv_10")
    role_BPvalv_9=discord.utils.get(guild.roles, name="BPvalv_9")
    role_BPvalv_8=discord.utils.get(guild.roles, name="BPvalv_8")
    role_BPvalv_7=discord.utils.get(guild.roles, name="BPvalv_7")
    role_BPvalv_6=discord.utils.get(guild.roles, name="BPvalv_6")
    role_BPvalv_5=discord.utils.get(guild.roles, name="BPvalv_5")
    role_BPvalv_4=discord.utils.get(guild.roles, name="BPvalv_4")
    role_BPvalv_3=discord.utils.get(guild.roles, name="BPvalv_3")
    role_BPvalv_2=discord.utils.get(guild.roles, name="BPvalv_2")
    role_BPvalv_1=discord.utils.get(guild.roles, name="BPvalv_1")
    role_BPvalv_0=discord.utils.get(guild.roles, name="BPvalv_0")
async def _check_panic0(ctx):
    #calc all stats#
    #await _check_setBotter(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "0")
    # This will get the role you want to edit^
    await member.add_roles(var) # adds the role
    await var.edit(color=0x009000, reason="Something is Nothing")
    #and edits the color  async def _check_setNewbe(ctx):
    role = discord.utils.get(ctx.author.guild.roles, name="0")
    await member.remove_roles(role)
    info11 = fileIO("players/{}/info.json".format(author.id), "load")
    infoFirst = fileIO("players/{}/infoFirst.json".format(author.id), "load")
    info = fileIO("config/config.json", "load")
    info["Commands_used"] += 1
    info["totalusers"] += 1
    infoFirst["status"] = str("0")
    info11["status"] = str("0")
    #info["0"] += 1
    fileIO("config/config.json", "save", info)
    fileIO("players/{}/info.json".format(author.id), "save", info11)
    fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", infoFirst)
    #await _check_setcommands_used(ctx)
async def _check_ready(ctx):
    #calc all stats#
    #await _check_ready(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    em = discord.Embed(description="```diff\n+ (neftyblocks)[https://neftyblocks.com/c/bobopixeloxo]!\n+ (AtomicHub)[https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=asc&sort=template_mint&symbol=WAX]```".format(), color=discord.Color.blue())
    await ctx.send(embed=em)
async def _check_setcommands_used(ctx):
    #calc all stats#
    #await _check_setBotter(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "-0")
    # This will get the role you want to edit^
    await member.add_roles(var) # adds the role
    await var.edit(color=0x009000, reason="Nothing is Something")
    #and edits the color  async def _check_setNewbe(ctx):
    role = discord.utils.get(ctx.author.guild.roles, name="-0")
    await member.remove_roles(role)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    infoFirst = fileIO("players/{}/infoFirst.json".format(author.id), "load")
    info = fileIO("config/config.json", "load")
    info["Commands_used"] += 1
    info["totalusers"] += 1
    infoFirst["status"] = str("-0")
    #info["status"] = str("-0")
    #info["-0"] += 1
    fileIO("config/config.json", "save", info)
    fileIO("players/{}/info.json".format(author.id), "save", info)
    fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", infoFirst)
    #await _check_setcommands_used(ctx)
async def _check_set00(ctx):
    #calc all stats#
    #await _check_set00(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "-0")
    infoFirst = fileIO("players/{}/infoFirst.json".format(author.id), "load")
    status_check = infoFirst["status"]
    if status_check == "-0":
        return
    else:
        infoFirst = fileIO("players/{}/infoFirst.json".format(author.id), "load")
        infoFirst["status"] = str("-0")
        fileIO("players/{}/info.json".format(author.id), "save", info)
        info = fileIO("config/config.json", "load")
        info["Commands_used"] += 1
        info["totalusers"] += 1
        info["-0"] += 1
        fileIO("config/config.json", "save", info)
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="Nothing is Something")
async def _check_setcommands_used(ctx):
    #calc all stats#
    #await _check_setBotter(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "-0")
    # This will get the role you want to edit^
    await member.add_roles(var) # adds the role
    await var.edit(color=0x009000, reason="Nothing is Something")
    #and edits the color  async def _check_setNewbe(ctx):
    role = discord.utils.get(ctx.author.guild.roles, name="-0")
    await member.remove_roles(role)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    infoFirst = fileIO("players/{}/infoFirst.json".format(author.id), "load")
    info = fileIO("config/config.json", "load")
    info["Commands_used"] += 1
    info["totalusers"] += 1
    infoFirst["status"] = str("-0")
    info["status"] = str("-0")
    info["-0"] += 1
    fileIO("config/config.json", "save", info)
    fileIO("players/{}/info.json".format(author.id), "save", info)
    fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", infoFirst)
async def _check_setNewbe(ctx):
    #calc all stats#
    #await _check_setNewbe(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "NEWBE")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error NEWBE")
async def _check_setWalleton(ctx):
    #calc all stats#
    #await _check_setWalleton(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Wallet_ON")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        #role = get (ctx.author.guild.roles, name = "Wallet-OFF")
        #await ctx.author.remove_roles (role)
        role = discord.utils.get(ctx.author.guild.roles, name="Wallet_OFF")
        await member.remove_roles(role)
        roleUnborn = discord.utils.get(ctx.author.guild.roles, name="Unborn")
        await member.remove_roles(roleUnborn)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Wallet_ON")
async def _check_setWalletoff(ctx):
    #calc all stats#
    #await _check_setWalletoff(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Wallet_OFF")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Wallet_OFF")
    try:
        var = discord.utils.get(message.guild.roles, name = "Base_Lv_0")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xff6fff, reason="New")
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Base_Lv_0")
    try:
        var = discord.utils.get(message.guild.roles, name = "Unborn")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xffffff, reason="New")
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Unborn")
async def _check_setTraveler(ctx):
    #calc all stats#
    #await _check_setTraveler(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Traveler")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008055, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        if discord.utils.get(ctx.author.guild.roles) == "NEWBE":
            role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
            await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["traveler_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Traveler")
async def _check_setTrader(ctx):
    #calc all stats#
    #await _check_setTrader(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Trader")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008500, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        if discord.utils.get(ctx.author.guild.roles) == "NEWBE":
            role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
            await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["trader_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Trader")
async def _check_setBotter(ctx):
    #calc all stats#
    #await _check_setBotter(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Botter")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x009000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["botter_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Botter")
async def _check_setCitizenRock(ctx):
    #calc all stats#
    #await _check_setCitizenRock(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Citizen-Rock")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x000D80, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["citizen_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Citizen-Rock")
async def _check_setCitizenPaper(ctx):
    #calc all stats#
    #await _check_setCitizenPaper(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Citizen-Paper")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x000D80, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["citizen_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Citizen-Paper")
async def _check_setCitizenScissor(ctx):
    #calc all stats#
    #await _check_setCitizenScissor(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Citizen-Scissor")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x000D80, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["citizen_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Citizen-Scissor")
async def _check_setNoviceI(ctx):
    #calc all stats#
    #await _check_setNoviceI(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Novice I")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x007000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="NEWBE")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["novice_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Citizen-Scissor")
async def _check_setFighter(ctx):
    #calc all stats#
    #await _check_setFighter(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Fighter")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008000, reason="The reason")
        except:
            print("No Fighter")
        #and edits the color  async def _check_setNewbe(ctx):
        try:
            role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
            await member.remove_roles(role)
        except:
            print("No Novice")
        try:
            info = fileIO("config/config.json", "load")
            info["fighter_member"] += 1
            fileIO("config/config.json", "save", info)
        except:
            print("No Safe")
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Fighter")
async def _check_setHacker(ctx):
    #calc all stats#
    #await _check_setHacker(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Hacker")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["hacker_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Hacker")
async def _check_setThief(ctx):
    #calc all stats#
    #await _check_setThief(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Thief")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["thief_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Thief")
async def _check_setMage(ctx):
    #calc all stats#
    #await _check_setMage(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Mage")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["mage_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Mage")
async def _check_setPaladin(ctx):
    #calc all stats#
    #await _check_setPaladin(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Paladin")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["paladin_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Paladin")
async def _check_setArcher(ctx):
    #calc all stats#
    #await _check_setArcher(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Archer")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0x008000, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        role = discord.utils.get(ctx.author.guild.roles, name="Novice I")
        await member.remove_roles(role)
        info = fileIO("config/config.json", "load")
        info["archer_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Archer")
async def _check_setVIP(ctx):
    #calc all stats#
    #await _check_setVIP(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "VIP")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xE5FF33, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["vip_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error VIP")
async def _check_setOwnersRock(ctx):
    #calc all stats#
    #await _check_setOwnersRock(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Owners-Rock")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xA933FF, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["owner_castle_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Owners-Rock")
async def _check_setOwnersScissor(ctx):
    #calc all stats#
    #await _check_setOwnersScissor(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "Owners-Scissor")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xA933FF, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["owner_castle_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error Owners-Scissor")
async def _check_setCollectiongNumbers(ctx):
    #calc all stats#
    #await _check_setOwnersRock(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "CollectiongNumbers")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xFF8633, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["owner_castle_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error CollectiongNumbers")
async def _check_setFakeingHeros(ctx):
    #calc all stats#
    #await _check_setOwnersRock(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "FakeingHeros")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xFF7633, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["owner_castle_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error FakeingHeros")
async def _check_setUnlimitedNumbers(ctx):
    #calc all stats#
    #await _check_setOwnersRock(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "UnlimitedNumbers")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xFF6633, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["owner_castle_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error UnlimitedNumbers")
async def _check_setDropCoins(ctx):
    #calc all stats#
    #await _check_setOwnersRock(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    try:
        var = discord.utils.get(message.guild.roles, name = "DropCoins")
        # This will get the role you want to edit^
        await member.add_roles(var) # adds the role
        await var.edit(color=0xFF5633, reason="The reason")
        #and edits the color  async def _check_setNewbe(ctx):
        info = fileIO("config/config.json", "load")
        info["owner_castle_member"] += 1
        fileIO("config/config.json", "save", info)
    except:
        await ctx.send("Are you in the Right Guild Server #bp0x0 Roll Error DropCoins")
async def _check_setCalcDroptoTotal(ctx):
    #calc all stats Save LVL UP#
    #await _check_setCalcDroptoTotal(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    xpmax = info["expmax"]
    xp = info["exp"]
    num = 100
    name = info["name"]
    lvl = info["lvl"]
    if info["race"] and info["class"] == "None":
        print("Char race None  infoRace")
        pass
    try:
        print("await ctx.send diff\n+ CalcDroptoTotal.format")
        #await ctx.send("```diff\n+ CalcDroptoTotal```".format())
        info["all_total_base_attack"] = round(info["all_drop_attack"], 0) + info["all_base_attack"]
        info["all_total_base_defence"] = round(info["all_drop_defence"], 0) + info["all_base_defence"]
        info["all_total_base_drop"] = round(info["all_drop"], 0) + info["all_base_drop"]
        info["all_total_base_boco"] = round(info["all_total_base_boco"], 0) + info["all_base_boco"]
        #info["exp"] = selected_enemy_exp + info["all_base_exp"]
        #selected_enemy_exp
        info["all_total_base_food"] = round(info["all_drop_food"], 0) + info["all_base_food"]
        info["all_total_base_gold"] = round(info["all_drop_gold"], 0) + info["all_base_gold"]
        info["all_total_base_hp"] = round(info["all_drop_hp"], 0) + info["all_base_hp"]
        info["all_total_base_key"] = round(info["all_drop_key"], 0) + info["all_base_key"]
        info["all_total_base_metal"] = round(info["all_drop_metal"], 0) + info["all_base_metal"]
        info["all_total_base_mp"] = round(info["all_drop_mp"], 0) + info["all_base_mp"]
        info["all_total_base_pot"] = round(info["all_drop_pot"], 0) + info["all_base_pot"]
        info["all_total_base_skexp"] = round(info["all_drop_skexp"], 0) + info["all_base_skexp"]
        info["all_total_base_sp"] = round(info["all_drop_sp"], 0) + info["all_base_sp"]
        info["all_total_base_stone"] = round(info["all_drop_stone"], 0) + info["all_base_stone"]
        info["all_total_base_wood"] = round(info["all_drop_wood"], 0) + info["all_base_wood"]
        info["all_total_base_people"] = round(info["all_drop_people"], 0) + info["all_base_people"]
        info["all_total_base_door"] = round(info["all_drop_door"], 0) + info["all_base_door"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #return
    except:
        #return
        print("ERRoR ")
async def _check_StatsUP(ctx):
    #calc all stats Save LVL UP#
    # await _check_StatsUP(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    xpmax = info["expmax"]
    xp = info["exp"]
    num = 100
    name = info["name"]
    lvl = info["lvl"]
    if xp >= xpmax:
        await ctx.send("```diff\n+ {} gained Stats!```".format(name))
        #info["all_base_attack"] += round(info["all_drop_attack"], 0)
        info["all_base_attack"] *= info["lvl"]
        #info["all_base_defence"] = round(info["all_drop_defence"], 0)
        info["all_base_defence"] *= info["lvl"]
        #info["all_base_drop"] = round(info["all_drop"], 0)
        info["all_base_defence"] *= info["lvl"]
        #info["all_base_boco"] = round(info["all_drop_boco"], 0)
        info["all_base_defence"] *= info["lvl"]
        #info["exp"] = selected_enemy_exp + info["all_drop_exp"]
        #selected_enemy_exp
        #info["all_base_food"] += round(info["all_drop_food"], 0)
        info["all_base_food"] *= info["lvl"]
        #info["all_base_gold"] += round(info["all_drop_gold"], 0)
        info["all_base_gold"] *= info["lvl"]
        #info["all_drop_hp"] += round(info["all_drop_hp"], 0)
        info["all_base_hp"] *= info["lvl"]
        #info["all_drop_key"] += round(info["all_drop_key"], 0)
        info["all_base_key"] *= info["lvl"]
        #info["all_drop_metal"] += round(info["all_drop_metal"], 0)
        info["all_base_metal"] *= info["lvl"]
        #info["all_drop_mp"] = round(info["all_drop_mp"], 0)
        info["all_base_mp"] *= info["lvl"]
        #info["all_drop_pot"] = round(info["all_drop_pot"], 0)
        info["all_base_pot"] *= info["lvl"]
        #info["all_drop_skexp"] = round(info["all_drop_skexp"], 0)
        info["all_base_skexp"] *= info["lvl"]
        #info["all_base_exp"] = round(info["all_drop_exp"], 0)
        info["all_base_exp"] *= info["lvl"]
        #info["all_drop_sp"] = round(info["all_drop_sp"], 0)
        info["all_base_sp"] *= info["lvl"]
        #info["all_drop_stone"] = round(info["all_drop_stone"], 0)
        info["all_base_stone"] *= info["lvl"]
        #info["all_drop_wood"] = round(info["all_drop_wood"], 0)
        info["all_base_wood"] *= info["lvl"]
        #info["all_drop_people"] = round(info["all_drop_people"], 0)
        info["all_base_people"] *= info["lvl"]
        #info["all_base_door"] = round(info["all_drop_door"], 0)
        info["all_base_door"] *= info["lvl"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return
    else:
        pass
async def _check_setExpLVL111(ctx):
    #calc all stats Save LVL UP#
    #await _check_setExpLVL(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    lvlexp = info["expmax"]
    xp = info["exp"]
    num = 100
    name = info["name"]
    #lvl = info["lvl"]
    #lvlexp = num * lvl
    print("xpmax")
    print(lvlexp)
    print("xpmax")
    print("xp")
    print(xp)
    print("xp")
    if xp >= lvlexp:
        lvl = info["lvl"]
        await ctx.send("```diff\n+ {} gained a level {}!```".format(name, lvl))
        info["lvl"] += 1
        info["expmax"] = lvlexp * 2
        enemy_xp = info["selected_enemy_exp"]
        all_attack = info["all_total_base_attack"]
        all_drop_attack = info["all_drop_attack"]
        all_defence = info["all_defence"]
        all_drop_defence = info["all_drop_defence"]
        all_drop = info["all_drop"]
        all_drop_boco = info["all_drop_boco"]
        all_drop_exp = info["all_drop_exp"]
        all_drop_food = info["all_drop_food"]
        all_drop_gold = info["all_drop_gold"]
        all_drop_hp = info["all_drop_hp"]
        all_drop_key = info["all_drop_key"]
        all_drop_metal = info["all_drop_metal"]
        all_drop_mp = info["all_drop_mp"]
        all_drop_pot = info["all_drop_pot"]
        all_drop_skexp = info["all_drop_skexp"]
        all_drop_sp = info["all_drop_sp"]
        all_drop_stone = info["all_drop_stone"]
        all_drop_wood = info["all_drop_wood"]
        all_drop_people = info["all_drop_people"]
        all_drop_door = info["all_drop_door"]
        info["all_base_attack"] *= all_drop_attack
        info["all_base_defence"] *= all_drop_defence
        info["all_base_drop"] *= all_drop
        info["all_base_boco"] *= all_drop_boco
        info["all_base_exp"] *= all_drop_exp
        info["all_base_food"] *= all_drop_food
        info["all_base_gold"] *= all_drop_gold
        info["all_base_hp"] *= all_drop_hp
        info["all_base_key"] *= all_drop_key
        info["all_base_metal"] *= all_drop_metal
        info["all_base_mp"] *= all_drop_mp
        info["all_base_pot"] *= all_drop_pot
        info["all_base_skexp"] *= all_drop_skexp
        info["all_base_sp"] *= all_drop_sp
        info["all_base_stone"] *= all_drop_stone
        info["all_base_people"] *= all_drop_people
        info["all_base_wood"] *= all_drop_wood
        info["all_base_door"] *= all_drop_door
        info["all_total_base_attack"] = info["all_base_attack"]
        info["all_total_base_defence"] = info["all_base_defence"]
        info["all_total_base_drop"] = info["all_base_drop"]
        info["all_total_base_boco"] = info["all_base_boco"]
        info["all_total_base_exp"] = info["all_base_exp"]
        info["all_total_base_food"] = info["all_base_food"]
        info["all_total_base_gold"] = info["all_base_gold"]
        info["all_total_base_hp"] = info["all_base_hp"]
        info["all_total_base_key"] = info["all_base_key"]
        info["all_total_base_metal"] = info["all_base_metal"]
        info["all_total_base_mp"] = info["all_base_mp"]
        info["all_total_base_pot"] = info["all_base_pot"]
        info["all_total_base_skexp"] = info["all_base_skexp"]
        info["all_total_base_sp"] = info["all_base_sp"]
        info["all_total_base_stone"] = info["all_base_stone"]
        info["all_total_base_people"] = info["all_base_people"]
        info["all_total_base_wood"] = info["all_base_wood"]
        info["all_total_base_door"] = info["all_base_door"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("xpmax")
        print(lvlexp)
        print("xpmax")
        print("xp")
        print(xp)
        print("xp")
        return await _check_setExpLVL(ctx)
    else:
        pass
async def _check_setExpLVL(ctx):
    #calc all stats Save LVL UP#
    #await _check_setExpLVL(ctx)
    print("Start LVLVLVLVLLV")
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    info = fileIO("players/{}/info.json".format(author.id), "load")
    xpmax = info["expmax"]
    xp = info["exp"]
    lvl = info["lvl"]
    skxpmax = info["expmaxsk"]
    skxp = info["skexp"]
    print("async def _check_setExpLVL ctx")
    print("xpmax")
    print(info["expmax"])
    print("xp")
    print(info["exp"])
    if info["exp"] >= info["expmax"]:
        print("async def _check_setExpLVL ctx>>>>>>if info exp  >= info expmax")
        #await ctx.send("```diff\n+ You gained Stats!```".format())
        lvlexp = info["expmax"]
        xp = info["exp"]
        num = 100
        name = info["name"]
        info["health"] = info["healthmax"]
        info["stamina"] = info["staminamax"]
        info["mana"] = info["manamax"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        if info["exp"] >= info["expmax"]:
            print("lvl IN HEREE")
            print(lvl)
            info["expmax"] = int(info["expmax"]) * 2
            freecandy = info["bpfreecandy"]
            high = 3
            low = 1
            maxran = freecandy + high
            random_1 = random.randint(low, maxran)
            random_2 = random.randint(low, maxran)
            random_3 = random.randint(low, high)
            random_4 = random.randint(low, maxran)
            random_5 = random.randint(low, maxran)
            random_6 = random.randint(low, high)
            random_7 = random.randint(low, maxran)
            random_9 = random.randint(low, maxran)
            random_10 = random.randint(low, maxran)
            random_11 = random.randint(low, maxran)
            random_12 = random.randint(low, high)
            random_13 = random.randint(low, high)
            random_14 = random.randint(low, high)
            random_15 = random.randint(low, maxran)
            random_16 = random.randint(low, maxran)
            random_17 = random.randint(low, maxran)
            random_18 = random.randint(low, high)
            random_19 = random.randint(low, maxran)
            random_8 = random.randint(low, high)
            random_21 = random.randint(low, maxran)
            random_256b = random.randint(low, maxran)
            random_512b = random.randint(low, maxran)
            random_1024b = random.randint(low, maxran)
            random_2048b = random.randint(low, maxran)
            random_4096b = random.randint(low, maxran)
            lvl = info["lvl"] + 1
            print(lvl)
            await ctx.send("```diff\n+ {} gained a level to Level {}!```".format(name, lvl))
            info["lvl"] += 1
            print(lvl)
            info["all_base_attack"] += random_10
            info["all_base_defence"] += random_11
            info["all_base_drop"] += random_12
            info["all_base_boco"] += random_13
            info["all_base_exp"] += random_14
            info["all_base_food"] += random_15
            info["all_base_gold"] += random_16
            info["all_base_hp"] += random_17
            info["all_base_key"] += random_18
            info["all_base_metal"] += random_19
            info["all_base_mp"] += random_1
            info["all_base_pot"] += random_2
            info["all_base_skexp"] += random_3
            info["all_base_sp"] += random_4
            info["all_base_stone"] += random_5
            info["all_base_people"] += random_6
            info["all_base_wood"] += random_7
            info["all_base_door"] += random_8
            info["expmax"] += random_9
            enemy_xp = info["selected_enemy_exp"]
            all_attack = info["all_total_base_attack"]
            all_drop_attack = info["all_drop_attack"]
            all_defence = info["all_defence"]
            all_drop_defence = info["all_drop_defence"]
            all_drop = info["all_drop"]
            all_drop_boco = info["all_drop_boco"]
            all_drop_exp = info["all_drop_exp"]
            all_drop_food = info["all_drop_food"]
            all_drop_gold = info["all_drop_gold"]
            all_drop_hp = info["all_drop_hp"]
            all_drop_key = info["all_drop_key"]
            all_drop_metal = info["all_drop_metal"]
            all_drop_mp = info["all_drop_mp"]
            all_drop_pot = info["all_drop_pot"]
            all_drop_skexp = info["all_drop_skexp"]
            all_drop_sp = info["all_drop_sp"]
            all_drop_stone = info["all_drop_stone"]
            all_drop_wood = info["all_drop_wood"]
            all_drop_people = info["all_drop_people"]
            all_drop_door = info["all_drop_door"]
            #info["all_base_attack"] += info["all_base_attack"]
            #info["all_base_defence"] += info["all_base_defence"]
            #info["all_base_drop"] += info["all_base_drop"]
            #info["all_base_boco"] += info["all_base_boco"]
            #info["all_base_exp"] += info["all_base_exp"]
            #info["all_base_food"] += info["all_base_food"]
            #info["all_base_gold"] += info["all_base_gold"]
            #info["all_base_hp"] += info["all_base_hp"]
            #info["all_base_key"] += info["all_base_key"]
            #info["all_base_metal"] += info["all_base_metal"]
            #info["all_base_mp"] += info["all_base_mp"]
            #info["all_base_pot"] += info["all_base_pot"] + lvl)
            #info["all_base_skexp"] += info["all_base_skexp"] + lvl)
            #info["all_base_sp"] += info["all_base_sp"] + lvl)
            #info["all_base_stone"] += info["all_base_stone"] + lvl)
            #info["all_base_people"] += info["all_base_people"] + lvl)
            #info["all_base_wood"] += info["all_base_wood"] + lvl)
            #info["all_base_door"] += info["all_base_door"]  + lvl)
            all_base_attack =info["all_base_attack"]
            all_base_defence=info["all_base_defence"]
            all_base_drop=info["all_base_drop"]
            all_base_boco=info["all_base_boco"]
            all_base_exp=info["all_base_exp"]
            all_base_food=info["all_base_food"]
            all_base_gold=info["all_base_gold"]
            all_base_hp=info["all_base_hp"]
            all_base_key=info["all_base_key"]
            all_base_metal=info["all_base_metal"]
            all_base_mp=info["all_base_mp"]
            all_base_pot=info["all_base_pot"]
            all_base_skexp=info["all_base_skexp"]
            all_base_sp=info["all_base_sp"]
            all_base_stone=info["all_base_stone"]
            all_base_people=info["all_base_people"]
            all_base_wood=info["all_base_wood"]
            all_base_door=info["all_base_door"]
            #info["all_total_base_attack"] = info["all_base_attack"] * lvl
            #info["all_total_base_defence"] = info["all_base_defence"] * lvl
            #info["all_total_base_drop"] = info["all_base_drop"] * lvl
            #info["all_total_base_boco"] = info["all_base_boco"] * lvl
            #info["all_total_base_exp"] = info["all_base_exp"] * lvl
            #info["all_total_base_food"] = info["all_base_food"] * lvl
            #info["all_total_base_gold"] = info["all_base_gold"] * lvl
            #info["all_total_base_hp"] = info["all_base_hp"] * lvl
            #info["all_total_base_key"] = info["all_base_key"] * lvl
            #info["all_total_base_metal"] = info["all_base_metal"] * lvl
            #info["all_total_base_mp"] = info["all_base_mp"] * lvl
            #info["all_total_base_pot"] = info["all_base_pot"] * lvl
            #info["all_total_base_skexp"] = info["all_base_skexp"] * lvl
            #info["all_total_base_sp"] = info["all_base_sp"] * lvl
            #info["all_total_base_stone"] = info["all_base_stone"] * lvl
            #info["all_total_base_people"] = info["all_base_people"] * lvl
            #info["all_total_base_wood"] = info["all_base_wood"] * lvl
            #info["all_total_base_door"] = info["all_base_door"] * lvl
            #info["all_total_base_attack"] = info["all_drop_attack"]# + info["all_base_attack"]
            #info["all_total_base_defence"] = info["all_base_defence"]# + info["all_drop_defence"]
            #info["all_total_base_drop"] = info["all_base_drop"]# + info["all_drop_boco"]
            #info["all_total_base_boco"] = info["all_base_boco"]# + info["all_drop_boco"]
            #info["all_total_base_exp"] = info["all_base_exp"]# + info["all_drop_exp"]
            #info["all_total_base_food"] = info["all_base_food"]# + info["all_drop_food"]
            #info["all_total_base_gold"] = info["all_base_gold"]# + info["all_drop_gold"]
            #info["all_total_base_hp"] = info["all_base_hp"]# + info["all_drop_hp"]
            #info["all_total_base_key"] = info["all_base_key"]# + info["all_drop_key"]
            #info["all_total_base_metal"] = info["all_base_metal"]# + info["all_drop_metal"]
            #info["all_total_base_mp"] = info["all_base_mp"]# + info["all_drop_mp"]
            #info["all_total_base_pot"] = info["all_base_pot"]# + info["all_drop_pot"]
            #info["all_total_base_skexp"] = info["all_base_skexp"]# + info["all_drop_skexp"]
            #info["all_total_base_sp"] = info["all_base_sp"]# + info["all_drop_sp"]
            #info["all_total_base_stone"] = info["all_base_stone"]# + info["all_drop_stone"]
            #info["all_total_base_people"] = info["all_base_people"]# + info["all_drop_people"]
            #info["all_total_base_wood"] = info["all_base_wood"]# + info["all_drop_wood"]
            #info["all_total_base_door"] = info["all_base_door"]# + info["all_drop_door"]
            hphainRan = random.randint(1, 100)
            spgainRan = random.randint(1, 100)
            mpgainRan = random.randint(1, 100)
            hphainRan /= 100
            spgainRan /= 100
            mpgainRan /= 100
            zwichenHp = info["all_total_base_hp"] * hphainRan
            info["healthmax"] += info["all_total_base_hp"] + hphainRan
            info["manamax"] += info["all_total_base_mp"] + spgainRan
            info["staminamax"] += info["all_total_base_sp"] + mpgainRan
            print("[===========HPgain==========]")
            print("hphainRan")
            print(hphainRan)
            print("all_total_base_hp")
            print(info["all_total_base_hp"])
            print("zwichenHp")
            print(zwichenHp)
            print("healthmax")
            print(info["healthmax"])
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print(lvl)
            print("[===========HPgain==========]")
            return await _check_setExpLVL(ctx)
    elif info["exp"] <= info["expmax"] and info["skexp"] >= info["expmaxsk"]:
        name = info["name"]
        skxpmax = info["expmaxsk"]
        skxp = info["skexp"]
        #lvl = info["lvl"]
        fileIO("players/{}/info.json".format(author.id), "save", info)
        joblvl = info["sklvl"] + 1
        await ctx.send("```diff\n+ {} gained a Job level to {}!```".format(name, joblvl))
        info["sklvl"] = int(info["sklvl"]) + 1
        info["expmaxsk"] = int(info["expmaxsk"]) * 2
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return await _check_setExpLVL(ctx)
    else:
        #await _check_totalshow(ctx)
        info = fileIO("players/{}/info.json".format(author.id), "load")
        lvl = info["lvl"]
        if lvl > 0 and lvl <= 1:
            print("Levle > 0 Level < 1 :")
        info["status"] = "Base_Lv_0"
        var = discord.utils.get(message.guild.roles, name = "Base_Lv_0")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128000, reason="Base_Lv_0 Levle > 0 Level < 1 ")
        except:
            print("No Base_Lv__0")
        if lvl > 1.0 and lvl <= 2.0:
            print("Levle > 0 Level < 1 :")
            info["status"] = "Base_Lv_1!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_1")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x008010, reason="Base_Lv_1 Levle > 1 Level < 2 ")
            except:
                print("No Base_Lv__1")
        if lvl > 2 and lvl <= 4:
            print("Levle > 0 Level < 1 :")
            info["status"] = "Base_Lv_2!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_2")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x558000, reason="Base_Lv_2 Levle > 2 Level < 4 ")
            except:
                print("No Base_Lv__2")
        if lvl > 4 and lvl <= 8:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_3!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_3")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x558000, reason="Base_Lv_3 Levle > x Level < x ")
            except:
                print("No Base_Lv__3")
        if lvl > 8 and lvl <= 16:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_4!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_4")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x558052, reason="Base_Lv_4 Levle > x Level < x ")
            except:
                print("No Base_Lv__4")
        if lvl > 32 and lvl <= 64:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_5!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_5")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x551552, reason="Base_Lv_5 Levle > x Level < x ")
            except:
                print("No Base_Lv__5")
        if lvl > 64 and lvl <= 128:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_6!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_6")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x521552, reason="Base_Lv_6 Levle > x Level < x ")
            except:
                print("No Base_Lv__6")
        if lvl > 128 and lvl <= 256:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_7!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_7")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x521572, reason="Base_Lv_7 Levle > x Level < x ")
            except:
                print("No Base_Lv__7")
        if lvl > 256 and lvl <= 512:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_8!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_8")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x121572, reason="Base_Lv_8 Levle > x Level < x ")
            except:
                print("No Base_Lv__8")
        if lvl > 512 and lvl <= 1024:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_9!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_9")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x122772, reason="Base_Lv_9 Levle > x Level < x ")
            except:
                print("No Base_Lv__9")
        if lvl > 1024 and lvl <= 2048:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_10!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_10")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_10 Levle > x Level < x ")
            except:
                print("No Base_Lv__10")
        if lvl > 2048 and lvl <= 4096:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_11!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_11")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_11 Levle > x Level < x ")
            except:
                print("No Base_Lv__11")
        if lvl > 4096 and lvl <= 8192:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_12!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_12")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_12 Levle > x Level < x ")
            except:
                print("No Base_Lv__12")
        if lvl > 8192 and lvl <= 16384:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_13!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_13")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_13 Levle > x Level < x ")
            except:
                print("No Base_Lv__13")
        if lvl > 16384 and lvl <= 32768:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_14!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_14")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_14 Levle > x Level < x ")
            except:
                print("No Base_Lv__14")
        if lvl > 32768 and lvl <= 65536:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_15!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_15")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_15 Levle > x Level < x ")
            except:
                print("No Base_Lv__15")
        if lvl > 65536 and lvl <= 131072:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_16!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_16")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_16 Levle > x Level < x ")
            except:
                print("No Base_Lv__16")
        if lvl > 131072 and lvl <= 262144:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_17!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_17")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_17 Levle > x Level < x ")
            except:
                print("No Base_Lv__17")
        if lvl > 262144 and lvl <= 524288:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_18!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_18")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_18 Levle > x Level < x ")
            except:
                print("No Base_Lv__18")
        if lvl > 524288 and lvl <= 1048576:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_19!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_19")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_19 Levle > x Level < x ")
            except:
                print("No Base_Lv__19")
        if lvl > 1048576 and lvl <= 2097152:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_20!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_20")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_2 Levle > x Level < x ")
            except:
                print("No Base_Lv_20")
        if lvl > 2097152 and lvl <= 4194304:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_21!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_21")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_20 Levle > x Level < x ")
            except:
                print("No Base_Lv_21")
        if lvl > 4194304 and lvl <= 8388608:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_22!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_22")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_21 Levle > x Level < x ")
            except:
                print("No Base_Lv_22")
        if lvl > 8388608 and lvl <= 16777216:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_23!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_23")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_23 Levle > x Level < x ")
            except:
                print("No Base_Lv_23")
        if lvl > 16777216 and lvl <= 33554432:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_24!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_24")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_24 Levle > x Level < x ")
            except:
                print("No Base_Lv_24")
        if lvl > 33554432 and lvl <= 67108864:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_25!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_25")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_25 Levle > x Level < x ")
            except:
                print("No Base_Lv_25")
        if lvl > 67108864 and lvl <= 134217728:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_26!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_26")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_26 Levle > x Level < x ")
            except:
                print("No Base_Lv_26")
        if lvl > 134217728 and lvl <= 268435456:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_27!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_27")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128472, reason="Base_Lv_27 Levle > x Level < x ")
            except:
                print("No Base_Lv_27")
        if lvl > 268435456 and lvl <= 536870912:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_28!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_28")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x128772, reason="Base_Lv_28 Levle > x Level < x ")
            except:
                print("No Base_Lv_28")
        if lvl > 536870912 and lvl <= 1073741824:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_28!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_28")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x198772, reason="Base_Lv_28+=+ Levle > x Level < x ")
            except:
                print("No Base_Lv_28")
        if lvl > 1073741824:
            print("Levle > x Level < x :")
            info["status"] = "Base_Lv_28!"
            var = discord.utils.get(message.guild.roles, name = "Base_Lv_28")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x198772, reason="Base_Lv_28++ Levle > x Level < x ")
            except:
                print("No Base_Lv_28+")
    #except:
        await ctx.send("Rolls given in BP0x0 Servers!")
        await _check_totalshow(ctx)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("lvl ELSE")
        print(lvl)
        print("return LVLVLVLVLLV")
    await _check_totalshow(ctx)
    return
async def _check_setSkLVL(ctx):
    #calc all stats Save LVL UP#
    #await _check_setSkLVL(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    #xp = info["exp"]
    num = 100
    name = info["name"]
    skxpmax = info["expmaxsk"]
    skxp = info["skexp"]
    lvl = info["lvl"]
    fileIO("players/{}/info.json".format(author.id), "save", info)
    if skxp >= skxpmax:
        if skxp >= skxpmax:
            print("SKElse if skis higher than max")
            print("SKxpmax")
            print(skxpmax)
            print("SKxp")
            print(skxp)
            await ctx.send("```diff\n+ {} gained a Job level!```".format(name))
            info["sklvl"] = info["sklvl"] + 1
            info["expmaxsk"] = info["expmaxsk"] * 2
            fileIO("players/{}/info.json".format(author.id), "save", info)
            return
            #await _check_setSkLVL(ctx)
        else:
            print("SKElse ELSE IN END")
            print("SKxpmax")
            print(skxpmax)
            print("SKxp")
            print(skxp)
            await ctx.send("Congratulations!!!")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            await _check_setSkLVL(ctx)
            await _check_rang(ctx)
            return
    else:
        print("SKElse  END")
        print("SKxpmax")
        print(skxpmax)
        print("SKxp")
        print(skxp)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return
async def _check_setCastleLVL(ctx):
    #calc all stats Save LVL UP#
    #await _check_set6(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    xp = info["exp"]
    num = 100
    name = info["name"]
    lvl = info["lvl"]
    lvlexp = num * lvl
    if xp >= lvlexp:
        await ctx.send("```diff\n+ {} gained a level!```".format(name))
        info["lvl"] = info["lvl"] + 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return await _check_setCastleLVL(ctx)
    else:
        pass
async def _check_setPetLVL(ctx):
    #calc all stats Save LVL UP#
    #await _check_set6(ctx)
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    xp = info["exp"]
    num = 100
    name = info["name"]
    lvl = info["lvl"]
    lvlexp = num * lvl
    if xp >= lvlexp:
        await ctx.send("```diff\n+ {} gained a level!```".format(name))
        info["lvl"] = info["lvl"] + 1
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return await _check_setLVL(ctx)
    else:
        pass
async def _check_setLVLupppp(ctx):
    #await _check_setBoboValue(ctx)
    # 0 = assetsXslot boboAll 0s+0+1+2   WepLvlAll = bpv0+bpv1+bpv2
    # BoboValue = WepLvAll + 0s
    print("_check_setBoboValuelvl")
    print("_check_setBoboValuelvl")
    print("_check_setBoboValuelvl")
    print("_check_setBoboValuelvl")
    try:
        author = ctx.author
        member = ctx.message.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        enemy_xp = info["selected_enemy_exp"]
        selected_enemy = info["selected_enemy_player"]
        selected_enemy = info["selected_enemy"]
        all_drop_exp = info["all_drop_exp"]
        expMon1 = info["selected_enemy_exp"]
        expMon = expMon1 + all_drop_exp
        info["exp"] = info["selected_enemy_exp"] + expMon
        goldDrop = info["selected_enemy_gold"] + info["all_drop_gold"]
        print("expMon")
        print(expMon)
        print("goldDrop")
        print(goldDrop)
        info["gold"] = info["lvl"] + goldDrop
        #info["lvl"] = info["lvl"] + 1
        #info["lvl"] = info["lvl"] + 1
        #info["lvl"] = info["lvl"] + 1
        #"print("role")
        #"print(role)
        info["selected_enemy"] = "None"
        info["selected_enemy_player"] = "None"
        info["infight_status"] = "False"
        #info["selected_enemy_exp"] = round(enemy_exp, 0)
        #info["selected_enemy_gold"] = round(enemy_gold, 0)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        #print("member")
        #print("role")
    except Error:
        pass
        await ctx.send("_check_setNEWGameERROR!")
async def _check_setCastleValue(ctx):
    #await _check_setCastleValue(ctx)
    # 0 = assetsXslot boboAll 0s+0+1+2   WepLvlAll = bpv0+bpv1+bpv2
    # BoboValue = WepLvAll + 0s
    print("_check_setBoboValue")
    print("_check_setBoboValue")
    print("_check_setBoboValue")
    print("_check_setBoboValue")
    try:
        ginfo = fileIO("global/info.json".format(), "load")
    except:
        print("No Globle Castle DATA")
    try:
        author = ctx.author
        member = ctx.message.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        if info["race"] and info["class"] == "None":
            await ctx.send("Please start your character using `{}start`".format(Prefix))
            return
    except:
        print("No PlayerDATA")
        # USE FIRSTPLAYER info.json
        #info = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
        #if info["race"] and info["class"] == "None":
            #await ctx.send("Please start your character using `{}start`".format(Prefix))
        return
    castle_guild_name = info["castle_guild_name"]
    print("castle_guild_name")
    print(castle_guild_name)
    if castle_guild_name == "PaperCastle":
        account=ginfo["Paper_Castle"]["account"]
        assets=ginfo["Paper_Castle"]["assets"]
        authorID=ginfo["Paper_Castle"]["authorID"]
        assets_fg=ginfo["Paper_Castle"]["assets_fg"]
        bag_army=ginfo["Paper_Castle"]["bag_army"]
        bag_boco=ginfo["Paper_Castle"]["bag_boco"]
        bag_food=ginfo["Paper_Castle"]["bag_food"]
        bag_gold=ginfo["Paper_Castle"]["bag_gold"]
        bag_key=ginfo["Paper_Castle"]["bag_key"]
        bag_metal=ginfo["Paper_Castle"]["bag_metal"]
        bag_people=ginfo["Paper_Castle"]["bag_people"]
        bag_small=ginfo["Paper_Castle"]["bag_small"]
        bag_stone=ginfo["Paper_Castle"]["bag_stone"]
        bag_wood=ginfo["Paper_Castle"]["bag_wood"]
        bbvalue=ginfo["Paper_Castle"]["bbvalue"]
        bigpot=ginfo["Paper_Castle"]["bigpot"]
        box_army=ginfo["Paper_Castle"]["box_army"]
        box_army_lvl=ginfo["Paper_Castle"]["box_army_lvl"]
        box_boco=ginfo["Paper_Castle"]["box_boco"]
        box_boco_lvl=ginfo["Paper_Castle"]["box_boco_lvl"]
        box_food=ginfo["Paper_Castle"]["box_food"]
        box_food_lvl=ginfo["Paper_Castle"]["box_food_lvl"]
        box_gold=ginfo["Paper_Castle"]["box_gold"]
        box_gold_lvl=ginfo["Paper_Castle"]["box_gold_lvl"]
        box_inventory=ginfo["Paper_Castle"]["box_inventory"]
        box_inventory_lvl=ginfo["Paper_Castle"]["box_inventory_lvl"]
        box_metal=ginfo["Paper_Castle"]["box_metal"]
        box_metal_lvl=ginfo["Paper_Castle"]["box_metal_lvl"]
        box_people=ginfo["Paper_Castle"]["box_people"]
        box_people_lvl=ginfo["Paper_Castle"]["box_people_lvl"]
        box_stone=ginfo["Paper_Castle"]["box_stone"]
        box_stone_lvl=ginfo["Paper_Castle"]["box_stone_lvl"]
        box_wood=ginfo["Paper_Castle"]["box_wood"]
        box_wood_lvl=ginfo["Paper_Castle"]["box_wood_lvl"]
        box_stone=ginfo["Paper_Castle"]["box_stone"]
        buff=ginfo["Paper_Castle"]["buff"]
        castle_aether=ginfo["Paper_Castle"]["castle_aether"]
        castle_ali=ginfo["Paper_Castle"]["castle_ali"]
        castle_antimat=ginfo["Paper_Castle"]["castle_antimat"]
        castle_army=ginfo["Paper_Castle"]["castle_army"]
        castle_army_lvl=ginfo["Paper_Castle"]["castle_army_lvl"]
        castle_army_paper=ginfo["Paper_Castle"]["castle_army_paper"]
        castle_army_paper_lvl=ginfo["Paper_Castle"]["castle_army_paper_lvl"]
        castle_army_rock=ginfo["Paper_Castle"]["castle_army_rock"]
        castle_army_rock_lvl=ginfo["Paper_Castle"]["castle_army_rock_lvl"]
        castle_army_scissor=ginfo["Paper_Castle"]["castle_army_scissor"]
        castle_army_scissor_lvl=ginfo["Paper_Castle"]["castle_army_scissor_lvl"]
        castle_armym=ginfo["Paper_Castle"]["castle_armym"]
        castle_atk=ginfo["Paper_Castle"]["castle_atk"]
        castle_bgold=ginfo["Paper_Castle"]["castle_bgold"]
        castle_blue=ginfo["Paper_Castle"]["castle_blue"]
        castle_bobocoin=ginfo["Paper_Castle"]["castle_bobocoin"]
        castle_boco=ginfo["Paper_Castle"]["castle_boco"]
        castle_bocom=ginfo["Paper_Castle"]["castle_bocom"]
        castle_bopixbo=ginfo["Paper_Castle"]["castle_bopixbo"]
        castle_cait=ginfo["Paper_Castle"]["castle_cait"]
        castle_def=ginfo["Paper_Castle"]["castle_def"]
        castle_dept=ginfo["Paper_Castle"]["castle_dept"]
        castle_door=ginfo["Paper_Castle"]["castle_door"]
        castle_drop_rate=ginfo["Paper_Castle"]["castle_drop_rate"]
        castle_dust=ginfo["Paper_Castle"]["castle_dust"]
        castle_eos=ginfo["Paper_Castle"]["castle_eos"]
        castle_food=ginfo["Paper_Castle"]["castle_food"]
        castle_foodm=ginfo["Paper_Castle"]["castle_foodm"]
        castle_gold=ginfo["Paper_Castle"]["castle_gold"]
        castle_goldm=ginfo["Paper_Castle"]["castle_goldm"]
        castle_guard=ginfo["Paper_Castle"]["castle_guard"]
        castle_guard_lvl=ginfo["Paper_Castle"]["castle_guard_lvl"]
        castle_guild_lvl=ginfo["Paper_Castle"]["castle_guild_lvl"]
        castle_inventory=ginfo["Paper_Castle"]["castle_inventory"]
        castle_invv_space=ginfo["Paper_Castle"]["castle_invv_space"]
        castle_lvl=ginfo["Paper_Castle"]["castle_lvl"]
        castle_metal=ginfo["Paper_Castle"]["castle_metal"]
        castle_metalm=ginfo["Paper_Castle"]["castle_metalm"]
        castle_name=ginfo["Paper_Castle"]["castle_name"]
        castle_nefty=ginfo["Paper_Castle"]["castle_nefty"]
        castle_owner=ginfo["Paper_Castle"]["castle_owner"]
        castle_paper=ginfo["Paper_Castle"]["castle_paper"]
        castle_people=ginfo["Paper_Castle"]["castle_people"]
        castle_peoplem=ginfo["Paper_Castle"]["castle_peoplem"]
        castle_pixel=ginfo["Paper_Castle"]["castle_pixel"]
        castle_rank=ginfo["Paper_Castle"]["castle_rank"]
        castle_rock=ginfo["Paper_Castle"]["castle_rock"]
        castle_scissor=ginfo["Paper_Castle"]["castle_scissor"]
        castle_stone=ginfo["Paper_Castle"]["castle_stone"]
        castle_stonem=ginfo["Paper_Castle"]["castle_stonem"]
        castle_tlm=ginfo["Paper_Castle"]["castle_tlm"]
        castle_token_pixel=ginfo["Paper_Castle"]["castle_token_pixel"]
        castle_tower_lvl=ginfo["Paper_Castle"]["castle_tower_lvl"]
        castle_usdt=ginfo["Paper_Castle"]["castle_usdt"]
        castle_wall_lvl=ginfo["Paper_Castle"]["castle_wall_lvl"]
        castle_wax=ginfo["Paper_Castle"]["castle_wax"]
        castle_wgold=ginfo["Paper_Castle"]["castle_wgold"]
        castle_wojak=ginfo["Paper_Castle"]["castle_wojak"]
        castle_wood=ginfo["Paper_Castle"]["castle_wood"]
        castle_woodm=ginfo["Paper_Castle"]["castle_woodm"]
        castle_work_block=ginfo["Paper_Castle"]["castle_work_block"]
        channel=ginfo["Paper_Castle"]["channel"]
        check_guess=ginfo["Paper_Castle"]["check_guess"]
        chop_block=ginfo["Paper_Castle"]["chop_block"]
        count_amnesiaatk=ginfo["Paper_Castle"]["count_amnesiaatk"]
        count_draw=ginfo["Paper_Castle"]["count_draw"]
        count_lose=ginfo["Paper_Castle"]["count_lose"]
        count_played=ginfo["Paper_Castle"]["count_played"]
        count_titlenum=ginfo["Paper_Castle"]["count_titlenum"]
        count_treue=ginfo["Paper_Castle"]["count_treue"]
        count_win=ginfo["Paper_Castle"]["count_win"]
        count_wincry=ginfo["Paper_Castle"]["count_wincry"]
        craftable=ginfo["Paper_Castle"]["craftable"]
        daily_block=ginfo["Paper_Castle"]["daily_block"]
        data=ginfo["Paper_Castle"]["data"]
        deaths=ginfo["Paper_Castle"]["deaths"]
        defence=ginfo["Paper_Castle"]["defence"]
        door=ginfo["Paper_Castle"]["door"]
        door_enemy=ginfo["Paper_Castle"]["door_enemy"]
        door_enemy_hp=ginfo["Paper_Castle"]["door_enemy_hp"]
        doorenemyhp=ginfo["Paper_Castle"]["doorenemyhp"]
        doorenemylvl=ginfo["Paper_Castle"]["doorenemylvl"]
        drop_boco=ginfo["Paper_Castle"]["drop_boco"]
        drop_food=ginfo["Paper_Castle"]["drop_food"]
        drop_gold=ginfo["Paper_Castle"]["drop_gold"]
        drop_key=ginfo["Paper_Castle"]["drop_key"]
        drop_metal=ginfo["Paper_Castle"]["drop_metal"]
        drop_people=ginfo["Paper_Castle"]["drop_people"]
        drop_stone=ginfo["Paper_Castle"]["drop_stone"]
        drop_wood=ginfo["Paper_Castle"]["drop_wood"]
        duneon_enemy_hp=ginfo["Paper_Castle"]["duneon_enemy_hp"]
        dungeon_enemy=ginfo["Paper_Castle"]["dungeon_enemy"]
        earthpot=ginfo["Paper_Castle"]["earthpot"]
        emptybag=ginfo["Paper_Castle"]["emptybag"]
        enemieskilled=ginfo["Paper_Castle"]["enemieskilled"]
        exp=ginfo["Paper_Castle"]["exp"]
        expmax=ginfo["Paper_Castle"]["expmax"]
        expmaxsk=ginfo["Paper_Castle"]["expmaxsk"]
        firepot=ginfo["Paper_Castle"]["firepot"]
        food=ginfo["Paper_Castle"]["food"]
        food_drop=ginfo["Paper_Castle"]["food_drop"]
        gold=ginfo["Paper_Castle"]["gold"]
        gold_drop=ginfo["Paper_Castle"]["gold_drop"]
        health=ginfo["Paper_Castle"]["health"]
        healthmax=ginfo["Paper_Castle"]["healthmax"]
        hp_drop=ginfo["Paper_Castle"]["hp_drop"]
        in_dungeon=ginfo["Paper_Castle"]["in_dungeon"]
        in_party=ginfo["Paper_Castle"]["in_party"]
        inbuff=ginfo["Paper_Castle"]["inbuff"]
        infight_status=ginfo["Paper_Castle"]["infight_status"]
        ginfo_member=ginfo["Paper_Castle"]["info_member"]
        inguild=ginfo["Paper_Castle"]["inguild"]
        inhavenft_status=ginfo["Paper_Castle"]["inhavenft_status"]
        inventory=ginfo["Paper_Castle"]["inventory"]
        inventory_lvl=ginfo["Paper_Castle"]["inventory_lvl"]
        itemdrop_test=ginfo["Paper_Castle"]["itemdrop_test"]
        key=ginfo["Paper_Castle"]["key"]
        key_drop=ginfo["Paper_Castle"]["key_drop"]
        location=ginfo["Paper_Castle"]["location"]
        lockedbox=ginfo["Paper_Castle"]["lockedbox"]
        lootbag=ginfo["Paper_Castle"]["lootbag"]
        losecry=ginfo["Paper_Castle"]["losecry"]
        luknum=ginfo["Paper_Castle"]["luknum"]
        lvl=ginfo["Paper_Castle"]["lvl"]
        mana=ginfo["Paper_Castle"]["mana"]
        manamax=ginfo["Paper_Castle"]["manamax"]
        max_def=ginfo["Paper_Castle"]["max_def"]
        max_dmg=ginfo["Paper_Castle"]["max_dmg"]
        max_skexp=ginfo["Paper_Castle"]["max_skexp"]
        mediumpot=ginfo["Paper_Castle"]["mediumpot"]
        memberid=ginfo["Paper_Castle"]["memberid"]
        metal=ginfo["Paper_Castle"]["metal"]
        metal_drop=ginfo["Paper_Castle"]["metal_drop"]
        mind=ginfo["Paper_Castle"]["mind"]
        mine_block=ginfo["Paper_Castle"]["mine_block"]
        mp_drop=ginfo["Paper_Castle"]["mp_drop"]
        multybp0x0=ginfo["Paper_Castle"]["multybp0x0"]
        name=ginfo["Paper_Castle"]["name"]
        name_castle_owner=ginfo["Paper_Castle"]["name_castle_owner"]
        nature_boco=ginfo["Paper_Castle"]["nature_boco"]
        nature_food=ginfo["Paper_Castle"]["nature_food"]
        nature_key=ginfo["Paper_Castle"]["nature_key"]
        nature_metal=ginfo["Paper_Castle"]["nature_metal"]
        nature_gold=ginfo["Paper_Castle"]["nature_gold"]
        nature_people=ginfo["Paper_Castle"]["nature_people"]
        nature_stone=ginfo["Paper_Castle"]["nature_stone"]
        nature_wood=ginfo["Paper_Castle"]["nature_wood"]
        pet=ginfo["Paper_Castle"]["pet"]
        qakey=ginfo["Paper_Castle"]["qakey"]
        rabbat=ginfo["Paper_Castle"]["rabbat"]
        race=ginfo["Paper_Castle"]["race"]
        rank=ginfo["Paper_Castle"]["rank"]
        rankkill=ginfo["Paper_Castle"]["rankkill"]
        rest_block=ginfo["Paper_Castle"]["rest_block"]
        roaming=ginfo["Paper_Castle"]["roaming"]
        runaways=ginfo["Paper_Castle"]["runaways"]
        score=ginfo["Paper_Castle"]["score"]
        selected_attack=ginfo["Paper_Castle"]["selected_attack"]
        selected_castle=ginfo["Paper_Castle"]["selected_castle"]
        selected_defence=ginfo["Paper_Castle"]["selected_defence"]
        selected_enemy=ginfo["Paper_Castle"]["selected_enemy"]
        try:
            selected_enemy_player=ginfo["Paper_Castle"]["selected_enemy_player"]
        except:
            selected_enemy_player="None"
        selected_enemy_attack=ginfo["Paper_Castle"]["selected_enemy_attack"]
        selected_enemy_defence=ginfo["Paper_Castle"]["selected_enemy_defence"]
        selected_enemy_hp=ginfo["Paper_Castle"]["selected_enemy_hp"]
        selected_enemy_indoor=ginfo["Paper_Castle"]["selected_enemy_indoor"]
        selected_enemy_lvl=ginfo["Paper_Castle"]["selected_enemy_lvl"]
        selected_enemy_name=ginfo["Paper_Castle"]["selected_enemy_name"]
        selected_hp=ginfo["Paper_Castle"]["selected_hp"]
        selected_item=ginfo["Paper_Castle"]["selected_item"]
        selected_lvl=ginfo["Paper_Castle"]["selected_lvl"]
        selected_name=ginfo["Paper_Castle"]["selected_name"]
        selected_p=ginfo["Paper_Castle"]["selected_p"]
        selected_player=ginfo["Paper_Castle"]["selected_player"]
        selected_rank=ginfo["Paper_Castle"]["selected_rank"]
        selected_status=ginfo["Paper_Castle"]["selected_status"]
        skexp=ginfo["Paper_Castle"]["skexp"]
        skill_inventory=ginfo["Paper_Castle"]["skill_inventory"]
        skills_learned=ginfo["Paper_Castle"]["skills_learned"]
        sklvl=ginfo["Paper_Castle"]["sklvl"]
        smallpot=ginfo["Paper_Castle"]["smallpot"]
        smallpot_drop=ginfo["Paper_Castle"]["smallpot_drop"]
        sp_drop=ginfo["Paper_Castle"]["sp_drop"]
        speedpot=ginfo["Paper_Castle"]["speedpot"]
        stamina=ginfo["Paper_Castle"]["stamina"]
        staminamax=ginfo["Paper_Castle"]["staminamax"]
        status=ginfo["Paper_Castle"]["status"]
        stone=ginfo["Paper_Castle"]["stone"]
        stone_drop=ginfo["Paper_Castle"]["stone_drop"]
        successCheck=ginfo["Paper_Castle"]["successCheck"]
        title=ginfo["Paper_Castle"]["title"]
        tower_inventory=ginfo["Paper_Castle"]["tower_inventory"]
        tower=ginfo["Scissor_Castle"]["tower"]
        traveling_block=ginfo["Paper_Castle"]["traveling_block"]
        upitem=ginfo["Paper_Castle"]["upitem"]
        wallet=ginfo["Paper_Castle"]["wallet"]
        waterpot=ginfo["Paper_Castle"]["waterpot"]
        windpot=ginfo["Paper_Castle"]["windpot"]
        wood=ginfo["Paper_Castle"]["wood"]
        wood_drop=ginfo["Paper_Castle"]["wood_drop"]
        woodbox=ginfo["Paper_Castle"]["woodbox"]
        all_attack=ginfo["Paper_Castle"]["all_attack"]
        all_defence=ginfo["Paper_Castle"]["all_defence"]
        all_drop=ginfo["Paper_Castle"]["all_drop"]
        all_drop_boco=ginfo["Paper_Castle"]["all_drop_boco"]
        all_drop_exp=ginfo["Paper_Castle"]["all_drop_exp"]
        all_drop_food=ginfo["Paper_Castle"]["all_drop_food"]
        all_drop_gold=ginfo["Paper_Castle"]["all_drop_gold"]
        all_drop_hp=ginfo["Paper_Castle"]["all_drop_hp"]
        all_drop_key=ginfo["Paper_Castle"]["all_drop_key"]
        all_drop_metal=ginfo["Paper_Castle"]["all_drop_metal"]
        all_drop_mp=ginfo["Paper_Castle"]["all_drop_mp"]
        all_drop_pot=ginfo["Paper_Castle"]["all_drop_pot"]
        all_drop_skexp=ginfo["Paper_Castle"]["all_drop_skexp"]
        all_drop_sp=ginfo["Paper_Castle"]["all_drop_sp"]
        all_drop_stone=ginfo["Paper_Castle"]["all_drop_stone"]
        all_drop_wood=ginfo["Paper_Castle"]["all_drop_wood"]
        all_inventory=ginfo["Paper_Castle"]["all_inventory"]
        castle_exp=ginfo["Paper_Castle"]["exp"]
        #AAAAAAAAAAA=info["Paper_Castle"]["AAAAAAAAAA"]
    elif castle_guild_name == "ScissorCastle":        # ScissorCastle castle_army_scissor   Scissor_Castle
        print("IN Scissors")
        account=ginfo["Scissor_Castle"]["account"]
        assets=ginfo["Scissor_Castle"]["assets"]
        authorID=ginfo["Scissor_Castle"]["authorID"]
        assets_fg=ginfo["Scissor_Castle"]["assets_fg"]
        bag_army=ginfo["Scissor_Castle"]["bag_army"]
        bag_boco=ginfo["Scissor_Castle"]["bag_boco"]
        bag_food=ginfo["Scissor_Castle"]["bag_food"]
        bag_gold=ginfo["Scissor_Castle"]["bag_gold"]
        bag_key=ginfo["Scissor_Castle"]["bag_key"]
        bag_metal=ginfo["Scissor_Castle"]["bag_metal"]
        bag_people=ginfo["Scissor_Castle"]["bag_people"]
        bag_small=ginfo["Scissor_Castle"]["bag_small"]
        bag_stone=ginfo["Scissor_Castle"]["bag_stone"]
        bag_wood=ginfo["Scissor_Castle"]["bag_wood"]
        bbvalue=ginfo["Scissor_Castle"]["bbvalue"]
        bigpot=ginfo["Scissor_Castle"]["bigpot"]
        print("bigpot")
        print(bigpot)
        box_army=ginfo["Scissor_Castle"]["box_army"]
        box_army_lvl=ginfo["Scissor_Castle"]["box_army_lvl"]
        box_boco=ginfo["Scissor_Castle"]["box_boco"]
        box_boco_lvl=ginfo["Scissor_Castle"]["box_boco_lvl"]
        box_food=ginfo["Scissor_Castle"]["box_food"]
        box_food_lvl=ginfo["Scissor_Castle"]["box_food_lvl"]
        box_gold=ginfo["Scissor_Castle"]["box_gold"]
        box_gold_lvl=ginfo["Scissor_Castle"]["box_gold_lvl"]
        box_inventory=ginfo["Scissor_Castle"]["box_inventory"]
        box_inventory_lvl=ginfo["Scissor_Castle"]["box_inventory_lvl"]
        box_metal=ginfo["Scissor_Castle"]["box_metal"]
        box_metal_lvl=ginfo["Scissor_Castle"]["box_metal_lvl"]
        box_people=ginfo["Scissor_Castle"]["box_people"]
        box_people_lvl=ginfo["Scissor_Castle"]["box_people_lvl"]
        box_stone=ginfo["Scissor_Castle"]["box_stone"]
        box_stone_lvl=ginfo["Scissor_Castle"]["box_stone_lvl"]
        box_wood=ginfo["Scissor_Castle"]["box_wood"]
        box_wood_lvl=ginfo["Scissor_Castle"]["box_wood_lvl"]
        box_stone=ginfo["Scissor_Castle"]["box_stone"]
        buff=ginfo["Scissor_Castle"]["buff"]
        castle_aether=ginfo["Scissor_Castle"]["castle_aether"]
        castle_ali=ginfo["Scissor_Castle"]["castle_ali"]
        castle_antimat=ginfo["Scissor_Castle"]["castle_antimat"]
        castle_army=ginfo["Scissor_Castle"]["castle_army"]
        castle_army_lvl=ginfo["Scissor_Castle"]["castle_army_lvl"]
        castle_army_paper=ginfo["Scissor_Castle"]["castle_army_paper"]
        castle_army_paper_lvl=ginfo["Scissor_Castle"]["castle_army_paper_lvl"]
        castle_army_rock=ginfo["Scissor_Castle"]["castle_army_rock"]
        castle_army_rock_lvl=ginfo["Scissor_Castle"]["castle_army_rock_lvl"]
        castle_army_scissor=ginfo["Scissor_Castle"]["castle_army_scissor"]
        castle_army_scissor_lvl=ginfo["Scissor_Castle"]["castle_army_scissor_lvl"]
        castle_armym=ginfo["Scissor_Castle"]["castle_armym"]
        castle_atk=ginfo["Scissor_Castle"]["castle_atk"]
        castle_bgold=ginfo["Scissor_Castle"]["castle_bgold"]
        castle_blue=ginfo["Scissor_Castle"]["castle_blue"]
        castle_bobocoin=ginfo["Scissor_Castle"]["castle_bobocoin"]
        castle_boco=ginfo["Scissor_Castle"]["castle_boco"]
        castle_bocom=ginfo["Scissor_Castle"]["castle_bocom"]
        castle_bopixbo=ginfo["Scissor_Castle"]["castle_bopixbo"]
        castle_cait=ginfo["Scissor_Castle"]["castle_cait"]
        castle_def=ginfo["Scissor_Castle"]["castle_def"]
        castle_dept=ginfo["Scissor_Castle"]["castle_dept"]
        castle_door=ginfo["Scissor_Castle"]["castle_door"]
        castle_drop_rate=ginfo["Scissor_Castle"]["castle_drop_rate"]
        castle_dust=ginfo["Scissor_Castle"]["castle_dust"]
        castle_eos=ginfo["Scissor_Castle"]["castle_eos"]
        castle_food=ginfo["Scissor_Castle"]["castle_food"]
        castle_foodm=ginfo["Scissor_Castle"]["castle_foodm"]
        castle_gold=ginfo["Scissor_Castle"]["castle_gold"]
        castle_goldm=ginfo["Scissor_Castle"]["castle_goldm"]
        castle_guard=ginfo["Scissor_Castle"]["castle_guard"]
        castle_guard_lvl=ginfo["Scissor_Castle"]["castle_guard_lvl"]
        castle_guild_lvl=ginfo["Scissor_Castle"]["castle_guild_lvl"]
        castle_inventory=ginfo["Scissor_Castle"]["castle_inventory"]
        castle_invv_space=ginfo["Scissor_Castle"]["castle_invv_space"]
        castle_lvl=ginfo["Scissor_Castle"]["castle_lvl"]
        castle_metal=ginfo["Scissor_Castle"]["castle_metal"]
        castle_metalm=ginfo["Scissor_Castle"]["castle_metalm"]
        castle_name=ginfo["Scissor_Castle"]["castle_name"]
        castle_nefty=ginfo["Scissor_Castle"]["castle_nefty"]
        castle_owner=ginfo["Scissor_Castle"]["castle_owner"]
        castle_paper=ginfo["Scissor_Castle"]["castle_paper"]
        castle_people=ginfo["Scissor_Castle"]["castle_people"]
        castle_peoplem=ginfo["Scissor_Castle"]["castle_peoplem"]
        castle_pixel=ginfo["Scissor_Castle"]["castle_pixel"]
        castle_rank=ginfo["Scissor_Castle"]["castle_rank"]
        castle_rock=ginfo["Scissor_Castle"]["castle_rock"]
        castle_scissor=ginfo["Scissor_Castle"]["castle_scissor"]
        castle_stone=ginfo["Scissor_Castle"]["castle_stone"]
        castle_stonem=ginfo["Scissor_Castle"]["castle_stonem"]
        castle_tlm=ginfo["Scissor_Castle"]["castle_tlm"]
        castle_token_pixel=ginfo["Scissor_Castle"]["castle_token_pixel"]
        castle_tower_lvl=ginfo["Scissor_Castle"]["castle_tower_lvl"]
        castle_usdt=ginfo["Scissor_Castle"]["castle_usdt"]
        castle_wall_lvl=ginfo["Scissor_Castle"]["castle_wall_lvl"]
        castle_wax=ginfo["Scissor_Castle"]["castle_wax"]
        castle_wgold=ginfo["Scissor_Castle"]["castle_wgold"]
        castle_wojak=ginfo["Scissor_Castle"]["castle_wojak"]
        castle_wood=ginfo["Scissor_Castle"]["castle_wood"]
        castle_woodm=ginfo["Scissor_Castle"]["castle_woodm"]
        castle_work_block=ginfo["Scissor_Castle"]["castle_work_block"]
        channel=ginfo["Scissor_Castle"]["channel"]
        check_guess=ginfo["Scissor_Castle"]["check_guess"]
        chop_block=ginfo["Scissor_Castle"]["chop_block"]
        count_amnesiaatk=ginfo["Scissor_Castle"]["count_amnesiaatk"]
        count_draw=ginfo["Scissor_Castle"]["count_draw"]
        count_lose=ginfo["Scissor_Castle"]["count_lose"]
        count_played=ginfo["Scissor_Castle"]["count_played"]
        count_titlenum=ginfo["Scissor_Castle"]["count_titlenum"]
        count_treue=ginfo["Scissor_Castle"]["count_treue"]
        count_win=ginfo["Scissor_Castle"]["count_win"]
        count_wincry=ginfo["Scissor_Castle"]["count_wincry"]
        craftable=ginfo["Scissor_Castle"]["craftable"]
        daily_block=ginfo["Scissor_Castle"]["daily_block"]
        data=ginfo["Scissor_Castle"]["data"]
        deaths=ginfo["Scissor_Castle"]["deaths"]
        defence=ginfo["Scissor_Castle"]["defence"]
        door=ginfo["Scissor_Castle"]["door"]
        door_enemy=ginfo["Scissor_Castle"]["door_enemy"]
        door_enemy_hp=ginfo["Scissor_Castle"]["door_enemy_hp"]
        doorenemyhp=ginfo["Scissor_Castle"]["doorenemyhp"]
        doorenemylvl=ginfo["Scissor_Castle"]["doorenemylvl"]
        drop_boco=ginfo["Scissor_Castle"]["drop_boco"]
        drop_food=ginfo["Scissor_Castle"]["drop_food"]
        drop_gold=ginfo["Scissor_Castle"]["drop_gold"]
        drop_key=ginfo["Scissor_Castle"]["drop_key"]
        drop_metal=ginfo["Scissor_Castle"]["drop_metal"]
        drop_people=ginfo["Scissor_Castle"]["drop_people"]
        drop_stone=ginfo["Scissor_Castle"]["drop_stone"]
        drop_wood=ginfo["Scissor_Castle"]["drop_wood"]
        duneon_enemy_hp=ginfo["Scissor_Castle"]["duneon_enemy_hp"]
        dungeon_enemy=ginfo["Scissor_Castle"]["dungeon_enemy"]
        earthpot=ginfo["Scissor_Castle"]["earthpot"]
        emptybag=ginfo["Scissor_Castle"]["emptybag"]
        enemieskilled=ginfo["Scissor_Castle"]["enemieskilled"]
        exp=ginfo["Scissor_Castle"]["exp"]
        expmax=ginfo["Scissor_Castle"]["expmax"]
        expmaxsk=ginfo["Scissor_Castle"]["expmaxsk"]
        firepot=ginfo["Scissor_Castle"]["firepot"]
        food=ginfo["Scissor_Castle"]["food"]
        food_drop=ginfo["Scissor_Castle"]["food_drop"]
        gold=ginfo["Scissor_Castle"]["gold"]
        gold_drop=ginfo["Scissor_Castle"]["gold_drop"]
        health=ginfo["Scissor_Castle"]["health"]
        healthmax=ginfo["Scissor_Castle"]["healthmax"]
        hp_drop=ginfo["Scissor_Castle"]["hp_drop"]
        in_dungeon=ginfo["Scissor_Castle"]["in_dungeon"]
        in_party=ginfo["Scissor_Castle"]["in_party"]
        inbuff=ginfo["Scissor_Castle"]["inbuff"]
        infight_status=ginfo["Scissor_Castle"]["infight_status"]
        ginfo_member=ginfo["Scissor_Castle"]["info_member"]
        inguild=ginfo["Scissor_Castle"]["inguild"]
        inhavenft_status=ginfo["Scissor_Castle"]["inhavenft_status"]
        inventory=ginfo["Scissor_Castle"]["inventory"]
        inventory_lvl=ginfo["Scissor_Castle"]["inventory_lvl"]
        itemdrop_test=ginfo["Scissor_Castle"]["itemdrop_test"]
        key=ginfo["Scissor_Castle"]["key"]
        key_drop=ginfo["Scissor_Castle"]["key_drop"]
        location=ginfo["Scissor_Castle"]["location"]
        lockedbox=ginfo["Scissor_Castle"]["lockedbox"]
        lootbag=ginfo["Scissor_Castle"]["lootbag"]
        losecry=ginfo["Scissor_Castle"]["losecry"]
        luknum=ginfo["Scissor_Castle"]["luknum"]
        lvl=ginfo["Scissor_Castle"]["lvl"]
        mana=ginfo["Scissor_Castle"]["mana"]
        manamax=ginfo["Scissor_Castle"]["manamax"]
        max_def=ginfo["Scissor_Castle"]["max_def"]
        max_dmg=ginfo["Scissor_Castle"]["max_dmg"]
        max_skexp=ginfo["Scissor_Castle"]["max_skexp"]
        mediumpot=ginfo["Scissor_Castle"]["mediumpot"]
        memberid=ginfo["Scissor_Castle"]["memberid"]
        metal=ginfo["Scissor_Castle"]["metal"]
        metal_drop=ginfo["Scissor_Castle"]["metal_drop"]
        mind=ginfo["Scissor_Castle"]["mind"]
        mine_block=ginfo["Scissor_Castle"]["mine_block"]
        mp_drop=ginfo["Scissor_Castle"]["mp_drop"]
        multybp0x0=ginfo["Scissor_Castle"]["multybp0x0"]
        name=ginfo["Scissor_Castle"]["name"]
        name_castle_owner=ginfo["Scissor_Castle"]["name_castle_owner"]
        nature_boco=ginfo["Scissor_Castle"]["nature_boco"]
        nature_food=ginfo["Scissor_Castle"]["nature_food"]
        nature_key=ginfo["Scissor_Castle"]["nature_key"]
        nature_metal=ginfo["Scissor_Castle"]["nature_metal"]
        nature_gold=ginfo["Scissor_Castle"]["nature_gold"]
        nature_people=ginfo["Scissor_Castle"]["nature_people"]
        nature_stone=ginfo["Scissor_Castle"]["nature_stone"]
        nature_wood=ginfo["Scissor_Castle"]["nature_wood"]
        pet=ginfo["Scissor_Castle"]["pet"]
        qakey=ginfo["Scissor_Castle"]["qakey"]
        rabbat=ginfo["Scissor_Castle"]["rabbat"]
        race=ginfo["Scissor_Castle"]["race"]
        rank=ginfo["Scissor_Castle"]["rank"]
        rankkill=ginfo["Scissor_Castle"]["rankkill"]
        rest_block=ginfo["Scissor_Castle"]["rest_block"]
        roaming=ginfo["Scissor_Castle"]["roaming"]
        runaways=ginfo["Scissor_Castle"]["runaways"]
        score=ginfo["Scissor_Castle"]["score"]
        selected_attack=ginfo["Scissor_Castle"]["selected_attack"]
        selected_castle=ginfo["Scissor_Castle"]["selected_castle"]
        selected_defence=ginfo["Scissor_Castle"]["selected_defence"]
        selected_enemy=ginfo["Scissor_Castle"]["selected_enemy"]
        try:
            selected_enemy_player=ginfo["Scissor_Castle"]["selected_enemy_player"]
        except:
            selected_enemy_player="None"
        selected_enemy_attack=ginfo["Scissor_Castle"]["selected_enemy_attack"]
        selected_enemy_defence=ginfo["Scissor_Castle"]["selected_enemy_defence"]
        selected_enemy_hp=ginfo["Scissor_Castle"]["selected_enemy_hp"]
        selected_enemy_indoor=ginfo["Scissor_Castle"]["selected_enemy_indoor"]
        selected_enemy_lvl=ginfo["Scissor_Castle"]["selected_enemy_lvl"]
        selected_enemy_name=ginfo["Scissor_Castle"]["selected_enemy_name"]
        selected_hp=ginfo["Scissor_Castle"]["selected_hp"]
        selected_item=ginfo["Scissor_Castle"]["selected_item"]
        selected_lvl=ginfo["Scissor_Castle"]["selected_lvl"]
        selected_name=ginfo["Scissor_Castle"]["selected_name"]
        selected_p=ginfo["Scissor_Castle"]["selected_p"]
        selected_player=ginfo["Scissor_Castle"]["selected_player"]
        selected_rank=ginfo["Scissor_Castle"]["selected_rank"]
        selected_status=ginfo["Scissor_Castle"]["selected_status"]
        skexp=ginfo["Scissor_Castle"]["skexp"]
        skill_inventory=ginfo["Scissor_Castle"]["skill_inventory"]
        skills_learned=ginfo["Scissor_Castle"]["skills_learned"]
        sklvl=ginfo["Scissor_Castle"]["sklvl"]
        smallpot=ginfo["Scissor_Castle"]["smallpot"]
        smallpot_drop=ginfo["Scissor_Castle"]["smallpot_drop"]
        sp_drop=ginfo["Scissor_Castle"]["sp_drop"]
        speedpot=ginfo["Scissor_Castle"]["speedpot"]
        stamina=ginfo["Scissor_Castle"]["stamina"]
        staminamax=ginfo["Scissor_Castle"]["staminamax"]
        status=ginfo["Scissor_Castle"]["status"]
        stone=ginfo["Scissor_Castle"]["stone"]
        stone_drop=ginfo["Scissor_Castle"]["stone_drop"]
        successCheck=ginfo["Scissor_Castle"]["successCheck"]
        title=ginfo["Scissor_Castle"]["title"]
        tower_inventory=ginfo["Scissor_Castle"]["tower_inventory"]
        tower=ginfo["Scissor_Castle"]["tower"]
        traveling_block=ginfo["Scissor_Castle"]["traveling_block"]
        upitem=ginfo["Scissor_Castle"]["upitem"]
        wallet=ginfo["Scissor_Castle"]["wallet"]
        waterpot=ginfo["Scissor_Castle"]["waterpot"]
        windpot=ginfo["Scissor_Castle"]["windpot"]
        wood=ginfo["Scissor_Castle"]["wood"]
        wood_drop=ginfo["Scissor_Castle"]["wood_drop"]
        woodbox=ginfo["Scissor_Castle"]["woodbox"]
        all_attack=ginfo["Scissor_Castle"]["all_attack"]
        all_defence=ginfo["Scissor_Castle"]["all_defence"]
        all_drop=ginfo["Scissor_Castle"]["all_drop"]
        all_drop_boco=ginfo["Scissor_Castle"]["all_drop_boco"]
        all_drop_exp=ginfo["Scissor_Castle"]["all_drop_exp"]
        all_drop_food=ginfo["Scissor_Castle"]["all_drop_food"]
        all_drop_gold=ginfo["Scissor_Castle"]["all_drop_gold"]
        all_drop_hp=ginfo["Scissor_Castle"]["all_drop_hp"]
        all_drop_key=ginfo["Scissor_Castle"]["all_drop_key"]
        all_drop_metal=ginfo["Scissor_Castle"]["all_drop_metal"]
        all_drop_mp=ginfo["Scissor_Castle"]["all_drop_mp"]
        all_drop_pot=ginfo["Scissor_Castle"]["all_drop_pot"]
        all_drop_skexp=ginfo["Scissor_Castle"]["all_drop_skexp"]
        all_drop_sp=ginfo["Scissor_Castle"]["all_drop_sp"]
        all_drop_stone=ginfo["Scissor_Castle"]["all_drop_stone"]
        all_drop_wood=ginfo["Scissor_Castle"]["all_drop_wood"]
        all_inventory=ginfo["Scissor_Castle"]["all_inventory"]
        castle_exp=ginfo["Scissor_Castle"]["exp"]
        #AAAAAAAAAAA=info["Scissor_Castle"]["AAAAAAAAAA"] castle_guild_exp
    elif castle_guild_name == "RockCastle":
        account=ginfo["Rock_Castle"]["account"]
        castle_exp=ginfo["Rock_Castle"]["exp"]
        assets=ginfo["Rock_Castle"]["assets"]
        authorID=ginfo["Rock_Castle"]["authorID"]
        assets_fg=ginfo["Rock_Castle"]["assets_fg"]
        bag_army=ginfo["Rock_Castle"]["bag_army"]
        bag_boco=ginfo["Rock_Castle"]["bag_boco"]
        bag_food=ginfo["Rock_Castle"]["bag_food"]
        bag_gold=ginfo["Rock_Castle"]["bag_gold"]
        bag_key=ginfo["Rock_Castle"]["bag_key"]
        bag_metal=ginfo["Rock_Castle"]["bag_metal"]
        bag_people=ginfo["Rock_Castle"]["bag_people"]
        bag_small=ginfo["Rock_Castle"]["bag_small"]
        bag_stone=ginfo["Rock_Castle"]["bag_stone"]
        bag_wood=ginfo["Rock_Castle"]["bag_wood"]
        bbvalue=ginfo["Rock_Castle"]["bbvalue"]
        bigpot=ginfo["Rock_Castle"]["bigpot"]
        box_army=ginfo["Rock_Castle"]["box_army"]
        box_army_lvl=ginfo["Rock_Castle"]["box_army_lvl"]
        box_boco=ginfo["Rock_Castle"]["box_boco"]
        box_boco_lvl=ginfo["Rock_Castle"]["box_boco_lvl"]
        box_food=ginfo["Rock_Castle"]["box_food"]
        box_food_lvl=ginfo["Rock_Castle"]["box_food_lvl"]
        box_gold=ginfo["Rock_Castle"]["box_gold"]
        box_gold_lvl=ginfo["Rock_Castle"]["box_gold_lvl"]
        box_inventory=ginfo["Rock_Castle"]["box_inventory"]
        box_inventory_lvl=ginfo["Rock_Castle"]["box_inventory_lvl"]
        box_metal=ginfo["Rock_Castle"]["box_metal"]
        box_metal_lvl=ginfo["Rock_Castle"]["box_metal_lvl"]
        box_people=ginfo["Rock_Castle"]["box_people"]
        box_people_lvl=ginfo["Rock_Castle"]["box_people_lvl"]
        box_stone=ginfo["Rock_Castle"]["box_stone"]
        box_stone_lvl=ginfo["Rock_Castle"]["box_stone_lvl"]
        box_wood=ginfo["Rock_Castle"]["box_wood"]
        box_wood_lvl=ginfo["Rock_Castle"]["box_wood_lvl"]
        box_stone=ginfo["Rock_Castle"]["box_stone"]
        buff=ginfo["Rock_Castle"]["buff"]
        castle_aether=ginfo["Rock_Castle"]["castle_aether"]
        castle_ali=ginfo["Rock_Castle"]["castle_ali"]
        castle_antimat=ginfo["Rock_Castle"]["castle_antimat"]
        castle_army=ginfo["Rock_Castle"]["castle_army"]
        castle_army_lvl=ginfo["Rock_Castle"]["castle_army_lvl"]
        castle_army_paper=ginfo["Rock_Castle"]["castle_army_paper"]
        castle_army_paper_lvl=ginfo["Rock_Castle"]["castle_army_paper_lvl"]
        castle_army_rock=ginfo["Rock_Castle"]["castle_army_rock"]
        castle_army_rock_lvl=ginfo["Rock_Castle"]["castle_army_rock_lvl"]
        castle_army_scissor=ginfo["Rock_Castle"]["castle_army_scissor"]
        castle_army_scissor_lvl=ginfo["Rock_Castle"]["castle_army_scissor_lvl"]
        castle_armym=ginfo["Rock_Castle"]["castle_armym"]
        castle_atk=ginfo["Rock_Castle"]["castle_atk"]
        castle_bgold=ginfo["Rock_Castle"]["castle_bgold"]
        castle_blue=ginfo["Rock_Castle"]["castle_blue"]
        castle_bobocoin=ginfo["Rock_Castle"]["castle_bobocoin"]
        castle_boco=ginfo["Rock_Castle"]["castle_boco"]
        castle_bocom=ginfo["Rock_Castle"]["castle_bocom"]
        castle_bopixbo=ginfo["Rock_Castle"]["castle_bopixbo"]
        castle_cait=ginfo["Rock_Castle"]["castle_cait"]
        castle_def=ginfo["Rock_Castle"]["castle_def"]
        castle_dept=ginfo["Rock_Castle"]["castle_dept"]
        castle_door=ginfo["Rock_Castle"]["castle_door"]
        castle_drop_rate=ginfo["Rock_Castle"]["castle_drop_rate"]
        castle_dust=ginfo["Rock_Castle"]["castle_dust"]
        castle_eos=ginfo["Rock_Castle"]["castle_eos"]
        castle_food=ginfo["Rock_Castle"]["castle_food"]
        castle_foodm=ginfo["Rock_Castle"]["castle_foodm"]
        castle_gold=ginfo["Rock_Castle"]["castle_gold"]
        castle_goldm=ginfo["Rock_Castle"]["castle_goldm"]
        castle_guard=ginfo["Rock_Castle"]["castle_guard"]
        castle_guard_lvl=ginfo["Rock_Castle"]["castle_guard_lvl"]
        castle_guild_lvl=ginfo["Rock_Castle"]["castle_guild_lvl"]
        castle_inventory=ginfo["Rock_Castle"]["castle_inventory"]
        castle_invv_space=ginfo["Rock_Castle"]["castle_invv_space"]
        castle_lvl=ginfo["Rock_Castle"]["castle_lvl"]
        castle_metal=ginfo["Rock_Castle"]["castle_metal"]
        castle_metalm=ginfo["Rock_Castle"]["castle_metalm"]
        castle_name=ginfo["Rock_Castle"]["castle_name"]
        castle_nefty=ginfo["Rock_Castle"]["castle_nefty"]
        castle_owner=ginfo["Rock_Castle"]["castle_owner"]
        castle_paper=ginfo["Rock_Castle"]["castle_paper"]
        castle_people=ginfo["Rock_Castle"]["castle_people"]
        castle_peoplem=ginfo["Rock_Castle"]["castle_peoplem"]
        castle_pixel=ginfo["Rock_Castle"]["castle_pixel"]
        castle_rank=ginfo["Rock_Castle"]["castle_rank"]
        castle_rock=ginfo["Rock_Castle"]["castle_rock"]
        castle_scissor=ginfo["Rock_Castle"]["castle_scissor"]
        castle_stone=ginfo["Rock_Castle"]["castle_stone"]
        castle_stonem=ginfo["Rock_Castle"]["castle_stonem"]
        castle_tlm=ginfo["Rock_Castle"]["castle_tlm"]
        castle_token_pixel=ginfo["Rock_Castle"]["castle_token_pixel"]
        castle_tower_lvl=ginfo["Rock_Castle"]["castle_tower_lvl"]
        castle_usdt=ginfo["Rock_Castle"]["castle_usdt"]
        castle_wall_lvl=ginfo["Rock_Castle"]["castle_wall_lvl"]
        castle_wax=ginfo["Rock_Castle"]["castle_wax"]
        castle_wgold=ginfo["Rock_Castle"]["castle_wgold"]
        castle_wojak=ginfo["Rock_Castle"]["castle_wojak"]
        castle_wood=ginfo["Rock_Castle"]["castle_wood"]
        castle_woodm=ginfo["Rock_Castle"]["castle_woodm"]
        castle_work_block=ginfo["Rock_Castle"]["castle_work_block"]
        channel=ginfo["Rock_Castle"]["channel"]
        check_guess=ginfo["Rock_Castle"]["check_guess"]
        chop_block=ginfo["Rock_Castle"]["chop_block"]
        count_amnesiaatk=ginfo["Rock_Castle"]["count_amnesiaatk"]
        count_draw=ginfo["Rock_Castle"]["count_draw"]
        count_lose=ginfo["Rock_Castle"]["count_lose"]
        count_played=ginfo["Rock_Castle"]["count_played"]
        count_titlenum=ginfo["Rock_Castle"]["count_titlenum"]
        count_treue=ginfo["Rock_Castle"]["count_treue"]
        count_win=ginfo["Rock_Castle"]["count_win"]
        count_wincry=ginfo["Rock_Castle"]["count_wincry"]
        craftable=ginfo["Rock_Castle"]["craftable"]
        daily_block=ginfo["Rock_Castle"]["daily_block"]
        data=ginfo["Rock_Castle"]["data"]
        deaths=ginfo["Rock_Castle"]["deaths"]
        defence=ginfo["Rock_Castle"]["defence"]
        door=ginfo["Rock_Castle"]["door"]
        door_enemy=ginfo["Rock_Castle"]["door_enemy"]
        door_enemy_hp=ginfo["Rock_Castle"]["door_enemy_hp"]
        doorenemyhp=ginfo["Rock_Castle"]["doorenemyhp"]
        doorenemylvl=ginfo["Rock_Castle"]["doorenemylvl"]
        drop_boco=ginfo["Rock_Castle"]["drop_boco"]
        drop_food=ginfo["Rock_Castle"]["drop_food"]
        drop_gold=ginfo["Rock_Castle"]["drop_gold"]
        drop_key=ginfo["Rock_Castle"]["drop_key"]
        drop_metal=ginfo["Rock_Castle"]["drop_metal"]
        drop_people=ginfo["Rock_Castle"]["drop_people"]
        drop_stone=ginfo["Rock_Castle"]["drop_stone"]
        drop_wood=ginfo["Rock_Castle"]["drop_wood"]
        duneon_enemy_hp=ginfo["Rock_Castle"]["duneon_enemy_hp"]
        dungeon_enemy=ginfo["Rock_Castle"]["dungeon_enemy"]
        earthpot=ginfo["Rock_Castle"]["earthpot"]
        emptybag=ginfo["Rock_Castle"]["emptybag"]
        enemieskilled=ginfo["Rock_Castle"]["enemieskilled"]
        exp=ginfo["Rock_Castle"]["exp"]
        expmax=ginfo["Rock_Castle"]["expmax"]
        expmaxsk=ginfo["Rock_Castle"]["expmaxsk"]
        firepot=ginfo["Rock_Castle"]["firepot"]
        food=ginfo["Rock_Castle"]["food"]
        food_drop=ginfo["Rock_Castle"]["food_drop"]
        gold=ginfo["Rock_Castle"]["gold"]
        gold_drop=ginfo["Rock_Castle"]["gold_drop"]
        health=ginfo["Rock_Castle"]["health"]
        healthmax=ginfo["Rock_Castle"]["healthmax"]
        hp_drop=ginfo["Rock_Castle"]["hp_drop"]
        in_dungeon=ginfo["Rock_Castle"]["in_dungeon"]
        in_party=ginfo["Rock_Castle"]["in_party"]
        inbuff=ginfo["Rock_Castle"]["inbuff"]
        infight_status=ginfo["Rock_Castle"]["infight_status"]
        ginfo_member=ginfo["Rock_Castle"]["info_member"]
        inguild=ginfo["Rock_Castle"]["inguild"]
        inhavenft_status=ginfo["Rock_Castle"]["inhavenft_status"]
        inventory=ginfo["Rock_Castle"]["inventory"]
        inventory_lvl=ginfo["Rock_Castle"]["inventory_lvl"]
        itemdrop_test=ginfo["Rock_Castle"]["itemdrop_test"]
        key=ginfo["Rock_Castle"]["key"]
        key_drop=ginfo["Rock_Castle"]["key_drop"]
        location=ginfo["Rock_Castle"]["location"]
        lockedbox=ginfo["Rock_Castle"]["lockedbox"]
        lootbag=ginfo["Rock_Castle"]["lootbag"]
        losecry=ginfo["Rock_Castle"]["losecry"]
        luknum=ginfo["Rock_Castle"]["luknum"]
        lvl=ginfo["Rock_Castle"]["lvl"]
        mana=ginfo["Rock_Castle"]["mana"]
        manamax=ginfo["Rock_Castle"]["manamax"]
        max_def=ginfo["Rock_Castle"]["max_def"]
        max_dmg=ginfo["Rock_Castle"]["max_dmg"]
        max_skexp=ginfo["Rock_Castle"]["max_skexp"]
        mediumpot=ginfo["Rock_Castle"]["mediumpot"]
        memberid=ginfo["Rock_Castle"]["memberid"]
        metal=ginfo["Rock_Castle"]["metal"]
        metal_drop=ginfo["Rock_Castle"]["metal_drop"]
        mind=ginfo["Rock_Castle"]["mind"]
        mine_block=ginfo["Rock_Castle"]["mine_block"]
        mp_drop=ginfo["Rock_Castle"]["mp_drop"]
        multybp0x0=ginfo["Rock_Castle"]["multybp0x0"]
        name=ginfo["Rock_Castle"]["name"]
        name_castle_owner=ginfo["Rock_Castle"]["name_castle_owner"]
        nature_boco=ginfo["Rock_Castle"]["nature_boco"]
        nature_food=ginfo["Rock_Castle"]["nature_food"]
        nature_key=ginfo["Rock_Castle"]["nature_key"]
        nature_metal=ginfo["Rock_Castle"]["nature_metal"]
        nature_gold=ginfo["Rock_Castle"]["nature_gold"]
        nature_people=ginfo["Rock_Castle"]["nature_people"]
        nature_stone=ginfo["Rock_Castle"]["nature_stone"]
        nature_wood=ginfo["Rock_Castle"]["nature_wood"]
        pet=ginfo["Rock_Castle"]["pet"]
        qakey=ginfo["Rock_Castle"]["qakey"]
        rabbat=ginfo["Rock_Castle"]["rabbat"]
        race=ginfo["Rock_Castle"]["race"]
        rank=ginfo["Rock_Castle"]["rank"]
        rankkill=ginfo["Rock_Castle"]["rankkill"]
        rest_block=ginfo["Rock_Castle"]["rest_block"]
        roaming=ginfo["Rock_Castle"]["roaming"]
        runaways=ginfo["Rock_Castle"]["runaways"]
        score=ginfo["Rock_Castle"]["score"]
        selected_attack=ginfo["Rock_Castle"]["selected_attack"]
        selected_castle=ginfo["Rock_Castle"]["selected_castle"]
        selected_defence=ginfo["Rock_Castle"]["selected_defence"]
        selected_enemy=ginfo["Rock_Castle"]["selected_enemy"]
        try:
            selected_enemy_player=ginfo["Rock_Castle"]["selected_enemy_player"]
        except:
            selected_enemy_player="None"
        selected_enemy_attack=ginfo["Rock_Castle"]["selected_enemy_attack"]
        selected_enemy_defence=ginfo["Rock_Castle"]["selected_enemy_defence"]
        selected_enemy_hp=ginfo["Rock_Castle"]["selected_enemy_hp"]
        selected_enemy_indoor=ginfo["Rock_Castle"]["selected_enemy_indoor"]
        selected_enemy_lvl=ginfo["Rock_Castle"]["selected_enemy_lvl"]
        selected_enemy_name=ginfo["Rock_Castle"]["selected_enemy_name"]
        selected_hp=ginfo["Rock_Castle"]["selected_hp"]
        selected_item=ginfo["Rock_Castle"]["selected_item"]
        selected_lvl=ginfo["Rock_Castle"]["selected_lvl"]
        selected_name=ginfo["Rock_Castle"]["selected_name"]
        selected_p=ginfo["Rock_Castle"]["selected_p"]
        selected_player=ginfo["Rock_Castle"]["selected_player"]
        selected_rank=ginfo["Rock_Castle"]["selected_rank"]
        selected_status=ginfo["Rock_Castle"]["selected_status"]
        skexp=ginfo["Rock_Castle"]["skexp"]
        skill_inventory=ginfo["Rock_Castle"]["skill_inventory"]
        skills_learned=ginfo["Rock_Castle"]["skills_learned"]
        sklvl=ginfo["Rock_Castle"]["sklvl"]
        smallpot=ginfo["Rock_Castle"]["smallpot"]
        smallpot_drop=ginfo["Rock_Castle"]["smallpot_drop"]
        sp_drop=ginfo["Rock_Castle"]["sp_drop"]
        speedpot=ginfo["Rock_Castle"]["speedpot"]
        stamina=ginfo["Rock_Castle"]["stamina"]
        staminamax=ginfo["Rock_Castle"]["staminamax"]
        status=ginfo["Rock_Castle"]["status"]
        stone=ginfo["Rock_Castle"]["stone"]
        stone_drop=ginfo["Rock_Castle"]["stone_drop"]
        successCheck=ginfo["Rock_Castle"]["successCheck"]
        title=ginfo["Rock_Castle"]["title"]
        tower_inventory=ginfo["Rock_Castle"]["tower_inventory"]
        tower=ginfo["Scissor_Castle"]["tower"]
        traveling_block=ginfo["Rock_Castle"]["traveling_block"]
        upitem=ginfo["Rock_Castle"]["upitem"]
        wallet=ginfo["Rock_Castle"]["wallet"]
        waterpot=ginfo["Rock_Castle"]["waterpot"]
        windpot=ginfo["Rock_Castle"]["windpot"]
        wood=ginfo["Rock_Castle"]["wood"]
        wood_drop=ginfo["Rock_Castle"]["wood_drop"]
        woodbox=ginfo["Rock_Castle"]["woodbox"]
        all_attack=ginfo["Rock_Castle"]["all_attack"]
        all_defence=ginfo["Rock_Castle"]["all_defence"]
        all_drop=ginfo["Rock_Castle"]["all_drop"]
        all_drop_boco=ginfo["Rock_Castle"]["all_drop_boco"]
        all_drop_exp=ginfo["Rock_Castle"]["all_drop_exp"]
        all_drop_food=ginfo["Rock_Castle"]["all_drop_food"]
        all_drop_gold=ginfo["Rock_Castle"]["all_drop_gold"]
        all_drop_hp=ginfo["Rock_Castle"]["all_drop_hp"]
        all_drop_key=ginfo["Rock_Castle"]["all_drop_key"]
        all_drop_metal=ginfo["Rock_Castle"]["all_drop_metal"]
        all_drop_mp=ginfo["Rock_Castle"]["all_drop_mp"]
        all_drop_pot=ginfo["Rock_Castle"]["all_drop_pot"]
        all_drop_skexp=ginfo["Rock_Castle"]["all_drop_skexp"]
        all_drop_sp=ginfo["Rock_Castle"]["all_drop_sp"]
        all_drop_stone=ginfo["Rock_Castle"]["all_drop_stone"]
        all_drop_wood=ginfo["Rock_Castle"]["all_drop_wood"]
        all_inventory=ginfo["Rock_Castle"]["all_inventory"]
        #AAAAAAAAAAA=info["Rock_Castle"]["AAAAAAAAAA"]
    print("All Good Till here")
    #info["bpvf0"] = account  castle_army_scissor
    castle_guild_lvl = info["castle_guild_lvl"]
    castle_guild_attack = info["castle_guild_attack"]
    castle_guild_defense = info["castle_guild_defense"]
    castle_guild_all_drop = info["castle_guild_all_drop"]
    castle_guild_drop_boco = info["castle_guild_drop_boco"]
    castle_guild_drop_exp = info["castle_guild_drop_exp"]
    castle_guild_drop_food = info["castle_guild_drop_food"]
    castle_guild_drop_gold = info["castle_guild_drop_gold"]
    castle_guild_drop_hp = info["castle_guild_drop_hp"]
    castle_guild_drop_key = info["castle_guild_drop_key"]
    castle_guild_drop_metal = info["castle_guild_drop_metal"]
    castle_guild_drop_mp = info["castle_guild_drop_mp"]
    castle_guild_drop_pot = info["castle_guild_drop_pot"]
    castle_guild_drop_skexp = info["castle_guild_drop_skexp"]
    castle_guild_drop_sp = info["castle_guild_drop_sp"]
    castle_guild_drop_wood = info["castle_guild_drop_wood"]
    castle_guild_drop_stone = info["castle_guild_drop_stone"]
    try:
        info["castle_guild_food"] = food
    except:
        info["castle_guild_food"] = 1
    try:
        info["castle_guild_gold"] = gold
    except:
        info["castle_guild_gold"] = 1
    try:
        info["castle_guild_hp"] = health
    except:
        info["castle_guild_hp"] = 1
    try:
        info["castle_guild_key"] = key
    except:
        info["castle_guild_key"] = 1
    try:
        info["castle_guild_metal"] = metal
    except:
        info["castle_guild_metal"] = 1
    try:
        info["castle_guild_mp"] = mana
    except:
        info["castle_guild_mp"] = 1
    try:
        #info["castle_guild_pot"] = AAAAA
        info["castle_guild_skexp"] = skexp
    except:
        info["castle_guild_skexp"] = 1
    try:
        info["castle_guild_sp"] = stamina
    except:
        info["castle_guild_sp"] = 1
    try:
        info["castle_guild_wood"] = wood
    except:
        info["castle_guild_wood"] = 1
    try:
        info["castle_guild_stone"] = stone
    except:
        info["castle_guild_stone"] = 1
    try:
        #info["AAAAA"] = AAAAA
        info["castle_guild_all_inventory"] = castle_inventory
    except:
        info["castle_guild_all_inventory"] = 1
    try:
        info["castle_guild_army_paper"] = castle_army_paper
    except:
        info["castle_guild_army_paper"] = 1
    try:
        #info["castle_guild_army_paperOpen"] = castle_army_paperOpen
        info["castle_guild_army_rock"] = castle_army_rock
    except:
        info["castle_guild_army_rock"] = 1
    try:
        #info["castle_guild_army_rockOpen"] = castle_army_rockOpen
        info["castle_guild_army_scissor"] = castle_army_scissor
    except:
        info["castle_guild_army_scissor"] = 1
    try:
        #info["castle_guild_army_scissorOpen"] = castle_army_scissorOpen
        info["castle_guild_army_total"] = castle_army
    except:
        info["castle_guild_army_total"] = 1
    try:
        #info["castle_guild_army_totalOpen"] = castle_army_totalOpen
        #info["castle_guild_attack_lvl"] = castle_attack_lvl
        #info["castle_guild_defense_lvl"] = castledefense_lvl
        info["castle_guild_door"] = castle_door
    except:
        info["castle_guild_door"] = 1
    try:
        info["castle_guild_drop_people"] = drop_people
    except:
        info["castle_guild_drop_people"] = 1
    try:
        info["castle_guild_guard"] = castle_guard
    except:
        info["castle_guild_guard"] = 1
    try:
        info["castle_guild_guard_lvl"] = castle_guard_lvl
    except:
        info["castle_guild_guard_lvl"] = 1
    try:
        info["castle_guild_inventory"] = castle_inventory
    except:
        info["castle_guild_inventory"] = 1
    try:
        info["castle_guild_name"] = castle_guild_name
    except:
        info["castle_guild_name"] = 1
    try:
        info["castle_guild_people"] = castle_people
    except:
        info["castle_guild_people"] = 1
    try:
        info["castle_guild_tower"] = tower
    except:
        info["castle_guild_tower"] = 1
    try:
        info["castle_guild_tower_lvl"] = castle_tower_lvl
    except:
        info["castle_guild_tower_lvl"] = 1
    try:
        info["castle_guild_sklvl"] = sklvl
    except:
        info["castle_guild_sklvl"] = 1
    #info["bbvalue"] = bobovalueAmount
    #info["bbvaluef"] = bobovaluef
    #await _check_LvlLoop(ctx)
    #"print("role")
    #"print(role)
    #info["selected_enemy_exp"] = round(enemy_exp, 0)
    #info["selected_enemy_gold"] = round(enemy_gold, 0)
    fileIO("players/{}/info.json".format(author.id), "save", info)
    print("SafeBoboValue")
    print("member")
    print("Castle")
async def _check_setBoboValue(ctx):
    #await _check_setBoboValue(ctx)
    # 0 = assetsXslot boboAll 0s+0+1+2   WepLvlAll = bpv0+bpv1+bpv2
    # BoboValue = WepLvAll + 0s
    print("_check_setBoboValue")
    print("_check_setBoboValue")
    print("_check_setBoboValue")
    print("_check_setBoboValue")
    try:
        author = ctx.author
        member = ctx.message.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        if info["race"] and info["class"] == "None":
            await ctx.send("Please start your character using `{}start`".format(Prefix))
            return
        bbvalue_total_stats=info["bbvalue_total_stats"]
        print("bbvalue_total_stats")
        print(bbvalue_total_stats)
        bbvalue_stats=info["bbvalue_stats"]
        print("bbvalue_stats")
        print(bbvalue_stats)
        bbvalue=info["bbvalue"]
        print("bbvalue")
        print(bbvalue)
        #Calc Assets Befor !!!! TO-DO !!!!
        # Calc Bpv0x0
        a00 = info["bpv0"]
        a01 = info["bpv1"]
        a02 = info["bpv2"]
        a03 = info["bpv3"]
        a04 = info["bpv4"]
        a05 = info["bpv5"]
        a06 = info["bpv6"]
        a07 = info["bpv7"]
        a08 = info["bpv8"]
        a09 = info["bpv9"]
        a010 = info["bpv10"]
        a011 = info["bpv11"]
        a012 = info["bpv12"]
        a013 = info["bpv13"]
        a014 = info["bpv14"]
        a015 = info["bpv15"]
        a016 = info["bpv16"]
        a017 = info["bpv17"]
        a018 = info["bpv18"]
        a019 = info["bpv19"]
        a020 = info["bpv20"]
        a021 = info["bpv21"]
        a022 = info["bpv22"]
        a023 = info["bpv23"]
        a024 = info["bpv24"]
        a025 = info["bpv25"]
        bobovalue = int(a00) + int(a01) + int(a02) + int(a03) + int(a04) + int(a05) + int(a06) + int(a07) + int(a08) + int(a09) + int(a010) + int(a011) + int(a012) + int(a013) + int(a014) + int(a015) + int(a016) + int(a017) + int(a018) + int(a019) + int(a020) + int(a021) + int(a022) + int(a023) + int(a024) + int(a025)
        a00b = info["bp0"]
        a01b = info["bp1"]
        a02b = info["bp2"]
        a03b = info["bp3"]
        a04b = info["bp4"]
        a05b = info["bp5"]
        a06b = info["bp6"]
        a07b = info["bp7"]
        a08b = info["bp8"]
        a09b = info["bp9"]
        a010b = info["bp10"]
        a011b = info["bp11"]
        a012b = info["bp12"]
        a013b = info["bp13"]
        a014b = info["bp14"]
        a015b = info["bp15"]
        a016b = info["bp16"]
        a017b = info["bp17"]
        a018b = info["bp18"]
        a019b = info["bp19"]
        a020b = info["bp20"]
        a021b = info["bp21"]
        a022b = info["bp22"]
        a023b = info["bp23"]
        a024b = info["bp24"]
        a025b = info["bp25"]
        bobovalueAmount = int(a00b) + int(a01b) + int(a02b) + int(a03b) + int(a04b) + int(a05b) + int(a06b) + int(a07b) + int(a08b) + int(a09b) + int(a010b) + int(a011b) + int(a012b) + int(a013b) + int(a014b) + int(a015b) + int(a016b) + int(a017b) + int(a018b) + int(a019b) + int(a020b) + int(a021b) + int(a022b) + int(a023b) + int(a024b) + int(a025b)
        #enemy_xp = info["selected_enemy_exp"]
        a00f = info["bpf0"]*1
        a01f = info["bpf1"]*2
        a02f = info["bpf2"]*4
        a03f = info["bpf3"]*8
        a04f = info["bpf4"]*16
        a05f = info["bpf5"]*32
        a06f = info["bpf6"]*64
        a07f = info["bpf7"]*128
        a08f = info["bpf8"]*256
        a09f = info["bpf9"]*512
        a010f = info["bpf10"]*1024
        a011f = info["bpf11"]*2048
        a012f = info["bpf12"]*4096
        a013f = info["bpf13"]*8192
        a014f = info["bpf14"]*16384
        a015f = info["bpf15"]*32768
        a016f = info["bpf16"]*65536
        a017f = info["bpf17"]*131072
        a018f = info["bpf18"]*262144
        a019f = info["bpf19"]*524288
        a020f = info["bpf20"]*1048576
        a021f = info["bpf21"]*2097152
        a022f = info["bpf22"]*4194304
        a023f = info["bpf23"]*8388608
        a024f = info["bpf24"]*16777216
        a025f = info["bpf25"]*33554432
        info["bpvf0"] = info["bpf0"]*1
        info["bpvf1"] = info["bpf1"]*2
        info["bpvf2"] = info["bpf2"]*4
        info["bpvf3"] = info["bpf3"]*8
        info["bpvf4"] = info["bpf4"]*16
        info["bpvf5"] = info["bpf5"]*32
        info["bpvf6"] = info["bpf6"]*64
        info["bpvf7"] = info["bpf7"]*128
        info["bpvf8"] = info["bpf8"]*256
        info["bpvf9"] = info["bpf9"]*512
        info["bpvf10"] = info["bpf10"]*1024
        info["bpvf11"] = info["bpf11"]*2048
        info["bpvf12"] = info["bpf12"]*4096
        info["bpvf13"] = info["bpf13"]*8192
        info["bpvf14"] = info["bpf14"]*16384
        info["bpvf15"] = info["bpf15"]*32768
        info["bpvf16"] = info["bpf16"]*65536
        info["bpvf17"] = info["bpf17"]*131072
        info["bpvf18"] = info["bpf18"]*262144
        info["bpvf19"] = info["bpf19"]*524288
        info["bpvf20"] = info["bpf20"]*1048576
        info["bpvf21"] = info["bpf21"]*2097152
        info["bpvf22"] = info["bpf22"]*4194304
        info["bpvf23"] = info["bpf23"]*8388608
        info["bpvf24"] = info["bpf24"]*16777216
        info["bpvf25"] = info["bpf25"]*33554432
        bobovaluef = int(a00f) + int(a01f) + int(a02f) + int(a03f) + int(a04f) + int(a05f) + int(a06f) + int(a07f) + int(a08f) + int(a09f) + int(a010f) + int(a011f) + int(a012f) + int(a013f) + int(a014f) + int(a015f) + int(a016f) + int(a017f) + int(a018f) + int(a019f) + int(a020f) + int(a021f) + int(a022f) + int(a023f) + int(a024f) + int(a025f)
        #print("expMon")
        #print(expMon)
        print("bobovaluef")
        print(bobovaluef)
        #info["lvl"] = info["lvl"] + 1info["all_total_base_attack"] = attack * info["bpv0"]
        #info["all_drop_attack"]
        #info["all_defence"]
        #info["all_drop_defence"]
        #info["all_drop"]
        #info["all_drop_boco"]
        #info["all_drop_exp"]
        #info["all_drop_food"]
        #info["all_drop_gold"]
        #info["all_drop_hp"]
        #info["all_drop_key"]
        #info["all_drop_metal"]
        #info["all_drop_mp"]
        #info["all_drop_pot"]
        #info["all_drop_skexp"]
        #info["all_drop_sp"]
        #info["all_drop_stone"]
        #info["all_drop_wood"]
        #info["all_drop_people"]
        #info["all_drop_door"]
        #info["lvl"] = info["lvl"] + 1
        #info["lvl"] = info["lvl"] + 1
        info["bbvalue_total_stats"] = bobovalue
        info["bbvalue_stats"] = bobovalue
        info["bbvalue"] = bobovalueAmount
        info["bbvaluef"] = bobovaluef
        #await _check_LvlLoop(ctx)
        #"print("role")
        #"print(role)
        #info["selected_enemy_exp"] = round(enemy_exp, 0)
        #info["selected_enemy_gold"] = round(enemy_gold, 0)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        print("SafeBoboValue")
        #print("member")
        #print("role")
    except Error:
        pass
        await ctx.send("_check_setBoboValueERROR!")
async def _check_setBuildaCastle(ctx):
    author = ctx.author
    member = ctx.message.author
    channel = ctx.channel
    #await _check_setBuildaCastle(ctx)
    # 0 = assetsXslot boboAll 0s+0+1+2   WepLvlAll = bpv0+bpv1+bpv2
    # BoboValue = WepLvAll + 0s
    info = fileIO("players/{}/info.json".format(author.id), "load")
    print("Create Castle")
    print("Build Castle Wall")
    print("Create Castle")
    print("Build Castle Wall")
    # ctx.message.guild.id
    info["wherecastle"] = ctx.message.guild.id
    castle_name = info["castle_name"]
    try:
        print("0")
        try:
            if not os.path.exists("castleplayers/{}".format(author.id)):
                os.makedirs("castleplayers/{}".format(author.id))
                new_account = {
                    "name": author.name,
                    "guild": guildID.name,
                    "race": "None",
                    "class": "None",
                    "health": 100,
                    "enemyhp": 50,
                    "enemylvl": 0,
                    "lvl": 1,
                    "gold": 0,
                    "wood": 0,
                    "metal": 0,
                    "stone": 0,
                    "enemieskilled": 0,
                    "selected_enemy": "None",
                    "selected_enemy_player": "None",
                    "deaths": 0,
                    "exp": 0,
                    "lootbag": 0,
                    "wearing": "None",
                    "defence": 0,
                    "guild": "None",
                    "inguild": "None",
                    "skills_learned": [],
                    "inventory" : [],
                    "equip": "None",
                    "title": "None",
                    "wincry": "None",
                    "losecry": "None",
                    "location": "Golden Temple",
                    "roaming": "False",
                    "pet": "None",
                    "mana": 100,
                    "stamina": 100,
                    "craftable": [],
                    "daily_block": 0,
                    "rest_block": 0,
                    "traveling_block": 0,
                    "hp_potions": 0,
                    "keys": 0,
                    "mine_block": 0,
                    "chop_block": 0,
                    "in_dungeon": "False",
                    "dungeon_enemy": "None",
                    "duneon_enemy_hp": 0,
                    "in_party": [],
                    "castle_drop_atk" : 0,
                    "castle_drop_def" : 0,
                    "castle_drop_wall" : 0,
                    "castle_drop_food" : 0,
                    "castle_drop_wood" : 0,
                    "castle_drop_stone" : 0,
                    "castle_drop_metal" : 0,
                    "castle_drop_gold" : 0,
                    "castle_drop_boco" : 0,
                    "castle_drop_key" : 0,
                    "castle_drop_door" : 0,
                    "castle_drop_people" : 0,
                    "castle_drop_smallpot" : 0,
                    "castle_drop_exp" : 0,
                    "castle_drop_skexp" : 0,
                    "castle_drop_max" : 0,
                    "castle_drop_hp" : 0,
                    "castle_drop_sp" : 0,
                    "castle_drop_mp" : 0,
                    "castle_drop_rabbat" : 0,
                    "None" : 0,
                    "class_acher" : "0",
                    "class_paladin" : "0",
                    "class_mage" : "0",
                    "class_thief" : "0",
                    "type" : "dropfwsmgbks",
                    "material" : "Castle",
                    "price" : 0,
                    "sell_price" : 0,
                    "Name" : "None",
                    "Rock Castle a" : "0",
                    "code" : 00000000,
                    "Owner" : "None",
                    "items" : [],
                    "img" : "Qmad6odknxx2UxaFDgUPXVz7z2WcwRKJ32DFvKGYwEkBkc",
                    "backimg" : "QmcdYJSmfrvUJbp7W6Q6hGN5eeP4UmLDtKFPRJr78tpv5E",
                    "collection" : "BoboPixel0x0",
                    "category" : "None",
                    "level" :  0,
                    "quality" : "0",
                    "quantity" : 0,
                    "cardid" : "BP0x0-000",
                    "luckynr" : 0,
                    "bobovalue" : "0x0",
                    "style" : "0",
                    "info" : "https://bobopixel0x0.wordpress.com/",
                    "freedrops" :  "https://bobopixel0x0.wordpress.com/bobopixel0x0/",
                    "creator" : "BoboCoin",
                    "date" :  "Today",
                    "support" : "cn1qw.wam",
                    "description" : "An NFT of The Series BoboPixel0x0.",
                    "castle_ali" : "None",
                    "castle_all_attack" : 0,
                    "castle_all_attack_drop" : 0,
                    "castle_all_attack_lvl" : 0,
                    "castle_all_defence" : 0,
                    "castle_all_defence_drop" : 0,
                    "castle_all_defence_lvl" : 0,
                    "castle_army" : 0,
                    "castle_army_lvl" : 0,
                    "castle_army_paper" : 0,
                    "castle_army_paper_lvl" : 0,
                    "castle_army_paper_total" : 0,
                    "castle_army_rock" : 0,
                    "castle_army_rock_lvl" : 0,
                    "castle_army_rock_total" : 0,
                    "castle_army_scissor" : 0,
                    "castle_army_scissor_lvl" : 0,
                    "castle_army_scissor_total" : 0,
                    "castle_army_total" : 0,
                    "castle_army_total1" : 0,
                    "castle_armym" : 0,
                    "castle_atk" : 0,
                    "castle_boco" : 0,
                    "castle_bocom" : 0,
                    "castle_bopixbo" : 0,
                    "castle_bopxgol" : 0,
                    "castle_wgold" : 0,
                    "castle_bbold" : 0,
                    "castle_door" : 0,
                    "castle_depts" : 0,
                    "castle_dict" : {
                        "Castle_dict" : "None",
                        "code": "None",
                        "account": "None",
                        "balance": 0,
                        "amount": 0,
                        "issuer": "None",
                        "balances_amount": 0,
                        "bal_string":[
                        "0.00 BOLO",
                        "0.0 TOKEN"
                        ],
                        "decimals": 0,
                        "contract": "None",
                        "currency": "None",
                        "maximum_supply": 0.00000000,
                        "symbol": "None",
                    },
                    "castle_rock" : 0,
                    "castle_scissor" : 0,
                    "castle_paper" : 0,
                    "castle_antimat" : 0,
                    "castle_box_lvl" : 0,
                    "castle_channel" : 156,
                    "castle_count_draw" : 0,
                    "castle_count_lose" : 0,
                    "castle_count_played" : 0,
                    "castle_count_score" : 0,
                    "castle_count_win" : 0,
                    "castle_def" : 0,
                    "castle_food" : 0,
                    "castle_foodm" : 0,
                    "castle_gold" : 0,
                    "castle_goldm" : 0,
                    "castle_guard" : 0,
                    "castle_guard_lvl" : 0,
                    "castle_guild_lvl" : 0,
                    "castle_guild_name" : "None",
                    "castle_inventory" : [],
                    "castle_invv_space" : 10000,
                    "castle_key" : 0,
                    "castle_keym" : 0,
                    "castle_lvl" : 0,
                    "castle_metal" : 0,
                    "castle_metalm" : 0,
                    "castle_name" : "None",
                    "castle_owner" : "False",
                    "castle_people" : 0,
                    "castle_peoplem" : 0,
                    "castle_rank" : "None",
                    "castle_status" : "Working progress ALFA Castle",
                    "castle_stone" : 0,
                    "castle_stonem" : 0,
                    "castle_tower" : 0,
                    "castle_tower_lvl" : 0,
                    "castle_wall_hp" : 1000,
                    "castle_wall_hpmax" : 1000,
                    "castle_wall_lvl" : 0,
                    "castle_wood" : 0,
                    "castle_woodm" : 0,
                    "castle_work_block" : 0,
                    "channel" : 000
                }
                fileIO("castleplayers/{}/castleNFTS1.json".format(author.id), "save", new_account)
                fileIO("castleplayers/'{}'/'{}'.json".format(author.id, castle_name), "save", new_account)
                fileIO("castleplayers/{}/{}.json".format(author.id, ctx.message.guild.id), "save", new_account)
                info = fileIO("players/{}/info.json".format(author.id), "load")
                print("0110")
                if info["castle_name"] == "None" or info["castle_name"] == None or info["castle_name"] == []:
                    castle_name = info["castle_name"]
                    print("Castle NAME")
                    print(castle_name)
                    info = fileIO("castleplayers/'{}'/'{}'.json".format(author.id, ctx.message.guild.id), "load")
                #fileIO("players/{}/castleNFTS.json", "save", info)
        except:
            print("00")
    except:
         print("11")
async def _check_set8(ctx):
    #calc Load all stats Save LVL UP#
    # Mpnster Calc #
    #await _check_set6(ctx)
    try:
        author = ctx.author
        member = ctx.message.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        selected_enemy_name = round(info["selected_enemy_name"], 0)
        selected_enemy_hp = round(info["selected_enemy_hp"], 0)
        selected_enemy_attack = round(info["selected_enemy_attack"], 0)
        selected_enemy_defence = round(info["selected_enemy_defence"], 0)
        selected_enemy_lvl = round(info["selected_enemy_lvl"], 0)
        selected_enemy_exp = round(info["selected_enemy_exp"], 0)
        selected_enemy_exp_drop = round(info["selected_enemy_exp_drop"], 0)
        selected_enemy_gold = round(info["selected_enemy_gold"], 0)
        selected_enemy_drop = round(info["selected_enemy_drop"], 0)
        selected_enemy_skill = round(info["selected_enemy_skill"], 0)
        selected_enemy_skill_exp = round(info["selected_enemy_skill_exp"], 0)
        selected_enemy_skill_exp_drop = round(info["selected_enemy_skill_exp_drop"], 0)
        selected_enemy_skill_lvl = round(info["selected_enemy_skill_lvl"], 0)
        selected_enemy_fight_status = round(info["selected_enemy_fight_status"], 0)
        selected_enemy_status = round(info["selected_enemy_status"], 0)
        selected_enemy_castle = round(info["selected_enemy_castle"], 0)
        selected_enemy_castle_exp = round(info["selected_enemy_castle_exp"], 0)
        selected_enemy_castle_exp_drop = round(info["selected_enemy_castle_exp_drop"], 0)
        selected_enemy_castle_lvl = round(info["selected_enemy_castle_lvl"], 0)
        selected_enemy_castle_name = round(info["selected_enemy_castle_name"], 0)
        selected_enemy_castle_aliance = round(info["selected_enemy_castle_aliance"], 0)
        em = discord.Embed(description="```diff\n!=====[All NOW]=====!\n\n selected_enemy_lvl      :{}\n selected_enemy_exp     :{}\n selected_enemy_exp_drop          :{}\n selected_enemy_castle_exp          :{}\n selected_enemy_castle_exp_drop          :{}\n selected_enemy_hp :{}\n!===================!```".format(selected_enemy_lvl, selected_enemy_exp, selected_enemy_exp_drop, selected_enemy_castle_exp, selected_enemy_castle_exp_drop, selected_enemy_hp), color=discord.Color.blue())
        await ctx.send(embed=em)
        all_attack = info["all_total_base_attack"]
        all_defence = info["all_defence"]
        all_drop = info["all_drop"]
        all_drop_boco = info["all_drop_boco"]
        all_drop_exp = info["all_drop_exp"]
        all_drop_food = info["all_drop_food"]
        all_drop_gold = info["all_drop_gold"]
        all_drop_hp = info["all_drop_hp"]
        all_drop_key = info["all_drop_key"]
        all_drop_metal = info["all_drop_metal"]
        all_drop_mp = info["all_drop_mp"]
        all_drop_pot = info["all_drop_pot"]
        all_drop_skexp = info["all_drop_skexp"]
        all_drop_sp = info["all_drop_sp"]
        all_drop_stone = info["all_drop_stone"]
        all_drop_wood = info["all_drop_wood"]
        all_drop_people = info["all_drop_people"]
        all_drop_door = info["all_drop_door"]
        em1 = discord.Embed(description="```diff\n!=====[All NOW]=====!\n\n all_attack      :{}\n all_defence     :{}\n all_drop_exp          :{}\n all_drop_hp          :{}\n all_drop          :{}\n all_drop_boco :{}\n!===================!```".format(all_attack, all_defence, all_drop_exp, all_drop_hp, all_drop, all_drop_boco), color=discord.Color.blue())
        await ctx.send(embed=em1)
        all_attack = info["all_total_base_attack"]
        all_drop_attack = info["all_defence"]
        all_defence = info["all_total_base_attack"]
        all_drop_defence = info["all_defence"]
        all_drop = info["all_drop"]
        all_drop_boco = info["all_drop_boco"]
        all_drop_exp = info["all_drop_exp"]
        all_drop_food = info["all_drop_food"]
        all_drop_gold = info["all_drop_gold"]
        all_drop_hp = info["all_drop_hp"]
        all_drop_key = info["all_drop_key"]
        all_drop_metal = info["all_drop_metal"]
        all_drop_mp = info["all_drop_mp"]
        all_drop_pot = info["all_drop_pot"]
        all_drop_skexp = info["all_drop_skexp"]
        all_drop_sp = info["all_drop_sp"]
        all_drop_stone = info["all_drop_stone"]
        all_drop_wood = info["all_drop_wood"]
        all_drop_people = info["all_drop_people"]
        all_drop_door = info["all_drop_door"]
        selected_enemy_name = round(info["selected_enemy_name"], 0)
        selected_enemy_hp = round(info["selected_enemy_hp"], 0)
        selected_enemy_attack = round(info["selected_enemy_attack"], 0)
        selected_enemy_defence = round(info["selected_enemy_defence"], 0)
        selected_enemy_lvl = round(info["selected_enemy_lvl"], 0) + 1
        selected_enemy_exp = round(info["selected_enemy_exp"], 0)
        selected_enemy_exp_drop = round(info["selected_enemy_exp_drop"], 0)
        selected_enemy_gold = round(info["selected_enemy_gold"], 0)
        selected_enemy_drop = round(info["selected_enemy_drop"], 0)
        selected_enemy_skill = round(info["selected_enemy_skill"], 0)
        selected_enemy_skill_exp = round(info["selected_enemy_skill_exp"], 0)
        selected_enemy_skill_exp_drop = round(info["selected_enemy_skill_exp_drop"], 0)
        selected_enemy_skill_lvl = round(info["selected_enemy_skill_lvl"], 0)
        selected_enemy_fight_status = round(info["selected_enemy_fight_status"], 0)
        selected_enemy_status = round(info["selected_enemy_status"], 0)
        selected_enemy_castle = round(info["selected_enemy_castle"], 0)
        selected_enemy_castle_exp = round(info["selected_enemy_castle_exp"], 0)
        selected_enemy_castle_exp_drop = round(info["selected_enemy_castle_exp_drop"], 0)
        selected_enemy_castle_lvl = round(info["selected_enemy_castle_lvl"], 0)
        selected_enemy_castle_name = round(info["selected_enemy_castle_name"], 0)
        selected_enemy_castle_aliance = round(info["selected_enemy_castle_aliance"], 0)
        #info["selected_enemy_name"] =
        info["selected_enemy_hp"] = 0
        info["selected_enemy_attack"] = 0
        info["selected_enemy_defence"] = 0
        info["selected_enemy_lvl"] = 0
        info["selected_enemy_exp"] = 0
        info["selected_enemy_exp_drop"] = 0
        info["selected_enemy_gold"] = 0
        info["selected_enemy_drop"] = 0
        info["selected_enemy_skill"] = 0
        info["selected_enemy_skill_exp"] = 0
        info["selected_enemy_skill_exp_drop"] = 0
        info["selected_enemy_skill_lvl"] = 0
        info["selected_enemy_fight_status"] = 0
        info["selected_enemy_status"] = 0
        info["selected_enemy_castle"] = 0
        info["selected_enemy_castle_exp"] = 0
        info["selected_enemy_castle_exp_drop"] = 0
        info["selected_enemy_castle_lvl"] = 0
        info["selected_enemy_castle_name"] = 0
        info["selected_enemy_castle_aliance"] = 0
        info["all_total_base_attack"] = round(info["all_drop_attack"], 0) * info["lvl"]
        info["all_defence"] = round(info["all_drop_attack"], 0) * info["lvl"]
        info["all_total_base_attack"] = round(info["all_drop_attack"], 0) * info["lvl"]
        info["all_defence"] = round(info["all_drop_attack"], 0) * info["lvl"]
        info["all_drop"] = round(info["all_drop_attack"], 0) * info["lvl"]
        info["all_drop_boco"] = round(info["all_drop_attack"], 0) * info["lvl"]
        info["exp"] = selected_enemy_exp + info["all_drop_exp"]
        #selected_enemy_exp
        info["all_drop_food"] = round(info["all_drop_food"], 0) * info["lvl"]
        info["all_drop_gold"] = round(info["all_drop_gold"], 0) * info["lvl"]
        info["all_drop_hp"] = round(info["all_drop_hp"], 0) * info["lvl"]
        info["all_drop_key"] = round(info["all_drop_key"], 0) * info["lvl"]
        info["all_drop_metal"] = round(info["all_drop_metal"], 0) * info["lvl"]
        info["all_drop_mp"] = round(info["all_drop_mp"], 0) * info["lvl"]
        info["all_drop_pot"] = round(info["all_drop_pot"], 0) * info["lvl"]
        info["all_drop_skexp"] = round(info["all_drop_skexp"], 0) * info["lvl"]
        info["all_drop_sp"] = round(info["all_drop_sp"], 0) * info["lvl"]
        info["all_drop_stone"] = round(info["all_drop_stone"], 0) * info["lvl"]
        info["all_drop_wood"] = round(info["all_drop_wood"], 0) * info["lvl"]
        info["all_drop_people"] = round(info["all_drop_people"], 0) * info["lvl"]
        info["all_drop_door"] = round(info["all_drop_door"], 0) * info["lvl"]
        attack = round(info["all_drop_attack"], 0) * info["lvl"]
        defence = round(info["all_drop_defence"], 0) * info["lvl"]
        hp = round(info["all_drop_hp"], 0) * info["lvl"]
        mp = round(info["all_drop_mp"], 0) * info["lvl"]
        sp = round(info["all_drop_sp"], 0) * info["lvl"]
        castle_army = info["castle_army_scissor"] + info["castle_army_paper"] + info["castle_army_rock"]
        allatack = info["count_win"]
        alldefence = info["count_lose"]
        count_played = info["count_played"]
        count_draw = info["count_draw"]
        box_stone = info["box_stone"]
        box_wood = info["box_wood"]
        aralvl1 = info["castle_boco"]
        aralvl2 = info["castle_metal"]
        aralvl3 = info["castle_gold"]
        aralvl4 = info["castle_stone"]
        aralvl5 = info["castle_wood"]
        aralvl6 = info["castle_food"]
        em = discord.Embed(description="```diff\n!=====[All NOW]=====!\n\n attack      :{}\n Defence     :{}\n hp          :{}\n mp          :{}\n sp          :{}\n castle_army :{}\n!===================!```".format(attack, defence, hp, mp, sp, castle_army), color=discord.Color.blue())
        await ctx.send(embed=em)
    except Error:
        pass
        await ctx.send("!set ""YOUR WALLETSet5"" !")
async def _check_setNEWGame(ctx):
    try:
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_Wallet_open(ctx):
    try:
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_setWallet_open(ctx):
    try:
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_Wallet_close(ctx):
    try:
        text_close_name = info["close_name"]
        text_close_name = info["close_name"]
        account = info["account"]
        bopiDict = info["bopiDict"]
        goldDict = info["goldDict"]
        bgoldDict = info["bgoldDict"]
        wgoldDict = info["wgoldDict"]
        bocoDict = info["bocoDict"]
        sciDict = info["sciDict"]
        rocDict = info["rocDict"]
        papDict = info["papDict"]
        stodDict = info["stodDict"]
        metDict = info["metDict"]
        wooDict = info["wooDict"]
        fooDict = info["fooDict"]
        peoDict = info["peoDict"]
        antDict = info["antDict"]
        deptDict = info["deptDict"]
        keyDict = info["keyDict"]
        doorDict = info["doorDict"]
        waxDict = info["waxDict"]
        wojakDict = info["wojakDict"]
        pixelDict = info["pixelDict"]
        guild_close_account = info["guild_close_account"]
        guild_close_bopiDict = info["guild_close_bopiDict"]
        guild_close_goldDict = info["guild_close_goldDict"]
        guild_close_bgoldDict = info["guild_close_bgoldDict"]
        guild_close_wgoldDict = info["guild_close_wgoldDict"]
        guild_close_bocoDict = info["guild_close_bocoDict"]
        guild_close_sciDict = info["guild_close_sciDict"]
        guild_close_rocDict = info["guild_close_rocDict"]
        guild_close_papDict = info["guild_close_papDict"]
        guild_close_stodDict = info["guild_close_stodDict"]
        guild_close_metDict = info["guild_close_metDict"]
        guild_close_wooDict = info["guild_close_wooDict"]
        guild_close_fooDict = info["guild_close_fooDict"]
        guild_close_peoDict = info["guild_close_peoDict"]
        guild_close_antDict = info["guild_close_antDict"]
        guild_close_deptDict = info["guild_close_deptDict"]
        guild_close_keyDict = info["guild_close_keyDict"]
        guild_close_doorDict = info["guild_close_doorDict"]
        guild_close_waxDict = info["guild_close_waxDict"]
        guild_close_wojakDict = info["guild_close_wojakDict"]
        guild_close_pixelDict = info["guild_close_pixelDict"]
        close_account = info["close_account"]
        close_bopiDict = info["close_bopiDict"]
        close_goldDict = info["close_goldDict"]
        close_bgoldDict = info["close_bgoldDict"]
        close_wgoldDict = info["close_wgoldDict"]
        close_bocoDict = info["close_bocoDict"]
        close_sciDict = info["close_sciDict"]
        close_rocDict = info["close_rocDict"]
        close_papDict = info["close_papDict"]
        close_stodDict = info["close_stodDict"]
        close_metDict = info["close_metDict"]
        close_wooDict = info["close_wooDict"]
        close_fooDict = info["close_fooDict"]
        close_peoDict = info["close_peoDict"]
        close_antDict = info["close_antDict"]
        close_deptDict = info["close_deptDict"]
        close_keyDict = info["close_keyDict"]
        close_doorDict = info["close_doorDict"]
        close_waxDict = info["close_waxDict"]
        close_wojakDict = info["close_wojakDict"]
        close_pixelDict = info["close_pixelDict"]
        total_2_account = info["2_account"]
        total_2_bopiDict = info["2_bopiDict"]
        total_2_goldDict = info["2_goldDict"]
        total_2_bgoldDict = info["total_2_bgoldDict"]
        total_2_wgoldDict = info["total_2_wgoldDict"]
        total_2_bocoDict = info["total_2_bocoDict"]
        total_2_sciDict = info["total_2_sciDict"]
        total_2_rocDict = info["total_2_rocDict"]
        total_2_papDict = info["total_2_papDict"]
        total_2_stodDict = info["total_2_stodDict"]
        total_2_metDict = info["total_2_metDict"]
        total_2_wooDict = info["total_2_wooDict"]
        total_2_fooDict = info["total_2_fooDict"]
        total_2_peoDict = info["total_2_peoDict"]
        total_2_antDict = info["total_2_antDict"]
        total_2_deptDict = info["total_2_deptDict"]
        total_2_keyDict = info["total_2_keyDict"]
        total_2_doorDict = info["total_2_doorDict"]
        total_2_waxDict = info["total_2_waxDict"]
        total_2_wojakDict = info["total_2_wojakDict"]
        total_2_pixelDict = info["total_2_pixelDict"]
        #requests.post('https://api.waxsweden.org:443/v1/chain/get_currency_balance', json= bopiDict)
        em2 = discord.Embed(description="**\n!====[{}'s]====!\nThis Takes Time!!!\n Please dont write any commands till done! to safe properly.\n+ Check Bot response with {}info\n**".format(info["name"], Prefix), color=discord.Color.blue())
        await ctx.send(embed=em2)
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_setWallet_total_2(ctx):
    try:
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_Wallet_2(ctx):
    try:
        text_2_name = info["2_name"]
        text_2_name = info["2_name"]
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_setWallet_2(ctx):
    try:
        #author = ctx.author
        #member = ctx.message.author
        #info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        #info["account_to_check"] = "None"
        #"print("role")
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setBoboValue(ctx)
        #await _check_setBoboValue(ctx)
        #await _check_upequipment(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
    except :
        pass
        #await ctx.send("_check_setNEWGameERROR!")
async def _check_setAmnesia(ctx):
    #await _check_setAmnesia(ctx)
    author = ctx.author
    message = ctx.message
    try:
        #author = ctx.author
        #member = ctx.message.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        #info["selected_item"] = "Hand"
        info["rank"] = "Forget"
        info["title"] = "Reboarn"
        info["Player_In"] = "None"
        info["Safe_version"] = "None"
        info["WalletSetupDone"] = "None"
        info["account"] = "None"
        info["account_to_check"] = "None"
        info["accountset"] = 0
        info["name"] = "None"
        info["castle_name"] = "None"
        info["class"] = "None"
        info["race"] = "None"
        info["setdone"] = 0
        info["setnamecastledone"] = 0
        info["setnamedone"] = 0
        info["setwalletdone"] = 0
        info["skexp"] = 0
        info["sklvl"] = 0
        info["wallet"] = "None"
        info["score"] = 0
        info["runaways"] = 0
        info["rest_block"] = 0
        info["rankkill"] = 0
        info["pet"] = "None"
        info["mind"] = "0"
        info["max_skexp"] = 0
        info["manamax"] = 0
        info["lvljump"] = 0
        info["lvl_defence"] = 0
        info["lvl_attack"] = 0
        info["inhavenft_status"] = "False"
        info["inguild"] = "None"
        info["info_member"] = 0
        info["infight_status"] = "False"
        info["inbuff"] = "False"
        info["in_party"] = 0
        info["in_dungeon"] = 0
        info["hunt_block"] = 0
        info["healthmax"] = 0
        info["hacker_virus"] = 0
        info["hacker_password"] = 0
        info["hacker_name"] = 0
        info["hacker_firewall"] = 0
        info["hacker_cracker"] = 0
        info["hacker_botnet"] = 0
        info["hacker_antivirus"] = 0
        info["free_cool_block1"] = 0
        info["free_cool_block"] = 0
        info["free1_cool_block"] = 0
        info["expsk"] = 0
        info["expmaxsk"] = 0
        info["expmax"] = 0
        info["exp"] = 0
        info["enemieskilled"] = 0
        info["emptybag"] = 0
        info["dragon_holding_time"] = 0
        info["dig_block"] = 0
        info["door"] = "None"
        info["dice_win_money_bet"] = 0
        info["dice_win_money"] = 0
        info["dice_win"] = 0
        info["dice_row"] = 0
        info["dice_lose"] = 0
        info["dice_count_played"] = 0
        info["dice_count"] = 0
        info["dice_block"] = 0
        info["dice_bet"] = 0
        info["deaths"] = 0
        info["daily_block"] = 0
        info["channel"] = 0
        info["castle_guild_name"] = 0
        info["box_wood_block"] = 0
        info["box_pot_block"] = 0
        info["box_people_block"] = 0
        info["box_metal_block"] = 0
        info["box_gold_block"] = 0
        info["box_food_block"] = 0
        info["box_coin_block"] = 0
        info["box_boco_block"] = 0
        info["box_army_block"] = 0
        #"print(role)
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        #await _check_setBoboValue(ctx)
        #await _check_setAmnesia(ctx)
        #await ctx.send("_check_setNEWGame_check_upequipment!")
        #print("member")
        #print("role")
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n New Game... \n```".format())
        await _check_setBoboValue(ctx)
    except:
        pass
        await ctx.send("_check_setAmnesiaERRor!")
async def _check_setAssetsXdrop(ctx):
    #calc all stats Save LVL UP#
    #await _check_setAssetsXdrop(ctx)
    try:
        author = ctx.author
        member = ctx.message.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        itemname = fileIO("core/enemies/all.json", "load")
        em = discord.Embed(description="```diff\n!=== [BoboValue] ===!\n!=== [BoboPixel0x0Value] ===!\n\n+ <:bp0x0_0:>  : {}\n+ <:bp0x0_1:>  : {}\n+ <:bp0x0_2:>  : {}\n+ <:bp0x0_3:>  : {}\n+ <:bp0x0_4:>  : {}\n+ <:bp0x0_5:>  : {}\n+ <:bp0x0_6:>  : {}\n+ <:bp0x0_7:>  : {}\n+ <:bp0x0_8:>  : {}\n+ <:bp0x0_9:>  : {}\n+ <:bp0x0_10:> : {}\n+ <:bp0x0_11:> : {}\n+ <:bp0x0_12:> : {}\n+ <:bp0x0_13:> : {}\n+ <:bp0x0_14:> : {}\n+ <:bp0x0_15:> : {}\n+ <:bp0x0_16:> : {}\n+ <:bp0x0_17:> : {}\n+ <:bp0x0_18:> : {}\n+ <:bp0x0_19:> : {}\n+ <:bp0x0_20:> : {}\n+ <:bp0x0_21:> : {}\n+ <:bp0x0_22:> : {}\n+ <:bp0x0_23:> : {}\n+ <:bp0x0_24:> : {}\n+ <:bp0x0_25:> : {}\n+ <:FreeCandy:>: {}\n\n Total NFTs   : {} ```".format(info["bpv0"], info["bpv1"], info["bpv2"], info["bpv3"], info["bpv4"], info["bpv5"], info["bpv6"], info["bpv7"], info["bpv8"], info["bpv9"], info["bpv10"], info["bpv11"], info["bpv12"], info["bpv13"], info["bpv14"], info["bpv15"], info["bpv16"], info["bpv17"], info["bpv18"], info["bpv19"], info["bpv20"], info["bpv21"], info["bpv22"], info["bpv23"], info["bpv24"], info["bpv25"], info["bpfreecandy"], info["bbvalue_total_stats"], "\n".join(info["inventory"])), color=discord.Color.blue())
        selectedSlot = info["slotnum"]
        all_attack = info["all_total_base_attack"]
        all_drop_attack = info["all_drop_attack"]
        all_defence = info["all_defence"]
        all_drop_defence = info["all_drop_defence"]
        all_drop = info["all_drop"]
        all_drop_boco = info["all_drop_boco"]
        all_drop_exp = info["all_drop_exp"]
        all_drop_food = info["all_drop_food"]
        all_drop_gold = info["all_drop_gold"]
        all_drop_hp = info["all_drop_hp"]
        all_drop_key = info["all_drop_key"]
        all_drop_metal = info["all_drop_metal"]
        all_drop_mp = info["all_drop_mp"]
        all_drop_pot = info["all_drop_pot"]
        all_drop_skexp = info["all_drop_skexp"]
        all_drop_sp = info["all_drop_sp"]
        all_drop_stone = info["all_drop_stone"]
        all_drop_wood = info["all_drop_wood"]
        all_drop_people = info["all_drop_people"]
        all_drop_door = info["all_drop_door"]
        selected_item = str(info["selected_item"])
        zslot_0_inventory = info["zslot_0_inventory"]
        zslot_1_inventory = info["zslot_1_inventory"]
        zslot_2_inventory = info["zslot_2_inventory"]
        zslot_2_inventory = info["zslot_3_inventory"]
        zslot_4_inventory = info["zslot_4_inventory"]
        zslot_5_inventory = info["zslot_5_inventory"]
        zslot_6_inventory = info["zslot_6_inventory"]
        zslot_7_inventory = info["zslot_7_inventory"]
        zslot_8_inventory = info["zslot_8_inventory"]
        zslot_9_inventory = info["zslot_9_inventory"]
        zslot_10_inventory = info["zslot_10_inventory"]
        zslot_11_inventory = info["zslot_11_inventory"]
        zslot_12_inventory = info["zslot_12_inventory"]
        zslot_13_inventory = info["zslot_13_inventory"]
        zslot_14_inventory = info["zslot_14_inventory"]
        zslot_15_inventory = info["zslot_15_inventory"]
        zslot_16_inventory = info["zslot_16_inventory"]
        zslot_17_inventory = info["zslot_17_inventory"]
        zslot_18_inventory = info["zslot_18_inventory"]
        zslot_19_inventory = info["zslot_19_inventory"]
        zslot_20_inventory = info["zslot_20_inventory"]
        zslot_21_inventory = info["zslot_21_inventory"]
        zslot_22_inventory = info["zslot_22_inventory"]
        zslot_23_inventory = info["zslot_23_inventory"]
        zslot_24_inventory = info["zslot_24_inventory"]
        zslot_25_inventory = info["zslot_25_inventory"]
        if info["zslot0_equip"] == "None":
            await ctx.send("Nothing in 0 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack0 = 0
            defence0 = 0
            expdropp0 = 0
            dropdrop0 = 0
            skexpdropp0 = 0
            fooddropp0 = 0
            wooddropp0 = 0
            stonedropp0 = 0
            metaldropp0 = 0
            golddropp0 = 0
            bocodropp0 = 0
            keydropp0 = 0
            mpdrop0 = 0
            hpdrop0 = 0
            spdrop0 = 0
            rabbat0 = 0
            pass
        else:
            try:
                zslot0_equip = info["zslot0_equip"]
                newitemname = info["zslot0_equip"]
                attack0 = itemname[newitemname]["max_dmg"]
                defence0 = itemname[newitemname]["max_def"]
                expdropp0 = itemname[newitemname]["max_exp"]
                dropdrop0 = itemname[newitemname]["max_drop"]
                skexpdropp0 = itemname[newitemname]["max_skexp"]
                fooddropp0 = itemname[newitemname]["food_drop"]
                wooddropp0 = itemname[newitemname]["wood_drop"]
                stonedropp0 = itemname[newitemname]["stone_drop"]
                metaldropp0 = itemname[newitemname]["metal_drop"]
                golddropp0 = itemname[newitemname]["gold_drop"]
                bocodropp0 = itemname[newitemname]["boco_drop"]
                keydropp0 = itemname[newitemname]["key_drop"]
                mpdrop0 = itemname[newitemname]["all_drop_mp"]
                hpdrop0 = itemname[newitemname]["all_drop_hp"]
                spdrop0 = itemname[newitemname]["all_drop_sp"]
                rabbat0 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot1_equip"] == "None":
            await ctx.send("Nothing in 1 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack1 = 0
            defence1 = 0
            expdropp1 = 0
            dropdrop1 = 0
            skexpdropp1 = 0
            fooddropp1 = 0
            wooddropp1 = 0
            stonedropp1 = 0
            metaldropp1 = 0
            golddropp1 = 0
            bocodropp1 = 0
            keydropp1 = 0
            mpdrop1 = 0
            hpdrop1 = 0
            spdrop1 = 0
            rabbat1 = 0
            pass
        else:
            try:
                zslot1_equip = info["zslot1_equip"]
                newitemname = info["zslot1_equip"]
                attack1 = itemname[newitemname]["max_dmg"]
                defence1 = itemname[newitemname]["max_def"]
                expdropp1 = itemname[newitemname]["max_exp"]
                dropdrop1 = itemname[newitemname]["max_drop"]
                skexpdropp1 = itemname[newitemname]["max_skexp"]
                fooddropp1 = itemname[newitemname]["food_drop"]
                wooddropp1 = itemname[newitemname]["wood_drop"]
                stonedropp1 = itemname[newitemname]["stone_drop"]
                metaldropp1 = itemname[newitemname]["metal_drop"]
                golddropp1 = itemname[newitemname]["gold_drop"]
                bocodropp1 = itemname[newitemname]["boco_drop"]
                keydropp1 = itemname[newitemname]["key_drop"]
                mpdrop1 = itemname[newitemname]["all_drop_mp"]
                hpdrop1 = itemname[newitemname]["all_drop_hp"]
                spdrop1 = itemname[newitemname]["all_drop_sp"]
                rabbat1 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot2_equip"] == "None":
            await ctx.send("Nothing in 2 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack2 = 0
            defence2 = 0
            expdropp2 = 0
            dropdrop2 = 0
            skexpdropp2 = 0
            fooddropp2 = 0
            wooddropp2 = 0
            stonedropp2 = 0
            metaldropp2 = 0
            golddropp2 = 0
            bocodropp2 = 0
            keydropp2 = 0
            mpdrop2 = 0
            hpdrop2 = 0
            spdrop2 = 0
            rabbat2 = 0
            pass
        else:
            try:
                zslot2_equip = info["zslot2_equip"]
                newitemname = info["zslot2_equip"]
                attack2 = itemname[newitemname]["max_dmg"]
                defence2 = itemname[newitemname]["max_def"]
                expdropp2 = itemname[newitemname]["max_exp"]
                dropdrop2 = itemname[newitemname]["max_drop"]
                skexpdropp2 = itemname[newitemname]["max_skexp"]
                fooddropp2 = itemname[newitemname]["food_drop"]
                wooddropp2 = itemname[newitemname]["wood_drop"]
                stonedropp2 = itemname[newitemname]["stone_drop"]
                metaldropp2 = itemname[newitemname]["metal_drop"]
                golddropp2 = itemname[newitemname]["gold_drop"]
                bocodropp2 = itemname[newitemname]["boco_drop"]
                keydropp2 = itemname[newitemname]["key_drop"]
                mpdrop2 = itemname[newitemname]["all_drop_mp"]
                hpdrop2 = itemname[newitemname]["all_drop_hp"]
                spdrop2 = itemname[newitemname]["all_drop_sp"]
                rabbat2 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot3_equip"] == "None":
            await ctx.send("Nothing in 3 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack3 = 0
            defence3 = 0
            expdropp3 = 0
            dropdrop3 = 0
            skexpdropp3 = 0
            fooddropp3 = 0
            wooddropp3 = 0
            stonedropp3 = 0
            metaldropp3 = 0
            golddropp3 = 0
            bocodropp3 = 0
            keydropp3 = 0
            mpdrop3 = 0
            hpdrop3 = 0
            spdrop3 = 0
            rabbat3 = 0
            pass
        else:
            try:
                zslot3_equip = info["zslot3_equip"]
                newitemname = info["zslot3_equip"]
                attack3 = itemname[newitemname]["max_dmg"]
                defence3 = itemname[newitemname]["max_def"]
                expdropp3 = itemname[newitemname]["max_exp"]
                dropdrop3 = itemname[newitemname]["max_drop"]
                skexpdropp3 = itemname[newitemname]["max_skexp"]
                fooddropp3 = itemname[newitemname]["food_drop"]
                wooddropp3 = itemname[newitemname]["wood_drop"]
                stonedropp3 = itemname[newitemname]["stone_drop"]
                metaldropp3 = itemname[newitemname]["metal_drop"]
                golddropp3 = itemname[newitemname]["gold_drop"]
                bocodropp3 = itemname[newitemname]["boco_drop"]
                keydropp3 = itemname[newitemname]["key_drop"]
                mpdrop3 = itemname[newitemname]["all_drop_mp"]
                hpdrop3 = itemname[newitemname]["all_drop_hp"]
                spdrop3 = itemname[newitemname]["all_drop_sp"]
                rabbat3 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot4_equip"] == "None":
            await ctx.send("Nothing in 4 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack4 = 0
            defence4 = 0
            expdropp4 = 0
            dropdrop4 = 0
            skexpdropp4 = 0
            fooddropp4 = 0
            wooddropp4 = 0
            stonedropp4 = 0
            metaldropp4 = 0
            golddropp4 = 0
            bocodropp4 = 0
            keydropp4 = 0
            mpdrop4 = 0
            hpdrop4 = 0
            spdrop4 = 0
            rabbat4 = 0
            pass
        else:
            try:
                zslot4_equip = info["zslot4_equip"]
                newitemname = info["zslot4_equip"]
                attack4 = itemname[newitemname]["max_dmg"]
                defence4 = itemname[newitemname]["max_def"]
                expdropp4 = itemname[newitemname]["max_exp"]
                dropdrop4 = itemname[newitemname]["max_drop"]
                skexpdropp4 = itemname[newitemname]["max_skexp"]
                fooddropp4 = itemname[newitemname]["food_drop"]
                wooddropp4 = itemname[newitemname]["wood_drop"]
                stonedropp4 = itemname[newitemname]["stone_drop"]
                metaldropp4 = itemname[newitemname]["metal_drop"]
                golddropp4 = itemname[newitemname]["gold_drop"]
                bocodropp4 = itemname[newitemname]["boco_drop"]
                keydropp4 = itemname[newitemname]["key_drop"]
                mpdrop4 = itemname[newitemname]["all_drop_mp"]
                hpdrop4 = itemname[newitemname]["all_drop_hp"]
                spdrop4 = itemname[newitemname]["all_drop_sp"]
                rabbat4 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot5_equip"] == "None":
            await ctx.send("Nothing in 5 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack5 = 0
            defence5 = 0
            expdropp5 = 0
            dropdrop5 = 0
            skexpdropp5 = 0
            fooddropp5 = 0
            wooddropp5 = 0
            stonedropp5 = 0
            metaldropp5 = 0
            golddropp5 = 0
            bocodropp5 = 0
            keydropp5 = 0
            mpdrop5 = 0
            hpdrop5 = 0
            spdrop5 = 0
            rabbat5 = 0
            pass
        else:
            try:
                zslot5_equip = info["zslot5_equip"]
                newitemname = info["zslot5_equip"]
                attack5 = itemname[newitemname]["max_dmg"]
                defence5 = itemname[newitemname]["max_def"]
                expdropp5 = itemname[newitemname]["max_exp"]
                dropdrop5 = itemname[newitemname]["max_drop"]
                skexpdropp5 = itemname[newitemname]["max_skexp"]
                fooddropp5 = itemname[newitemname]["food_drop"]
                wooddropp5 = itemname[newitemname]["wood_drop"]
                stonedropp5 = itemname[newitemname]["stone_drop"]
                metaldropp5 = itemname[newitemname]["metal_drop"]
                golddropp5 = itemname[newitemname]["gold_drop"]
                bocodropp5 = itemname[newitemname]["boco_drop"]
                keydropp5 = itemname[newitemname]["key_drop"]
                mpdrop5 = itemname[newitemname]["all_drop_mp"]
                hpdrop5 = itemname[newitemname]["all_drop_hp"]
                spdrop5 = itemname[newitemname]["all_drop_sp"]
                rabbat5 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot6_equip"] == "None":
            await ctx.send("Nothing in 6 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack6 = 0
            defence6 = 0
            expdropp6 = 0
            dropdrop6 = 0
            skexpdropp6 = 0
            fooddropp6 = 0
            wooddropp6 = 0
            stonedropp6 = 0
            metaldropp6 = 0
            golddropp6 = 0
            bocodropp6 = 0
            keydropp6 = 0
            mpdrop6 = 0
            hpdrop6 = 0
            spdrop6 = 0
            rabbat6 = 0
            pass
        else:
            try:
                zslot6_equip = info["zslot6_equip"]
                newitemname = info["zslot6_equip"]
                attack6 = itemname[newitemname]["max_dmg"]
                defence6 = itemname[newitemname]["max_def"]
                expdropp6 = itemname[newitemname]["max_exp"]
                dropdrop6 = itemname[newitemname]["max_drop"]
                skexpdropp6 = itemname[newitemname]["max_skexp"]
                fooddropp6 = itemname[newitemname]["food_drop"]
                wooddropp6 = itemname[newitemname]["wood_drop"]
                stonedropp6 = itemname[newitemname]["stone_drop"]
                metaldropp6 = itemname[newitemname]["metal_drop"]
                golddropp6 = itemname[newitemname]["gold_drop"]
                bocodropp6 = itemname[newitemname]["boco_drop"]
                keydropp6 = itemname[newitemname]["key_drop"]
                mpdrop6 = itemname[newitemname]["all_drop_mp"]
                hpdrop6 = itemname[newitemname]["all_drop_hp"]
                spdrop6 = itemname[newitemname]["all_drop_sp"]
                rabbat6 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot7_equip"] == "None":
            await ctx.send("Nothing in 7 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack7 = 0
            defence7 = 0
            expdropp7 = 0
            dropdrop7 = 0
            skexpdropp7 = 0
            fooddropp7 = 0
            wooddropp7 = 0
            stonedropp7 = 0
            metaldropp7 = 0
            golddropp7 = 0
            bocodropp7 = 0
            keydropp7 = 0
            mpdrop7 = 0
            hpdrop7 = 0
            spdrop7 = 0
            rabbat7 = 0
            pass
        else:
            try:
                zslot7_equip = info["zslot7_equip"]
                newitemname = info["zslot7_equip"]
                attack7 = itemname[newitemname]["max_dmg"]
                defence7 = itemname[newitemname]["max_def"]
                expdropp7 = itemname[newitemname]["max_exp"]
                dropdrop7 = itemname[newitemname]["max_drop"]
                skexpdropp7 = itemname[newitemname]["max_skexp"]
                fooddropp7 = itemname[newitemname]["food_drop"]
                wooddropp7 = itemname[newitemname]["wood_drop"]
                stonedropp7 = itemname[newitemname]["stone_drop"]
                metaldropp7 = itemname[newitemname]["metal_drop"]
                golddropp7 = itemname[newitemname]["gold_drop"]
                bocodropp7 = itemname[newitemname]["boco_drop"]
                keydropp7 = itemname[newitemname]["key_drop"]
                mpdrop7 = itemname[newitemname]["all_drop_mp"]
                hpdrop7 = itemname[newitemname]["all_drop_hp"]
                spdrop7 = itemname[newitemname]["all_drop_sp"]
                rabbat7 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot8_equip"] == "None":
            await ctx.send("Nothing in 8 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack8 = 0
            defence8 = 0
            expdropp8 = 0
            dropdrop8 = 0
            skexpdropp8 = 0
            fooddropp8 = 0
            wooddropp8 = 0
            stonedropp8 = 0
            metaldropp8 = 0
            golddropp8 = 0
            bocodropp8 = 0
            keydropp8 = 0
            mpdrop8 = 0
            hpdrop8 = 0
            spdrop8 = 0
            rabbat8 = 0
            pass
        else:
            try:
                zslot8_equip = info["zslot8_equip"]
                newitemname = info["zslot8_equip"]
                attack8 = itemname[newitemname]["max_dmg"]
                defence8 = itemname[newitemname]["max_def"]
                expdropp8 = itemname[newitemname]["max_exp"]
                dropdrop8 = itemname[newitemname]["max_drop"]
                skexpdropp8 = itemname[newitemname]["max_skexp"]
                fooddropp8 = itemname[newitemname]["food_drop"]
                wooddropp8 = itemname[newitemname]["wood_drop"]
                stonedropp8 = itemname[newitemname]["stone_drop"]
                metaldropp8 = itemname[newitemname]["metal_drop"]
                golddropp8 = itemname[newitemname]["gold_drop"]
                bocodropp8 = itemname[newitemname]["boco_drop"]
                keydropp8 = itemname[newitemname]["key_drop"]
                mpdrop8 = itemname[newitemname]["all_drop_mp"]
                hpdrop8 = itemname[newitemname]["all_drop_hp"]
                spdrop8 = itemname[newitemname]["all_drop_sp"]
                rabbat8 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot9_equip"] == "None":
            await ctx.send("Nothing in 9 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack9 = 0
            defence9 = 0
            expdropp9 = 0
            dropdrop9 = 0
            skexpdropp9 = 0
            fooddropp9 = 0
            wooddropp9 = 0
            stonedropp9 = 0
            metaldropp9 = 0
            golddropp9 = 0
            bocodropp9 = 0
            keydropp9 = 0
            mpdrop9 = 0
            hpdrop9 = 0
            spdrop9 = 0
            rabbat9 = 0
            pass
        else:
            try:
                zslot9_equip = info["zslot9_equip"]
                newitemname = info["zslot9_equip"]
                attack9 = itemname[newitemname]["max_dmg"]
                defence9 = itemname[newitemname]["max_def"]
                expdropp9 = itemname[newitemname]["max_exp"]
                dropdrop9 = itemname[newitemname]["max_drop"]
                skexpdropp9 = itemname[newitemname]["max_skexp"]
                fooddropp9 = itemname[newitemname]["food_drop"]
                wooddropp9 = itemname[newitemname]["wood_drop"]
                stonedropp9 = itemname[newitemname]["stone_drop"]
                metaldropp9 = itemname[newitemname]["metal_drop"]
                golddropp9 = itemname[newitemname]["gold_drop"]
                bocodropp9 = itemname[newitemname]["boco_drop"]
                keydropp9 = itemname[newitemname]["key_drop"]
                mpdrop9 = itemname[newitemname]["all_drop_mp"]
                hpdrop9 = itemname[newitemname]["all_drop_hp"]
                spdrop9 = itemname[newitemname]["all_drop_sp"]
                rabbat9 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot10_equip"] == "None":
            await ctx.send("Nothing in 10 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack10 = 0
            defence10 = 0
            expdropp10 = 0
            dropdrop10 = 0
            skexpdropp10 = 0
            fooddropp10 = 0
            wooddropp10 = 0
            stonedropp10 = 0
            metaldropp10 = 0
            golddropp10 = 0
            bocodropp10 = 0
            keydropp10 = 0
            mpdrop10 = 0
            hpdrop10 = 0
            spdrop10 = 0
            rabbat10 = 0
            pass
        else:
            try:
                zslot10_equip = info["zslot10_equip"]
                newitemname = info["zslot10_equip"]
                attack10 = itemname[newitemname]["max_dmg"]
                defence10 = itemname[newitemname]["max_def"]
                expdropp10 = itemname[newitemname]["max_exp"]
                dropdrop10 = itemname[newitemname]["max_drop"]
                skexpdropp10 = itemname[newitemname]["max_skexp"]
                fooddropp10 = itemname[newitemname]["food_drop"]
                wooddropp10 = itemname[newitemname]["wood_drop"]
                stonedropp10 = itemname[newitemname]["stone_drop"]
                metaldropp10 = itemname[newitemname]["metal_drop"]
                golddropp10 = itemname[newitemname]["gold_drop"]
                bocodropp10 = itemname[newitemname]["boco_drop"]
                keydropp10 = itemname[newitemname]["key_drop"]
                mpdrop10 = itemname[newitemname]["all_drop_mp"]
                hpdrop10 = itemname[newitemname]["all_drop_hp"]
                spdrop10 = itemname[newitemname]["all_drop_sp"]
                rabbat10 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot11_equip"] == "None":
            await ctx.send("Nothing in 11 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack11 = 0
            defence11 = 0
            expdropp11 = 0
            dropdrop11 = 0
            skexpdropp11 = 0
            fooddropp11 = 0
            wooddropp11 = 0
            stonedropp11 = 0
            metaldropp11 = 0
            golddropp11 = 0
            bocodropp11 = 0
            keydropp11 = 0
            mpdrop11 = 0
            hpdrop11 = 0
            spdrop11 = 0
            rabbat11 = 0
            pass
        else:
            try:
                zslot11_equip = info["zslot11_equip"]
                newitemname = info["zslot11_equip"]
                attack11 = itemname[newitemname]["max_dmg"]
                defence11 = itemname[newitemname]["max_def"]
                expdropp11 = itemname[newitemname]["max_exp"]
                dropdrop11 = itemname[newitemname]["max_drop"]
                skexpdropp11 = itemname[newitemname]["max_skexp"]
                fooddropp11 = itemname[newitemname]["food_drop"]
                wooddropp11 = itemname[newitemname]["wood_drop"]
                stonedropp11 = itemname[newitemname]["stone_drop"]
                metaldropp11 = itemname[newitemname]["metal_drop"]
                golddropp11 = itemname[newitemname]["gold_drop"]
                bocodropp11 = itemname[newitemname]["boco_drop"]
                keydropp11 = itemname[newitemname]["key_drop"]
                mpdrop11 = itemname[newitemname]["all_drop_mp"]
                hpdrop11 = itemname[newitemname]["all_drop_hp"]
                spdrop11 = itemname[newitemname]["all_drop_sp"]
                rabbat11 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot12_equip"] == "None":
            await ctx.send("Nothing in 12 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack12 = 0
            defence12 = 0
            expdropp12 = 0
            dropdrop12 = 0
            skexpdropp12 = 0
            fooddropp12 = 0
            wooddropp12 = 0
            stonedropp12 = 0
            metaldropp12 = 0
            golddropp12 = 0
            bocodropp12 = 0
            keydropp12 = 0
            mpdrop12 = 0
            hpdrop12 = 0
            spdrop12 = 0
            rabbat12 = 0
            pass
        else:
            try:
                zslot12_equip = info["zslot12_equip"]
                newitemname = info["zslot12_equip"]
                attack12 = itemname[newitemname]["max_dmg"]
                defence12 = itemname[newitemname]["max_def"]
                expdropp12 = itemname[newitemname]["max_exp"]
                dropdrop12 = itemname[newitemname]["max_drop"]
                skexpdropp12 = itemname[newitemname]["max_skexp"]
                fooddropp12 = itemname[newitemname]["food_drop"]
                wooddropp12 = itemname[newitemname]["wood_drop"]
                stonedropp12 = itemname[newitemname]["stone_drop"]
                metaldropp12 = itemname[newitemname]["metal_drop"]
                golddropp12 = itemname[newitemname]["gold_drop"]
                bocodropp12 = itemname[newitemname]["boco_drop"]
                keydropp12 = itemname[newitemname]["key_drop"]
                mpdrop12 = itemname[newitemname]["all_drop_mp"]
                hpdrop12 = itemname[newitemname]["all_drop_hp"]
                spdrop12 = itemname[newitemname]["all_drop_sp"]
                rabbat12 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot13_equip"] == "None":
            await ctx.send("Nothing in 13 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack13 = 0
            defence13 = 0
            expdropp13 = 0
            dropdrop13 = 0
            skexpdropp13 = 0
            fooddropp13 = 0
            wooddropp13 = 0
            stonedropp13 = 0
            metaldropp13 = 0
            golddropp13 = 0
            bocodropp13 = 0
            keydropp13 = 0
            mpdrop13 = 0
            hpdrop13 = 0
            spdrop13 = 0
            rabbat13 = 0
            pass
        else:
            try:
                zslot13_equip = info["zslot13_equip"]
                newitemname = info["zslot13_equip"]
                attack13 = itemname[newitemname]["max_dmg"]
                defence13 = itemname[newitemname]["max_def"]
                expdropp13 = itemname[newitemname]["max_exp"]
                dropdrop13 = itemname[newitemname]["max_drop"]
                skexpdropp13 = itemname[newitemname]["max_skexp"]
                fooddropp13 = itemname[newitemname]["food_drop"]
                wooddropp13 = itemname[newitemname]["wood_drop"]
                stonedropp13 = itemname[newitemname]["stone_drop"]
                metaldropp13 = itemname[newitemname]["metal_drop"]
                golddropp13 = itemname[newitemname]["gold_drop"]
                bocodropp13 = itemname[newitemname]["boco_drop"]
                keydropp13 = itemname[newitemname]["key_drop"]
                mpdrop13 = itemname[newitemname]["all_drop_mp"]
                hpdrop13 = itemname[newitemname]["all_drop_hp"]
                spdrop13 = itemname[newitemname]["all_drop_sp"]
                rabbat13 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot14_equip"] == "None":
            await ctx.send("Nothing in 14 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack14 = 0
            defence14 = 0
            expdropp14 = 0
            dropdrop14 = 0
            skexpdropp14 = 0
            fooddropp14 = 0
            wooddropp14 = 0
            stonedropp14 = 0
            metaldropp14 = 0
            golddropp14 = 0
            bocodropp14 = 0
            keydropp14 = 0
            mpdrop14 = 0
            hpdrop14 = 0
            spdrop14 = 0
            rabbat14 = 0
            pass
        else:
            try:
                zslot14_equip = info["zslot14_equip"]
                newitemname = info["zslot14_equip"]
                attack14 = itemname[newitemname]["max_dmg"]
                defence14 = itemname[newitemname]["max_def"]
                expdropp14 = itemname[newitemname]["max_exp"]
                dropdrop14 = itemname[newitemname]["max_drop"]
                skexpdropp14 = itemname[newitemname]["max_skexp"]
                fooddropp14 = itemname[newitemname]["food_drop"]
                wooddropp14 = itemname[newitemname]["wood_drop"]
                stonedropp14 = itemname[newitemname]["stone_drop"]
                metaldropp14 = itemname[newitemname]["metal_drop"]
                golddropp14 = itemname[newitemname]["gold_drop"]
                bocodropp14 = itemname[newitemname]["boco_drop"]
                keydropp14 = itemname[newitemname]["key_drop"]
                mpdrop14 = itemname[newitemname]["all_drop_mp"]
                hpdrop14 = itemname[newitemname]["all_drop_hp"]
                spdrop14 = itemname[newitemname]["all_drop_sp"]
                rabbat14 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot15_equip"] == "None":
            await ctx.send("Nothing in 15 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack15 = 0
            defence15 = 0
            expdropp15 = 0
            dropdrop15 = 0
            skexpdropp15 = 0
            fooddropp15 = 0
            wooddropp15 = 0
            stonedropp15 = 0
            metaldropp15 = 0
            golddropp15 = 0
            bocodropp15 = 0
            keydropp15 = 0
            mpdrop15 = 0
            hpdrop15 = 0
            spdrop15 = 0
            rabbat15 = 0
            pass
        else:
            try:
                zslot15_equip = info["zslot15_equip"]
                newitemname = info["zslot15_equip"]
                attack15 = itemname[newitemname]["max_dmg"]
                defence15 = itemname[newitemname]["max_def"]
                expdropp15 = itemname[newitemname]["max_exp"]
                dropdrop15 = itemname[newitemname]["max_drop"]
                skexpdropp15 = itemname[newitemname]["max_skexp"]
                fooddropp15 = itemname[newitemname]["food_drop"]
                wooddropp15 = itemname[newitemname]["wood_drop"]
                stonedropp15 = itemname[newitemname]["stone_drop"]
                metaldropp15 = itemname[newitemname]["metal_drop"]
                golddropp15 = itemname[newitemname]["gold_drop"]
                bocodropp15 = itemname[newitemname]["boco_drop"]
                keydropp15 = itemname[newitemname]["key_drop"]
                mpdrop15 = itemname[newitemname]["all_drop_mp"]
                hpdrop15 = itemname[newitemname]["all_drop_hp"]
                spdrop15 = itemname[newitemname]["all_drop_sp"]
                rabbat15 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot16_equip"] == "None":
            await ctx.send("Nothing in 16 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack16 = 0
            defence16 = 0
            expdropp16 = 0
            dropdrop16 = 0
            skexpdropp16 = 0
            fooddropp16 = 0
            wooddropp16 = 0
            stonedropp16 = 0
            metaldropp16 = 0
            golddropp16 = 0
            bocodropp16 = 0
            keydropp16 = 0
            mpdrop16 = 0
            hpdrop16 = 0
            spdrop16 = 0
            rabbat16 = 0
            pass
        else:
            try:
                zslot16_equip = info["zslot16_equip"]
                newitemname = info["zslot16_equip"]
                attack16 = itemname[newitemname]["max_dmg"]
                defence16 = itemname[newitemname]["max_def"]
                expdropp16 = itemname[newitemname]["max_exp"]
                dropdrop16 = itemname[newitemname]["max_drop"]
                skexpdropp16 = itemname[newitemname]["max_skexp"]
                fooddropp16 = itemname[newitemname]["food_drop"]
                wooddropp16 = itemname[newitemname]["wood_drop"]
                stonedropp16 = itemname[newitemname]["stone_drop"]
                metaldropp16 = itemname[newitemname]["metal_drop"]
                golddropp16 = itemname[newitemname]["gold_drop"]
                bocodropp16 = itemname[newitemname]["boco_drop"]
                keydropp16 = itemname[newitemname]["key_drop"]
                mpdrop16 = itemname[newitemname]["all_drop_mp"]
                hpdrop16 = itemname[newitemname]["all_drop_hp"]
                spdrop16 = itemname[newitemname]["all_drop_sp"]
                rabbat16 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot17_equip"] == "None":
            await ctx.send("Nothing in 17 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack17 = 0
            defence17 = 0
            expdropp17 = 0
            dropdrop17 = 0
            skexpdropp17 = 0
            fooddropp17 = 0
            wooddropp17 = 0
            stonedropp17 = 0
            metaldropp17 = 0
            golddropp17 = 0
            bocodropp17 = 0
            keydropp17 = 0
            mpdrop17 = 0
            hpdrop17 = 0
            spdrop17 = 0
            rabbat17 = 0
            pass
        else:
            try:
                zslot17_equip = info["zslot17_equip"]
                newitemname = info["zslot17_equip"]
                attack17 = itemname[newitemname]["max_dmg"]
                defence17 = itemname[newitemname]["max_def"]
                expdropp17 = itemname[newitemname]["max_exp"]
                dropdrop17 = itemname[newitemname]["max_drop"]
                skexpdropp17 = itemname[newitemname]["max_skexp"]
                fooddropp17 = itemname[newitemname]["food_drop"]
                wooddropp17 = itemname[newitemname]["wood_drop"]
                stonedropp17 = itemname[newitemname]["stone_drop"]
                metaldropp17 = itemname[newitemname]["metal_drop"]
                golddropp17 = itemname[newitemname]["gold_drop"]
                bocodropp17 = itemname[newitemname]["boco_drop"]
                keydropp17 = itemname[newitemname]["key_drop"]
                mpdrop17 = itemname[newitemname]["all_drop_mp"]
                hpdrop17 = itemname[newitemname]["all_drop_hp"]
                spdrop17 = itemname[newitemname]["all_drop_sp"]
                rabbat17 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot18_equip"] == "None":
            await ctx.send("Nothing in 18 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack18 = 0
            defence18 = 0
            expdropp18 = 0
            dropdrop18 = 0
            skexpdropp18 = 0
            fooddropp18 = 0
            wooddropp18 = 0
            stonedropp18 = 0
            metaldropp18 = 0
            golddropp18 = 0
            bocodropp18 = 0
            keydropp18 = 0
            mpdrop18 = 0
            hpdrop18 = 0
            spdrop18 = 0
            rabbat18 = 0
            pass
        else:
            try:
                zslot18_equip = info["zslot18_equip"]
                newitemname = info["zslot18_equip"]
                attack18 = itemname[newitemname]["max_dmg"]
                defence18 = itemname[newitemname]["max_def"]
                expdropp18 = itemname[newitemname]["max_exp"]
                dropdrop18 = itemname[newitemname]["max_drop"]
                skexpdropp18 = itemname[newitemname]["max_skexp"]
                fooddropp18 = itemname[newitemname]["food_drop"]
                wooddropp18 = itemname[newitemname]["wood_drop"]
                stonedropp18 = itemname[newitemname]["stone_drop"]
                metaldropp18 = itemname[newitemname]["metal_drop"]
                golddropp18 = itemname[newitemname]["gold_drop"]
                bocodropp18 = itemname[newitemname]["boco_drop"]
                keydropp18 = itemname[newitemname]["key_drop"]
                mpdrop18 = itemname[newitemname]["all_drop_mp"]
                hpdrop18 = itemname[newitemname]["all_drop_hp"]
                spdrop18 = itemname[newitemname]["all_drop_sp"]
                rabbat18 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot19_equip"] == "None":
            await ctx.send("Nothing in 19 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack19 = 0
            defence19 = 0
            expdropp19 = 0
            dropdrop19 = 0
            skexpdropp19 = 0
            fooddropp19 = 0
            wooddropp19 = 0
            stonedropp19 = 0
            metaldropp19 = 0
            golddropp19 = 0
            bocodropp19 = 0
            keydropp19 = 0
            mpdrop19 = 0
            hpdrop19 = 0
            spdrop19 = 0
            rabbat19 = 0
            pass
        else:
            try:
                zslot19_equip = info["zslot19_equip"]
                newitemname = info["zslot19_equip"]
                attack19 = itemname[newitemname]["max_dmg"]
                defence19 = itemname[newitemname]["max_def"]
                expdropp19 = itemname[newitemname]["max_exp"]
                dropdrop19 = itemname[newitemname]["max_drop"]
                skexpdropp19 = itemname[newitemname]["max_skexp"]
                fooddropp19 = itemname[newitemname]["food_drop"]
                wooddropp19 = itemname[newitemname]["wood_drop"]
                stonedropp19 = itemname[newitemname]["stone_drop"]
                metaldropp19 = itemname[newitemname]["metal_drop"]
                golddropp19 = itemname[newitemname]["gold_drop"]
                bocodropp19 = itemname[newitemname]["boco_drop"]
                keydropp19 = itemname[newitemname]["key_drop"]
                mpdrop19 = itemname[newitemname]["all_drop_mp"]
                hpdrop19 = itemname[newitemname]["all_drop_hp"]
                spdrop19 = itemname[newitemname]["all_drop_sp"]
                rabbat19 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot20_equip"] == "None":
            await ctx.send("Nothing in 20 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack20 = 0
            defence20 = 0
            expdropp20 = 0
            dropdrop20 = 0
            skexpdropp20 = 0
            fooddropp20 = 0
            wooddropp20 = 0
            stonedropp20 = 0
            metaldropp20 = 0
            golddropp20 = 0
            bocodropp20 = 0
            keydropp20 = 0
            mpdrop20 = 0
            hpdrop20 = 0
            spdrop20 = 0
            rabbat20 = 0
            pass
        else:
            try:
                zslot20_equip = info["zslot20_equip"]
                newitemname = info["zslot20_equip"]
                attack20 = itemname[newitemname]["max_dmg"]
                defence20 = itemname[newitemname]["max_def"]
                expdropp20 = itemname[newitemname]["max_exp"]
                dropdrop20 = itemname[newitemname]["max_drop"]
                skexpdropp20 = itemname[newitemname]["max_skexp"]
                fooddropp20 = itemname[newitemname]["food_drop"]
                wooddropp20 = itemname[newitemname]["wood_drop"]
                stonedropp20 = itemname[newitemname]["stone_drop"]
                metaldropp20 = itemname[newitemname]["metal_drop"]
                golddropp20 = itemname[newitemname]["gold_drop"]
                bocodropp20 = itemname[newitemname]["boco_drop"]
                keydropp20 = itemname[newitemname]["key_drop"]
                mpdrop20 = itemname[newitemname]["all_drop_mp"]
                hpdrop20 = itemname[newitemname]["all_drop_hp"]
                spdrop20 = itemname[newitemname]["all_drop_sp"]
                rabbat20 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot21_equip"] == "None":
            await ctx.send("Nothing in 21 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack21 = 0
            defence21 = 0
            expdropp21 = 0
            dropdrop21 = 0
            skexpdropp21 = 0
            fooddropp21 = 0
            wooddropp21 = 0
            stonedropp21 = 0
            metaldropp21 = 0
            golddropp21 = 0
            bocodropp21 = 0
            keydropp21 = 0
            mpdrop21 = 0
            hpdrop21 = 0
            spdrop21 = 0
            rabbat21 = 0
            pass
        else:
            try:
                zslot21_equip = info["zslot21_equip"]
                newitemname = info["zslot21_equip"]
                attack21 = itemname[newitemname]["max_dmg"]
                defence21 = itemname[newitemname]["max_def"]
                expdropp21 = itemname[newitemname]["max_exp"]
                dropdrop21 = itemname[newitemname]["max_drop"]
                skexpdropp21 = itemname[newitemname]["max_skexp"]
                fooddropp21 = itemname[newitemname]["food_drop"]
                wooddropp21 = itemname[newitemname]["wood_drop"]
                stonedropp21 = itemname[newitemname]["stone_drop"]
                metaldropp21 = itemname[newitemname]["metal_drop"]
                golddropp21 = itemname[newitemname]["gold_drop"]
                bocodropp21 = itemname[newitemname]["boco_drop"]
                keydropp21 = itemname[newitemname]["key_drop"]
                mpdrop21 = itemname[newitemname]["all_drop_mp"]
                hpdrop21 = itemname[newitemname]["all_drop_hp"]
                spdrop21 = itemname[newitemname]["all_drop_sp"]
                rabbat21 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot22_equip"] == "None":
            await ctx.send("Nothing in 22 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack22 = 0
            defence22 = 0
            expdropp22 = 0
            dropdrop22 = 0
            skexpdropp22 = 0
            fooddropp22 = 0
            wooddropp22 = 0
            stonedropp22 = 0
            metaldropp22 = 0
            golddropp22 = 0
            bocodropp22 = 0
            keydropp22 = 0
            mpdrop22 = 0
            hpdrop22 = 0
            spdrop22 = 0
            rabbat22 = 0
            pass
        else:
            try:
                zslot22_equip = info["zslot22_equip"]
                newitemname = info["zslot22_equip"]
                attack22 = itemname[newitemname]["max_dmg"]
                defence22 = itemname[newitemname]["max_def"]
                expdropp22 = itemname[newitemname]["max_exp"]
                dropdrop22 = itemname[newitemname]["max_drop"]
                skexpdropp22 = itemname[newitemname]["max_skexp"]
                fooddropp22 = itemname[newitemname]["food_drop"]
                wooddropp22 = itemname[newitemname]["wood_drop"]
                stonedropp22 = itemname[newitemname]["stone_drop"]
                metaldropp22 = itemname[newitemname]["metal_drop"]
                golddropp22 = itemname[newitemname]["gold_drop"]
                bocodropp22 = itemname[newitemname]["boco_drop"]
                keydropp22 = itemname[newitemname]["key_drop"]
                mpdrop22 = itemname[newitemname]["all_drop_mp"]
                hpdrop22 = itemname[newitemname]["all_drop_hp"]
                spdrop22 = itemname[newitemname]["all_drop_sp"]
                rabbat22 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot23_equip"] == "None":
            await ctx.send("Nothing in 23 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack23 = 0
            defence23 = 0
            expdropp23 = 0
            dropdrop23 = 0
            skexpdropp23 = 0
            fooddropp23 = 0
            wooddropp23 = 0
            stonedropp23 = 0
            metaldropp23 = 0
            golddropp23 = 0
            bocodropp23 = 0
            keydropp23 = 0
            mpdrop23 = 0
            hpdrop23 = 0
            spdrop23 = 0
            rabbat23 = 0
            pass
        else:
            try:
                zslot23_equip = info["zslot23_equip"]
                newitemname = info["zslot23_equip"]
                attack23 = itemname[newitemname]["max_dmg"]
                defence23 = itemname[newitemname]["max_def"]
                expdropp23 = itemname[newitemname]["max_exp"]
                dropdrop23 = itemname[newitemname]["max_drop"]
                skexpdropp23 = itemname[newitemname]["max_skexp"]
                fooddropp23 = itemname[newitemname]["food_drop"]
                wooddropp23 = itemname[newitemname]["wood_drop"]
                stonedropp23 = itemname[newitemname]["stone_drop"]
                metaldropp23 = itemname[newitemname]["metal_drop"]
                golddropp23 = itemname[newitemname]["gold_drop"]
                bocodropp23 = itemname[newitemname]["boco_drop"]
                keydropp23 = itemname[newitemname]["key_drop"]
                mpdrop23 = itemname[newitemname]["all_drop_mp"]
                hpdrop23 = itemname[newitemname]["all_drop_hp"]
                spdrop23 = itemname[newitemname]["all_drop_sp"]
                rabbat23 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot24_equip"] == "None":
            await ctx.send("Nothing in 24 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack24 = 0
            defence24 = 0
            expdropp24 = 0
            dropdrop24 = 0
            skexpdropp24 = 0
            fooddropp24 = 0
            wooddropp24 = 0
            stonedropp24 = 0
            metaldropp24 = 0
            golddropp24 = 0
            bocodropp24 = 0
            keydropp24 = 0
            mpdrop24 = 0
            hpdrop24 = 0
            spdrop24 = 0
            rabbat24 = 0
            pass
        else:
            try:
                zslot24_equip = info["zslot24_equip"]
                newitemname = info["zslot24_equip"]
                attack24 = itemname[newitemname]["max_dmg"]
                defence24 = itemname[newitemname]["max_def"]
                expdropp24 = itemname[newitemname]["max_exp"]
                dropdrop24 = itemname[newitemname]["max_drop"]
                skexpdropp24 = itemname[newitemname]["max_skexp"]
                fooddropp24 = itemname[newitemname]["food_drop"]
                wooddropp24 = itemname[newitemname]["wood_drop"]
                stonedropp24 = itemname[newitemname]["stone_drop"]
                metaldropp24 = itemname[newitemname]["metal_drop"]
                golddropp24 = itemname[newitemname]["gold_drop"]
                bocodropp24 = itemname[newitemname]["boco_drop"]
                keydropp24 = itemname[newitemname]["key_drop"]
                mpdrop24 = itemname[newitemname]["all_drop_mp"]
                hpdrop24 = itemname[newitemname]["all_drop_hp"]
                spdrop24 = itemname[newitemname]["all_drop_sp"]
                rabbat24 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        if info["zslot25_equip"] == "None":
            await ctx.send("Nothing in 25 `{}bp0x0 <SlotNR>`".format(Prefix))
            attack25 = 0
            defence25 = 0
            expdropp25 = 0
            dropdrop25 = 0
            skexpdropp25 = 0
            fooddropp25 = 0
            wooddropp25 = 0
            stonedropp25 = 0
            metaldropp25 = 0
            golddropp25 = 0
            bocodropp25 = 0
            keydropp25 = 0
            mpdrop25 = 0
            hpdrop25 = 0
            spdrop25 = 0
            rabbat25 = 0
            pass
        else:
            try:
                zslot25_equip = info["zslot25_equip"]
                newitemname = info["zslot25_equip"]
                attack25 = itemname[newitemname]["max_dmg"]
                defence25 = itemname[newitemname]["max_def"]
                expdropp25 = itemname[newitemname]["max_exp"]
                dropdrop25 = itemname[newitemname]["max_drop"]
                skexpdropp25 = itemname[newitemname]["max_skexp"]
                fooddropp25 = itemname[newitemname]["food_drop"]
                wooddropp25 = itemname[newitemname]["wood_drop"]
                stonedropp25 = itemname[newitemname]["stone_drop"]
                metaldropp25 = itemname[newitemname]["metal_drop"]
                golddropp25 = itemname[newitemname]["gold_drop"]
                bocodropp25 = itemname[newitemname]["boco_drop"]
                keydropp25 = itemname[newitemname]["key_drop"]
                mpdrop25 = itemname[newitemname]["all_drop_mp"]
                hpdrop25 = itemname[newitemname]["all_drop_hp"]
                spdrop25 = itemname[newitemname]["all_drop_sp"]
                rabbat25 = itemname[newitemname]["rabbat"]
            except Error:
                pass
        attackALL = attack0+attack1+attack2+attack3+attack4+attack5+attack6+attack7+attack8+attack9+attack10+attack11+attack12+attack13+attack14+attack15+attack16+attack17+attack18+attack19+attack20+attack21+attack22+attack23+attack24+attack25
        defenceALL = defence0+defence1+defence2+defence3+defence4+defence5+defence6+defence7+defence8+defence9+defence10+defence11+defence12+defence13+defence14+defence15+defence16+defence17+defence18+defence19+defence20+defence21+defence22+defence23+defence24+defence25
        expdroppALL = expdropp0+expdropp1+expdropp2+expdropp3+expdropp4+expdropp5+expdropp6+expdropp7+expdropp8+expdropp9+expdropp10+expdropp11+expdropp12+expdropp13+expdropp14+expdropp15+expdropp16+expdropp17+expdropp18+expdropp19+expdropp20+expdropp21+expdropp22+expdropp23+expdropp24+expdropp25
        dropdropALL = dropdrop0+dropdrop1+dropdrop2+dropdrop3+dropdrop4+dropdrop5+dropdrop6+dropdrop7+dropdrop8+dropdrop9+dropdrop10+dropdrop11+dropdrop12+dropdrop13+dropdrop14+dropdrop15+dropdrop16+dropdrop17+dropdrop18+dropdrop19+dropdrop20+dropdrop21+dropdrop22+dropdrop23+dropdrop24+dropdrop25
        skexpdropp = dropdrop0+dropdrop1+dropdrop2+dropdrop3+dropdrop4+dropdrop5+dropdrop6+dropdrop7+dropdrop8+dropdrop9+dropdrop10+dropdrop11+dropdrop12+dropdrop13+dropdrop14+dropdrop15+dropdrop16+dropdrop17+dropdrop18+dropdrop19+dropdrop20+dropdrop21+dropdrop22+dropdrop23+dropdrop24+dropdrop25
        fooddroppALL = fooddropp0+fooddropp1+fooddropp2+fooddropp3+fooddropp4+fooddropp5+fooddropp6+fooddropp7+fooddropp8+fooddropp9+fooddropp10+fooddropp11+fooddropp12+fooddropp13+fooddropp14+fooddropp15+fooddropp16+fooddropp17+fooddropp18+fooddropp19+fooddropp20+fooddropp21+fooddropp22+fooddropp23+fooddropp24+fooddropp25
        wooddroppALL = wooddropp0+wooddropp1+wooddropp2+wooddropp3+wooddropp4+wooddropp5+wooddropp6+wooddropp7+wooddropp8+wooddropp9+wooddropp10+wooddropp11+wooddropp12+wooddropp13+wooddropp14+wooddropp15+wooddropp16+wooddropp17+wooddropp18+wooddropp19+wooddropp20+wooddropp21+wooddropp22+wooddropp23+wooddropp24+wooddropp25
        stonedroppALL = stonedropp0+stonedropp1+stonedropp2+stonedropp3+stonedropp4+stonedropp5+stonedropp6+stonedropp7+stonedropp8+stonedropp9+stonedropp10+stonedropp11+stonedropp12+stonedropp13+stonedropp14+stonedropp15+stonedropp16+stonedropp17+stonedropp18+stonedropp19+stonedropp20+stonedropp21+stonedropp22+stonedropp23+stonedropp24+stonedropp25
        metaldroppALL = metaldropp0+metaldropp1+metaldropp2+metaldropp3+metaldropp4+metaldropp5+metaldropp6+metaldropp7+metaldropp8+metaldropp9+metaldropp10+metaldropp11+metaldropp12+metaldropp13+metaldropp14+metaldropp15+metaldropp16+metaldropp17+metaldropp18+metaldropp19+metaldropp20+metaldropp21+metaldropp22+metaldropp23+metaldropp24+metaldropp25
        golddroppALL = golddropp0+golddropp1+golddropp2+golddropp3+golddropp4+golddropp5+golddropp6+golddropp7+golddropp8+golddropp9+golddropp10+golddropp11+golddropp12+golddropp13+golddropp14+golddropp15+golddropp16+golddropp17+golddropp18+golddropp19+golddropp20+golddropp21+golddropp22+golddropp23+golddropp24+golddropp25
        bocodroppALL = bocodropp0+bocodropp1+bocodropp2+bocodropp3+bocodropp4+bocodropp5+bocodropp6+bocodropp7+bocodropp8+bocodropp9+bocodropp10+bocodropp11+bocodropp12+bocodropp13+bocodropp14+bocodropp15+bocodropp16+bocodropp17+bocodropp18+bocodropp19+bocodropp20+bocodropp21+bocodropp22+bocodropp23+bocodropp24+bocodropp25
        keydroppALL = keydropp0+keydropp1+keydropp2+keydropp3+keydropp4+keydropp5+keydropp6+keydropp7+keydropp8+keydropp9+keydropp10+keydropp11+keydropp12+keydropp13+keydropp14+keydropp15+keydropp16+keydropp17+keydropp18+keydropp19+keydropp20+keydropp21+keydropp22+keydropp23+keydropp24+keydropp25
        mpdropALL = mpdrop0+mpdrop1+mpdrop2+mpdrop3+mpdrop4+mpdrop5+mpdrop6+mpdrop7+mpdrop8+mpdrop9+mpdrop10+mpdrop11+mpdrop12+mpdrop13+mpdrop14+mpdrop15+mpdrop16+mpdrop17+mpdrop18+mpdrop19+mpdrop20+mpdrop21+mpdrop22+mpdrop23+mpdrop24+mpdrop25
        hpdropALL = hpdrop0+hpdrop1+hpdrop2+hpdrop3+hpdrop4+hpdrop5+hpdrop6+hpdrop7+hpdrop8+hpdrop9+hpdrop10+hpdrop11+hpdrop12+hpdrop13+hpdrop14+hpdrop15+hpdrop16+hpdrop17+hpdrop18+hpdrop19+hpdrop20+hpdrop21+hpdrop22+hpdrop23+hpdrop24+hpdrop25
        spdropALL = spdrop0+spdrop1+spdrop2+spdrop3+spdrop4+spdrop5+spdrop6+spdrop7+spdrop8+spdrop9+spdrop10+spdrop11+spdrop12+spdrop13+spdrop14+spdrop15+spdrop16+spdrop17+spdrop18+spdrop19+spdrop20+spdrop21+spdrop22+spdrop23+spdrop24+spdrop25
        rabbatALL = rabbat0+rabbat1+rabbat2+rabbat3+rabbat4+rabbat5+rabbat6+rabbat7+rabbat8+rabbat9+rabbat10+rabbat11+rabbat12+rabbat13+rabbat14+rabbat15+rabbat16+rabbat17+rabbat18+rabbat19+rabbat20+rabbat21+rabbat22+rabbat23+rabbat24+rabbat25
        em = discord.Embed(description="```diff\n!=====[All NOW bp0x0+bp1x1]=====!\n\n attackALL      \n:{}\n defenceALL\n:{}\n expdroppALL\n:{}\n dropdropALL\n:{}\n fooddroppALL \n:{}\n wooddroppALL \n:{}\n stonedroppALL \n:{}\n metaldroppALL \n:{}\n golddroppALL\n:{}\n bocodroppALL\n:{}\n keydroppALL\n:{}\n mpdropALL \n:{}\n hpdropALL \n:{}\n spdropALL\n:{}\n rabbatALL\n:{}\n!===================!```".format(attackALL, defenceALL, expdroppALL, dropdropALL, fooddroppALL, wooddroppALL, stonedroppALL, metaldroppALL, golddroppALL, bocodroppALL, keydroppALL, mpdropALL, hpdropALL, spdropALL, rabbatALL), color=discord.Color.blue())
        await ctx.send(embed=em)
        info["all_drop_attack"] = attackALL
        info["all_drop_defence"] = defenceALL
        info["all_drop"] = dropdropALL
        info["all_drop_boco"] = bocodroppALL
        info["all_drop_exp"] = expdroppALL
        info["all_drop_food"] = fooddroppALL
        info["all_drop_gold"] = golddroppALL
        info["all_drop_hp"] = hpdropALL
        info["all_drop_key"] = keydroppALL
        info["all_drop_metal"] = metaldroppALL
        info["all_drop_mp"] = mpdropALL
        info["all_drop_skexp"] = skexpdropp
        info["all_drop_sp"] = spdropALL
        info["all_drop_stone"] = stonedroppALL
        info["all_drop_wood"] = wooddroppALL
        info["rabbat"] = rabbatALL
        fileIO("players/{}/info.json".format(author.id), "save", info)
    except :
        pass
        await ctx.send("!set ""_check_setAssetsXdropERROR"" !")
async def _check_totalshow(ctx):
    #await _check_totalshow(ctx)
    # if castle owner False
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        #gain_Atk =
        gainAtk = info["all_base_attack"] * info["all_drop_attack"] + info["castle_drop_atk"]
        info["all_total_base_attack"] = info["all_base_attack"] + round(gainAtk, 0 )
        allATK = info["all_total_base_attack"]
        print("_check_totalshow   1.  gainATK=all_base_attack*all_drop_attack+castle_drop_atk     2. all_total_base_attack")
        print(gainAtk)
        print(allATK)
        gain_Def = info["all_base_defence"] * info["all_drop_defence"]
        info["all_total_base_defence"] = info["all_base_defence"] + round(gain_Def, 0 )
        gain_drop = info["all_base_drop"] * info["all_drop"]
        info["all_total_base_drop"] = info["all_base_drop"] + round(gain_drop, 0 )
        gain_boco = info["all_base_boco"] * info["all_drop_boco"]
        info["all_total_base_boco"] = info["all_base_boco"] + round(gain_boco, 0 )
        gain_exp = info["all_base_exp"] * info["all_drop_exp"]
        info["all_total_base_exp"] = info["all_base_exp"] + round(gain_exp, 0 )
        gainfood = info["all_base_food"] * info["all_drop_food"]
        info["all_total_base_food"] = info["all_base_food"] + round(gainfood, 0 )
        gain_gold = info["all_base_gold"] * info["all_drop_gold"]
        info["all_total_base_gold"] = info["all_base_gold"] + round(gain_gold, 0 )
        gain_hp = info["all_base_hp"] * info["all_drop_hp"]
        info["all_total_base_hp"] = info["all_base_hp"] + round(gain_hp, 0 )
        gain_key = info["all_base_key"] * info["all_drop_key"]
        info["all_total_base_key"] = info["all_base_key"] + round(gain_key, 0 )
        gain_metal = info["all_base_metal"] * info["all_drop_metal"]
        info["all_total_base_metal"] = info["all_base_metal"] + round(gain_metal, 0 )
        gain_mp = info["all_base_mp"] * info["all_drop_mp"]
        info["all_total_base_mp"] = info["all_base_mp"] + round(gain_mp, 0 )
        gain_pot = info["all_base_pot"] * info["all_drop_pot"]
        info["all_total_base_pot"] = info["all_base_pot"] + round(gain_pot, 0 )
        gain_skexp = info["all_base_skexp"] * info["all_drop_skexp"]
        info["all_total_base_skexp"] = info["all_base_skexp"] + round(gain_skexp, 0 )
        gain_sp = info["all_base_sp"] * info["all_drop_sp"]
        info["all_total_base_sp"] = info["all_base_sp"] + round(gain_sp, 0 )
        gain_stone = info["all_base_stone"] * info["all_drop_stone"]
        info["all_total_base_stone"] = info["all_base_stone"] + round(gain_stone, 0 )
        gain_people = info["all_base_people"] * info["all_drop_people"]
        info["all_total_base_people"] = info["all_base_people"] + round(gain_people, 0 )
        gain_wood = info["all_base_wood"] * info["all_drop_wood"]
        info["all_total_base_wood"] = info["all_base_wood"] + round(gain_wood, 0 )
        gain_door = info["all_base_door"] * info["all_drop_door"]
        info["all_total_base_door"] = info["all_base_door"] + round(gain_door, 0 )
        #if info["castle_owner"] == True:
        #    print("_check_totalshow")
        #
        #    if info["castle_owner_rock"] >= 0:#
        #        print("castle_owner_rock  >= 0")
        #    elif info["castle_owner_paper"] >= 0:
        #        print("castle_owner_paper  >= 0")
        #    elif info["castle_owner_scissor"] >= 0:
        #        print("castle_owner_scissor]  >= 0")
        #
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n SAFE...TT\n```".format())
    except IndexError:
        pass
        await ctx.send("INDEX ERROR!set ""YOUR _check_totalshow"" !")
async def _check_totalshowCastle(ctx):
    #await _check_totalshowCastle(ctx)
    #if Castle owner true
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        castle_ali = info["castle_ali"]
        castle_all_attack = info["castle_all_attack"]
        castle_all_attack_drop = info["castle_all_attack_drop"]
        castle_all_attack_lvl = info["castle_all_attack_lvl"]
        castle_all_defence = info["castle_all_defence"]
        castle_all_defence_drop = info["castle_all_defence_drop"]
        castle_all_defence_lvl = info["castle_all_defence_lvl"]
        castle_all_drop = info["castle_all_drop"]
        castle_all_all_drop_exp = info["castle_all_all_drop_exp"]
        castle_all_all_drop_food = info["castle_all_all_drop_food"]
        castle_all_drop_wood = info["castle_all_drop_wood"]
        castle_all_drop_stone = info["castle_all_drop_stone"]
        castle_all_drop_metal = info["castle_all_drop_metal"]
        castle_all_drop_boco = info["castle_all_drop_boco"]
        castle_all_drop_exp = info["castle_all_drop_exp"]
        castle_all_drop_skexp = info["castle_all_drop_skexp"]
        castle_all_drop_hp = info["castle_all_drop_hp"]
        castle_all_drop_sp = info["castle_all_drop_sp"]
        castle_all_drop_mp = info["castle_all_drop_mp"]
        castle_all_drop_people = info["castle_all_drop_people"]
        castle_all_drop_door = info["castle_all_drop_door"]
        castle_all_drop_key = info["castle_all_drop_key"]
        castle_army = info["castle_army"]
        castle_army_lvl = info["castle_army_lvl"]
        castle_army_paper = info["castle_army_paper"]
        castle_army_paper_lvl = info["castle_army_paper_lvl"]
        castle_army_paper_total = info["castle_army_paper_total"]
        castle_army_rock = info["castle_army_rock"]
        castle_army_rock_lvl = info["castle_army_rock_lvl"]
        castle_army_rock_total = info["castle_army_rock_total"]
        castle_army_scissor = info["castle_army_scissor"]
        castle_army_scissor_lvl = info["castle_army_scissor_lvl"]
        castle_army_scissor_total = info["castle_army_scissor_total"]
        castle_army_total = info["castle_army_total"]
        castle_army_total1 = info["castle_army_total1"]
        castle_armym = info["castle_armym"]
        castle_atk = info["castle_atk"]
        castle_boco = info["castle_boco"]
        castle_bocom = info["castle_bocom"]
        castle_box_lvl = info["castle_box_lvl"]
        castle_channel = info["castle_channel"]
        castle_count_draw = info["castle_count_draw"]
        castle_count_lose = info["castle_count_lose"]
        castle_count_played = info["castle_count_played"]
        castle_count_score = info["castle_count_score"]
        castle_count_win = info["castle_count_win"]
        castle_def = info["castle_def"]
        castle_drop_atk = info["castle_drop_atk"]
        castle_drop_boco = info["castle_drop_boco"]
        castle_drop_def = info["castle_drop_def"]
        castle_drop_door = info["castle_drop_door"]
        castle_drop_exp = info["castle_drop_exp"]
        castle_drop_food = info["castle_drop_food"]
        castle_drop_gold = info["castle_drop_gold"]
        castle_drop_hp = info["castle_drop_hp"]
        castle_drop_key = info["castle_drop_key"]
        castle_drop_max = info["castle_drop_max"]
        castle_drop_metal = info["castle_drop_metal"]
        castle_drop_mp = info["castle_drop_mp"]
        castle_drop_people = info["castle_drop_people"]
        castle_drop_rate = info["castle_drop_rate"]
        castle_drop_skexp = info["castle_drop_skexp"]
        castle_drop_sp = info["castle_drop_sp"]
        castle_drop_stone = info["castle_drop_stone"]
        castle_drop_wood = info["castle_drop_wood"]
        castle_food = info["castle_food"]
        castle_foodm = info["castle_foodm"]
        castle_gold = info["castle_gold"]
        castle_goldm = info["castle_goldm"]
        castle_guard = info["castle_guard"]
        castle_guard_lvl = info["castle_guard_lvl"]
        castle_guild_lvl = info["castle_guild_lvl"]
        castle_guild_name = info["castle_guild_name"]
        castle_inventory = info["castle_inventory"]
        castle_invv_space = info["castle_invv_space"]
        castle_key = info["castle_key"]
        castle_keym = info["castle_keym"]
        castle_lvl = info["castle_lvl"]
        castle_metal = info["castle_metal"]
        castle_metalm = info["castle_metalm"]
        castle_name = info["castle_name"]
        castle_owner = info["castle_owner"]
        castle_owner_paper = info["castle_owner_paper"]
        castle_owner_rock = info["castle_owner_rock"]
        castle_owner_scissor = info["castle_owner_scissor"]
        castle_people = info["castle_people"]
        castle_peoplem = info["castle_peoplem"]
        castle_power = info["castle_power"]
        castle_rank = info["castle_rank"]
        castle_status = info["castle_status"]
        castle_stone = info["castle_stone"]
        castle_stonem = info["castle_stonem"]
        castle_total = info["castle_total"]
        castle_tower = info["castle_tower"]
        castle_tower_lvl = info["castle_tower_lvl"]
        castle_wall_hp = info["castle_wall_hp"]
        castle_wall_hpmax = info["castle_wall_hpmax"]
        castle_wall_lvl = info["castle_wall_lvl"]
        castle_wood = info["castle_wood"]
        castle_woodm = info["castle_woodm"]
        castle_work_block = info["castle_work_block"]
        gain_Def = info["all_base_defence"] * info["all_drop_defence"]
        info["all_total_base_defence"] = info["all_base_defence"] + gain_Def
        info["castle_ali"]
        info["castle_all_attack"]
        info["castle_all_attack_drop"]
        info["castle_all_attack_lvl"]
        info["castle_all_defence"] = (info["all_base_defence"] + info["castle_all_defence"]) * info["all_drop_defence"]
        info["castle_all_defence_drop"]
        info["castle_all_defence_lvl"]
        info["castle_all_drop"]
        info["castle_all_all_drop_exp"]
        info["castle_all_all_drop_food"]
        info["castle_all_drop_wood"]
        info["castle_all_drop_stone"]
        info["castle_all_drop_metal"]
        info["castle_all_drop_boco"]
        info["castle_all_drop_exp"]
        info["castle_all_drop_skexp"]
        info["castle_all_drop_hp"]
        info["castle_all_drop_sp"]
        info["castle_all_drop_mp"]
        info["castle_all_drop_people"]
        info["castle_all_drop_door"]
        info["castle_all_drop_key"]
        info["castle_army"]
        info["castle_army_lvl"]
        info["castle_army_paper"]
        info["castle_army_paper_lvl"]
        info["castle_army_paper_total"]
        info["castle_army_rock"]
        info["castle_army_rock_lvl"]
        info["castle_army_rock_total"]
        info["castle_army_scissor"]
        info["castle_army_scissor_lvl"]
        info["castle_army_scissor_total"]
        info["castle_army_total"]
        info["castle_army_total1"]
        info["castle_armym"]
        info["castle_atk"]
        info["castle_boco"]
        info["castle_bocom"]
        info["castle_box_lvl"]
        info["castle_channel"]
        info["castle_count_draw"]
        info["castle_count_lose"]
        info["castle_count_played"]
        info["castle_count_score"]
        info["castle_count_win"]
        info["castle_def"]
        info["castle_drop_atk"]
        info["castle_drop_boco"]
        info["castle_drop_def"]
        info["castle_drop_door"]
        info["castle_drop_exp"]
        info["castle_drop_food"]
        info["castle_drop_gold"]
        info["castle_drop_hp"]
        info["castle_drop_key"]
        info["castle_drop_max"]
        info["castle_drop_metal"]
        info["castle_drop_mp"]
        info["castle_drop_people"]
        info["castle_drop_rate"]
        info["castle_drop_skexp"]
        info["castle_drop_sp"]
        info["castle_drop_stone"]
        info["castle_drop_wood"]
        info["castle_food"]
        info["castle_foodm"]
        info["castle_gold"]
        info["castle_goldm"]
        info["castle_guard"]
        info["castle_guard_lvl"]
        info["castle_guild_lvl"]
        info["castle_guild_name"]
        info["castle_inventory"]
        info["castle_invv_space"]
        info["castle_key"]
        info["castle_keym"]
        info["castle_lvl"]
        info["castle_metal"]
        info["castle_metalm"]
        info["castle_name"]
        info["castle_owner"]
        info["castle_owner_paper"]
        info["castle_owner_rock"]
        info["castle_owner_scissor"]
        info["castle_people"]
        info["castle_peoplem"]
        info["castle_power"]
        info["castle_rank"]
        info["castle_status"]
        info["castle_stone"]
        info["castle_stonem"]
        info["castle_total"]
        info["castle_tower"]
        info["castle_tower_lvl"]
        info["castle_wall_hp"]
        info["castle_wall_hpmax"]
        info["castle_wall_lvl"]
        info["castle_wood"]
        info["castle_woodm"]
        info["castle_work_block"]
        #gain_Atk =
        gainAtk = info["all_base_attack"] * info["all_drop_attack"] + info["castle_drop_atk"]
        info["all_total_base_attack"] = info["all_base_attack"] + gainAtk
        allATK = info["all_total_base_attack"]
        print("_check_totalshowCastle   1.  gainATK=all_base_attack*all_drop_attack+castle_drop_atk     2. all_total_base_attack")
        print(gainAtk)
        print(allATK)
        gain_Def = info["all_base_defence"] * info["all_drop_defence"]
        info["all_total_base_defence"] = info["all_base_defence"] + gain_Def
        gain_drop = info["all_base_drop"] * info["all_drop"]
        info["all_total_base_drop"] = info["all_base_drop"] +gain_drop
        gain_boco = info["all_base_boco"] * info["all_drop_boco"]
        info["all_total_base_boco"] = info["all_base_boco"] +gain_boco
        gain_exp = info["all_base_exp"] * info["all_drop_exp"]
        info["all_total_base_exp"] = info["all_base_exp"] +gain_exp
        gainfood = info["all_base_food"] * info["all_drop_food"]
        info["all_total_base_food"] = info["all_base_food"] +gainfood
        gain_gold = info["all_base_gold"] * info["all_drop_gold"]
        info["all_total_base_gold"] = info["all_base_gold"] +gain_gold
        gain_hp = info["all_base_hp"] * info["all_drop_hp"]
        info["all_total_base_hp"] = info["all_base_hp"] +gain_hp
        gain_key = info["all_base_key"] * info["all_drop_key"]
        info["all_total_base_key"] = info["all_base_key"] +gain_key
        gain_metal = info["all_base_metal"] * info["all_drop_metal"]
        info["all_total_base_metal"] = info["all_base_metal"] +gain_metal
        gain_mp = info["all_base_mp"] * info["all_drop_mp"]
        info["all_total_base_mp"] = info["all_base_mp"] +gain_mp
        gain_pot = info["all_base_pot"] * info["all_drop_pot"]
        info["all_total_base_pot"] = info["all_base_pot"] +gain_pot
        gain_skexp = info["all_base_skexp"] * info["all_drop_skexp"]
        info["all_total_base_skexp"] = info["all_base_skexp"] +gain_skexp
        gain_sp = info["all_base_sp"] * info["all_drop_sp"]
        info["all_total_base_sp"] = info["all_base_sp"] +gain_sp
        gain_stone = info["all_base_stone"] * info["all_drop_stone"]
        info["all_total_base_stone"] = info["all_base_stone"] +gain_stone
        gain_people = info["all_base_people"] * info["all_drop_people"]
        info["all_total_base_people"] = info["all_base_people"] +gain_people
        gain_wood = info["all_base_wood"] * info["all_drop_wood"]
        info["all_total_base_wood"] = info["all_base_wood"] +gain_wood
        gain_door = info["all_base_door"] * info["all_drop_door"]
        info["all_total_base_door"] = info["all_base_door"] +gain_door
        if info["castle_owner"] == True:
            print("_check_totalshow")
            print("CastleOwner True Nothing else")
            #ccastle
            #if info["castle_owner_rock"] >= 0:
            #    print("castle_owner_rock  >= 0")
            #elif info["castle_owner_paper"] >= 0:
            #    print("castle_owner_paper  >= 0")
            #elif info["castle_owner_scissor"] >= 0:
            #    print("castle_owner_scissor]  >= 0")
        else:
            print("_check_totalshow")
            print("CastleOwner False Nothing else")
        print("_check_totalshow")
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("```diff\n SAFE...TT\n```".format())
        print("Save")
    except IndexError:
        pass
        await ctx.send("INDEX ERROR!set ""YOUR _check_totalshow"" !")
async def _check_bpvalue_token(ctx):
    #await _check_bpvalue_token(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    member = message.author
    guild = ctx.guild
    info = fileIO("players/{}/info.json".format(author.id), "load")
    name = info["name"]
    amount1 = float(info["bpvDict"]["balances_amount_BPVALUE"])
    amount = round(amount1, 0)
    setwalletdone = info["setwalletdone"]
    discord_rolls = info["discord_rolls"]
    choices = []
    inv_list = [i for i in info["discord_rolls"]]
    choices.append(inv_list)
    role_names = [role.name for role in author.roles]
    if "Unborn" in role_names or "Unborn" in discord_rolls:
        var = discord.utils.get(message.guild.roles, name = "Unborn")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008000, reason="Universe0x0")
        except:
            print("No Unborn")
    if "Wallet_OFF" in role_names or "Wallet_OFF" in discord_rolls and setwalletdone < 0 :
        var = discord.utils.get(message.guild.roles, name = "Wallet_OFF")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008000, reason="Set Your Wallet")
        except:
            print("No Wallet_OFF")
    if "Wallet_ON" in role_names and setwalletdone >= 0 and setwalletdone > 0:
        var = discord.utils.get(message.guild.roles, name = "Wallet_ON")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008000, reason="Good Luck")
            var1 = discord.utils.get(message.guild.roles, name = "Base_Lv_0")
            # This will get the role you want to edit^
            try:
                await member.add_roles(var1) # adds the role
                await var1.edit(color=0x008000, reason="Base_Lv_0 Good Luck")
            except:
                print("No Base_Lv_0")
        except:
            print("No Wallet_ON")
    if "Base_Lv_0" in role_names:
        var = discord.utils.get(message.guild.roles, name = "Base_Lv_0")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008000, reason="Base_Lv_0")
        except:
            print("No Base_Lv_0")
    #
    print("amount")
    print(amount)
    if choices in inv_list or inv_list in choices :
        print("111")
        try:
            print("Show Rols")
            guildRollsAllauro = author.roles
            print("guildRollsAllauro")
            print(guildRollsAllauro)
            saferols = []
            saferols.append(guildRollsAllauro)
            #info["discord_rolls"] = saferols
            #info = fileIO("config/config.json", "load")  choices.append(inv_list)
            #info["fighter_member"] += 1
            #fileIO("config/config.json", "save", info)
        except:
            print("No Safe")
    if amount > 0 and amount <= 1:
        print("Levle > 0 Level < 1 :")
        info["status"] = "BPvalv_0!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_0")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128000, reason="BPvalv_0 Levle > 0 Level < 1 ")
        except:
            print("No Base_Lv_0")
    if amount > 1.0 and amount <= 2.0:
        print("Levle > 0 Level < 1 :")
        info["status"] = "BPvalv_1!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_1")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008010, reason="BPvalv_1 Levle > 1 Level < 2 ")
        except:
            print("No Base_Lv_1")
    if amount > 2 and amount <= 4:
        print("Levle > 0 Level < 1 :")
        info["status"] = "BPvalv_2!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_2")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558000, reason="BPvalv_2 Levle > 2 Level < 4 ")
        except:
            print("No Base_Lv_2")
    if amount > 4 and amount <= 8:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_3!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_3")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558000, reason="BPvalv_3 Levle > x Level < x ")
        except:
            print("No Base_Lv_3")
    if amount > 8 and amount <= 16:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_4!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_4")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558052, reason="BPvalv_4 Levle > x Level < x ")
        except:
            print("No Base_Lv_4")
    if amount > 32 and amount <= 64:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_5!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_5")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x551552, reason="BPvalv_5 Levle > x Level < x ")
        except:
            print("No Base_Lv_5")
    if amount > 64 and amount <= 128:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_6!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_6")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x521552, reason="BPvalv_6 Levle > x Level < x ")
        except:
            print("No Base_Lv_6")
    if amount > 128 and amount <= 256:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_7!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_7")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x521572, reason="BPvalv_7 Levle > x Level < x ")
        except:
            print("No Base_Lv_7")
    if amount > 256 and amount <= 512:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_8!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_8")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x121572, reason="BPvalv_8 Levle > x Level < x ")
        except:
            print("No Base_Lv_8")
    if amount > 512 and amount <= 1024:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_9!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_9")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x122772, reason="BPvalv_9 Levle > x Level < x ")
        except:
            print("No Base_Lv_9")
    if amount > 1024 and amount <= 2048:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_10!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_10")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_10 Levle > x Level < x ")
        except:
            print("No Base_Lv_10")
    if amount > 2048 and amount <= 4096:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_11!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_11")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_11 Levle > x Level < x ")
        except:
            print("No Base_Lv_11")
    if amount > 4096 and amount <= 8192:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_12!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_12")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_12 Levle > x Level < x ")
        except:
            print("No Base_Lv_12")
    if amount > 8192 and amount <= 16384:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_13!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_13")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_13 Levle > x Level < x ")
        except:
            print("No Base_Lv_13")
    if amount > 16384 and amount <= 32768:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_14!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_14")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_14 Levle > x Level < x ")
        except:
            print("No Base_Lv_14")
    if amount > 32768 and amount <= 65536:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_15!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_15")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_15 Levle > x Level < x ")
        except:
            print("No Base_Lv_15")
    if amount > 65536 and amount <= 131072:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_16!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_16")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_16 Levle > x Level < x ")
        except:
            print("No Base_Lv_16")
    if amount > 131072 and amount <= 262144:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_17!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_17")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_17 Levle > x Level < x ")
        except:
            print("No Base_Lv_17")
    if amount > 262144 and amount <= 524288:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_18!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_18")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_18 Levle > x Level < x ")
        except:
            print("No Base_Lv_18")
    if amount > 524288 and amount <= 1048576:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_19!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_19")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_19 Levle > x Level < x ")
        except:
            print("No Base_Lv_19")
    if amount > 1048576 and amount <= 2097152:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_20!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_20")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_2 Levle > x Level < x ")
        except:
            print("No BPvalv_20")
    if amount > 2097152 and amount <= 4194304:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_21!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_21")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_20 Levle > x Level < x ")
        except:
            print("No BPvalv_21")
    if amount > 4194304 and amount <= 8388608:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_22!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_22")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_21 Levle > x Level < x ")
        except:
            print("No BPvalv_22")
    if amount > 8388608 and amount <= 16777216:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_23!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_23")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_23 Levle > x Level < x ")
        except:
            print("No BPvalv_23")
    if amount > 16777216 and amount <= 33554432:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_24!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_24")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_24 Levle > x Level < x ")
        except:
            print("No BPvalv_24")
    if amount > 33554432 and amount <= 67108864:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_25!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_25")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_25 Levle > x Level < x ")
        except:
            print("No BPvalv_25")
    if amount > 67108864 and amount <= 134217728:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_26!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_26")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_26 Levle > x Level < x ")
        except:
            print("No BPvalv_26")
    if amount > 134217728 and amount <= 268435456:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_27!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_27")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="BPvalv_27 Levle > x Level < x ")
        except:
            print("No BPvalv_27")
    if amount > 268435456 and amount <= 536870912:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_28!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128772, reason="BPvalv_28 Levle > x Level < x ")
        except:
            print("No BPvalv_28")
    if amount > 536870912 and amount <= 1073741824:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_28!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x198772, reason="BPvalv_28+=+ Levle > x Level < x ")
        except:
            print("No Base_Lv_28")
    if amount > 1073741824:
        print("Levle > x Level < x :")
        info["status"] = "BPvalv_28!"
        var = discord.utils.get(message.guild.roles, name = "BPvalv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x198772, reason="BPvalv_28++ Levle > x Level < x ")
        except:
            print("No Base_Lv_28+")
    rock_dungon_server = 1079313545193345124
    paper_dungon_server = 1085885211386064896
    scissor_dungon_server = 1085897583735611433
    coffee_dungon_server = 1085900861747769388
    location_server = channel.id
    if location_server == coffee_dungon_server :
        amount2 = float(info["cofDict"]["balances_amount_COFFEE"])
        amount = round(amount2, 0)
    if location_server == paper_dungon_server :
        amount2 = float(info["papDict"]["balances_amount_PAPER"])
        amount = round(amount2, 0)
    if location_server == scissor_dungon_server :
        amount2 = float(info["sciDict"]["balances_amount_SCISSOR"])
        amount = round(amount2, 0)
    if location_server == rock_dungon_server :
        amount2 = float(info["rocDict"]["balances_amount_ROCK"])
        amount = round(amount2, 0)
    if amount > 0 and amount <= 1:
        print("Levle > 0 Level < 1 :")
        info["status"] = "x_value_Lv_0!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_0")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128000, reason="x_value_Lv_0 Levle > 0 Level < 1 ")
        except:
            print("No x_value_Lv__0")
    if amount > 1.0 and amount <= 2.0:
        print("Levle > 0 Level < 1 :")
        info["status"] = "x_value_Lv_1!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_1")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008010, reason="x_value_Lv_1 Levle > 1 Level < 2 ")
        except:
            print("No x_value_Lv__1")
    if amount > 2 and amount <= 4:
        print("Levle > 0 Level < 1 :")
        info["status"] = "x_value_Lv_2!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_2")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558000, reason="x_value_Lv_2 Levle > 2 Level < 4 ")
        except:
            print("No x_value_Lv__2")
    if amount > 4 and amount <= 8:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_3!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_3")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558000, reason="x_value_Lv_3 Levle > x Level < x ")
        except:
            print("No x_value_Lv__3")
    if amount > 8 and amount <= 16:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_4!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_4")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558052, reason="x_value_Lv_4 Levle > x Level < x ")
        except:
            print("No x_value_Lv__4")
    if amount > 32 and amount <= 64:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_5!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_5")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x551552, reason="x_value_Lv_5 Levle > x Level < x ")
        except:
            print("No x_value_Lv__5")
    if amount > 64 and amount <= 128:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_6!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_6")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x521552, reason="x_value_Lv_6 Levle > x Level < x ")
        except:
            print("No x_value_Lv__6")
    if amount > 128 and amount <= 256:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_7!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_7")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x521572, reason="x_value_Lv_7 Levle > x Level < x ")
        except:
            print("No x_value_Lv__7")
    if amount > 256 and amount <= 512:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_8!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_8")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x121572, reason="x_value_Lv_8 Levle > x Level < x ")
        except:
            print("No x_value_Lv__8")
    if amount > 512 and amount <= 1024:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_9!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_9")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x122772, reason="x_value_Lv_9 Levle > x Level < x ")
        except:
            print("No x_value_Lv__9")
    if amount > 1024 and amount <= 2048:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_10!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_10")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_10 Levle > x Level < x ")
        except:
            print("No x_value_Lv__10")
    if amount > 2048 and amount <= 4096:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_11!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_11")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_11 Levle > x Level < x ")
        except:
            print("No x_value_Lv__11")
    if amount > 4096 and amount <= 8192:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_12!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_12")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_12 Levle > x Level < x ")
        except:
            print("No x_value_Lv__12")
    if amount > 8192 and amount <= 16384:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_13!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_13")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_13 Levle > x Level < x ")
        except:
            print("No x_value_Lv__13")
    if amount > 16384 and amount <= 32768:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_14!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_14")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_14 Levle > x Level < x ")
        except:
            print("No x_value_Lv__14")
    if amount > 32768 and amount <= 65536:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_15!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_15")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_15 Levle > x Level < x ")
        except:
            print("No x_value_Lv__15")
    if amount > 65536 and amount <= 131072:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_16!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_16")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_16 Levle > x Level < x ")
        except:
            print("No x_value_Lv__16")
    if amount > 131072 and amount <= 262144:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_17!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_17")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_17 Levle > x Level < x ")
        except:
            print("No x_value_Lv__17")
    if amount > 262144 and amount <= 524288:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_18!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_18")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_18 Levle > x Level < x ")
        except:
            print("No x_value_Lv__18")
    if amount > 524288 and amount <= 1048576:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_19!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_19")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_19 Levle > x Level < x ")
        except:
            print("No x_value_Lv__19")
    if amount > 1048576 and amount <= 2097152:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_20!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_20")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_2 Levle > x Level < x ")
        except:
            print("No x_value_Lv_20")
    if amount > 2097152 and amount <= 4194304:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_21!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_21")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_20 Levle > x Level < x ")
        except:
            print("No x_value_Lv_21")
    if amount > 4194304 and amount <= 8388608:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_22!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_22")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_21 Levle > x Level < x ")
        except:
            print("No x_value_Lv_22")
    if amount > 8388608 and amount <= 16777216:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_23!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_23")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_23 Levle > x Level < x ")
        except:
            print("No x_value_Lv_23")
    if amount > 16777216 and amount <= 33554432:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_24!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_24")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_24 Levle > x Level < x ")
        except:
            print("No x_value_Lv_24")
    if amount > 33554432 and amount <= 67108864:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_25!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_25")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_25 Levle > x Level < x ")
        except:
            print("No x_value_Lv_25")
    if amount > 67108864 and amount <= 134217728:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_26!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_26")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_26 Levle > x Level < x ")
        except:
            print("No x_value_Lv_26")
    if amount > 134217728 and amount <= 268435456:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_27!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_27")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="x_value_Lv_27 Levle > x Level < x ")
        except:
            print("No x_value_Lv_27")
    if amount > 268435456 and amount <= 536870912:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_28!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128772, reason="x_value_Lv_28 Levle > x Level < x ")
        except:
            print("No x_value_Lv_28")
    if amount > 536870912 and amount <= 1073741824:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_28!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x198772, reason="x_value_Lv_28+=+ Levle > x Level < x ")
        except:
            print("No x_value_Lv__28")
    if amount > 1073741824:
        print("Levle > x Level < x :")
        info["status"] = "x_value_Lv_28!"
        var = discord.utils.get(message.guild.roles, name = "x_value_Lv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x198772, reason="x_value_Lv_28++ Levle > x Level < x ")
        except:
            print("No x_value_Lv__28+")
    cinfo = fileIO("global/info.json".format(author.id), "load")
    castle_guild_lvlrock = cinfo["Rock_Castle"]["castle_guild_lvl"]
    castle_guild_lvlbp0x0 = cinfo["BP0x0_Castle"]["castle_guild_lvl"]
    castle_guild_lvlscissor = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    castle_guild_lvlhacker = cinfo["Hacker_Guild"]["castle_guild_lvl"]
    castle_guild_lvlpaper = cinfo["Paper_Castle"]["castle_guild_lvl"]
    GuildAttacker = info["castle_guild_name"]
    if GuildAttacker == "RockCastle":
        amount = cinfo["Rock_Castle"]["castle_guild_lvl"]
        #await _check_setCastleValue(ctx)
    if GuildAttacker == "ScissorCastle":
        amount = cinfo["Scissor_Castle"]["castle_guild_lvl"]
    if GuildAttacker == "PaperCastle":
        amount = cinfo["Paper_Castle"]["castle_guild_lvl"]
    if amount > 0 and amount <= 1:
        print("Levle > 0 Level < 1 :")
        info["status"] = "Guild_Lv_0!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_0")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128000, reason="Guild_Lv_0 Levle > 0 Level < 1 ")
        except:
            print("No Guild_Lv__0")
    if amount > 1.0 and amount <= 2.0:
        print("Levle > 0 Level < 1 :")
        info["status"] = "Guild_Lv_1!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_1")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008010, reason="Guild_Lv_1 Levle > 1 Level < 2 ")
        except:
            print("No Guild_Lv__1")
    if amount > 2 and amount <= 4:
        print("Levle > 0 Level < 1 :")
        info["status"] = "Guild_Lv_2!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_2")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558000, reason="Guild_Lv_2 Levle > 2 Level < 4 ")
        except:
            print("No Guild_Lv__2")
    if amount > 4 and amount <= 8:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_3!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_3")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558000, reason="Guild_Lv_3 Levle > x Level < x ")
        except:
            print("No Guild_Lv__3")
    if amount > 8 and amount <= 16:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_4!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_4")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x558052, reason="Guild_Lv_4 Levle > x Level < x ")
        except:
            print("No Guild_Lv__4")
    if amount > 32 and amount <= 64:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_5!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_5")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x551552, reason="Guild_Lv_5 Levle > x Level < x ")
        except:
            print("No Guild_Lv__5")
    if amount > 64 and amount <= 128:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_6!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_6")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x521552, reason="Guild_Lv_6 Levle > x Level < x ")
        except:
            print("No Guild_Lv__6")
    if amount > 128 and amount <= 256:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_7!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_7")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x521572, reason="Guild_Lv_7 Levle > x Level < x ")
        except:
            print("No Guild_Lv__7")
    if amount > 256 and amount <= 512:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_8!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_8")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x121572, reason="Guild_Lv_8 Levle > x Level < x ")
        except:
            print("No Guild_Lv__8")
    if amount > 512 and amount <= 1024:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_9!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_9")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x122772, reason="Guild_Lv_9 Levle > x Level < x ")
        except:
            print("No Guild_Lv__9")
    if amount > 1024 and amount <= 2048:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_10!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_10")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_10 Levle > x Level < x ")
        except:
            print("No Guild_Lv__10")
    if amount > 2048 and amount <= 4096:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_11!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_11")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_11 Levle > x Level < x ")
        except:
            print("No Guild_Lv__11")
    if amount > 4096 and amount <= 8192:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_12!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_12")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_12 Levle > x Level < x ")
        except:
            print("No Guild_Lv__12")
    if amount > 8192 and amount <= 16384:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_13!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_13")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_13 Levle > x Level < x ")
        except:
            print("No Guild_Lv__13")
    if amount > 16384 and amount <= 32768:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_14!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_14")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_14 Levle > x Level < x ")
        except:
            print("No Guild_Lv__14")
    if amount > 32768 and amount <= 65536:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_15!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_15")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_15 Levle > x Level < x ")
        except:
            print("No Guild_Lv__15")
    if amount > 65536 and amount <= 131072:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_16!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_16")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_16 Levle > x Level < x ")
        except:
            print("No Guild_Lv__16")
    if amount > 131072 and amount <= 262144:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_17!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_17")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_17 Levle > x Level < x ")
        except:
            print("No Guild_Lv__17")
    if amount > 262144 and amount <= 524288:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_18!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_18")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_18 Levle > x Level < x ")
        except:
            print("No Guild_Lv__18")
    if amount > 524288 and amount <= 1048576:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_19!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_19")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_19 Levle > x Level < x ")
        except:
            print("No Guild_Lv__19")
    if amount > 1048576 and amount <= 2097152:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_20!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_20")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_2 Levle > x Level < x ")
        except:
            print("No Guild_Lv_20")
    if amount > 2097152 and amount <= 4194304:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_21!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_21")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_20 Levle > x Level < x ")
        except:
            print("No Guild_Lv_21")
    if amount > 4194304 and amount <= 8388608:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_22!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_22")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_21 Levle > x Level < x ")
        except:
            print("No Guild_Lv_22")
    if amount > 8388608 and amount <= 16777216:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_23!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_23")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_23 Levle > x Level < x ")
        except:
            print("No Guild_Lv_23")
    if amount > 16777216 and amount <= 33554432:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_24!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_24")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_24 Levle > x Level < x ")
        except:
            print("No Guild_Lv_24")
    if amount > 33554432 and amount <= 67108864:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_25!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_25")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_25 Levle > x Level < x ")
        except:
            print("No Guild_Lv_25")
    if amount > 67108864 and amount <= 134217728:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_26!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_26")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_26 Levle > x Level < x ")
        except:
            print("No Guild_Lv_26")
    if amount > 134217728 and amount <= 268435456:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_27!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_27")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128472, reason="Guild_Lv_27 Levle > x Level < x ")
        except:
            print("No Guild_Lv_27")
    if amount > 268435456 and amount <= 536870912:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_28!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x128772, reason="Guild_Lv_28 Levle > x Level < x ")
        except:
            print("No Guild_Lv_28")
    if amount > 536870912 and amount <= 1073741824:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_28!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x198772, reason="Guild_Lv_28+=+ Levle > x Level < x ")
        except:
            print("No Guild_Lv__28")
    if amount > 1073741824:
        print("Levle > x Level < x :")
        info["status"] = "Guild_Lv_28!"
        var = discord.utils.get(message.guild.roles, name = "Guild_Lv_28")
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x198772, reason="Guild_Lv_28++ Levle > x Level < x ")
        except:
            print("No Guild_Lv__28+")
    status = info["status"]
    fileIO("players/{}/info.json".format(author.id), "save", info)
    await ctx.send("```diff\n+ {} gained a New OlD Rank!\n Your New Old Rank is {}```".format(name, status))
async def _check_rang(ctx):
    author = ctx.author
    info = fileIO("players/{}/info.json".format(author.id), "load")
    name = info["name"]
    if info["count_titlenum"] == 1:
        info["status"] = "NooB!"
    elif info["count_titlenum"] == 2:
        info["status"] = "N000oo000B!"
    elif info["count_titlenum"] == 3:
        info["status"] = "On the Way!"
    elif info["count_titlenum"] == 4:
        info["status"] = "Getting Great!"
    elif info["count_titlenum"] == 5:
        info["status"] = "Better than Befor!"
    elif info["count_titlenum"] == 6:
        info["status"] = "Already!"
    elif info["count_titlenum"] == 7:
        info["status"] = "Monster"
    elif info["count_titlenum"] == 8:
        info["status"] = "Gorzila"
    elif info["count_titlenum"] == 9:
        info["status"] = "Moon Rock"
    elif info["count_titlenum"] == 10:
        info["status"] = "Champion"
    elif info["count_titlenum"] == 11:
        info["status"] = "Idea"
    elif info["count_titlenum"] >= 12:
        info["status"] = "Over 1oo King BOSS!"
    status = info["status"]
    fileIO("players/{}/info.json".format(author.id), "save", info)
    await ctx.send("```diff\n+ {} gained a New OlD Rank!\n Your New Old Rank is {}```".format(name, status))
async def _check_upequipment(ctx):
    print(">>>>>>>> Calc 1Start<<<<<<<")
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    itemname = fileIO("core/enemies/all.json", "load")
    #angezogen = "None"
    selected_item = str(info["selected_item"])
    newitemname = info["selected_item"]
    bbvalue = info["bbvalue"]
    lvl = info["lvl"]
    slot = info["slotnum"]
    multieply = info["lvl"]
    if slot == "0" :
        angezogen = info["zslot_0_inventory"]
        print("angezogen in slot0")
        print(angezogen)
        if angezogen == "None" or angezogen == []:
            print("angezogen slot 0 == None :")
            multieply = info["bpv0"]
            #info["zslot_0_inventory"] = "[]"
            print(">>>>newitemname<<<<")
            print(">>>>newitemname<<<<")
            print(newitemname)
            print(">>>>newitemname<<<<")
            print(">>>>newitemname<<<<")
            fooddropp = itemname[newitemname]["food_drop"]
            plusfood = int(fooddropp) * int(multieply)
            info["all_drop_food"] += int(plusfood)
            show = info["all_drop_food"]
            print("PlusFood")
            print(plusfood)
            print("all_drop_food")
            print(show)
            fileIO("players/{}/info.json".format(author.id), "save", info)
            wooddropp = itemname[newitemname]["wood_drop"]
            pluswood = int(wooddropp) * int(multieply)
            info["all_drop_wood"] =  info["all_drop_wood"] + pluswood
            fileIO("players/{}/info.json".format(author.id), "save", info)
            stonedropp = itemname[newitemname]["stone_drop"]
            plusstone = int(stonedropp) * int(multieply)
            info["all_drop_stone"] = info["all_drop_stone"] + plusstone
            fileIO("players/{}/info.json".format(author.id), "save", info)
            metaldropp = itemname[newitemname]["metal_drop"]
            plusmetal = int(metaldropp) * int(multieply)
            info["all_drop_metal"] = info["all_drop_metal"] + plusmetal
            fileIO("players/{}/info.json".format(author.id), "save", info)
            golddropp = itemname[newitemname]["gold_drop"]
            plusgold = int(golddropp) * int(multieply)
            info["all_drop_gold"] = info["all_drop_gold"] + plusgold
            fileIO("players/{}/info.json".format(author.id), "save", info)
            bocodropp = itemname[newitemname]["boco_drop"]
            plusboco = int(bocodropp) * int(multieply)
            info["all_drop_boco"] = info["all_drop_boco"] + plusboco
            fileIO("players/{}/info.json".format(author.id), "save", info)
            keydropp = itemname[newitemname]["key_drop"]
            pluskey = int(keydropp) * int(multieply)
            info["all_drop_key"] = info["all_drop_key"] + pluskey
            fileIO("players/{}/info.json".format(author.id), "save", info)
            expdropp = itemname[newitemname]["max_exp"]
            plusexp = int(expdropp) * int(multieply)
            info["all_drop_exp"] = info["all_drop_exp"] + plusexp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            skexpdropp = itemname[newitemname]["max_skexp"]
            plusskexp = int(skexpdropp) * int(multieply)
            info["all_drop_skexp"] = info["all_drop_skexp"] +plusskexp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            attack = itemname[newitemname]["max_dmg"]
            plussattack = int(attack) * int(multieply)
            info["all_drop_attack"] = info["all_drop_attack"] + plussattack
            fileIO("players/{}/info.json".format(author.id), "save", info)
            defence = itemname[newitemname]["max_def"]
            plusdefence = int(defence) * int(multieply)
            info["all_drop_defence"] = info["all_drop_defence"] + plusdefence
            fileIO("players/{}/info.json".format(author.id), "save", info)
            dropdrop = itemname[newitemname]["max_drop"]
            plusdropdrop = int(dropdrop) * int(multieply)
            info["all_drop"] = info["all_drop"] + plusdropdrop
            fileIO("players/{}/info.json".format(author.id), "save", info)
            mpdrop = itemname[newitemname]["all_drop_mp"]
            plusdropmp = int(mpdrop) * int( multieply)
            info["all_drop_mp"] = info["all_drop_mp"] + plusdropmp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            hpdrop = itemname[newitemname]["drop_hp"]
            plusdrophp = int(hpdrop) + int(multieply)
            info["all_drop_hp"] = info["all_drop_hp"] + plusdrophp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            spdrop = itemname[newitemname]["all_drop_sp"]
            plusdropsp = int(spdrop) * int(multieply)
            info["all_drop_sp"] = info["all_drop_sp"] + plusdropsp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print(">>>>>>>>CALC END<<<<<<<")
        else:
            print(">>>>>>>>CALC _check_downequipment<<<<<<<")
            #await _check_downequipment(ctx)
            print(">>>>>>>>_check_downequipment END<<<<<<<")
        if not angezogen == "None" or angezogen == []:
            print("NOTangezogen slot 0 == None :NOT")
            multieply = info["bbvalue"]
            #info["zslot_0_inventory"] = "[]"
            print(">>>>newitemname<<<<")
            print(">>>>newitemname<<<<")
            print(newitemname)
            print(">>>>newitemname<<<<")
            print(">>>>newitemname<<<<")
            fooddropp = itemname[newitemname]["food_drop"]
            plusfood = fooddropp + multieply
            info["all_drop_food"] = info["all_drop_food"] + plusfood
            show = info["all_drop_food"]
            print("PlusFood")
            print(plusfood)
            print("all_drop_food")
            print(show)
            fileIO("players/{}/info.json".format(author.id), "save", info)
            wooddropp = itemname[newitemname]["wood_drop"]
            pluswood = wooddropp + multieply
            info["all_drop_wood"] =  info["all_drop_wood"] + pluswood
            fileIO("players/{}/info.json".format(author.id), "save", info)
            stonedropp = itemname[newitemname]["stone_drop"]
            plusstone = stonedropp + multieply
            info["all_drop_stone"] = info["all_drop_stone"] + plusstone
            fileIO("players/{}/info.json".format(author.id), "save", info)
            metaldropp = itemname[newitemname]["metal_drop"]
            plusmetal = metaldropp + multieply
            info["all_drop_metal"] = info["all_drop_metal"] + plusmetal
            fileIO("players/{}/info.json".format(author.id), "save", info)
            golddropp = itemname[newitemname]["gold_drop"]
            plusgold = golddropp + multieply
            info["all_drop_gold"] = info["all_drop_gold"] + plusgold
            fileIO("players/{}/info.json".format(author.id), "save", info)
            bocodropp = itemname[newitemname]["boco_drop"]
            plusboco = bocodropp + multieply
            info["all_drop_boco"] = info["all_drop_boco"] + plusboco
            fileIO("players/{}/info.json".format(author.id), "save", info)
            keydropp = itemname[newitemname]["key_drop"]
            pluskey = keydropp + multieply
            info["all_drop_key"] = info["all_drop_key"] + pluskey
            fileIO("players/{}/info.json".format(author.id), "save", info)
            expdropp = itemname[newitemname]["max_exp"]
            plusexp = expdropp + multieply
            info["all_drop_exp"] = info["all_drop_exp"] + plusexp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            skexpdropp = itemname[newitemname]["max_skexp"]
            plusskexp = skexpdropp + multieply
            info["all_drop_skexp"] = info["all_drop_skexp"] +plusskexp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            attack = itemname[newitemname]["max_dmg"]
            plussattack = attack + multieply
            info["all_drop_attack"] = info["all_drop_attack"] + plussattack
            fileIO("players/{}/info.json".format(author.id), "save", info)
            defence = itemname[newitemname]["max_def"]
            plusdefence = defence + multieply
            info["all_drop_defence"] = info["all_drop_defence"] + plusdefence
            fileIO("players/{}/info.json".format(author.id), "save", info)
            dropdrop = itemname[newitemname]["max_drop"]
            plusdropdrop = dropdrop + multieply
            info["all_drop"] = info["all_drop"] + plusdropdrop
            fileIO("players/{}/info.json".format(author.id), "save", info)
            mpdrop = itemname[newitemname]["all_drop_mp"]
            plusdropmp = mpdrop + multieply
            info["all_drop_mp"] = info["all_drop_mp"] + plusdropmp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            hpdrop = itemname[newitemname]["drop_hp"]
            plusdrophp = hpdrop + multieply
            info["all_drop_hp"] = info["all_drop_hp"] + plusdrophp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            spdrop = itemname[newitemname]["all_drop_sp"]
            plusdropsp = spdrop + multieply
            info["all_drop_sp"] = info["all_drop_sp"] + plusdropsp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print(">>>>>>>>CALC END<<<<<<<")
        else:
            print(">>>>>>>>CALC _check_RETURNt<<<<<<<")
            return
            print(">>>>>>>>_check_RETURNt END<<<<<<<")
    elif slot == "1" :
        angezogen = info["zslot_1_inventory"]
        print("angezogen in slot1")
        print(angezogen)
        if angezogen == "None" or angezogen == []:
            print("angezogen == None :")
            info["zslot_1_inventory"] = []
            print(">>>>newitemname<<<<")
            print(newitemname)
            fooddropp = itemname[newitemname]["food_drop"]
            plusfood = fooddropp * multieply
            info["all_drop_food"] = info["all_drop_food"] + plusfood
            show = info["all_drop_food"]
            print("PlusFood")
            print(plusfood)
            print("all_drop_food")
            print(show)
            fileIO("players/{}/info.json".format(author.id), "save", info)
            wooddropp = itemname[newitemname]["wood_drop"]
            pluswood = wooddropp * multieply
            info["all_drop_wood"] =  info["all_drop_wood"] + pluswood
            fileIO("players/{}/info.json".format(author.id), "save", info)
            stonedropp = itemname[newitemname]["stone_drop"]
            plusstone = stonedropp * multieply
            info["all_drop_stone"] = info["all_drop_stone"] + plusstone
            fileIO("players/{}/info.json".format(author.id), "save", info)
            metaldropp = itemname[newitemname]["metal_drop"]
            plusmetal = metaldropp * multieply
            info["all_drop_metal"] = info["all_drop_metal"] + plusmetal
            fileIO("players/{}/info.json".format(author.id), "save", info)
            golddropp = itemname[newitemname]["gold_drop"]
            plusgold = golddropp * multieply
            info["all_drop_gold"] = info["all_drop_gold"] + plusgold
            fileIO("players/{}/info.json".format(author.id), "save", info)
            bocodropp = itemname[newitemname]["boco_drop"]
            plusboco = bocodropp * multieply
            info["all_drop_boco"] = info["all_drop_boco"] + plusboco
            fileIO("players/{}/info.json".format(author.id), "save", info)
            keydropp = itemname[newitemname]["key_drop"]
            pluskey = keydropp * multieply
            info["all_drop_key"] = info["all_drop_key"] + pluskey
            fileIO("players/{}/info.json".format(author.id), "save", info)
            expdropp = itemname[newitemname]["max_exp"]
            plusexp = expdropp * multieply
            info["all_drop_exp"] = info["all_drop_exp"] + plusexp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            skexpdropp = itemname[newitemname]["max_skexp"]
            plusskexp = skexpdropp * multieply
            info["all_drop_skexp"] = info["all_drop_skexp"] +plusskexp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            attack = itemname[newitemname]["max_dmg"]
            plussattack = attack * multieply
            info["all_drop_attack"] = info["all_drop_attack"] + plussattack
            fileIO("players/{}/info.json".format(author.id), "save", info)
            defence = itemname[newitemname]["max_def"]
            plusdefence = defence * multieply
            info["all_drop_defence"] = info["all_drop_defence"] + plusdefence
            fileIO("players/{}/info.json".format(author.id), "save", info)
            dropdrop = itemname[newitemname]["max_drop"]
            plusdropdrop = dropdrop * multieply
            info["all_drop"] = info["all_drop"] + plusdropdrop
            fileIO("players/{}/info.json".format(author.id), "save", info)
            mpdrop = itemname[newitemname]["all_drop_mp"]
            plusdropmp = mpdrop * multieply
            info["all_drop_mp"] = info["all_drop_mp"] + plusdropmp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            hpdrop = itemname[newitemname]["drop_hp"]
            plusdrophp = hpdrop * multieply
            info["all_drop_hp"] = info["all_drop_hp"] + plusdrophp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            spdrop = itemname[newitemname]["all_drop_sp"]
            plusdropsp = spdrop * multieply
            info["all_drop_sp"] = info["all_drop_sp"] + plusdropsp
            fileIO("players/{}/info.json".format(author.id), "save", info)
            print(">>>>>>>>CALC END<<<<<<<")
    print("slot")
    print(slot)
    multieply = info["bbvalue"]
    print("bbvalue")
    print(multieply)
    upitemtype = itemname[newitemname]["type"]
    print("UpitemCheckType")
    print(upitemtype)
    upitemmaterial = itemname[newitemname]["material"]
    print("angezogen")
    print(angezogen)
    if upitemtype == "simpleweapon":
        print("This@@@@@@@@@@@dropfwsmgbkssimpleweapon")
    elif upitemtype == "simpletool":
        print("This  @@@@@@@@@@@   simpletool")
    elif upitemtype == "dropfwsmgbks":
        print("This@@@@@@@@@@@dropfwsmgbksdropfwsmgbks")
    print(">>>>>>>> Calc 2Start<<<<<<<")
    print("TypeError")
    all_drop_food = info["all_drop_food"]
    print("SHOWSHOW>>>>SHOWSHOWnewitemnameSHOWSHOW<<<<SHOWSHOW")
    print(newitemname)
    print("all_drop_foodSHOWSHOW")
    print(all_drop_food)
    fileIO("players/{}/info.json".format(author.id), "save", info)
    print(">>>>>>>>CALC ENDSHOWSHOW<<<<<<<")
async def _check_downequipment(ctx):
    author = ctx.author
    message = ctx.message
    print("ALARM!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    info = fileIO("players/{}/info.json".format(author.id), "load")
    itemname = fileIO("core/enemies/all.json", "load")
    downitemname = str(info["zslot_0_inventory"])
    multieply = info["bbvalue"]
    print("_check_downequipment")
    print("downitemname DOWNItem")
    print(downitemname)
    nameofitem = info["zslot_0_inventory"]
    print("nameofitem")
    print(nameofitem)
    downitemtype = itemname[downitemname]["type"]
    print("downitemtype")
    print(downitemtype)
    downitemmaterial = itemname[downitemname]["material"]
    print("downitemmaterial")
    print(downitemmaterial)
    newitemname = info["selected_item"]
    if downitemtype == "dropwoodfood":
        fooddropp = itemname[nameofitem]["food_drop"]
        info["all_drop_food"] = fooddropp * info["bp0"]
        wooddropp = itemname[nameofitem]["wood_drop"]
        info["all_drop_wood"] = wooddropp * info["bp0"]
    elif downitemtype == "simpleweapon":
        wooddropp = itemname[nameofitem]["wood_drop"]
        info["all_drop_wood"] = wooddropp * info["bp0"]
    elif downitemtype == "simpletool":
        print("dropwoodstone")
        fooddropp = itemname[nameofitem]["stone_drop"]
        info["all_drop_stone"] = fooddropp * info["bp0"]
        wooddropp = itemname[nameofitem]["wood_drop"]
        info["all_drop_wood"] = wooddropp * info["bp0"]
    elif downitemname == "None" or downitemname == []:
        print("downitemname None")
        print("downitemname NoneReturn")
        print("Return????????Return//?????/???/?/Return")
        return
    elif downitemtype == "dropfwsmgbks":
        print("DROPTTHAT dropfwsmgbks")
        fooddropp = itemname[nameofitem]["food_drop"]
        plusfood = fooddropp * multieply
        info["all_drop_food"] = plusfood
        wooddropp = itemname[nameofitem]["wood_drop"]
        pluswood = wooddropp * multieply
        info["all_drop_wood"] = pluswood
        stonedropp = itemname[nameofitem]["stone_drop"]
        plusstone = stonedropp * multieply
        info["all_drop_stone"] = plusstone
        metaldropp = itemname[nameofitem]["metal_drop"]
        plusmetal = metaldropp * multieply
        info["all_drop_metal"] = plusmetal
        golddropp = itemname[nameofitem]["gold_drop"]
        plusgold = golddropp * multieply
        info["all_drop_gold"] = plusgold
        bocodropp = itemname[nameofitem]["boco_drop"]
        plusboco = bocodropp * multieply
        info["all_drop_boco"] = plusboco
        keydropp = itemname[nameofitem]["key_drop"]
        pluskey = keydropp * multieply
        info["all_drop_key"] = pluskey
        expdropp = itemname[nameofitem]["max_exp"]
        plusexp = expdropp * multieply
        info["all_drop_exp"] = plusexp
        skexpdropp = itemname[nameofitem]["max_skexp"]
        plusskexp = skexpdropp * multieply
        info["all_drop_skexp"] = plusskexp
        attack = itemname[nameofitem]["max_dmg"]
        plussattack = attack * multieply
        #info["all_total_base_attack"] = info["all_drop_attack"] - plussattack
        info["all_drop_attack"] = plussattack
        defence = itemname[nameofitem]["max_def"]
        plusdefence = defence * multieply
        #info["all_total_base_defence"] = info["all_drop_defence"] - plusdefence
        info["all_drop_defence"] = plusdefence
        dropdrop = itemname[nameofitem]["max_drop"]
        plusdropdrop = dropdrop * multieply
        info["all_drop"] = plusdropdrop
        mpdrop = itemname[nameofitem]["all_drop_mp"]
        plusdropmp = mpdrop * multieply
        info["all_drop_mp"] = plusdropmp
        hpdrop = itemname[nameofitem]["drop_hp"]
        plusdrophp = hpdrop * multieply
        info["all_drop_hp"] = plusdrophp
        spdrop = itemname[nameofitem]["all_drop_sp"]
        plusdropsp = spdrop * multieply
        info["all_drop_sp"] = plusdropsp
        #info["zslot0_equip"] = str(downitemname)
        #info["zaupitemtype"] = str(upitemtype)
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("All setup!@@##!@#$^%#^%!!!")
        await _check_upequipment(ctx)
    else:
        await ctx.send("Next time choose one of the options.")
async def _check_wallet0(ctx):
    await _check_set(ctx)
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["account"] == "None":
        return
    #else:
        #info["inhavenft_status"] = "true"
    if info["inhavenft_status"] == False:
        #await ctx.send("You have not set up a Wallet yet!\n- USE COMMAND:\n !setwallet <your WAXP Wallet Address HERE> \n To Enjoy Even more of BP0x0!\n+ If you Totally NEW give me A sign in Chat I SEE YOU!")
        em = discord.Embed(description="```diff\n You have not set up a Wallet yet!\n- USE COMMAND:\n {}setwallet <your WAXP Wallet Address HERE> \n To Enjoy Even more of BP0x0!\n+ If you Totally NEW\n+ give me A sign in Chat I SEE YOU!```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        return
    else:
        try:
            author = ctx.author
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp0, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            bbvalue = int(assets) * 1
            info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
            info["account"] = account
            info["bp0"] = int(assets)
            info["successCheck"] = success
            info["setdone"] = 1
            info["bpv0"] = bbvalue
            fileIO("players/{}/info.json".format(author.id), "save", info)
            await ctx.send("You have {} BP0x0-0!".format(assets))
            await _check_wallet1(ctx)
        except IndexError:
            pass
            await ctx.send("You DO NOT have ANY BP0x0-0!")
            await _check_wallet1(ctx)
            return
        except :
            pass
            em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
            await ctx.send(embed=em)
async def _check_wallet1(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp1, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 2
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp1"] = int(assets)
        info["successCheck"] = success
        info["bpv1"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-1!".format(assets))
        if assets < "1":
            await _check_wallet25(ctx)
            pass
        await _check_wallet2(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-1!")
        await _check_wallet2(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet2(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp2, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 4
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp2"] = int(assets)
        info["successCheck"] = success
        info["bpv2"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-2!".format(assets))
        if assets < "1":
            await _check_wallet25(ctx)
            pass
        await _check_wallet3(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-2!")
        await _check_wallet3(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet3(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp3, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 8
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp3"] = int(assets)
        info["successCheck"] = success
        info["bpv3"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-3!".format(assets))
        if assets < "1":
            await _check_wallet25(ctx)
            pass
        await _check_wallet4(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-3!")
        await _check_wallet4(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet4(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp4, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 16
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp4"] = int(assets)
        info["successCheck"] = success
        info["bpv4"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-4!".format(assets))
        if assets < "1":
            await _check_wallet25(ctx)
            pass
        await _check_wallet5(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-4!")
        await _check_wallet5(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet5(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp5, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 32
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp5"] = int(assets)
        info["successCheck"] = success
        info["bpv5"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-5!".format(assets))
        await _check_wallet6(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-5!")
        await _check_wallet6(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet6(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp6, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 64
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp6"] = int(assets)
        info["successCheck"] = success
        info["bpv6"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-6!".format(assets))
        await _check_wallet7(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-6!")
        await _check_wallet7(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet7(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp7, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 128
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp7"] = int(assets)
        info["successCheck"] = success
        info["bpv7"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-7!".format(assets))
        await _check_wallet8(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-7!")
        await _check_wallet8(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet8(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp8, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 256
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp8"] = int(assets)
        info["successCheck"] = success
        info["bpv8"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-8!".format(assets))
        await _check_wallet9(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-8!")
        await _check_wallet9(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet9(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp9, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 512
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp9"] = int(assets)
        info["successCheck"] = success
        info["bpv9"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-9!".format(assets))
        await _check_wallet10(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-9!")
        await _check_wallet10(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet10(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp10, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 1024
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp10"] = int(assets)
        info["successCheck"] = success
        info["bpv10"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-10!".format(assets))
        await _check_wallet11(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-10!")
        await _check_wallet11(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet11(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp11, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 2048
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp11"] = int(assets)
        info["successCheck"] = success
        info["bpv11"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-11!".format(assets))
        await _check_wallet12(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-11!")
        await _check_wallet12(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet12(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp12, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 4096
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp12"] = int(assets)
        info["successCheck"] = success
        info["bpv12"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-12!".format(assets))
        await _check_wallet13(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-12!")
        await _check_wallet13(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet13(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp13, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 8192
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp13"] = int(assets)
        info["successCheck"] = success
        info["bpv13"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-13!".format(assets))
        await _check_wallet14(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-13!")
        await _check_wallet14(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet14(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp14, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 16384
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp14"] = int(assets)
        info["successCheck"] = success
        info["bpv14"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-14!".format(assets))
        await _check_wallet15(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-14!")
        await _check_wallet15(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet15(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp15, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 32768
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp15"] = int(assets)
        info["successCheck"] = success
        info["bpv15"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-15!".format(assets))
        await _check_wallet16(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-15!")
        await _check_wallet16(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet16(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp16, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 65536
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp16"] = int(assets)
        info["successCheck"] = success
        info["bpv16"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-16!".format(assets))
        #await _check_wallet25(ctx)
        await _check_wallet17(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-16!")
        await _check_wallet25(ctx)
        #await _check_wallet17(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet17(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp17, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 131072
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp17"] = int(assets)
        info["successCheck"] = success
        info["bpv17"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-17!".format(assets))
        await _check_wallet18(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-17!")
        await _check_wallet18(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet18(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp18, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 262144
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp18"] = int(assets)
        info["successCheck"] = success
        info["bpv18"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-18!".format(assets))
        await _check_wallet19(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-18!")
        await _check_wallet19(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet19(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp19, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 524288
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp19"] = int(assets)
        info["successCheck"] = success
        info["bpv19"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-19!".format(assets))
        await _check_wallet20(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-19!")
        await _check_wallet20(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet20(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp20, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 1048576
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp20"] = int(assets)
        info["successCheck"] = success
        info["bpv20"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-20!".format(assets))
        await _check_wallet21(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-20!")
        await _check_wallet21(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet21(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp21, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 2097152
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp21"] = int(assets)
        info["successCheck"] = success
        info["bpv21"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-21!".format(assets))
        await _check_wallet22(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-21!")
        await _check_wallet22(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet22(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp22, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 4194304
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp22"] = int(assets)
        info["successCheck"] = success
        info["bpv22"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-22!".format(assets))
        await _check_wallet23(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-22!")
        await _check_wallet23(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet23(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp23, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 8388608
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp23"] = int(assets)
        info["successCheck"] = success
        info["bpv23"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-23!".format(assets))
        await _check_wallet24(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-23!")
        await _check_wallet24(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet24(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp24, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 16777216
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp24"] = int(assets)
        info["successCheck"] = success
        info["bpv24"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-24!".format(assets))
        await _check_wallet25(ctx)
    except IndexError:
        pass
        #await ctx.send("You DO NOT have ANY BP0x0-24!")
        await _check_wallet25(ctx)
        return
    except :
        em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND {}sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n or {}bpinv for a list of your NFT\n```".format(Prefix,Prefix), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet25(ctx):
    try:
        author = ctx.author
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account = info["account"]
        response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, tbp25, account))
        response.json()
        data = response.json()
        success = data["success"]
        account = data["data"][0]["account"]
        assets = data["data"][0]["assets"]
        bbvalue = int(assets) * 33554432
        info["bbvalue_stats"] = info["bbvalue_stats"] + int(bbvalue)
        info["account"] = account
        info["bp25"] = int(assets)
        info["successCheck"] = success
        info["bpv25"] = bbvalue
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await ctx.send("You have {} BP0x0-25!".format(assets))
        em = discord.Embed(description="```diff\n+ BP0x0-0 Checked\n Enjoy yor Game!\n USE COMMAND !help for Commands!\n Next step ""{}slot 0"" \n Equipting the ""Hand""\n```".format(Prefix), color=discord.Color.green())
        #await ctx.send(embed=em)
        #await _check_wallet(ctx)
    except IndexError:
        pass
        await inv(ctx)
        #em = discord.Embed(description="```diff\n+ BP0x0-0 to BP0x0-25 Checked!\n```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        await _check_wallet(ctx)
        return
    except :
        #em = discord.Embed(description="```diff\n**ERROR OCCURRED!!!**\n\n Please try again in a couple of minutes! USE COMMAND !sync to check for your NFTS in Wallet from.\n BP0x0-0 till Bp0x0-25\n```".format(), color=discord.Color.blue())
        await ctx.send(embed=em)
        await bp0x0inv(ctx)
        pass
async def _check_wallet_nft_Castle(ctx):
    #await _check_wallet_nft_Castle(ctx)
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["inhavenft_status"] == False :
        em1 = discord.Embed(description="```diff\n+ We got Results...!\n\n- And it looks like you do not have any BP0x0 NFT's! or The Internet lost the package? ```diff\n USE COMMAND {}setwallet <wallet address> \n\n example {}setwallet bn1qw.wam```\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(Prefix,Prefix), color=discord.Color.red())
        await ctx.send(embed=em1)
        em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
        await ctx.send(embed=em)
        return
        #em = discord.Embed(description="```diff\n+ NEXT STEP!\n USE COMMAND !bpinv   to equipt a slot!```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        #await _check_setNEWGame(ctx)
    else:
        info["check_nft"] = 0
        try:
            author = ctx.author
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            em = discord.Embed(description="```diff\n Sending your request...```".format(), color=discord.Color.blue())
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&page=1&limit=100&order=descm'.format(account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            boco = info["boco"]
            #setdone = info["setdone"]
            #em = discord.Embed(description="```diff\n Checking if you own any BP0x0 NFTs...```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em)
            #em1 = discord.Embed(description="```diff\n Verifing....```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em1)
            print("================================================")
            print(data)
            print("================================================")
            print("assets from code")
            print(assets)
            if int(assets) >= 0 :
                print(" Assets over 0")
                print(assets)
                em = discord.Embed(description="```diff\n Great we found some BoboPixel0x0 NFTS!```".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                #######
                info["assets"] = assets
                print("assets safe")
                print(assets)
                #fileIO("players/{}/info.json".format(author.id), "save", info)
                walletinfo = fileIO("wallets/wallets.json", "load")
                castle_name = info["castle_name"]
                walleto = walletinfo["Wallets"]["Response"]["name_list"]["Castle_list"]
                wallet = castle_name
                fileIO("players/{}/info.json".format(author.id), "save", info)
                try:
                    await ctx.send(f'Checking Registration {castle_name}! Please wait....')
                    if wallet not in walleto:
                        await ctx.send(f'Save {castle_name}! Please wait....\n ONLY one Castle Presence!\n or \n USE COMMAND {Prefix}setcastlename <any not Taken name>')
                        #info["inhavenft_status"] = "true"
                        #info["castle_name"] = castle_name
                        info["assets"] = assets
                        print("assets Registert SAFE ASSERTES")
                        print(assets)
                        #info["successCheck"] = success
                        #ainfo = fileIO("config/config.json", "load")
                        #ainfo["totalwallets"] = ainfo["totalwallets"] +1
                        #ainfo["regwallets"] = ainfo["regwallets"] +1
                        #fileIO("config/config.json", "save", ainfo)
                        info["info_member"] += 10
                        #await _check_setCalcDroptoTotal(ctx)
                        #await _check_totalshow(ctx)
                        #await _check_setWalleton(ctx)
                        info["check_nft"] = 2
                        try:
                            print("tryIMAGE")
                            print("tryIMAGEstartINN")
                            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={}&page=1&limit=100&order=desc&sort=asset_id'.format(code))
                            response.json()
                            data = response.json()
                            print("data")
                            print(data)
                            success = data["success"]
                            print("susscc")
                            print(success)
                            #nameNFT = data["data"][0]["name"]
                            #print("nameNFT1")
                            #print(nameNFT1)
                            nameNFT = data["data"]["template"][0]["immutable_data"]["name"]
                            #print("nameNFT")
                            #print(nameNFT)
                            try:
                                img = data["data"][0]["template"]["immutable_data"]["img"]
                                print("img")
                                print(img)
                            except:
                                try:
                                    img = data["data"][0]["data"]["img"]
                                    print("img")
                                    print(img)
                                except:
                                    print("except data")
                        except :
                            print("noImg")
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        info = fileIO("config/config.json", "load")
                        walletinfo = fileIO("wallets/wallets.json", "load")
                        castleinfo = fileIO("wallets/wallets.json", "load")
                        walletinfo["Wallets"]["Response"]["name_list"]["Castle_list"].append(castle_name)
                        fileIO("castleplayers/castlesplayers.json", "save", castleinfo)
                        fileIO("wallets/wallets.json", "save", walletinfo)
                        return
                    else:
                        await ctx.send("This Castle Name is Taken Please use a different!")
                        await ctx.send("Please Contact @bobocoin#2774 by any issue!")
                        #info["account"] = "None"
                        #info["setdone"] = 0
                        #info["WalletSetupDone"] = 0
                        #info["account_to_check"] = "None"
                        #info["inhavenft_status"] = "fasle"
                        return
                except IndexError:
                    print("indexError")
                #######
                    return
            elif int(assets) <= 0 :
                embed.description = "BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership! [AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
                await ctx.send(embed=embed)
                return
        except FileNotFoundError:
            await ctx.send("USE COMMAND {Prefix}start first!")
            return
        except IndexError:
            em1 = discord.Embed(description="```diff\n+ Try to check your Inventory! End...```".format(), color=discord.Color.red())
            await ctx.send(embed=em1)
            return
async def _check_wallet_nft_tools(ctx):
    #await _check_wallet_nft_tools(ctx)
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["inhavenft_status"] == False :
        em1 = discord.Embed(description="```diff\n+ We got Results...!\n\n- And it looks like you do not have any BP0x0 NFT's! or The Internet lost the package? ```diff\n USE COMMAND {}setwallet <wallet address> \n\n example !setwallet bn1qw.wam```\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(Prefix), color=discord.Color.red())
        await ctx.send(embed=em1)
        em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
        await ctx.send(embed=em)
        return
    else:
        info["check_nft"] = 0
        try:
            author = ctx.author
            info = fileIO("players/{}/info.json".format(author.id), "load")
            code = info["code"]
            account = info["account"]
            em = discord.Embed(description="```diff\n Sending your request...```".format(), color=discord.Color.blue())
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match_owner={}&collection_name=bobopixeloxo&template_id={}&ids={}'.format(account, code, account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            boco = info["boco"]
            print("================================================")
            print(data)
            print("================================================")
            print("assets from code")
            print(assets)
            if int(assets) >= 0 :
                print(" Assets over 0")
                print(assets)
                em = discord.Embed(description="```diff\n Great we found some BoboPixel0x0 NFTS!```".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                #######
                #info["assets"] = assets
                #print("assets safe")
                #print(assets)
                #info["check_nft"] = 2
                fileIO("players/{}/info.json".format(author.id), "save", info)
                walletinfo = fileIO("wallets/wallets.json", "load")
                castle_name = info["castle_name"]
                walleto = walletinfo["Wallets"]["Response"]["name_list"]["Castle_list"]
                wallet = castle_name
                try:
                    await ctx.send(f'Checking Registration {castle_name}! Please wait....')
                    if wallet in walleto:
                        await ctx.send(f'Save {castle_name}! Please wait....')
                        #info["inhavenft_status"] = "true"
                        #info["castle_name"] = castle_name
                        info["assets"] = assets
                        print("assets NOT Registert SAFE ASSERTES")
                        print(assets)
                        #info["successCheck"] = success
                        #ainfo = fileIO("config/config.json", "load")
                        #ainfo["totalwallets"] = ainfo["totalwallets"] +1
                        #ainfo["regwallets"] = ainfo["regwallets"] +1
                        #fileIO("config/config.json", "save", ainfo)
                        info["info_member"] += 10
                        #await _check_setCalcDroptoTotal(ctx)
                        #await _check_totalshow(ctx)
                        #await _check_setWalleton(ctx)
                        info["check_nft"] = 2
                        fileIO("players/{}/info.json".format(author.id), "save", info)
                        info = fileIO("config/config.json", "load")
                        try:
                            walletinfo = fileIO("wallets/wallets.json", "load")
                        except:
                            print("except ddd")
                        try:
                            castleinfo = fileIO("wallets/wallets.json", "load")
                        except:
                            print("except ddd")
                        try:
                            walletinfo["Wallets"]["Response"]["name_list"]["Castle_list"].append(castle_name)
                        except:
                            print("except ddd")
                        try:
                            fileIO("castleplayers/castlesplayers.json", "save", castleinfo)
                        except:
                            print("except ddd")
                        try:
                            fileIO("wallets/wallets.json", "save", walletinfo)
                        except:
                            print("except ddd")
                        em = discord.Embed(description="```diff\nGreat we found some BoboPixel0x0 NFTS!\n As long this nft is in your Wallet you can Copy as much as you wannt! \nUSE COMMAND {}inv (to check your Inventory)```".format(Prefix), color=discord.Color.blue())
                        await ctx.send(embed=em)
                        return
                    else:
                        #await ctx.send("This Castle Name is Taken Please use a different!")
                        await ctx.send("Please Contact @bobocoin#2774 by any issue!")
                        #info["account"] = "None"
                        #info["setdone"] = 0
                        #info["WalletSetupDone"] = 0
                        #info["account_to_check"] = "None"
                        #info["inhavenft_status"] = "fasle"
                except IndexError:
                    print("indexError")
                #######
                    return
            elif int(assets) <= 0 :
                embed.description = "BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership! [AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
                await ctx.send(embed=embed)
                return
        except FileNotFoundError:
            await ctx.send("USE COMMAND {Prefix}start first!")
            return
        except IndexError:
            em1 = discord.Embed(description="```diff\n- INDEX ERROR\n+ We got Results...!\n\n- And it looks like you do not have any BP0x0 NFT's! or The Internet lost the package? \n USE COMMAND {}setwallet <wallet address> \n\n example {}setwallet bn1qw.wam\n\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(Prefix,Prefix), color=discord.Color.red())
            await ctx.send(embed=em1)
            em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
            await ctx.send(embed=em)
            return
async def _check_wallet_nft(ctx):
    #await _check_wallet_nft_Castle(ctx)
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["inhavenft_status"] == False :
        em1 = discord.Embed(description="```diff\n+ We got Results...!\n\n- And it looks like you do not have any BP0x0 NFT's! or The Internet lost the package? ```diff\n USE COMMAND {}setwallet <wallet address> \n\n example {}setwallet bn1qw.wam```\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(Prefix,Prefix), color=discord.Color.red())
        await ctx.send(embed=em1)
        em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
        await ctx.send(embed=em)
        return
        #em = discord.Embed(description="```diff\n+ NEXT STEP!\n USE COMMAND !bpinv   to equipt a slot!```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        #await _check_setNEWGame(ctx)
    else:
        info["check_nft"] = 0
        try:
            author = ctx.author
            info = fileIO("players/{}/info.json".format(author.id), "load")
            account = info["account"]
            em = discord.Embed(description="```diff\n Sending your request...```".format(), color=discord.Color.blue())
            response = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={}&collection_name=bobopixeloxo&page=1&limit=100&order=descm'.format(account))
            response.json()
            data = response.json()
            success = data["success"]
            account = data["data"][0]["account"]
            assets = data["data"][0]["assets"]
            boco = info["boco"]
            #setdone = info["setdone"]
            #em = discord.Embed(description="```diff\n Checking if you own any BP0x0 NFTs...```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em)
            #em1 = discord.Embed(description="```diff\n Verifing....```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em1)
            print("assets from code")
            print(assets)
            if int(assets) <= 0 :
                print(" Assets over 0")
                print(assets)
                em = discord.Embed(description="```diff\n Great we found some BoboPixel0x0 NFTS!```".format(), color=discord.Color.blue())
                await ctx.send(embed=em)
                #######
                #info["assets"] = assets
                print("assets safe")
                print(assets)
                code = info["code"]
                info["check_nft"] = 2
                fileIO("players/{}/info.json".format(author.id), "save", info)
                return
            elif int(assets) <= 0 :
                embed.description = "BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership! [AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
                await ctx.send(embed=embed)
                return
        except FileNotFoundError:
            await ctx.send("USE COMMAND {Prefix}start first!")
            return
        except IndexError:
            em1 = discord.Embed(description="```diff\n+ We got Results...!\n\n+ And it looks like you do have BPvalue NFT's! or The Internet lost the package?``` \n **USE COMMAND**\n\n **!i**```!inv``` \n**!bpinv**```!boboinv``` \n**!sa**```!statsall``` \n\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(), color=discord.Color.red())
            await ctx.send(embed=em1)
            em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
            await ctx.send(embed=em)
            return
async def _check_Depts_roll(ctx):  # #await _check_Depts_roll(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    member = message.author
    guild = ctx.guild
    print("_check_Depts_roll ><><><><><><")
    info = fileIO("players/{}/info.json".format(author.id), "load")
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        infofirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
    streets_location = info["streets_location"]                         #   int
    streets_location_old_roll = info["streets_location_old_roll"]       #   str
    streets_check_pair = info["streets_check_pair"]                     #   int
    check_prison = info["streets_check_prison"]                         #   bol
    check_depts_bol = info["check_depts_bol"]                         #   bol
    check_depts_int = info["check_depts_int"]                         #   bol
    print("streets_location")
    print(streets_location)
    print("streets_location_old_roll")
    print(streets_location_old_roll)
    print("streets_check_pair")
    print(streets_check_pair)
    print("check_depts_bol")
    print(check_depts_bol)
    print("check_depts_int")
    print(check_depts_int)
    if check_depts_bol == True:
        price = 1000
        if streets_location == 0 :
            streets_locationFAKE = 1
        else:
            streets_locationFAKE = streets_location
        check_depts_int = streets_locationFAKE * price
        info["check_depts_int"] = check_depts_int
    if check_depts_int > 0 :
        await ctx.send("<@{}>You Rent a place to stand on the Steets of BP0x0\n\nAnd have some open BILLS to Pay...`{}`...in BOCO \n\nUSE COMMAND `{}pay` to Be Free to `{}roll` \n Do you want to PAY now\n`Y or N`\n".format(author.id,check_depts_int, Prefix, Prefix))
        embed = discord.Embed()
        def pred(m):
            return m.author == message.author and m.channel == message.channel
        answer1 = await bot.wait_for("message", check=pred)
        variableSelected = str(answer1.content)
        print("text")
        print(variableSelected)
        options = ["Y","y","1","q","N","n","2","no","No","NO","yes","Yes","YES"]
        if answer1.content in options:
            if answer1.content == "YES" or answer1.content == "yes" or answer1.content == "Yes" or answer1.content == "1" or answer1.content == "Y" or answer1.content == "y" or answer1.content == "q":
                boco_balance = info["boco"]
                if boco_balance < 1000:
                    await ctx.send(f'You are Out BOCO! No move For you come again When you have {check_depts_int} BOCO\n+ USE COMMAND {Prefix}help')
                    return
                else:
                    cinfo = fileIO("global/info.json".format(author.id), "load")
                    if info["boco"] < check_depts_int:
                        bobo0deptsOPEN = check_depts_int - boco_balance
                        cinfo["streets_pot"] += boco_balance
                        info["boco"] = 0
                        info["check_depts_int"] = bobo0deptsOPEN
                        cinfo["streets_pot"] += check_depts_int
                        await ctx.send(f'PAID a part...\n\nYour still own {check_depts_int} BOCO!!!\n+ USE COMMAND {Prefix}pay to PAY the RENT!!!')
                        fileIO("global/info.json".format(author.id), "save", cinfo)
                        return
                    else:
                        print("check_depts_int<><><><><")
                        print(check_depts_int)
                        info["boco"] -= check_depts_int
                        info["check_depts_int"] = 0
                        info["check_depts_bol"] = False
                        if streets_location == 0:
                            cinfo["street_0x0"] += check_depts_int
                        if streets_location == 1:
                            cinfo["street_0x1"] += check_depts_int
                        if streets_location == 2:
                            cinfo["street_0x2"] += check_depts_int
                        if streets_location == 3:
                            cinfo["street_0x3"] += check_depts_int
                        if streets_location == 4:
                            cinfo["street_0x4"] += check_depts_int
                        if streets_location == 5:
                            cinfo["street_0x5"] += check_depts_int
                        if streets_location == 6:
                            cinfo["street_0x6"] += check_depts_int
                        if streets_location == 7:
                            cinfo["street_0x7"] += check_depts_int
                        if streets_location == 8:
                            cinfo["street_0x8"] += check_depts_int
                        if streets_location == 9:
                            cinfo["street_0x9"] += check_depts_int
                        if streets_location == 10:
                            cinfo["street_0x10"] += check_depts_int
                        if streets_location == 11:
                            cinfo["street_0x11"] += check_depts_int
                        if streets_location == 12:
                            cinfo["street_0x12"] += check_depts_int
                        if streets_location == 13:
                            cinfo["street_0x13"] += check_depts_int
                        if streets_location == 14:
                            cinfo["street_0x14"] += check_depts_int
                        if streets_location == 15:
                            cinfo["street_0x15"] += check_depts_int
                        if streets_location == 16:
                            cinfo["street_0x16"] += check_depts_int
                        if streets_location == 17:
                            cinfo["street_0x17"] += check_depts_int
                        if streets_location == 18:
                            cinfo["street_0x18"] += check_depts_int
                        if streets_location == 19:
                            cinfo["street_0x19"] += check_depts_int
                        if streets_location == 20:
                            cinfo["street_0x20"] += check_depts_int
                        if streets_location == 21:
                            cinfo["street_0x21"] += check_depts_int
                        if streets_location == 22:
                            cinfo["street_0x22"] += check_depts_int
                        if streets_location == 23:
                            cinfo["street_0x23"] += check_depts_int
                        if streets_location == 24:
                            cinfo["street_0x24"] += check_depts_int
                        if streets_location == 25:
                            cinfo["street_0x25"] += check_depts_int
                        if streets_location == 26:
                            cinfo["street_0x26"] += check_depts_int
                        if streets_location == 27:
                            cinfo["street_0x27"] += check_depts_int
                        if streets_location == 28:
                            cinfo["street_0x28"] += check_depts_int
                        if streets_location == 29:
                            cinfo["street_0x29"] += check_depts_int
                        if streets_location == 30:
                            cinfo["street_0x30"] += check_depts_int
                        if streets_location == 31:
                            cinfo["street_0x3"] += check_depts_int
                        if streets_location == 31:
                            cinfo["street_0x32"] += check_depts_int
                        if streets_location == 32:
                            cinfo["street_0x33"] += check_depts_int
                        if streets_location == 33:
                            cinfo["street_0x34"] += check_depts_int
                        if streets_location == 34:
                            cinfo["street_0x35"] += check_depts_int
                        if streets_location == 35:
                            cinfo["street_0x36"] += check_depts_int
                        if streets_location == 36:
                            cinfo["street_0x37"] += check_depts_int
                        if streets_location == 37:
                            cinfo["street_0x38"] += check_depts_int
                        if streets_location == 38:
                            cinfo["street_0x39"] += check_depts_int
                        if streets_location == 39:
                            cinfo["street_0x40"] += check_depts_int
                    fileIO("global/info.json".format(), "save", cinfo)
                    print("Safe CINFO")
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    await ctx.send(f'PAID...\n\nYour BOCO {check_depts_int} Balance\n+ USE COMMAND {Prefix}pay to PAY the RENT!!!')
                    await _check_Dice_roll(ctx)
                fileIO("players/{}/info.json".format(author.id), "save", info)
    else:
        print("Nothing to PAY no Depts")
        await _check_Dice_roll(ctx)
        return
async def _check_Dice_roll(ctx):  # #await _check_Dice_roll(ctx)
    channel = ctx.channel
    author = ctx.author
    message = ctx.message
    member = message.author
    guild = ctx.guild
    print("_check_Dice_roll")
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        infofirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
    streets_location = info["streets_location"]                         #   int
    streets_location_old_roll = info["streets_location_old_roll"]       #   str
    streets_check_pair = info["streets_check_pair"]                     #   int
    check_prison = info["streets_check_prison"]                         #   bol
    cinfo = fileIO("global/info.json".format(author.id), "load")
    streets_pot = cinfo["streets_pot"]
    print("streets_location")
    print(streets_location)
    print("streets_location_old_roll")
    print(streets_location_old_roll)
    print("streets_check_pair")
    print(streets_check_pair)
    print("check_prison")
    print(check_prison)
    print("[][][][][][][x][][]")
    print("[][][x][][][][][][]")
    print("[][][][x][][][][][]")
    print("[][][][][x][][][][]")
    print("[][][][x][][][][][]")
    print("[][][][][][][x][][]")
    try:
        freecandy = info["bpfreecandy"]
    except:
        freecandy = 0
    num = 0
    #rollrandom = ran
    high = freecandy + 3
    low = 1
    maxran = freecandy + high
    if high > 6 :
        high = 6
    random_1 = random.randint(low, high)
    random_2 = random.randint(low, maxran)
    valTogeter = random_1 + random_2 + streets_location
    moves = random_1 + random_2
    if valTogeter > 40 :
        valTogeter = valTogeter - 40
        print("over 0x0 x2")
    if valTogeter == 40 :
        valTogeter = valTogeter - 40
        boco = info["boco"] * 4
        info["boco"] = boco
        print("ON 0x0 x4")
    channel_0_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_action_0x0')
    channel_1_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x1')
    channel_2_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x2')
    channel_3_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x3')
    channel_4_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x4')
    channel_5_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x5')
    channel_6_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x6')
    channel_7_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x7')
    channel_8_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x8')
    channel_9_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x9')
    channel_10_chat = discord.utils.get(ctx.guild.channels, name='prison_0x10')
    channel_11_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x11')
    channel_12_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x12')
    channel_13_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x13')
    channel_14_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x14')
    channel_15_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x15')
    channel_16_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x16')
    channel_17_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x17')
    channel_18_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x18')
    channel_19_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x19')
    channel_20_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x20')
    channel_21_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x21')
    channel_22_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x22')
    channel_23_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x23')
    channel_24_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x24')
    channel_25_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x25')
    channel_26_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x26')
    channel_27_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x27')
    channel_28_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x28')
    channel_29_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x29')
    channel_30_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x30')
    channel_31_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x31')
    channel_32_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x32')
    channel_33_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x33')
    channel_34_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x34')
    channel_35_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x35')
    channel_36_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x36')
    channel_37_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x37')
    channel_38_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x38')
    channel_39_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_0x39')
    channel_40_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_Winners')
    channel_41_chat = discord.utils.get(ctx.guild.channels, name='bp0x0street_Losers')
    await ctx.send(f'You Roll {random_1} and {random_2} and MOVE {moves} Streets')
    if random_1 == random_2 and check_prison == False: # Player Roll Pair
        print("Player Roll Pair")
        info["streets_check_pair"] += 1
        streets_check_pair = info["streets_check_pair"]
        #var = discord.utils.get(message.guild.roles, name = "Prison_Visitor")
        #await member.add_roles(var) # adds the role
        #await var.edit(color=0xae2383, reason="3x Roll a Pair")
        #info["streets_location"] = int(10)
        #streets_location_old_roll = "Prisoner"
        #info["streets_location_old_roll"] = streets_location_old_roll
        #info["streets_check_pair"] = 0
        #streets_check_pair = 0
        #info["streets_check_prison"] = False
        #new_location_num = Prison_Visitor
        await ctx.send(f'Becarful 3x Roll a Pair and you will Land in Jail!! Roll Pair nr.{streets_check_pair}')
    if random_1 == random_2 and check_prison == True: # Prisenor Roll Pair
        print("if random_1 == random_2 and check_prison == True:   Prisenor Roll Pair")
        info["streets_check_pair"] = 0
        streets_check_pair = 0
        var = discord.utils.get(message.guild.roles, name = "Prison_Visitor")
        await member.add_roles(var) # adds the role
        await var.edit(color=0xae2383, reason="1x Roll a Pair")
        info["streets_location"] = int(10)
        streets_location = int(10)
        streets_location_old_roll = "Prison_Visitor"
        #info["streets_check_pair"] = 0
        streets_check_pair = 0
        info["streets_check_prison"] = False
        role_Prisoner = discord.utils.get(ctx.author.guild.roles, name="Prisoner")
        await member.remove_roles(role_Prisoner)
        #new_location_num = Prison_Visitor
        await ctx.send(f'See yaa! Roll Pair Prisoner muahahah')
        fileIO("players/{}/info.json".format(author.id), "save", info)
        return _check_Dice_roll
    if streets_check_pair > 2 and check_prison == False:  # Player roll x3 pair
        print("if streets_check_pair > 2 and check_prison == True:     Player roll x3 pair")
        streets_location = info["streets_location"]
        streets_location_old_roll = info["streets_location_old_roll"]
        streets_check_pair = info["streets_check_pair"]
        check_prison = True
        info["streets_check_prison"] = True
        try:
            var = discord.utils.get(message.guild.roles, name = "Prisoner")
            try:
                print("Prison_Visitor   Prisoner   12123")
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae2383, reason="3x Roll a Pair")
                info["streets_location"] = int(10)
                streets_location = int(10)
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = True
                streets_location_old_roll = info["streets_location_old_roll"]
                role_Prison_Visitor = discord.utils.get(ctx.author.guild.roles, name=streets_location_old_roll)
                await member.remove_roles(role_Prison_Visitor)
                try:
                    role = discord.utils.get(ctx.author.guild.roles, name=streets_location_old_roll)
                    await member.remove_roles(role)
                except:
                    print("No Edit BP0x0street_Travler_0x1")
                #return
            except:
                print("No Edit BP0x0street_Action_0x0  PrisonerPrisonerPrisoner")
        except:
            print("No BP0x0street_Action_0x0")
    streets_location = int(valTogeter)
    new_location_num = int(valTogeter)
    info["streets_location"] = int(valTogeter)
    streets_location_numNum = int(valTogeter)
    channel_id = channel.id
    channel_name = channel.name
    if channel_name == "bp0x0street_action_0x0" and check_prison == False:
        old_roll = "BP0x0street_Action_0x0"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x0")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xaafff1, reason="x Roll")
                info["streets_location"] = int(0)
                print("give Roll 0x0")
                streets_location_old_roll = "BP0x0street_Action_0x0"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit bp0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if channel_name == "bp0x0street_0x1" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x1"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x1")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x11ff11, reason="x Roll")
                info["streets_location"] = int(1)
                role = discord.utils.get(ctx.author.guild.roles, name=streets_location_old_roll)
                await member.remove_roles(role)
                streets_location_old_roll = "BP0x0street_Travler_0x1"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x1")
        except:
            print("No BP0x0street_Travler_0x1")
    if channel_name == "bp0x0street_0x2" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x2"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x2")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x11f111, reason="x Roll")
                info["streets_location"] = int(2)
                streets_location_old_roll = "BP0x0street_Travler_0x2"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x2")
        except:
            print("No BP0x0street_Travler_0x2")
    if channel_name == "bp0x0street_0x3" and check_prison == False:
        old_roll = "BP0x0street_Action_0x3"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x3")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xee1111, reason="x Roll")
                info["streets_location"] = int(3)
                streets_location_old_roll = "BP0x0street_Action_0x3"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Action_0x3")
        except:
            print("No BP0x0street_Action_0x3")
    if channel_name == "bp0x0street_0x4" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x4"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x221111, reason="x Roll")
                info["streets_location"] = int(4)
                streets_location_old_roll = "BP0x0street_Travler_0x4"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x4")
        except:
            print("No BP0x0street_Travler_0x4")
    if channel_name == "bp0x0street_0x5" and check_prison == False:
        old_roll = "Station_1x4"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_1x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbb1121, reason="x Roll")
                info["streets_location"] = int(5)
                streets_location_old_roll = "Station_1x4"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if channel_name == "bp0x0street_0x6" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x6"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x6")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x222121, reason="x Roll")
                info["streets_location"] = int(6)
                streets_location_old_roll = "BP0x0street_Travler_0x6"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x6")
        except:
            print("No BP0x0street_Travler_0x6")
    if channel_name == "bp0x0street_0x7" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x7"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x7")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x222525, reason="x Roll")
                info["streets_location"] = int(7)
                streets_location_old_roll = "BP0x0street_Travler_0x7"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x7")
        except:
            print("No BP0x0street_Travler_0x7")
    if channel_name == "bp0x0street_0x8" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x8"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x8")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x332121, reason="x Roll")
                info["streets_location"] = int(8)
                streets_location_old_roll = "BP0x0street_Travler_0x8"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x8")
        except:
            print("No BP0x0street_Travler_0x8")
    if channel_name == "bp0x0street_0x9" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x9"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x9")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x332133, reason="x Roll")
                info["streets_location"] = int(9)
                streets_location_old_roll = "BP0x0street_Travler_0x9"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x9")
        except:
            print("No BP0x0street_Action_0x0")
    if channel_name == "prison_0x10" :
        if check_prison == True:  # Is Prisenor
            print("check_prison == True")
            old_roll = "Prisoner"
            high = 6
            low = 1
            maxran = freecandy + high
            #random_1 = random.randint(low, maxran)
            #random_2 = random.randint(low, maxran)
            channel_Prisonen_chat = discord.utils.get(ctx.guild.channels, name='prison_0x10')
            if random_1 == random_2 :
                print("True:  # Is Prisenor AGAIN PAIR")
                info["streets_check_pair"] = 0
                await channel_Prisonen_chat.send(f'You are Free to go FOR now!! Roll Pair nr.{streets_check_pair} Good luck....')
                info["streets_location"] = int(10)
                #streets_location_old_roll = "Prison_Visitor"
                #info["streets_check_prison"] = False
                old_roll = "Prison_Visitor"
                try:
                    var = discord.utils.get(message.guild.roles, name = "Prison_Visitor")
                    try:
                        await member.add_roles(var) # adds the role
                        await var.edit(color=0xaeffff, reason="3x Roll a Pair")
                        info["streets_location"] = int(10)
                        streets_location_old_roll = "Prison_Visitor"
                        info["streets_check_pair"] = 0
                        info["streets_check_prison"] = False
                    except:
                        print("No Edit Prison_Visitor")
                except:
                    await channel_Prisonen_chat.send(f'Demn You Roll {random_1} and {random_2} BUT the Guard do not Know about your Luck and DO NOT LET YOU GO!.>.?.try Harder...Error on Giving Prison_Visitor Roll! @bobocoin#2774')
            else:
                print("True:  # Is Prisenor AGAIN NO PAIR")
                await channel_Prisonen_chat.send(f'You Roll {random_1} and {random_2} more Luck next time')
                try:
                    var = discord.utils.get(message.guild.roles, name = "Prisoner")
                    try:
                        await member.add_roles(var) # adds the role
                        await var.edit(color=0xae2383, reason="x Roll")
                        info["streets_location"] = int(10)
                        streets_location_old_roll = "Prisoner"
                        info["streets_check_pair"] = streets_check_pair
                        info["streets_check_prison"] = True
                    except:
                        print("No Edit Prisoner No Luck")
                except:
                    print("No Prisoner No Luck")
        if check_prison == False:  # Prison_Visitor
            print("False:  # Is Prisenor AGAIN Is Prisenor soooo is NOT Prisenor")
            #old_roll = "Prison_Visitor"
            high = 6
            low = 1
            maxran = freecandy + high
            #random_1 = random.randint(low, maxran)
            #random_2 = random.randint(low, maxran)
            channel_Prisonen_chat = discord.utils.get(ctx.guild.channels, name='prison_0x10')
            old_roll = "Prison_Visitor"
            try:
                var = discord.utils.get(message.guild.roles, name = "Prison_Visitor")
                try:
                    await member.add_roles(var) # adds the role
                    await var.edit(color=0xaeffff, reason="x Roll")
                    info["streets_location"] = int(10)
                    streets_location_old_roll = "Prison_Visitor"
                    info["streets_check_pair"] = streets_check_pair
                    info["streets_check_prison"] = False
                except:
                    print("No Edit Prison_Visitor")
            except:
                print("No Prison_Visitor")
        print("True:  # Is Prisenor ")
        streets_location = int(valTogeter)
        new_location_num = int(valTogeter)
        info["streets_location"] = int(valTogeter)
        streets_location_numNum = int(valTogeter)
    if channel_name == "bp0x0street_0x11" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x11"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x11")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x442373, reason="x Roll")
                info["streets_location"] = int(11)
                streets_location_old_roll = "BP0x0street_Travler_0x11"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x11")
        except:
            print("No BP0x0street_Travler_0x11")
    if channel_name == "bp0x0street_0x12" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x12"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x12")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x443263, reason="x Roll")
                info["streets_location"] = int(12)
                streets_location_old_roll = "BP0x0street_Travler_0x12"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x12")
        except:
            print("No BP0x0street_Travler_0x12")
    if channel_name == "bp0x0street_0x13" and check_prison == False:
        old_roll = "BP0x0street_Action_0x13"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x13")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae3253, reason="x Roll")
                info["streets_location"] = int(13)
                streets_location_old_roll = "BP0x0street_Action_0x13"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Action_0x13")
        except:
            print("No BP0x0street_Action_0x13")
    if channel_name == "bp0x0street_0x14" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x14"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x14")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x553233, reason="x Roll")
                info["streets_location"] = int(14)
                streets_location_old_roll = "BP0x0street_Travler_0x14"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_0x14")
        except:
            print("No BP0x0street_0x14")
    if channel_name == "bp0x0street_0x15" and check_prison == False:
        old_roll = "Station_2x4"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_2x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbb3223, reason="x Roll")
                info["streets_location"] = int(15)
                streets_location_old_roll = "Station_2x4"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit Station_2x4")
        except:
            print("No Station_2x4")
    if channel_name == "bp0x0street_0x16" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x16"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x16")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x555253, reason="x Roll")
                info["streets_location"] = int(16)
                streets_location_old_roll = "BP0x0street_Travler_0x16"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x16")
        except:
            print("No BP0x0street_Travler_0x16")
    if channel_name == "bp0x0street_0x17" and check_prison == False:
        old_roll = "BP0x0street_Action_0x17"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x17")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae5353, reason="x Roll")
                info["streets_location"] = int(17)
                streets_location_old_roll = "BP0x0street_Action_0x17"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Action_0x17")
        except:
            print("No BP0x0street_Action_0x17")
    if channel_name == "bp0x0street_0x18" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x18"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x18")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x555453, reason="x Roll")
                info["streets_location"] = int(18)
                streets_location_old_roll = "BP0x0street_Travler_0x18"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x18")
        except:
            print("No BP0x0street_Travler_0x18")
    if channel_name == "bp0x0street_0x19" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x19"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x19")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x555553, reason="x Roll")
                info["streets_location"] = int(19)
                streets_location_old_roll = "BP0x0street_Travler_0x19"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x19")
        except:
            print("No BP0x0street_Travler_0x19")
    if channel_name == "bp0x0street_0x20" and check_prison == False:
        old_roll = "BP0x0street_JackPot_0x20"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_JackPot_0x20")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae9693, reason="x Roll")
                info["streets_location"] = int(20)
                streets_location_old_roll = "BP0x0street_JackPot_0x20"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_JackPot_0x20")
        except:
            print("No BP0x0street_JackPot_0x20")
    if channel_name == "bp0x0street_0x21" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x21"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x21")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x669593, reason="x Roll")
                info["streets_location"] = int(21)
                streets_location_old_roll = "BP0x0street_Travler_0x21"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x21")
        except:
            print("No BP0x0street_Travler_0x21")
    if channel_name == "bp0x0street_0x22" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x22"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x22")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x669493, reason="x Roll")
                info["streets_location"] = int(22)
                streets_location_old_roll = "BP0x0street_Travler_0x22"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x22")
        except:
            print("No BP0x0street_Action_0x22")
    if channel_name == "bp0x0street_0x23" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x23"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x23")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x779393, reason="x Roll")
                info["streets_location"] = int(23)
                streets_location_old_roll = "BP0x0street_Travler_0x23"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x23")
        except:
            print("No BP0x0street_Action_0x23")
    if channel_name == "bp0x0street_0x24" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x24"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x24")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x779293, reason="x Roll")
                info["streets_location"] = int(24)
                streets_location_old_roll = "BP0x0street_Travler_0x24"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x24")
        except:
            print("No BP0x0street_Travler_0x24")
    if channel_name == "bp0x0street_0x25" and check_prison == False:
        old_roll = "Station_3x4"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_3x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbb9193, reason="x Roll")
                info["streets_location"] = int(25)
                streets_location_old_roll = "Station_3x4"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit Station_3x4")
        except:
            print("No Station_3x4")
    if channel_name == "bp0x0street_0x26" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x26"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x26")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x77b1c1, reason="x Roll")
                info["streets_location"] = int(26)
                streets_location_old_roll = "BP0x0street_Travler_0x26"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x26")
        except:
            print("No BP0x0street_Travler_0x26")
    if channel_name == "bp0x0street_0x27" and check_prison == False:
        old_roll = "BP0x0street_Action_0x27"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x27")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xaeb2c2, reason="x Roll")
                info["streets_location"] = int(27)
                streets_location_old_roll = "BP0x0street_Action_0x27"
                info["streets_check_pair"] = 3
                info["streets_check_prison"] = True
            except:
                print("No Edit BP0x0street_Action_0x27")
        except:
            print("No BP0x0street_Action_0x27")
    if channel_name == "bp0x0street_0x28" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x28"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x28")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x88b3c3, reason="x Roll")
                info["streets_location"] = int(28)
                streets_location_old_roll = "BP0x0street_Travler_0x28"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x28")
        except:
            print("No BP0x0street_Travler_0x28")
    if channel_name == "bp0x0street_0x29" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x29"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x29")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x88b4c4, reason="x Roll")
                info["streets_location"] = int(29)
                streets_location_old_roll = "BP0x0street_Travler_0x29"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x29")
        except:
            print("No BP0x0street_Travler_0x29")
    if channel_name == "bp0x0street_0x30" and check_prison == False:
        old_roll = "BP0x0street_Doom_0x30"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Doom_0x30")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xaeb5c5, reason="x Roll")
                info["streets_location"] = int(30)
                streets_location_old_roll = "BP0x0street_Doom_0x30"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Doom_0x30")
        except:
            print("No BP0x0street_Doom_0x30")
    if channel_name == "bp0x0street_0x31" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x31"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x31")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x9956c6, reason="x Roll")
                info["streets_location"] = int(31)
                streets_location_old_roll = "BP0x0street_Travler_0x31"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = True
            except:
                print("No Edit BP0x0street_Travler_0x31")
        except:
            print("No BP0x0street_Travler_0x31")
    if channel_name == "bp0x0street_0x32" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x32"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x32")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x9946c6, reason="x Roll")
                info["streets_location"] = int(32)
                streets_location_old_roll = "BP0x0street_Travler_0x32"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x32")
        except:
            print("No BP0x0street_Travler_0x32")
    if channel_name == "bp0x0street_0x33" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x33"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x33")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x9936c6, reason="x Roll")
                info["streets_location"] = int(33)
                streets_location_old_roll = "BP0x0street_Travler_0x33"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x33")
        except:
            print("No BP0x0street_Travler_0x33")
    if channel_name == "bp0x0street_0x34" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x34"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x34")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xddb6c6, reason="x Roll")
                info["streets_location"] = int(34)
                streets_location_old_roll = "BP0x0street_Travler_0x34"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x34")
        except:
            print("No BP0x0street_Travler_0x34")
    if channel_name == "bp0x0street_0x35" and check_prison == False:
        old_roll = "Station_4x4"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_4x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbbb6c6, reason="x Roll")
                info["streets_location"] = int(35)
                streets_location_old_roll = "Station_4x4"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit Station_4x4")
        except:
            print("No Station_4x4")
    if channel_name == "bp0x0street_0x36" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x36"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x36")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xddb5c5, reason="x Roll")
                info["streets_location"] = int(36)
                streets_location_old_roll = "BP0x0street_Travler_0x36"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x36")
        except:
            print("No BP0x0street_Travler_0x36")
    if channel_name == "bp0x0street_0x37" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x37"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x37")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xddb4c4, reason="x Roll")
                info["streets_location"] = int(37)
                streets_location_old_roll = "BP0x0street_Travler_0x37"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x37")
        except:
            print("No BP0x0street_Travler_0x37")
    if channel_name == "bp0x0street_0x38" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x38"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x38")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb6c6, reason="x Roll")
                info["streets_location"] = int(38)
                streets_location_old_roll = "BP0x0street_Travler_0x38"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x38")
        except:
            print("No BP0x0street_Travler_0x38")
    if channel_name == "bp0x0street_0x39" and check_prison == False:
        old_roll = "BP0x0street_Travler_0x39"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x39")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb3c6, reason="x Roll")
                info["streets_location"] = int(39)
                streets_location_old_roll = "BP0x0street_Travler_0x39"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit BP0x0street_Travler_0x39")
        except:
            print("No BP0x0street_Travler_0x39")
    if channel_name == "bp0x0street_winners" :
        old_roll = "Winner"
        try:
            var = discord.utils.get(message.guild.roles, name = "Winner")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb3c6, reason="Roll Winner")
                info["streets_location"] = int(40)
                streets_location_old_roll = "Winner"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = False
            except:
                print("No Edit Winner")
        except:
            print("No BP0x0street_Action_0x0")
    if channel_name == "bp0x0street_losers" :
        old_roll = "Loser"
        try:
            var = discord.utils.get(message.guild.roles, name = "Loser")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb3c6, reason="Roll Loser")
                info["streets_location"] = int(41)
                streets_location_old_roll = "Loser"
                info["streets_check_pair"] = streets_check_pair
                info["streets_check_prison"] = True
            except:
                print("No Edit Loser")
        except:
            print("No Loser")
    old_roll = streets_location_old_roll
    if old_roll == "BP0x0street_Action_0x0":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Action_0x0")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x1":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x1")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x2":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x2")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x3":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Action_0x3")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x4":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x4")
        await member.remove_roles(role)
    if old_roll == "Station_1x4":
        role = discord.utils.get(ctx.author.guild.roles, name="Station_1x4")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x6":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x6")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x7":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x7")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x8":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x8")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x9":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x9")
        await member.remove_roles(role)
    if old_roll == "Prisoner":
        role = discord.utils.get(ctx.author.guild.roles, name="Prisoner")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x11":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x11")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x12":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x12")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Action_0x13":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Action_0x13")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x14":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x14")
        await member.remove_roles(role)
    if old_roll == "Station_2x4":
        role = discord.utils.get(ctx.author.guild.roles, name="Station_2x4")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x16":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x16")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Action_0x17":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Action_0x17")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x18":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x18")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x19":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x19")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_JackPot_0x20":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_JackPot_0x20")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x21":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x21")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x22":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x22")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x23":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x23")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x24":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x24")
        await member.remove_roles(role)
    if old_roll == "Station_3x4":
        role = discord.utils.get(ctx.author.guild.roles, name="Station_3x4")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x26":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x26")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Action_0x27":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Action_0x27")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x28":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x28")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x29":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x29")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Doom_0x30":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Doom_0x30")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x31":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x31")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x32":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x32")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x33":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x33")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x34":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x34")
        await member.remove_roles(role)
    if old_roll == "Station_4x4":
        role = discord.utils.get(ctx.author.guild.roles, name="Station_4x4")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x36":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x36")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x37":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x37")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x38":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x38")
        await member.remove_roles(role)
    if old_roll == "BP0x0street_Travler_0x39":
        role = discord.utils.get(ctx.author.guild.roles, name="BP0x0street_Travler_0x39")
        await member.remove_roles(role)
    if old_roll == "Winner":
        role = discord.utils.get(ctx.author.guild.roles, name="Winner")
        await member.remove_roles(role)
    if old_roll == "Loser":
        role = discord.utils.get(ctx.author.guild.roles, name="Loser")
        await member.remove_roles(role)
    ###
    if check_prison == True:
        new_location = 10
    else:
        new_location = streets_location_numNum
    roleoo = discord.utils.get(ctx.author.guild.roles, name=streets_location_old_roll)
    await member.remove_roles(roleoo)
    if new_location == 0:
        one_location = "BP0x0street_0x0"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x0")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xaafff1, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 1:
        one_location = "BP0x0street_0x1"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x1")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x11ff11, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 2:
        one_location = "BP0x0street_0x2"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x2")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x11f111, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 3:
        one_location = "BP0x0street_0x3"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x3")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xee1111, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 4:
        one_location = "BP0x0street_0x4"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x221111, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 5:
        one_location = "BP0x0street_0x5_Station_1/4"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_1x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbb1121, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 6:
        one_location = "BP0x0street_0x6"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x6")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x222121, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 7:
        one_location = "BP0x0street_0x7"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x7")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x222525, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 8:
        one_location = "BP0x0street_0x8"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x8")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x332121, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 9:
        one_location = "BP0x0street_0x9"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x9")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x332133, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 10:
        one_location = "prison_0x10"
        try:
            var = discord.utils.get(message.guild.roles, name = "Prisoner")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae2383, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 11:
        one_location = "BP0x0street_Travler_0x11"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x11")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x442373, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 12:
        one_location = "BP0x0street_0x12"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x12")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x443263, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 13:
        one_location = "BP0x0street_0x13"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x13")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae3253, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 14:
        one_location = "BP0x0street_0x14"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x14")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x553233, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 15:
        one_location = "BP0x0street_0x15"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_2x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbb3223, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 16:
        one_location = "BP0x0street_0x16"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x16")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x555253, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 17:
        one_location = "BP0x0street_0x17"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x17")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae5353, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 18:
        one_location = "BP0x0street_0x18"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x18")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x555453, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 19:
        one_location = "BP0x0street_0x19"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x19")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x555553, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 20:
        one_location = "BP0x0street_0x20"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_JackPot_0x20")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xae9693, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 21:
        one_location = "BP0x0street_0x21"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x21")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x669593, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 22:
        one_location = "BP0x0street_0x22"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x22")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x669493, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 23:
        one_location = "BP0x0street_0x23"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x23")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x779393, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 24:
        one_location = "BP0x0street_0x24"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x24")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x779293, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 25:
        one_location = "BP0x0street_0x25_Station_3/4"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_3x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbb9193, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 26:
        one_location = "BP0x0street_0x26"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x26")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x77b1c1, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 27:
        one_location = "BP0x0street_0x27"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Action_0x27")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xaeb2c2, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 28:
        one_location = "BP0x0street_0x28"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x28")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x88b3c3, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 29:
        one_location = "BP0x0street_0x29"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x29")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x88b4c4, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 30:
        one_location = "BP0x0street_0x30"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Doom_0x30")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xaeb5c5, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 31:
        one_location = "BP0x0street_0x31"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x31")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x9956c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 32:
        one_location = "BP0x0street_0x32"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x32")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x9946c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 33:
        one_location = "BP0x0street_0x33"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x33")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0x9936c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 34:
        one_location = "BP0x0street_0x34"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x34")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xddb6c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 35:
        one_location = "BP0x0street_0x35"
        try:
            var = discord.utils.get(message.guild.roles, name = "Station_4x4")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xbbb6c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 36:
        one_location = "BP0x0street_0x36"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x36")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xddb5c5, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 37:
        one_location = "BP0x0street_0x37"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x37")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xddb4c4, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 38:
        one_location = "BP0x0street_0x38"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x38")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb6c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 39:
        one_location = "BP0x0street_0x39"
        try:
            var = discord.utils.get(message.guild.roles, name = "BP0x0street_Travler_0x39")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb3c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 40:
        one_location = "BP0x0street_0x40"
        try:
            var = discord.utils.get(message.guild.roles, name = "Winner")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb3c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    if new_location == 41:
        one_location = "BP0x0street_0x40"
        try:
            var = discord.utils.get(message.guild.roles, name = "Loser")
            try:
                await member.add_roles(var) # adds the role
                await var.edit(color=0xccb3c6, reason="BP0x0street_Action_0x0")
            except:
                print("No Edit BP0x0street_Action_0x0")
        except:
            print("No BP0x0street_Action_0x0")
    info["status"] = "Street_Star_0x0"
    #info["streets_location"] = new_location
    streets_location = new_location_num
    if new_location == 0:
        await channel_0_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 1:
        await channel_1_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 2:
        await channel_2_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 3:
        await channel_3_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 4:
        await channel_4_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 5:
        await channel_5_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 6:
        await channel_6_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 7:
        await channel_7_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 8:
        await channel_8_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 9:
        await channel_9_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 10:
        await channel_10_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 11:
        await channel_11_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 12:
        await channel_12_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 13:
        await channel_13_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 14:
        await channel_14_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 15:
        await channel_15_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 16:
        await channel_16_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 17:
        await channel_17_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 18:
        await channel_18_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 19:
        await channel_19_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 20:
        await channel_20_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 21:
        await channel_21_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 22:
        await channel_22_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 23:
        await channel_23_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 24:
        await channel_24_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 25:
        await channel_25_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 26:
        await channel_26_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 27:
        await channel_27_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 28:
        await channel_28_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 29:
        await channel_29_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 30:
        await channel_30_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 31:
        await channel_31_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 32:
        await channel_32_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 33:
        await channel_33_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 34:
        await channel_34_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 35:
        await channel_35_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 36:
        await channel_36_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 37:
        await channel_37_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 38:
        await channel_38_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 39:
        await channel_39_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    if new_location == 40:
        await channel_40_chat.send(f" You land on {one_location} Streets BOCO {streets_pot} Balance \n {Prefix}pay >>> {Prefix}roll >>>#BP0x0")
    info["streets_location_old_roll"] = streets_location_old_roll
    info["streets_location"] = streets_location               #   int
    info["streets_location_old_roll"] = streets_location_old_roll      #   str
    info["streets_check_pair"] = streets_check_pair                    #   int
    info["streets_check_prison"] = check_prison                        #   bol
    print("streets_location")
    print(streets_location)
    print("streets_location_old_roll")
    print(streets_location_old_roll)
    print("streets_check_pair")
    print(streets_check_pair)
    print("check_prison")
    print(check_prison)
    #await ctx.send(f" You land on {one_location} ")
    info["check_depts_bol"] = True
    fileIO("players/{}/info.json".format(author.id), "save", info)
async def _check_wallet(ctx):
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    if info["race"] and info["class"] == "None":
        infofirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
    if info["inhavenft_status"] == "True" :
        #em = discord.Embed(description="```diff\n+ Your Wallet is Set up Now Enjoy\n\n-  BP0x0-0 RPG BOT !info \n\n- USE COMMAND: \n !sync   Only to load your NFTS BP0x0-0-15 highest Feb22\n USE COMMAND: \n !code <NFT CODE or Templates ID>   to load your NFTS from WAX Cloud Wallet\n\n USE COMMAND : \n !help    for commands you can use in Game\n```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        #em = discord.Embed(description="```diff\n+ NEXT STEP!\n USE COMMAND !slot <SlotNR>\n to equipt an Item in a slot!```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        info["setwalletdone"] = 5
        if info["account_to_check"] == "OK" :
            print("somthing true in have status ENDE")
            await ctx.send("Done!  `{}help`\n\n+USE COMMAND `{}b` x4 and than \nEquipt a Tool with`{}slot <0-25>```".format(Prefix,Prefix,Prefix))
            return
        print("somthing true in have status")
        account = info["account"]
        info["bopiDict"]["account"] = account
        info["bpvDict"]["account"] = account
        info["goldDict"]["account"] = account
        info["bgoldDict"]["account"] = account
        info["wgoldDict"]["account"] = account
        info["bocoDict"]["account"] = account
        info["sciDict"]["account"] = account
        info["rocDict"]["account"] = account
        info["papDict"]["account"] = account
        info["stodDict"]["account"] = account
        info["metDict"]["account"] = account
        info["wooDict"]["account"] = account
        info["fooDict"]["account"] = account
        info["peoDict"]["account"] = account
        info["antDict"]["account"] = account
        info["deptDict"]["account"] = account
        info["keyDict"]["account"] = account
        info["waxDict"]["account"] = account
        info["pixelDict"]["account"] = account
        info["wojakDict"]["account"] = account
        #info["assets"] = assets
        #info["successCheck"] = success
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setNEWGame(ctx)
        em = discord.Embed(description="```diff\n+ Nice you have Wax Wallet!\n Checking if you own any BP0x0 NFT's and how many Token!\n Give me A Minute.\n This is a read-only connection. Do not share your private keys or at least if you know what you are doing! Verifing your assets...\n```".format(), color=discord.Color.green())
        await ctx.send(embed=em)
        account = info["account"]
        #account_to_check = info["account_to_check"]
        wallet = info["account_to_check"]
        #await _check_wallet0(ctx)
        #nameinfo["Wallets"]["Response"]["name_list"]["Names"] = wallet  bal
        #success = info["successCheck"]
        #assets = info["assets"]
        info["account_to_check"] = "OK"
        info["setwalletdone"] = 5
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await check_tokens(ctx)
        await _check_tokensCOLLAB(ctx)
        #em = discord.Embed(description="```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}\n```".format(author, account, assets, info["boco"], success), color=discord.Color.green())
        #await ctx.send(embed=em)
        #account = info["account"]
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account_to_check = info["account_to_check"]
        wallet = info["account_to_check"]
        assets = info["assets"]
        assetspixilminiwax = info["assetspixilminiwax"]
        assetspixellabs123 = info["assetspixellabs123"]
        assetshoodpunknfts = info["assetshoodpunknfts"]
        assetsROCK = info["assetsrock"]
        assetsSCISSOR = info["assetsscissor"]
        assetsPAPER = info["assetspaper"]
        assetsCOFFEE = info["assetscoffee"]
        assetsSPACE = info["assetsspace"]
        assetsmemberpass = info["assetsmemberpass"]
        assetspackage = info["assetspackage"]
        success = info["successCheck"]
        em = discord.Embed(description="```diff\n **Wallet:**\n+ {}\n\n+ BP0x0 NFTs {}\n+ Package NFTs {}\n\n **Cooperation **\n+ pixilminiwax NFTs {}\n+ pixellabs123 NFTs {}\n+ hoodpunknfts NFTs {}\n\n **Enemys**\n+ ROCK NFTs {}\n+ SCISSOR NFTs {}\n+ PAPER NFTs {}\n+ COFFEE NFTs {}\n+ SPACE NFTs {}\n ```\n Token Check: `{}` Done?\n Tokens you Have Are Shown!\n\n\n+ Use Command: `{}sync` Everytime your NFTS Amount Changes like SELL/BUY/DROP/BLEND assets!\n+ USE COMMAND: {}bpinv to See your other NFTS".format(account, assets,assetspackage,assetspixilminiwax,assetspixellabs123,assetshoodpunknfts,assetsROCK,assetsSCISSOR,assetsPAPER,assetsCOFFEE,assetsSPACE, success,Prefix,Prefix), color=discord.Color.green())
        await ctx.send(embed=em)
        #await _check_wallet(ctx)
        print(" #await _check_wallet0ffffffffffffffffffsetwallet!")
        #await _check_wallet0(ctx)
        #return await sync(ctx)
        return
        #await _check_wallet0(ctx)
        print("somthing true in have status   SAFE")
    else:
        try:
            info = fileIO("players/{}/info.json".format(author.id), "load")
            infofirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
            account = info["account_to_check"]
            account = infofirst["account_to_check"]
            print("accountbbbb")
            print(account)
            info["account_to_check"] = account
            infofirst["account_to_check"] = account
            print("infoaccount_to_checkbbbb")
            print(info["account_to_check"])
            #em = discord.Embed(description="```diff\n Sending your request...```".format(), color=discord.Color.blue())
            response11111 = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts/{}?collection_whitelist=bobopixeloxo'.format(account))
            response11111.json()
            data11111 = response11111.json()
            print(data11111)
            print("accountcccc")
            print(account)
            print("infoaccount_to_checkcccc")
            print(info["account_to_check"])
            print(infofirst["account_to_check"])
            success = data11111["success"]
            assets = data11111["data"]["assets"]
            boco = info["boco"]
            boco = infofirst["boco"]
            #setdone = info["setdone"]
            #em = discord.Embed(description="```diff\n Checking if you own any BP0x0 NFTs...```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em)
            #em1 = discord.Embed(description="```diff\n Verifing....```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em1)
            if int(assets) >= 0 :
                #em = discord.Embed(description="```diff\n Great you Have some BoboPixel0x0 NFTS!```".format(), color=discord.Color.blue())
                #await ctx.send(embed=em)
                #######
                #fileIO("players/{}/info.json".format(author.id), "save", info)
                walletinfo = fileIO("wallets/wallets.json".format(author.id), "load")
                walleto = walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"]
                wallet = account
                if wallet in walleto:
                    print("account in Walleto")
                    em = discord.Embed(description="```diff\n This Wallet Is In USE!\n Select a other Wallet!```".format(), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    #await sync(ctx)
                    #await _check_wallet(ctx)
                #try:
                    #await ctx.send(f'Checking Registration {account}! Please wait....')
                if wallet not in walleto:
                    print("account not in Walleto")
                    ainfo = fileIO("config/config.json", "load")
                    ainfo["totalwallets"] = ainfo["totalwallets"] +1
                    ainfo["regwallets"] = ainfo["regwallets"] +1
                    fileIO("config/config.json", "save", ainfo)
                    infofirst["info_member"] = 10
                    info["info_member"] = 10
                    #await ctx.send(f'Save {account}! Please wait....')
                    info["inhavenft_status"] = "True"
                    infofirst["inhavenft_status"] = "True"
                    infofirst["account"] = account
                    info["account"] = account
                    print("account")
                    print(account)
                    print("infoaccount_to_check")
                    print(infofirst["account_to_check"])
                    print("infoaccount_to_checkssssssssss")
                    infofirst["bopiDict"]["account"] = account
                    infofirst["goldDict"]["account"] = account
                    infofirst["bgoldDict"]["account"] = account
                    infofirst["wgoldDict"]["account"] = account
                    infofirst["bocoDict"]["account"] = account
                    infofirst["sciDict"]["account"] = account
                    infofirst["rocDict"]["account"] = account
                    infofirst["papDict"]["account"] = account
                    infofirst["stodDict"]["account"] = account
                    infofirst["metDict"]["account"] = account
                    infofirst["wooDict"]["account"] = account
                    infofirst["fooDict"]["account"] = account
                    infofirst["peoDict"]["account"] = account
                    infofirst["antDict"]["account"] = account
                    infofirst["deptDict"]["account"] = account
                    infofirst["keyDict"]["account"] = account
                    infofirst["waxDict"]["account"] = account
                    infofirst["pixelDict"]["account"] = account
                    infofirst["wojakDict"]["account"] = account
                    info["bopiDict"]["account"] = account
                    info["goldDict"]["account"] = account
                    info["bgoldDict"]["account"] = account
                    info["wgoldDict"]["account"] = account
                    info["bocoDict"]["account"] = account
                    info["sciDict"]["account"] = account
                    info["rocDict"]["account"] = account
                    info["papDict"]["account"] = account
                    info["stodDict"]["account"] = account
                    info["metDict"]["account"] = account
                    info["wooDict"]["account"] = account
                    info["fooDict"]["account"] = account
                    info["peoDict"]["account"] = account
                    info["antDict"]["account"] = account
                    info["deptDict"]["account"] = account
                    info["keyDict"]["account"] = account
                    info["waxDict"]["account"] = account
                    info["pixelDict"]["account"] = account
                    info["wojakDict"]["account"] = account
                    info["assets"] = assets
                    info["successCheck"] = success
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", infofirst)
                    #await _check_setCalcDroptoTotal(ctx)
                    #await _check_totalshow(ctx)
                    #await _check_setWalleton(ctx)
                    await _check_setWalleton(ctx)
                    #info = fileIO("config/config.json", "load")
                    walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"].append(account)
                    fileIO("wallets/wallets.json", "save", walletinfo)
                    await _check_wallet(ctx)
                     #await _check_wallet0gggggggggggggggggggggggggggggg
                    return
                else:
                    await ctx.send("This Wallet is Registered! DM @bobocoin#2774 or check your splling.")
                    infofirst["account"] = "None"
                    infofirst["setdone"] = 0
                    infofirst["WalletSetupDone"] = 0
                    infofirst["account_to_check"] = "None"
                    #info["inhavenft_status"] = "False"
                    #info["boco"] =
                    fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", infofirst)
                    return
                #except IndexError:
                #    print("indexError")
                #######
                return await sync(ctx)
            elif int(assets) <= 0 :
                embed.description = "You DONT have any BP0x0-0 NFTs for RPG Discord Bot Recoment Playing with NFTs of Real Ownership! [AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)**You will need at least ONE NFT of BurningNumbers."
                await ctx.send(embed=embed)
                return
        except FileNotFoundError:
            print("File Not Found Wallet")
            #await ctx.send("USE COMMAND !start first!")
            return
        except IndexError:
            em1 = discord.Embed(description="```diff\n+ We got Results...!\n\n- And it looks like you do not have any BP0x0 NFT's! or The Internet lost the package? \n USE COMMAND {}setwallet <wallet address> \n\n example {}setwallet bn1qw.wam\n\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(Prefix, Prefix), color=discord.Color.red())
            await ctx.send(embed=em1)
            em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
            await ctx.send(embed=em)
            return
    #
    if infofirst["inhavenft_status"] == "True" :
        #em = discord.Embed(description="```diff\n+ Your Wallet is Set up Now Enjoy\n\n-  BP0x0-0 RPG BOT !info \n\n- USE COMMAND: \n !sync   Only to load your NFTS BP0x0-0-15 highest Feb22\n USE COMMAND: \n !code <NFT CODE or Templates ID>   to load your NFTS from WAX Cloud Wallet\n\n USE COMMAND : \n !help    for commands you can use in Game\n```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        #em = discord.Embed(description="```diff\n+ NEXT STEP!\n USE COMMAND !slot <SlotNR>\n to equipt an Item in a slot!```".format(), color=discord.Color.green())
        #await ctx.send(embed=em)
        if info["account_to_check"] == "OK" :
            print("somthing true in have status ENDE")
            await ctx.send("Done!  `{}help`\n\n+USE COMMAND `{}b` x4 and than \nEquipt a Tool with`{}slot <0-25>```".format(Prefix,Prefix,Prefix))
            return
        print("somthing true in have status")
        account = info["account"]
        info["bopiDict"]["account"] = account
        info["bpvDict"]["account"] = account
        info["goldDict"]["account"] = account
        info["bgoldDict"]["account"] = account
        info["wgoldDict"]["account"] = account
        info["bocoDict"]["account"] = account
        info["sciDict"]["account"] = account
        info["rocDict"]["account"] = account
        info["papDict"]["account"] = account
        info["stodDict"]["account"] = account
        info["metDict"]["account"] = account
        info["wooDict"]["account"] = account
        info["fooDict"]["account"] = account
        info["peoDict"]["account"] = account
        info["antDict"]["account"] = account
        info["deptDict"]["account"] = account
        info["keyDict"]["account"] = account
        info["waxDict"]["account"] = account
        info["pixelDict"]["account"] = account
        info["wojakDict"]["account"] = account
        #info["assets"] = assets
        #info["successCheck"] = success
        #fileIO("players/{}/info.json".format(author.id), "save", info)
        await _check_setNEWGame(ctx)
        em = discord.Embed(description="```diff\n+ Nice you have Wax Wallet!\n Checking if you own any BP0x0 NFT's and how many Token!\n Give me A Minute.\n This is a read-only connection. Do not share your private keys or at least if you know what you are doing! Verifing your assets...\n```".format(), color=discord.Color.green())
        await ctx.send(embed=em)
        account = info["account"]
        #account_to_check = info["account_to_check"]
        wallet = info["account_to_check"]
        #await _check_wallet0(ctx)
        #nameinfo["Wallets"]["Response"]["name_list"]["Names"] = wallet  bal
        #success = info["successCheck"]
        #assets = info["assets"]
        info["account_to_check"] = "OK"
        fileIO("players/{}/info.json".format(author.id), "save", info)
        await check_tokens(ctx)
        await _check_tokensCOLLAB(ctx)
        #em = discord.Embed(description="```diff\n+ {}'s NFTs!```\n1) Wallet: {}\n2) Total Assets: {}\n3) BoboCoins: {}\n4) Check: {}\n```".format(author, account, assets, info["boco"], success), color=discord.Color.green())
        #await ctx.send(embed=em)
        #account = info["account"]
        info = fileIO("players/{}/info.json".format(author.id), "load")
        account_to_check = info["account_to_check"]
        wallet = info["account_to_check"]
        assets = info["assets"]
        assetspixilminiwax = info["assetspixilminiwax"]
        assetspixellabs123 = info["assetspixellabs123"]
        assetshoodpunknfts = info["assetshoodpunknfts"]
        assetsROCK = info["assetsrock"]
        assetsSCISSOR = info["assetsscissor"]
        assetsPAPER = info["assetspaper"]
        assetsCOFFEE = info["assetscoffee"]
        assetsSPACE = info["assetsspace"]
        assetsmemberpass = info["assetsmemberpass"]
        assetspackage = info["assetspackage"]
        success = info["successCheck"]
        em = discord.Embed(description="```diff\n **Wallet:**\n+ {}\n\n+ BP0x0 NFTs {}\n+ Package NFTs {}\n\n **Cooperation **\n+ pixilminiwax NFTs {}\n+ pixellabs123 NFTs {}\n+ hoodpunknfts NFTs {}\n\n **Enemys**\n+ ROCK NFTs {}\n+ SCISSOR NFTs {}\n+ PAPER NFTs {}\n+ COFFEE NFTs {}\n+ SPACE NFTs {}\n ```\n Token Check: `{}` Done?\n Tokens you Have Are Shown!\n\n\n+ Use Command: `{}sync` Everytime your NFTS Amount Changes like SELL/BUY/DROP/BLEND assets!\n+ USE COMMAND: {}bpinv to See your other NFTS".format(account, assets,assetspackage,assetspixilminiwax,assetspixellabs123,assetshoodpunknfts,assetsROCK,assetsSCISSOR,assetsPAPER,assetsCOFFEE,assetsSPACE, success,Prefix,Prefix), color=discord.Color.green())
        await ctx.send(embed=em)
        #await _check_wallet(ctx)
        print(" #await _check_wallet0ffffffffffffffffffsetwallet!")
        #await _check_wallet0(ctx)
        #return await sync(ctx)
        return
        #await _check_wallet0(ctx)
        print("somthing true in have status   SAFE")
    else:
        try:
            account = info["account_to_check"]
            print("account")
            print(account)
            print("infoaccount_to_check")
            print(info["account_to_check"])
            #em = discord.Embed(description="```diff\n Sending your request...```".format(), color=discord.Color.blue())
            response11111 = requests.get('https://wax.api.atomicassets.io/atomicassets/v1/accounts/{}?collection_whitelist=bobopixeloxo'.format(account))
            response11111.json()
            data11111 = response11111.json()
            print(data11111)
            print("account")
            print(account)
            print("infoaccount_to_check")
            print(info["account_to_check"])
            success = data11111["success"]
            assets = data11111["data"]["assets"]
            boco = info["boco"]
            #setdone = info["setdone"]
            #em = discord.Embed(description="```diff\n Checking if you own any BP0x0 NFTs...```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em)
            #em1 = discord.Embed(description="```diff\n Verifing....```".format(), color=discord.Color.blue())
            #await ctx.send(embed=em1)
            if int(assets) >= 0 :
                #em = discord.Embed(description="```diff\n Great you Have some BoboPixel0x0 NFTS!```".format(), color=discord.Color.blue())
                #await ctx.send(embed=em)
                #######
                #fileIO("players/{}/info.json".format(author.id), "save", info)
                walletinfo = fileIO("wallets/wallets.json".format(author.id), "load")
                walleto = walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"]
                wallet = account
                if wallet in walleto:
                    print("account in Walleto")
                    em = discord.Embed(description="```diff\n This Wallet Is In USE!\n Select another Wallet!```".format(), color=discord.Color.blue())
                    await ctx.send(embed=em)
                    #await sync(ctx)
                    #await _check_wallet(ctx)
                #try:
                    #await ctx.send(f'Checking Registration {account}! Please wait....')
                if wallet not in walleto:
                    print("account not in Walleto")
                    ainfo = fileIO("config/config.json", "load")
                    ainfo["totalwallets"] = ainfo["totalwallets"] +1
                    ainfo["regwallets"] = ainfo["regwallets"] +1
                    fileIO("config/config.json", "save", ainfo)
                    info["info_member"] = 10
                    #await ctx.send(f'Save {account}! Please wait....')
                    info["inhavenft_status"] = "True"
                    info["account"] = account
                    print("account")
                    print(account)
                    print("infoaccount_to_check")
                    print(info["account_to_check"])
                    print("infoaccount_to_checkssssssssss")
                    info["bopiDict"]["account"] = account
                    info["goldDict"]["account"] = account
                    info["bgoldDict"]["account"] = account
                    info["wgoldDict"]["account"] = account
                    info["bocoDict"]["account"] = account
                    info["sciDict"]["account"] = account
                    info["rocDict"]["account"] = account
                    info["papDict"]["account"] = account
                    info["stodDict"]["account"] = account
                    info["metDict"]["account"] = account
                    info["wooDict"]["account"] = account
                    info["fooDict"]["account"] = account
                    info["peoDict"]["account"] = account
                    info["antDict"]["account"] = account
                    info["deptDict"]["account"] = account
                    info["keyDict"]["account"] = account
                    info["waxDict"]["account"] = account
                    info["pixelDict"]["account"] = account
                    info["wojakDict"]["account"] = account
                    info["assets"] = assets
                    info["successCheck"] = success
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    #await _check_setCalcDroptoTotal(ctx)
                    #await _check_totalshow(ctx)
                    #await _check_setWalleton(ctx)
                    await _check_setWalleton(ctx)
                    #info = fileIO("config/config.json", "load")
                    walletinfo["Wallets"]["Response"]["name_list"]["Wallets_list"].append(account)
                    fileIO("wallets/wallets.json", "save", walletinfo)
                    await _check_wallet(ctx)
                     #await _check_wallet0gggggggggggggggggggggggggggggg
                    return
                else:
                    await ctx.send("This Wallet is Registered! DM @bobocoin#2774 or check your splling.")
                    info["account"] = "None"
                    info["setdone"] = 0
                    info["WalletSetupDone"] = 0
                    info["account_to_check"] = "None"
                    #info["inhavenft_status"] = "False"
                    #info["boco"] =
                    fileIO("players/{}/info.json".format(author.id), "save", info)
                    return
                #except IndexError:
                #    print("indexError")
                #######
                return await sync(ctx)
            elif int(assets) <= 0 :
                embed.description = "You DONT have any BP0x0-0 NFTs for RPG Discord Bot Recoment Playing with NFTs of Real Ownership! [AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)**You will need at least ONE NFT of BurningNumbers."
                await ctx.send(embed=embed)
                return
        except FileNotFoundError:
            print("File Not Found Wallet")
            #await ctx.send("USE COMMAND !start first!")
            return
        except IndexError:
            em1 = discord.Embed(description="```diff\n+ We got Results...!\n\n- And it looks like you do not have any BP0x0 NFT's! or The Internet lost the package? \n USE COMMAND {}setwallet <wallet address> \n\n example {}setwallet bn1qw.wam\n\n+ BP0x0-0 RPG Discord Bot Recoment Playing with NFTs of Real Ownership!```".format(Prefix, Prefix), color=discord.Color.red())
            await ctx.send(embed=em1)
            em.description = "Please visit.[AtomicHub-Market](https://wax.atomichub.io/market?collection_name=bobopixeloxo&order=desc&sort=created&symbol=WAX)."
            await ctx.send(embed=em)
            return
async def _pick_class(ctx):
    author = ctx.author
    message = ctx.message
    info = fileIO("players/{}/info.json".format(author.id), "load")
    info["exp"] = info["exp"] + 1
    await ctx.send("<@{}> Great!\n May I ask what Class you want?\n`Choose one of the following`\n(1) Archer\n(2) Paladin\n(3) Mage\n(4) Thief\n+-\n-+\n++\n--\n".format(author.id))
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer2 = await bot.wait_for("message", check=pred)
    values2 = ["archer", "Archer", "paladin", "Paladin", "mage", "Mage", "thief", "Thief", "1", "2", "3", "4", "5", "Hacker", "hacker","10", "PixelMinis", "pixelminis", "{}start".format(Prefix)]
    if str(answer2.content) in values2:
        #if answer2 == "{}start".format(Prefix):
        #    return
        print("answer2.content")
        print(str(answer2.content))
        if answer2.content == "archer" or answer2.content == "Archer" or answer2.content == "1":
            info["class"] = "Archer"
            info["mind"] = "Archer"
            info["skills_learned"].append("Attack")
            info["skills_learned"].append("Run")
            #info["skills_learned"].append("Shoot")
            #info["skills_learned"].append("Arrow Shower")
            #info["equipluk"] = "Steel Arrow"
            #info["wearing"] = "Underwear"
            #info["equip"] = "Simple Bow"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            em = discord.Embed(description="```diff\n+ If you want to enjoy the Full Game of BP0x0-0\n\n with all its secrets!\n- Set up your WAXP wallet!\n+ If you have Alrady a Wallet Address.\n\n- USE COMMAND:\n {}setwallet <Your Wallet Address> \n\n- If you don't have a Wallet \n Visit [AtomicHub](https://wax.atomichub.io/) and set one \n You need your Google Account Password.\n```".format(Prefix), color=discord.Color.green())
            await ctx.send(embed=em)
            cinfo = fileIO("config/config.json", "load")
            cinfo["totalusers"] = cinfo["totalusers"] + 1
            fileIO("config/config.json", "save", cinfo)
            await _check_setArcher(ctx)
        if answer2.content == "paladin" or answer2.content == "Paladin" or answer2.content == "2":
            info["class"] = "Paladin"
            info["mind"] = "Archer"
            info["skills_learned"].append("Attack")
            info["skills_learned"].append("Run")
            #info["skills_learned"].append("Swing")
            #info["skills_learned"].append("Knock Back")
            #info["equipluk"] = "Simple Shield"
            #info["wearing"] = "Monocle"
            #info["equip"] = "Simple Sword"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            cinfo = fileIO("config/config.json", "load")
            cinfo["totalusers"] = cinfo["totalusers"] +1
            fileIO("config/config.json", "save", cinfo)
            em = discord.Embed(description="```diff\n+ If you want to enjoy the Full Game of BP0x0-0\n\n with all its secrets!\n- Set up your WAXP wallet!\n+ If you have Alrady a Wallet Address.\n\n- USE COMMAND:\n {}setwallet <Your Wallet Address> ```".format(Prefix), color=discord.Color.green())
            await ctx.send(embed=em)
            await _check_setPaladin(ctx)
        if answer2.content == "mage" or answer2.content == "Mage" or answer2.content == "3":
            info["class"] = "Mage"
            info["mind"] = "Archer"
            #info["skills_learned"].append("Cast")
            info["skills_learned"].append("Attack")
            info["skills_learned"].append("Run")
            #info["skills_learned"].append("Heal")
            #info["equip"] = "Simple Staff"
            #info["wearing"] = "Hat"
            #info["equipluk"] = "Heal Staff"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            cinfo = fileIO("config/config.json", "load")
            cinfo["totalusers"] = cinfo["totalusers"] +1
            fileIO("config/config.json", "save", cinfo)
            em = discord.Embed(description="```diff\n+ If you want to enjoy the Full Game of BP0x0-0\n\n with all its secrets!\n- Set up your WAXP wallet!\n+ If you have Alrady a Wallet Address.\n\n- USE COMMAND:\n {}setwallet <Your Wallet Address> ```".format(Prefix), color=discord.Color.green())
            await ctx.send(embed=em)
            await _check_setMage(ctx)
        if answer2.content == "thief" or answer2.content == "Thief" or answer2.content == "4":
            info["class"] = "Thief"
            info["mind"] = "Archer"
            #info["skills_learned"].append("Stab")
            info["skills_learned"].append("Attack")
            info["skills_learned"].append("Run")
            #info["skills_learned"].append("Punch")
            #info["equipluk"] = "Simple Dagger"
            #info["wearing"] = "Shoe"
            #info["equip"] = "Simple Dagger"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            cinfo = fileIO("config/config.json", "load")
            cinfo["totalusers"] = cinfo["totalusers"] +1
            fileIO("config/config.json", "save", cinfo)
            em = discord.Embed(description="```diff\n+ If you want to enjoy the Full Game of BP0x0-0\n\n with all its secrets!\n- Set up your WAXP wallet!\n+ If you have Alrady a Wallet Address.\n\n- USE COMMAND:\n {}setwallet <Your Wallet Address> ```".format(Prefix), color=discord.Color.green())
            await ctx.send(embed=em)
            await _check_setThief(ctx)
        if answer2.content == "PixelMinis" or answer2.content == "pixelminis" or answer2.content == "10":
            print("class SAFE INN")
            info["class"] = "PixelMinisBastion"
            info["mind"] = "PixelMinisBastion"
            info["skills_learned"].append("Attack")
            info["skills_learned"].append("Scan")
            info["skills_learned"].append("Run")
            #info["equipluk"] = "Simple PC"
            #info["wearing"] = "Gloves"
            #info["equip"] = "Sprine PC"
            await ctx.send("Hey you I am not Sure what we will get but your Minis will be used....")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            cinfo = fileIO("config/config.json", "load")
            cinfo["totalusers"] = cinfo["totalusers"] +1
            fileIO("config/config.json", "save", cinfo)
            em = discord.Embed(description="```diff\n+ If you want to enjoy the Full Game of BP0x0-0\n\n with all its secrets!\n- Set up your WAXP wallet!\n+ If you have Alrady a Wallet Address.\n\n- USE COMMAND:\n {}setwallet <Your Wallet Address> ```".format(Prefix), color=discord.Color.green())
            await ctx.send(embed=em)
            #await _check_setHacker(ctx)
        if answer2.content == "hacker" or answer2.content == "Hacker" or answer2.content == "5":
            info["class"] = "Hacker"
            info["mind"] = "Hacker"
            info["skills_learned"].append("Attack")
            info["skills_learned"].append("Scan")
            info["skills_learned"].append("Run")
            info["skills_learned"].append("Crack")
            info["skills_learned"].append("Install")
            info["skills_learned"].append("Delete")
            info["skills_learned"].append("DDOS")
            #info["equipluk"] = "Simple PC"
            #info["wearing"] = "Gloves"
            #info["equip"] = "Sprine PC"
            await ctx.send("Hey you Found a Secret mhmhmhm I jsut play around and so can you but please if you found something whats not right... If you found This you Might find me right.")
            fileIO("players/{}/info.json".format(author.id), "save", info)
            cinfo = fileIO("config/config.json", "load")
            cinfo["totalusers"] = cinfo["totalusers"] +1
            fileIO("config/config.json", "save", cinfo)
            em = discord.Embed(description="```diff\n+ If you want to enjoy the Full Game of BP0x0-0\n\n with all its secrets!\n- Set up your WAXP wallet!\n+ If you have Alrady a Wallet Address.\n\n- USE COMMAND:\n {}setwallet <Your Wallet Address> ```".format(Prefix), color=discord.Color.green())
            await ctx.send(embed=em)
            await _check_setHacker(ctx)
        print(" AFTETRclass SAFE INN")
        fileIO("players/{}/info.json".format(author.id), "save", info)
    else:
        await ctx.send("Next time choose one of the options.")
    await _check_setWalletoff(ctx)
    await _check_setNewbe(ctx)
async def _pick_wallet(ctx):
    author = ctx.author
    message = ctx.message
    #ainfo = fileIO("players/{}/info.json".format(author.id), "load")
    #if info["wherecastle"] == RockCastle:
    #    info["castle_guild_name"] = "RockCastle"
    #elif info["wherecastle"] == PaperCastle:
    #    info["castle_guild_name"] = "PaperCastle"
    #elif info["wherecastle"] == scissorCastle:
    #    info["castle_guild_name"] = "scissorCastle"
    #fileIO("players/{}/info.json".format(author.id), "save", ainfo)
    info = fileIO("players/{}/info.json".format(author.id), "load")
    await ctx.send("<@{}> Load...!\n May I ask what is your Wax Wallet address?\n example: {}setwallet cn1qw.wam\n".format(author.id,Prefix))
    await _check_set(ctx)
    def pred(m):
        return m.author == message.author and m.channel == message.channel
    answer3 = await bot.wait_for("message", check=pred)
    values3 = [answer3.content,"{}start".format(Prefix)]
    if str(answer3.content) in values3:
        if answer3 == "{}start".format(Prefix):
            return
        elif answer3.content <= 9 == answer3.content <= 9 or answer3.content == answer3.content:
            #info["wallet"] = answer3.content
            info["skills1_learned"].append("Punch")
            #info["equipluk"] = "BP0x0luk0"
            fileIO("players/{}/info.json".format(author.id), "save", info)
            await ctx.send("All setup!")
            return
    else:
        await ctx.send("Next time choose one of the options.")
async def _create_userFirst(ctx):
    author = ctx.author
    message = ctx.message
    if not os.path.exists("playersFirst/{}".format(author.id)):
        os.makedirs("playersFirst/{}".format(author.id))
        new_account = {
            "name": author.name,
            "discordid": author.id,
            "Player_In" : 0,
            "Safe_version" : 0.0,
            "WalletSetupDone" : 0,
            "discord_name" : author.name,
            "discord_nick" : author.nick,
            "discord_id" : author.id,
            "discord_icon" : "None",#author.avatar,
            "discord_guild_name" : "None",#guild.id,
            "discord_guild_id" : "None",#guild.id,
            "discord_guild_icon" : "None",#guild.icon,
            "discord_guild_channel_name" : "None",#channel.name,
            "discord_guild_channel_id" : "None",#channel.id,
            "account" : "None",
            "account_ban" : "None",
            "account_ban_seed" : "None",
            "account_ban_balance" : "None",
            "account_ban_balance_decimal" : "None",
            "account_ban_balance_decimal_to_send" : "None",
            "account_ban_recive_check_time" : "None",
            "account_ban_recive_check" : False,
            "account_ban_to_check" : "None",
            "account_to_check" : "None",
            "accountset" : 0,
            "discord_rolls" : ["Unborn"],
            "all_" : "None",
            "all_attack" : 0.01,
            "all_base_a" : "None",
            "all_base_attack" : 0.01,
            "all_base_boco" : 0.01,
            "all_base_defence" : 0.01,
            "all_base_door" : 0.01,
            "all_base_drop" : 0.01,
            "all_base_exp" : 0.01,
            "all_base_food" : 0.01,
            "all_base_gold" : 0.01,
            "all_base_hp" : 0.01,
            "all_base_key" : 0.01,
            "all_base_metal" : 0.01,
            "all_base_mp" : 0.01,
            "all_base_people" : 0.01,
            "all_base_pot" : 0.01,
            "all_base_skexp" : 0.01,
            "all_base_sp" : 0.01,
            "all_base_stone" : 0.01,
            "all_base_wood" : 0.01,
            "all_defence" : 0.01,
            "all_drop" : 0.01,
            "all_drop_attack" : 0.01,
            "all_drop_boco" : 0.01,
            "all_drop_defence" : 0.01,
            "all_drop_door" : 0.1,
            "all_drop_exp" : 0.01,
            "all_drop_food" : 0.01,
            "all_drop_gold" : 0.01,
            "all_drop_hp" : 0.01,
            "all_drop_key" : 0.01,
            "all_drop_metal" : 0.01,
            "all_drop_mp" : 0.01,
            "all_drop_people" : 0.1,
            "all_drop_pot" : 0.01,
            "all_drop_skexp" : 0.01,
            "all_drop_sp" : 0.01,
            "all_drop_stone" : 0.01,
            "all_drop_wood" : 0.01,
            "all_inventory" : [
                "Hand",
                "Hand"
            ],
            "all_inventory_space" : 5000,
            "all_total_base_attack" : 0.01,
            "all_total_base_boco" : 0.01,
            "all_total_base_defence" : 0.01,
            "all_total_base_door" : 0.01,
            "all_total_base_drop" : 0.01,
            "all_total_base_exp" : 0.01,
            "all_total_base_food" : 0.01,
            "all_total_base_gold" : 0.01,
            "all_total_base_hp" : 0.01,
            "all_total_base_key" : 0.01,
            "all_total_base_metal" : 0.01,
            "all_total_base_mp" : 0.01,
            "all_total_base_people" : 0.01,
            "all_total_base_pot" : 0.01,
            "all_total_base_skexp" : 0.01,
            "all_total_base_sp" : 0.01,
            "all_total_base_stone" : 0.01,
            "all_total_base_wood" : 0.01,
            "ammo_arrow" : 0,
            "ammo_arrow_steal" : 0,
            "ammo_arrow_trap" : 0,
            "ammo_earth_pot" : 0,
            "ammo_fire_pot" : 0,
            "ammo_water_pot" : 0,
            "ammo_wind_pot" : 0,
            "amnesiapot" : 0,
            "antDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ANTIMAT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "ANTIMAT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "ANTIMAT"
            },
            "assets" : "None",
            "assets_fg" : "0",
            "assets_to_add" : "None",
            "attack0" : 0,
            "attack1" : 0,
            "attack10" : 0,
            "attack11" : 0,
            "attack12" : 0,
            "attack13" : 0,
            "attack14" : 0,
            "attack15" : 0,
            "attack16" : 0,
            "attack17" : 0,
            "attack18" : 0,
            "attack19" : 0,
            "attack2" : 0,
            "attack20" : 0,
            "attack21" : 0,
            "attack22" : 0,
            "attack23" : 0,
            "attack24" : 0,
            "attack25" : 0,
            "attack3" : 0,
            "attack4" : 0,
            "attack5" : 0,
            "attack6" : 0,
            "attack7" : 0,
            "attack8" : 0,
            "attack9" : 0,
            "authorID" : "None",
            "bag_army" : 0,
            "bag_boco" : 0,
            "bag_food" : 0,
            "bag_gold" : 0,
            "bag_key" : 0,
            "bag_metal" : 0,
            "bag_people" : 0,
            "bag_small" : 0,
            "bag_stone" : 0,
            "bag_wood" : 0,
            "bbvalue" : 0,
            "bbvalue_stats" : 0,
            "bbvalue_total_stats" : 0,
            "bbvaluef" : 0,
            "bet_guess100" : 0,
            "bet_tguess100" : 0,
            "bgoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOPIGOL" : 0,
                "code" : "alcorammswap",
                "contract" : "alcorammswap",
                "currency" : "BOPIGOL",
                "decimals" : 6,
                "issuer" : "alcorammswap",
                "maximum_supply" : 46116860184.27388,
                "symbol" : "BOPIGOL"
            },
            "bigpot" : 0,
            "boco" : 0,
            "bocoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCO" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "BOPIXBO",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 6710886400.0,
                "symbol" : "BOCO"
            },
            "boco_drop" : 0,
            "bocodropp0" : 0,
            "bocodropp1" : 0,
            "bocodropp10" : 0,
            "bocodropp11" : 0,
            "bocodropp12" : 0,
            "bocodropp13" : 0,
            "bocodropp14" : 0,
            "bocodropp15" : 0,
            "bocodropp16" : 0,
            "bocodropp17" : 0,
            "bocodropp18" : 0,
            "bocodropp19" : 0,
            "bocodropp2" : 0,
            "bocodropp20" : 0,
            "bocodropp21" : 0,
            "bocodropp22" : 0,
            "bocodropp23" : 0,
            "bocodropp24" : 0,
            "bocodropp25" : 0,
            "bocodropp3" : 0,
            "bocodropp4" : 0,
            "bocodropp5" : 0,
            "bocodropp6" : 0,
            "bocodropp7" : 0,
            "bocodropp8" : 0,
            "bocodropp9" : 0,
            "bopiDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOPIXBO" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "BOPIXBO",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "BOPIXBO"
            },
            "box_army" : 0,
            "box_army_block" : 0,
            "box_army_lvl" : 1,
            "box_boco" : 0,
            "box_boco_block" : 0,
            "box_boco_lvl" : 1,
            "box_buff" : [],
            "box_coin_block" : 0,
            "box_food" : 0,
            "box_food_block" : 0,
            "box_food_lvl" : 1,
            "box_gold" : 0,
            "box_gold_block" : 0,
            "box_gold_lvl" : 1,
            "box_inventory" : [],
            "box_inventory_lvl" : 1,
            "box_key_lvl" : 1,
            "box_lvl" : 0,
            "box_metal" : 0,
            "box_metal_block" : 0,
            "box_metal_lvl" : 1,
            "box_people" : 0,
            "box_people_block" : 0,
            "box_people_lvl" : 1,
            "box_pot_block" : 0,
            "box_pot_lvl" : 1,
            "box_stone" : 0,
            "box_stone_block" : 0,
            "box_stone_lvl" : 1,
            "box_wood" : 0,
            "box_wood_block" : 0,
            "box_wood_lvl" : 1,
            "bp0" : 0,
            "bp1" : 0,
            "bp10" : 0,
            "bp11" : 0,
            "bp12" : 0,
            "bp13" : 0,
            "bp14" : 0,
            "bp15" : 0,
            "bp16" : 0,
            "bp17" : 0,
            "bp18" : 0,
            "bp19" : 0,
            "bp2" : 0,
            "bp20" : 0,
            "bp21" : 0,
            "bp22" : 0,
            "bp23" : 0,
            "bp24" : 0,
            "bp25" : 0,
            "bp3" : 0,
            "bp4" : 0,
            "bp5" : 0,
            "bp6" : 0,
            "bp7" : 0,
            "bp8" : 0,
            "bp9" : 0,
            "bpbalcrit" : 0,
            "bpcbwhite" : 0,
            "bpccc" : 0,
            "bpcccValue" : 0,
            "bpcclassic" : 0,
            "bpcclean" : 0,
            "bpcdirty" : 0,
            "bpcretro" : 0,
            "bpf0" : 0,
            "bpf1" : 0,
            "bpf10" : 0,
            "bpf11" : 0,
            "bpf12" : 0,
            "bpf13" : 0,
            "bpf14" : 0,
            "bpf15" : 0,
            "bpf16" : 0,
            "bpf17" : 0,
            "bpf18" : 0,
            "bpf19" : 0,
            "bpf2" : 0,
            "bpf20" : 0,
            "bpf21" : 0,
            "bpf22" : 0,
            "bpf23" : 0,
            "bpf24" : 0,
            "bpf25" : 0,
            "bpf3" : 0,
            "bpf4" : 0,
            "bpf5" : 0,
            "bpf6" : 0,
            "bpf7" : 0,
            "bpf8" : 0,
            "bpf9" : 0,
            "bpfire0" : 0,
            "bpfire1" : 0,
            "bpfire10" : 0,
            "bpfire11" : 0,
            "bpfire12" : 0,
            "bpfire13" : 0,
            "bpfire14" : 0,
            "bpfire15" : 0,
            "bpfire16" : 0,
            "bpfire17" : 0,
            "bpfire18" : 0,
            "bpfire19" : 0,
            "bpfire2" : 0,
            "bpfire20" : 0,
            "bpfire21" : 0,
            "bpfire22" : 0,
            "bpfire23" : 0,
            "bpfire24" : 0,
            "bpfire25" : 0,
            "bpfire3" : 0,
            "bpfire4" : 0,
            "bpfire5" : 0,
            "bpfire6" : 0,
            "bpfire7" : 0,
            "bpfire8" : 0,
            "bpfire9" : 0,
            "bpfireprofe" : 0,
            "bpfreecandy" : 0,
            "bpfreecandylv52" : 0,
            "bpfreecandytwitch3" : 0,
            "bpjacktick" : 0,
            "bppacksv1" : 0,
            "bppacksv2" : 0,
            "bppacksv4525" : 0,
            "bppacksv4550" : 0,
            "bppacksv4575" : 0,
            "bppacksv51025" : 0,
            "bppacksv51050" : 0,
            "bppacksv51075" : 0,
            "bppacksv6f" : 0,
            "bppacksv71" : 0,
            "bppacksv710" : 0,
            "bppacksv75" : 0,
            "bppacksv81" : 0,
            "bppacksv825" : 0,
            "bpqualityam" : 0,
            "bpramdonator" : 0,
            "bproll_0" : 0,
            "bproll_1" : 0,
            "bproll_10" : 0,
            "bproll_11" : 0,
            "bproll_12" : 0,
            "bproll_13" : 0,
            "bproll_14" : 0,
            "bproll_2" : 0,
            "bproll_3" : 0,
            "bproll_4" : 0,
            "bproll_5" : 0,
            "bproll_6" : 0,
            "bproll_7" : 0,
            "bproll_8" : 0,
            "bproll_9" : 0,
            "bprpg_270" : 0,
            "bprpg_271" : 0,
            "bprpg_272" : 0,
            "bprpg_273" : 0,
            "bprpg_274" : 0,
            "bprpg_275" : 0,
            "bprpg_276" : 0,
            "bprpg_277" : 0,
            "bprpg_278" : 0,
            "bprpg_279" : 0,
            "bprpg_280" : 0,
            "bprpg_281" : 0,
            "bprpg_282" : 0,
            "bprpg_283" : 0,
            "bprpg_284" : 0,
            "bprpg_285" : 0,
            "bprpg_286" : 0,
            "bprpg_287" : 0,
            "bprpg_288" : 0,
            "bprpg_289" : 0,
            "bprpg_290" : 0,
            "bprpg_291" : 0,
            "bprpg_292" : 0,
            "bprpg_293" : 0,
            "bprpg_294" : 0,
            "bprpg_295" : 0,
            "bprpg_296" : 0,
            "bprpg_297" : 0,
            "bprpg_298" : 0,
            "bprpg_299" : 0,
            "bprpg_300" : 0,
            "bprpg_301" : 0,
            "bprpg_302" : 0,
            "bprpg_303" : 0,
            "bprpg_304" : 0,
            "bprpg_305" : 0,
            "bprpg_306" : 0,
            "bprpg_307" : 0,
            "bprpg_308" : 0,
            "bprpg_309" : 0,
            "bprpg_310" : 0,
            "bprpg_311" : 0,
            "bprpg_312" : 0,
            "bprpg_313" : 0,
            "bprpg_314" : 0,
            "bprpg_315" : 0,
            "bprpg_316" : 0,
            "bprpg_317" : 0,
            "bprpg_318" : 0,
            "bprpg_319" : 0,
            "bprpg_320" : 0,
            "bprpg_321" : 0,
            "bprpg_322" : 0,
            "bprpg_323" : 0,
            "bprpg_324" : 0,
            "bprpg_325" : 0,
            "bprpg_326" : 0,
            "bprpg_327" : 0,
            "bprpg_328" : 0,
            "bprpg_329" : 0,
            "bprpg_330" : 0,
            "bprpg_331" : 0,
            "bprpg_332" : 0,
            "bprpg_333" : 0,
            "bprpg_334" : 0,
            "bprpg_335" : 0,
            "bprpg_336" : 0,
            "bprpg_337" : 0,
            "bprpg_338" : 0,
            "bprpg_339" : 0,
            "bprpg_340" : 0,
            "bprpg_341" : 0,
            "bprpg_342" : 0,
            "bprpg_343" : 0,
            "bprpg_344" : 0,
            "bprpg_345" : 0,
            "bprpg_346" : 0,
            "bprpg_347" : 0,
            "bprpg_348" : 0,
            "bprpg_349" : 0,
            "bprpg_350" : 0,
            "bprpg_351" : 0,
            "bprpg_352" : 0,
            "bprpg_353" : 0,
            "bprpg_354" : 0,
            "bprpg_355" : 0,
            "bprpg_357" : 0,
            "bprpg_358" : 0,
            "bprpg_359" : 0,
            "bprpg_360" : 0,
            "bprpg_361" : 0,
            "bprpg_362" : 0,
            "bprpg_363" : 0,
            "bprpg_364" : 0,
            "bprpg_365" : 0,
            "bprpg_366" : 0,
            "bprpg_367" : 0,
            "bprpg_368" : 0,
            "bprpg_369" : 0,
            "bprpg_370" : 0,
            "bprpg_371" : 0,
            "bprpg_372" : 0,
            "bprpg_373" : 0,
            "bprpg_374" : 0,
            "bprpg_375" : 0,
            "bprpg_376" : 0,
            "bprpg_377" : 0,
            "bprpg_378" : 0,
            "bprpg_379" : 0,
            "bprpg_380" : 0,
            "bprpg_381" : 0,
            "bprpg_382" : 0,
            "bprpg_383" : 0,
            "bprpg_384" : 0,
            "bprpg_385" : 0,
            "bprpg_386" : 0,
            "bprpg_387" : 0,
            "bprpg_388" : 0,
            "bprpg_389" : 0,
            "bprpg_390" : 0,
            "bprpg_391" : 0,
            "bprpg_392" : 0,
            "bprpg_393" : 0,
            "bprpg_394" : 0,
            "bprpg_395" : 0,
            "bprpg_396" : 0,
            "bprpg_397" : 0,
            "bprpg_398" : 0,
            "bprpg_399" : 0,
            "bprpg_40" : 0,
            "bprpg_400" : 0,
            "bprpg_401" : 0,
            "bprpg_402" : 0,
            "bprpg_403" : 0,
            "bprpg_404" : 0,
            "bprpg_405" : 0,
            "bprpg_406" : 0,
            "bprpg_407" : 0,
            "bprpg_408" : 0,
            "bprpg_409" : 0,
            "bprpg_65287" : 0,
            "bpv0" : 0,
            "bpv1" : 0,
            "bpv10" : 0,
            "bpv11" : 0,
            "bpv12" : 0,
            "bpv13" : 0,
            "bpv14" : 0,
            "bpv15" : 0,
            "bpv16" : 0,
            "bpv17" : 0,
            "bpv18" : 0,
            "bpv19" : 0,
            "bpv2" : 0,
            "bpv20" : 0,
            "bpv21" : 0,
            "bpv22" : 0,
            "bpv23" : 0,
            "bpv24" : 0,
            "bpv25" : 0,
            "bpv3" : 0,
            "bpv4" : 0,
            "bpv5" : 0,
            "bpv6" : 0,
            "bpv7" : 0,
            "bpv8" : 0,
            "bpv9" : 0,
            "bpvf0" : 0,
            "bpvf1" : 0,
            "bpvf10" : 0,
            "bpvf11" : 0,
            "bpvf12" : 0,
            "bpvf13" : 0,
            "bpvf14" : 0,
            "bpvf15" : 0,
            "bpvf16" : 0,
            "bpvf17" : 0,
            "bpvf18" : 0,
            "bpvf19" : 0,
            "bpvf2" : 0,
            "bpvf20" : 0,
            "bpvf21" : 0,
            "bpvf22" : 0,
            "bpvf23" : 0,
            "bpvf24" : 0,
            "bpvf25" : 0,
            "bpvf3" : 0,
            "bpvf4" : 0,
            "bpvf5" : 0,
            "bpvf6" : 0,
            "bpvf7" : 0,
            "bpvf8" : 0,
            "bpvf9" : 0,
            "bpwhite" : 0,
            "buff" : [],
            "castle_aether" : 0,
            "castle_ali" : "None",
            "castle_all_attack" : 0,
            "castle_all_attack_drop" : 0,
            "castle_all_attack_lvl" : 0,
            "castle_all_defence" : 0,
            "castle_all_defence_drop" : 0,
            "castle_all_defence_lvl" : 0,
            "castle_antimat" : 0,
            "castle_army" : 0,
            "castle_army_lvl" : 0,
            "castle_army_paper" : 0,
            "castle_army_paper_lvl" : 0,
            "castle_army_paper_total" : 0,
            "castle_army_rock" : 0,
            "castle_army_rock_lvl" : 0,
            "castle_army_rock_total" : 0,
            "castle_army_scissor" : 0,
            "castle_army_scissor_lvl" : 0,
            "castle_army_scissor_total" : 0,
            "castle_army_total" : 0,
            "castle_army_total1" : 0,
            "castle_armym" : 0,
            "castle_atk" : 0,
            "castle_bgold" : 0,
            "castle_blue" : 0,
            "castle_bobocoin" : 0,
            "castle_boco" : 0,
            "castle_bocom" : 0,
            "castle_bopigol" : 0,
            "castle_bopixbo" : 0,
            "castle_box_lvl" : 0,
            "castle_cait" : 0,
            "castle_channel" : 156,
            "castle_count_draw" : 0,
            "castle_count_lose" : 0,
            "castle_count_played" : 0,
            "castle_count_score" : 0,
            "castle_count_win" : 0,
            "castle_def" : 0,
            "castle_dept" : 0,
            "castle_door" : 0,
            "castle_drop_atk" : 0,
            "castle_drop_boco" : 0,
            "castle_drop_def" : 0,
            "castle_drop_door" : 0,
            "castle_drop_exp" : 0,
            "castle_drop_food" : 0,
            "castle_drop_gold" : 0,
            "castle_drop_hp" : 0,
            "castle_drop_key" : 0,
            "castle_drop_max" : 0,
            "castle_drop_metal" : 0,
            "castle_drop_mp" : 0,
            "castle_drop_people" : 0,
            "castle_drop_rate" : 0,
            "castle_drop_skexp" : 0,
            "castle_drop_sp" : 0,
            "castle_drop_stone" : 0,
            "castle_drop_wood" : 0,
            "castle_dust" : 0,
            "castle_eos" : 0,
            "castle_food" : 0,
            "castle_foodm" : 0,
            "castle_gold" : 0,
            "castle_goldm" : 0,
            "castle_guard" : 0,
            "castle_guard_lvl" : 0,
            "castle_guild_all_drop" : 0.01,
            "castle_guild_all_inventory" : [
                "Hand",
                "Hand"
            ],
            "castle_guild_army_paper" : 0,
            "castle_guild_army_paperOpen" : 0,
            "castle_guild_army_rock" : 0,
            "castle_guild_army_rockOpen" : 0,
            "castle_guild_army_scissor" : 0,
            "castle_guild_army_scissorOpen" : 0,
            "castle_guild_army_total" : 0,
            "castle_guild_army_totalOpen" : 0,
            "castle_guild_attack" : 0,
            "castle_guild_attack_lvl" : 0,
            "castle_guild_defense" : 0,
            "castle_guild_defense_lvl" : 0,
            "castle_guild_door" : 0,
            "castle_guild_drop_boco" : 0,
            "castle_guild_drop_exp" : 0,
            "castle_guild_drop_food" : 0,
            "castle_guild_drop_gold" : 0,
            "castle_guild_drop_hp" : 0,
            "castle_guild_drop_key" : 0,
            "castle_guild_drop_metal" : 0,
            "castle_guild_drop_mp" : 0,
            "castle_guild_drop_people" : 0,
            "castle_guild_drop_pot" : 0,
            "castle_guild_drop_skexp" : 0,
            "castle_guild_drop_sp" : 0,
            "castle_guild_drop_stone" : 0,
            "castle_guild_drop_wood" : 0,
            "castle_guild_food" : 0,
            "castle_guild_gold" : 0,
            "castle_guild_guard" : 0,
            "castle_guild_guard_lvl" : 0,
            "castle_guild_hp" : 100,
            "castle_guild_key" : 0,
            "castle_guild_lvl" : 0,
            "castle_guild_metal" : 0,
            "castle_guild_mp" : 100,
            "castle_guild_name" : "",
            "castle_guild_people" : 0,
            "castle_guild_pot" : 1,
            "castle_guild_skexp" : 0,
            "castle_guild_sp" : 100,
            "castle_guild_stone" : 0,
            "castle_guild_tower" : 0,
            "castle_guild_tower_lvl" : 0,
            "castle_guild_wood" : 0,
            "castle_img" : 0,
            "castle_inventory" : [],
            "castle_invv_space" : 10000,
            "castle_key" : 0,
            "castle_keym" : 0,
            "castle_lvl" : 0,
            "castle_metal" : 0,
            "castle_metalm" : 0,
            "castle_name" : "None",
            "castle_nefty" : 0,
            "castle_owner" : "False",
            "castle_owner_paper" : "None",
            "castle_owner_rock" : "None",
            "castle_owner_scissor" : "None",
            "castle_paper" : 0,
            "castle_people" : 0,
            "castle_peoplem" : 0,
            "castle_pixel" : 0,
            "castle_power" : 0,
            "castle_rank" : 0,
            "castle_rock" : 0,
            "castle_scissor" : 0,
            "castle_status" : "Working progress ALFA",
            "castle_stone" : 0,
            "castle_stonem" : 0,
            "castle_tlm" : 0,
            "castle_token_pixel" : 0,
            "castle_total" : 0,
            "castle_tower" : 0,
            "castle_tower_lvl" : 0,
            "castle_usdt" : 0,
            "castle_wall_hp" : 1000,
            "castle_wall_hpmax" : 1000,
            "castle_wall_lvl" : 0,
            "castle_wax" : 0,
            "castle_wgold" : 0,
            "castle_wojak" : 0,
            "castle_wood" : 0,
            "castle_woodm" : 0,
            "castle_work_block" : 0,
            "channel" : 234,
            "check_a" : 0,
            "check_b" : 0,
            "check_c" : 0,
            "check_ccc" : 0,
            "check_d" : 0,
            "check_drop" : 0,
            "check_e" : 0,
            "check_f" : 0,
            "check_fakeingheros" : 0,
            "check_g" : 0,
            "check_guess" : 0,
            "check_h" : 0,
            "check_i" : 0,
            "check_j" : 0,
            "check_k" : 0,
            "check_l" : 0,
            "check_m" : 0,
            "check_nft" : 0,
            "check_pack" : 0,
            "chop_block" : 0,
            "class" : "None",
            "clime_try" : 0,
            "code" : 0,
            "coinflip_block" : 0,
            "count_amnesiaatk" : 0,
            "count_click" : 0,
            "count_draw" : 0,
            "count_lose" : 0,
            "count_played" : 0,
            "count_pvp_draw" : 0,
            "count_pvp_lose" : 0,
            "count_pvp_played" : 0,
            "count_pvp_win" : 0,
            "count_titlenum" : 0,
            "count_treue" : 0,
            "count_win" : 0,
            "count_wincry" : "None",
            "counterWoodFail" : 0,
            "cppValue" : 0,
            "cpp_cool_block" : 0,
            "craftable" : [],
            "daily_block" : 0,
            "data" : [],
            "deaths" : 0,
            "defence" : 0,
            "defence0" : 0,
            "defence1" : 0,
            "defence10" : 0,
            "defence11" : 0,
            "defence12" : 0,
            "defence13" : 0,
            "defence14" : 0,
            "defence15" : 0,
            "defence16" : 0,
            "defence17" : 0,
            "defence18" : 0,
            "defence19" : 0,
            "defence2" : 0,
            "defence20" : 0,
            "defence21" : 0,
            "defence22" : 0,
            "defence23" : 0,
            "defence24" : 0,
            "defence25" : 0,
            "defence3" : 0,
            "defence4" : 0,
            "defence5" : 0,
            "defence6" : 0,
            "defence7" : 0,
            "defence8" : 0,
            "defence9" : 0,
            "deptDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_DEPT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "DEPT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 8388608000.0,
                "symbol" : "DEPT"
            },
            "dice_bet" : 0,
            "dice_block" : 0,
            "dice_count" : 0,
            "dice_count_played" : 0,
            "dice_lose" : 0,
            "dice_row" : 0,
            "dice_win" : 0,
            "dice_win_money" : 0,
            "dice_win_money_bet" : 0,
            "dig_block" : 0,
            "door" : "None",
            "door0" : 0,
            "door1" : 0,
            "door10" : 0,
            "door11" : 0,
            "door12" : 0,
            "door13" : 0,
            "door14" : 0,
            "door15" : 0,
            "door16" : 0,
            "door17" : 0,
            "door18" : 0,
            "door19" : 0,
            "door2" : 0,
            "door20" : 0,
            "door21" : 0,
            "door22" : 0,
            "door23" : 0,
            "door24" : 0,
            "door25" : 0,
            "door3" : 0,
            "door4" : 0,
            "door5" : 0,
            "door6" : 0,
            "door7" : 0,
            "door8" : 0,
            "door9" : 0,
            "doorDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_DOOR" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "DOOR",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "DOOR"
            },
            "door_enemy" : "None",
            "door_enemy_hp" : 0,
            "doorenemyhp" : 50,
            "doorenemylvl" : 0,
            "dragon_holding_time" : 0,
            "dragon_hunt" : "False",
            "dragon_time" : 0,
            "drop_boco" : 0,
            "drop_door" : 0,
            "drop_food" : 0,
            "drop_gold" : 0,
            "drop_key" : 0,
            "drop_metal" : 0,
            "drop_people" : 0,
            "drop_stone" : 0,
            "drop_wood" : 0,
            "dropdrop0" : 0,
            "dropdrop1" : 0,
            "dropdrop10" : 0,
            "dropdrop11" : 0,
            "dropdrop12" : 0,
            "dropdrop13" : 0,
            "dropdrop14" : 0,
            "dropdrop15" : 0,
            "dropdrop16" : 0,
            "dropdrop17" : 0,
            "dropdrop18" : 0,
            "dropdrop19" : 0,
            "dropdrop2" : 0,
            "dropdrop20" : 0,
            "dropdrop21" : 0,
            "dropdrop22" : 0,
            "dropdrop23" : 0,
            "dropdrop24" : 0,
            "dropdrop25" : 0,
            "dropdrop3" : 0,
            "dropdrop4" : 0,
            "dropdrop5" : 0,
            "dropdrop6" : 0,
            "dropdrop7" : 0,
            "dropdrop8" : 0,
            "dropdrop9" : 0,
            "duneon_enemy_hp" : 0,
            "dungeon_enemy" : "None",
            "emptybag" : 0,
            "enemieskilled" : 0,
            "equip_skills0" : [],
            "equip_skills1" : [],
            "equip_skills2" : [],
            "equip_skills3" : [],
            "exp" : 0,
            "expdropp0" : 0,
            "expdropp1" : 0,
            "expdropp10" : 0,
            "expdropp11" : 0,
            "expdropp12" : 0,
            "expdropp13" : 0,
            "expdropp14" : 0,
            "expdropp15" : 0,
            "expdropp16" : 0,
            "expdropp17" : 0,
            "expdropp18" : 0,
            "expdropp19" : 0,
            "expdropp2" : 0,
            "expdropp20" : 0,
            "expdropp21" : 0,
            "expdropp22" : 0,
            "expdropp23" : 0,
            "expdropp24" : 0,
            "expdropp25" : 0,
            "expdropp3" : 0,
            "expdropp4" : 0,
            "expdropp5" : 0,
            "expdropp6" : 0,
            "expdropp7" : 0,
            "expdropp8" : 0,
            "expdropp9" : 0,
            "expmax" : 1,
            "expmaxsk" : 1,
            "expsk" : 1,
            "fooDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FOOD" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "FOOD",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "FOOD"
            },
            "food" : 0,
            "food_drop" : 0,
            "fooddropp0" : 0,
            "fooddropp1" : 0,
            "fooddropp10" : 0,
            "fooddropp11" : 0,
            "fooddropp12" : 0,
            "fooddropp13" : 0,
            "fooddropp14" : 0,
            "fooddropp15" : 0,
            "fooddropp16" : 0,
            "fooddropp17" : 0,
            "fooddropp18" : 0,
            "fooddropp19" : 0,
            "fooddropp2" : 0,
            "fooddropp20" : 0,
            "fooddropp21" : 0,
            "fooddropp22" : 0,
            "fooddropp23" : 0,
            "fooddropp24" : 0,
            "fooddropp25" : 0,
            "fooddropp3" : 0,
            "fooddropp4" : 0,
            "fooddropp5" : 0,
            "fooddropp6" : 0,
            "fooddropp7" : 0,
            "fooddropp8" : 0,
            "fooddropp9" : 0,
            "free1_cool_block" : 0,
            "free_cool_block" : 0,
            "free_cool_block1" : 0,
            "gold" : 0,
            "goldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_GOLD" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "GOLD",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 124217728.0,
                "symbol" : "GOLD"
            },
            "gold_drop" : 0,
            "golddropp0" : 0,
            "golddropp1" : 0,
            "golddropp10" : 0,
            "golddropp11" : 0,
            "golddropp12" : 0,
            "golddropp13" : 0,
            "golddropp14" : 0,
            "golddropp15" : 0,
            "golddropp16" : 0,
            "golddropp17" : 0,
            "golddropp18" : 0,
            "golddropp19" : 0,
            "golddropp2" : 0,
            "golddropp20" : 0,
            "golddropp21" : 0,
            "golddropp22" : 0,
            "golddropp23" : 0,
            "golddropp24" : 0,
            "golddropp25" : 0,
            "golddropp3" : 0,
            "golddropp4" : 0,
            "golddropp5" : 0,
            "golddropp6" : 0,
            "golddropp7" : 0,
            "golddropp8" : 0,
            "golddropp9" : 0,
            "guess100_versuch" : 0,
            "guild" : "None",
            "hacker_antivirus" : 0,
            "hacker_botnet" : 1,
            "hacker_cracker" : 0,
            "hacker_firewall" : 0,
            "hacker_name" : 0,
            "hacker_password" : 0,
            "hacker_virus" : 0,
            "health" : 100,
            "healthmax" : 100,
            "how_many_time" : 0,
            "hp_drop" : 0.01,
            "hpdrop0" : 0,
            "hpdrop1" : 0,
            "hpdrop10" : 0,
            "hpdrop11" : 0,
            "hpdrop12" : 0,
            "hpdrop13" : 0,
            "hpdrop14" : 0,
            "hpdrop15" : 0,
            "hpdrop16" : 0,
            "hpdrop17" : 0,
            "hpdrop18" : 0,
            "hpdrop19" : 0,
            "hpdrop2" : 0,
            "hpdrop20" : 0,
            "hpdrop21" : 0,
            "hpdrop22" : 0,
            "hpdrop23" : 0,
            "hpdrop24" : 0,
            "hpdrop25" : 0,
            "hpdrop3" : 0,
            "hpdrop4" : 0,
            "hpdrop5" : 0,
            "hpdrop6" : 0,
            "hpdrop7" : 0,
            "hpdrop8" : 0,
            "hpdrop9" : 0,
            "hunt_block" : 0,
            "in_dungeon" : "False",
            "in_party" : [],
            "inbuff" : "False",
            "infight_status" : "False",
            "info_member" : 0,
            "inguild" : "None",
            "inhavenft_status" : "False",
            "inventory" : [],
            "inventory_lvl" : [],
            "itemdrop_test" : "None",
            "key" : 0,
            "keyDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_KEY" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "KEY",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "KEY"
            },
            "key_drop" : 0,
            "keydropp0" : 0,
            "keydropp1" : 0,
            "keydropp10" : 0,
            "keydropp11" : 0,
            "keydropp12" : 0,
            "keydropp13" : 0,
            "keydropp14" : 0,
            "keydropp15" : 0,
            "keydropp16" : 0,
            "keydropp17" : 0,
            "keydropp18" : 0,
            "keydropp19" : 0,
            "keydropp2" : 0,
            "keydropp20" : 0,
            "keydropp21" : 0,
            "keydropp22" : 0,
            "keydropp23" : 0,
            "keydropp24" : 0,
            "keydropp25" : 0,
            "keydropp3" : 0,
            "keydropp4" : 0,
            "keydropp5" : 0,
            "keydropp6" : 0,
            "keydropp7" : 0,
            "keydropp8" : 0,
            "keydropp9" : 0,
            "location" : "Newbe Training Ground",
            "lockedbox" : 0,
            "lootbag" : 0,
            "losecry" : "None",
            "lottery_tickets" : [],
            "lotto_num_guess" : 0,
            "lotto_pot" : 0,
            "lucky_bet" : 0,
            "lucky_block" : 0,
            "lucky_num" : 0,
            "luknum" : 0,
            "lvl" : 1,
            "lvl_attack" : "0",
            "lvl_defence" : "0",
            "lvljump" : 1,
            "mana" : 100,
            "manamax" : 100,
            "max_def" : 0,
            "max_dmg" : 0,
            "max_skexp" : 1,
            "mediumpot" : 0,
            "memberid" : "None",
            "metDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_METAL" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "METAL",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "METAL"
            },
            "metal" : 0,
            "metal_drop" : 0.01,
            "metaldropp0" : 0,
            "metaldropp1" : 0,
            "metaldropp10" : 0,
            "metaldropp11" : 0,
            "metaldropp12" : 0,
            "metaldropp13" : 0,
            "metaldropp14" : 0,
            "metaldropp15" : 0,
            "metaldropp16" : 0,
            "metaldropp17" : 0,
            "metaldropp18" : 0,
            "metaldropp19" : 0,
            "metaldropp2" : 0,
            "metaldropp20" : 0,
            "metaldropp21" : 0,
            "metaldropp22" : 0,
            "metaldropp23" : 0,
            "metaldropp24" : 0,
            "metaldropp25" : 0,
            "metaldropp3" : 0,
            "metaldropp4" : 0,
            "metaldropp5" : 0,
            "metaldropp6" : 0,
            "metaldropp7" : 0,
            "metaldropp8" : 0,
            "metaldropp9" : 0,
            "mind" : "Less",
            "mine_block" : 0,
            "mp_drop" : 0.01,
            "mpdrop0" : 0,
            "mpdrop1" : 0,
            "mpdrop10" : 0,
            "mpdrop11" : 0,
            "mpdrop12" : 0,
            "mpdrop13" : 0,
            "mpdrop14" : 0,
            "mpdrop15" : 0,
            "mpdrop16" : 0,
            "mpdrop17" : 0,
            "mpdrop18" : 0,
            "mpdrop19" : 0,
            "mpdrop2" : 0,
            "mpdrop20" : 0,
            "mpdrop21" : 0,
            "mpdrop22" : 0,
            "mpdrop23" : 0,
            "mpdrop24" : 0,
            "mpdrop25" : 0,
            "mpdrop3" : 0,
            "mpdrop4" : 0,
            "mpdrop5" : 0,
            "mpdrop6" : 0,
            "mpdrop7" : 0,
            "mpdrop8" : 0,
            "mpdrop9" : 0,
            "multybp0x0" : 0,
            "name_castle_owner" : "None",
            "number_guess100" : 0,
            "password" : 0,
            "papDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PAPER" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "PAPER",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13421772800.0,
                "symbol" : "PAPER"
            },
            "peoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PEOPLE" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "PEOPLE",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "PEOPLE"
            },
            "people" : 0,
            "people0" : 0,
            "people1" : 0,
            "people10" : 0,
            "people11" : 0,
            "people12" : 0,
            "people13" : 0,
            "people14" : 0,
            "people15" : 0,
            "people16" : 0,
            "people17" : 0,
            "people18" : 0,
            "people19" : 0,
            "people2" : 0,
            "people20" : 0,
            "people21" : 0,
            "people22" : 0,
            "people23" : 0,
            "people24" : 0,
            "people25" : 0,
            "people3" : 0,
            "people4" : 0,
            "people5" : 0,
            "people6" : 0,
            "people7" : 0,
            "people8" : 0,
            "people9" : 0,
            "pet" : "None",
            "pixelDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PIXEL" : 0,
                "code" : "penguincoins",
                "contract" : "penguincoins",
                "currency" : "PIXEL",
                "decimals" : 6,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "PIXEL"
            },
            "pot0" : 0,
            "pot1" : 0,
            "pot10" : 0,
            "pot11" : 0,
            "pot12" : 0,
            "pot13" : 0,
            "pot14" : 0,
            "pot15" : 0,
            "pot16" : 0,
            "pot17" : 0,
            "pot18" : 0,
            "pot19" : 0,
            "pot2" : 0,
            "pot20" : 0,
            "pot21" : 0,
            "pot22" : 0,
            "pot23" : 0,
            "pot24" : 0,
            "pot25" : 0,
            "pot3" : 0,
            "pot4" : 0,
            "pot5" : 0,
            "pot6" : 0,
            "pot7" : 0,
            "pot8" : 0,
            "pot9" : 0,
            "qakey" : 0,
            "rabbat" : 0.01,
            "rabbat0" : 0,
            "rabbat1" : 0,
            "rabbat10" : 0,
            "rabbat11" : 0,
            "rabbat12" : 0,
            "rabbat13" : 0,
            "rabbat14" : 0,
            "rabbat15" : 0,
            "rabbat16" : 0,
            "rabbat17" : 0,
            "rabbat18" : 0,
            "rabbat19" : 0,
            "rabbat2" : 0,
            "rabbat20" : 0,
            "rabbat21" : 0,
            "rabbat22" : 0,
            "rabbat23" : 0,
            "rabbat24" : 0,
            "rabbat25" : 0,
            "rabbat3" : 0,
            "rabbat4" : 0,
            "rabbat5" : 0,
            "rabbat6" : 0,
            "rabbat7" : 0,
            "rabbat8" : 0,
            "rabbat9" : 0,
            "race" : "None",
            "rank" : "None",
            "rankkill" : 0,
            "rest_block" : 0,
            "roaming" : "False",
            "rocDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCK" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "ROCK",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13421772800.0,
                "symbol" : "ROCK"
            },
            "runaways" : 0,
            "sciDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SCISSOR" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "SCISSOR",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13421772800.0,
                "symbol" : "SCISSOR"
            },
            "score" : 0,
            "selected_attack" : "None",
            "selected_castle" : "None",
            "selected_defence" : "None",
            "selected_enemy" : "None",
            "selected_enemy_player" : "None",
            "selected_enemy_attack" : 0,
            "selected_enemy_cardid" : 0,
            "selected_enemy_castle" : 0,
            "selected_enemy_castle_aliance" : 0,
            "selected_enemy_castle_exp" : 0,
            "selected_enemy_castle_exp_drop" : 0,
            "selected_enemy_castle_lvl" : 0,
            "selected_enemy_castle_name" : 0,
            "selected_enemy_defence" : 0,
            "selected_enemy_drop" : 0,
            "selected_enemy_exp" : 0,
            "selected_enemy_exp_drop" : 0,
            "selected_enemy_fight_status" : 0,
            "selected_enemy_gold" : 0,
            "selected_enemy_hp" : 0,
            "selected_enemy_indoor" : "None",
            "selected_enemy_lvl" : 0,
            "selected_enemy_name" : 0,
            "selected_enemy_skill" : 0,
            "selected_enemy_skill_exp" : 0,
            "selected_enemy_skill_exp_drop" : 0,
            "selected_enemy_skill_lvl" : 0,
            "selected_enemy_status" : 0,
            "selected_hp" : "None",
            "selected_item" : "None",
            "selected_item_type" : "None",
            "selected_lvl" : "None",
            "selected_name" : "None",
            "selected_p" : "None",
            "selected_player" : "None",
            "selected_rank" : "None",
            "selected_status" : "None",
            "setdone" : 0,
            "setnamecastledone" : 0,
            "setnamedone" : 0,
            "setwalletdone" : 0,
            "skexp" : 1,
            "skexpdropp0" : 0,
            "skexpdropp1" : 0,
            "skexpdropp10" : 0,
            "skexpdropp11" : 0,
            "skexpdropp12" : 0,
            "skexpdropp13" : 0,
            "skexpdropp14" : 0,
            "skexpdropp15" : 0,
            "skexpdropp16" : 0,
            "skexpdropp17" : 0,
            "skexpdropp18" : 0,
            "skexpdropp19" : 0,
            "skexpdropp2" : 0,
            "skexpdropp20" : 0,
            "skexpdropp21" : 0,
            "skexpdropp22" : 0,
            "skexpdropp23" : 0,
            "skexpdropp24" : 0,
            "skexpdropp25" : 0,
            "skexpdropp3" : 0,
            "skexpdropp4" : 0,
            "skexpdropp5" : 0,
            "skexpdropp6" : 0,
            "skexpdropp7" : 0,
            "skexpdropp8" : 0,
            "skexpdropp9" : 0,
            "skill_inventory" : [],
            "skills_learned" : [],
            "sklvl" : 1,
            "slotnum" : "0",
            "smallpot" : 0,
            "smallpot_drop" : 0.01,
            "sp_drop" : 0.01,
            "spdrop0" : 0,
            "spdrop1" : 0,
            "spdrop10" : 0,
            "spdrop11" : 0,
            "spdrop12" : 0,
            "spdrop13" : 0,
            "spdrop14" : 0,
            "spdrop15" : 0,
            "spdrop16" : 0,
            "spdrop17" : 0,
            "spdrop18" : 0,
            "spdrop19" : 0,
            "spdrop2" : 0,
            "spdrop20" : 0,
            "spdrop21" : 0,
            "spdrop22" : 0,
            "spdrop23" : 0,
            "spdrop24" : 0,
            "spdrop25" : 0,
            "spdrop3" : 0,
            "spdrop4" : 0,
            "spdrop5" : 0,
            "spdrop6" : 0,
            "spdrop7" : 0,
            "spdrop8" : 0,
            "spdrop9" : 0,
            "speedpot" : 0,
            "stamina" : 100,
            "staminamax" : 100,
            "status" : "Unhappy",
            "status_confuse" : "False",
            "status_crack" : "False",
            "status_ddos" : "False",
            "status_hide" : "False",
            "status_install" : "False",
            "status_install_who" : "None",
            "status_jump" : "False",
            "status_scan" : "False",
            "status_trap" : "False",
            "stodDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_STONE" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "STONE",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "STONE"
            },
            "stone" : 0,
            "stone_drop" : 0,
            "stonedropp0" : 0,
            "stonedropp1" : 0,
            "stonedropp10" : 0,
            "stonedropp11" : 0,
            "stonedropp12" : 0,
            "stonedropp13" : 0,
            "stonedropp14" : 0,
            "stonedropp15" : 0,
            "stonedropp16" : 0,
            "stonedropp17" : 0,
            "stonedropp18" : 0,
            "stonedropp19" : 0,
            "stonedropp2" : 0,
            "stonedropp20" : 0,
            "stonedropp21" : 0,
            "stonedropp22" : 0,
            "stonedropp23" : 0,
            "stonedropp24" : 0,
            "stonedropp25" : 0,
            "stonedropp3" : 0,
            "stonedropp4" : 0,
            "stonedropp5" : 0,
            "stonedropp6" : 0,
            "stonedropp7" : 0,
            "stonedropp8" : 0,
            "stonedropp9" : 0,
            "successCheck" : "False",
            "time_block" : 0,
            "time_reduce" : 0,
            "title" : "None",
            "token_aether" : 0,
            "token_antimat" : 0,
            "token_bgold" : 0,
            "token_blue" : 0,
            "token_bobocoin" : 0,
            "token_boco" : 0,
            "token_bopixbo" : 0,
            "token_cait" : 0,
            "token_dept" : 0,
            "token_door" : 0,
            "token_dust" : 0,
            "token_eos" : 0,
            "token_food" : 0,
            "token_gold" : 0,
            "token_key" : 0,
            "token_metal" : 0,
            "token_nefty" : 0,
            "token_paper" : 0,
            "token_people" : 0,
            "token_rock" : 0,
            "token_scissor" : 0,
            "token_stone" : 0,
            "token_tlm" : 0,
            "token_token_pixel" : 0,
            "token_usdt" : 0,
            "token_wax" : 0,
            "token_wgold" : 0,
            "token_wojak" : 0,
            "token_wood" : 0,
            "tower_inventory" : [],
            "traveling_block" : 0,
            "try_guess100" : 0,
            "try_lvl100" : 0,
            "try_tguess100" : 0,
            "try_tlvl100" : 0,
            "upitem" : [],
            "userDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount" : [],
                "code" : "none",
                "contract" : "none",
                "currency" : "none",
                "decimals" : 8,
                "issuer" : "none",
                "maximum_supply" : 0,
                "symbol" : "none"
            },
            "wall" : 0,
            "wall_active" : "None",
            "wall_block" : 0,
            "wall_equip_0" : "None",
            "wall_equip_1" : "None",
            "wall_equip_2" : "None",
            "wall_equip_3" : "None",
            "wall_hp" : 0,
            "wall_inventory" : [],
            "wall_lvl" : 0,
            "wall_percent" : 0,
            "wall_repair" : 0,
            "wall_status" : 0,
            "wall_time" : 0,
            "wallet" : "None",
            "waxDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAX" : 0,
                "code" : "eosio.token",
                "contract" : "eosio.token",
                "currency" : "WAX",
                "decimals" : 8,
                "issuer" : "eosio",
                "maximum_supply" : 33554432000.0,
                "symbol" : "WAX"
            },
            "wearing" : "Shoe",
            "wgoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAXGOLI" : 0,
                "code" : "alcorammswap",
                "contract" : "alcorammswap",
                "currency" : "WAXGOLI",
                "decimals" : 8,
                "issuer" : "alcorammswap",
                "maximum_supply" : 33554432000.0,
                "symbol" : "WAXGOLI"
            },
            "where" : 0,
            "wherecastle" : 0,
            "wojakDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "wooDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOOD" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "WOOD",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "WOOD"
            },
            "wood" : 0,
            "wood_drop" : 0,
            "woodbox" : 0,
            "wooddropp0" : 0,
            "wooddropp1" : 0,
            "wooddropp10" : 0,
            "wooddropp11" : 0,
            "wooddropp12" : 0,
            "wooddropp13" : 0,
            "wooddropp14" : 0,
            "wooddropp15" : 0,
            "wooddropp16" : 0,
            "wooddropp17" : 0,
            "wooddropp18" : 0,
            "wooddropp19" : 0,
            "wooddropp2" : 0,
            "wooddropp20" : 0,
            "wooddropp21" : 0,
            "wooddropp22" : 0,
            "wooddropp23" : 0,
            "wooddropp24" : 0,
            "wooddropp25" : 0,
            "wooddropp3" : 0,
            "wooddropp4" : 0,
            "wooddropp5" : 0,
            "wooddropp6" : 0,
            "wooddropp7" : 0,
            "wooddropp8" : 0,
            "wooddropp9" : 0,
            "zadown" : "None",
            "zaup" : "None",
            "zaupitemtype" : "None",
            "zslot0_equip" : "None",
            "zslot0_unequip" : "None",
            "zslot10_equip" : "None",
            "zslot10_unequip" : "None",
            "zslot11_equip" : "None",
            "zslot11_unequip" : "None",
            "zslot12_equip" : "None",
            "zslot12_unequip" : "None",
            "zslot13_equip" : "None",
            "zslot13_unequip" : "None",
            "zslot14_equip" : "None",
            "zslot14_unequip" : "None",
            "zslot15_equip" : "None",
            "zslot15_unequip" : "None",
            "zslot16_equip" : "None",
            "zslot16_unequip" : "None",
            "zslot17_equip" : "None",
            "zslot17_unequip" : "None",
            "zslot18_equip" : "None",
            "zslot18_unequip" : "None",
            "zslot19_equip" : "None",
            "zslot19_unequip" : "None",
            "zslot1_equip" : "None",
            "zslot1_unequip" : "None",
            "zslot20_equip" : "None",
            "zslot20_unequip" : "None",
            "zslot21_equip" : "None",
            "zslot21_unequip" : "None",
            "zslot22_equip" : "None",
            "zslot22_unequip" : "None",
            "zslot23_equip" : "None",
            "zslot23_unequip" : "None",
            "zslot24_equip" : "None",
            "zslot24_unequip" : "None",
            "zslot25_equip" : "None",
            "zslot25_unequip" : "None",
            "zslot2_equip" : "None",
            "zslot2_unequip" : "None",
            "zslot3_equip" : "None",
            "zslot3_unequip" : "None",
            "zslot4_equip" : "None",
            "zslot4_unequip" : "None",
            "zslot5_equip" : "None",
            "zslot5_unequip" : "None",
            "zslot6_equip" : "None",
            "zslot6_unequip" : "None",
            "zslot7_equip" : "None",
            "zslot7_unequip" : "None",
            "zslot8_equip" : "None",
            "zslot8_unequip" : "None",
            "zslot9_equip" : "None",
            "zslot9_unequip" : "None",
            "zslot_0_inventory" : [],
            "zslot_10_inventory" : [],
            "zslot_11_inventory" : [],
            "zslot_12_inventory" : [],
            "zslot_13_inventory" : [],
            "zslot_14_inventory" : [],
            "zslot_15_inventory" : [],
            "zslot_16_inventory" : [],
            "zslot_17_inventory" : [],
            "zslot_18_inventory" : [],
            "zslot_19_inventory" : [],
            "zslot_1_inventory" : [],
            "zslot_20_inventory" : [],
            "zslot_21_inventory" : [],
            "zslot_22_inventory" : [],
            "zslot_23_inventory" : [],
            "zslot_24_inventory" : [],
            "zslot_25_inventory" : [],
            "zslot_2_inventory" : [],
            "zslot_3_inventory" : [],
            "zslot_4_inventory" : [],
            "zslot_5_inventory" : [],
            "zslot_6_inventory" : [],
            "zslot_7_inventory" : [],
            "zslot_8_inventory" : [],
            "zslot_9_inventory" : [],
            "zucker_freecandy" : 0.9
        }
        fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", new_account)
    infoFirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
    #await _check_set00(ctx)
    author = ctx.author
    message = ctx.message
    member = message.author #gets the member to edit
    var = discord.utils.get(message.guild.roles, name = "Unborn")
    infoFirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
    status_check = infoFirst["status"]
    if status_check == "-0":
        return
    else:
        infoFirst = fileIO("playersFirst/{}/infoFirst.json".format(author.id), "load")
        infoFirst["status"] = str("Unborn")
        fileIO("playersFirst/{}/infoFirst.json".format(author.id), "save", infoFirst)
        info = fileIO("config/config.json", "load")
        info["Commands_used"] += 1
        info["totalusers"] += 1
        fileIO("config/config.json", "save", info)
        em = discord.Embed(description="```diff\n- First Safe Done lets go to Server Rock, Scissor, Paper. Write **{}start** again to select your Server Guild!\n\n+ TIP: Each Guild have there own Token NFT Farm!\n {}sync to See more```".format(Prefix, Prefix), color=discord.Color.red())
        await ctx.send(embed=em)
        # This will get the role you want to edit^
        try:
            await member.add_roles(var) # adds the role
            await var.edit(color=0x008000, reason="Nothing is Something")
        except:
            await ctx.send("No Rols here come to BP0x0 Server and vist one of the Guild Server to set up 100%")
async def _create_user(author):
    if not os.path.exists("players/{}".format(author.id)):
        os.makedirs("players/{}".format(author.id))
        new_account = {
            "name": author.name,
            "discordid": author.id,
            "discord_name" : author.name,
            "discord_nick" : author.nick,
            "discord_id" : author.id,
            "discord_icon" : "None",#author.avatar,
            "discord_guild_name" : "None",#guild.id,
            "discord_guild_id" : "None",#guild.id,
            "discord_guild_icon" : "None",#guild.icon,
            "discord_guild_channel_name" : "None",#channel.name,
            "discord_guild_channel_id" : "None",#channel.id,
            "discord_rolls" : ["Wallet_OFF", "Base_Lv_0"],
            "discord_channel_id__owner" : [],
            "nfts_collection_owner" : "None",
            "nfts_collection_name" : "None",
            "nfts_collection_web" : "None",
            "nfts_collection_discord_server_id" : "None",
            "Safe_version" : 0.0,
            "Safe_version":"0.4",
            "account_wax" : "None",
            "account_wax_send_to" : "None",
            "account_wax_to_check" : "None",
            "account_wax_balance" : 0,
            "account_ban" : "None",
            "account_ban_seed" : "None",
            "account_ban_balance" : "None",
            "account_ban_balance_decimal" : "None",
            "account_ban_balance_decimal_to_send" : "None",
            "account_ban_recive_check_time" : "None",
            "account_ban_recive_check" : False,
            "account_ban_to_check" : "None",
            "streets_location" : 0,
            "streets_location_old_roll" : None,
            "streets_check_prison" : False,
            "streets_check_pair" : 0,
            "user_a_atk": 0.00001,
            "user_a_matk": 0.00001,
            "user_a_def": 0.00001,
            "user_a_mdef": 0.00001,
            "user_a_hit_reate": 0.00001,
            "user_a_crit_rate": 0.00001,
            "user_a_flee_rate": 0.00001,
            "user_a_move_rate": 0.00001,
            "user_a_hp_max": 0.00001,
            "user_a_hp_rate": 0.00001,
            "user_a_sp_max": 0.00001,
            "user_a_sp_rate": 0.00001,
            "user_a_item_rate": 1,
            "user_a_attack_range": 1,
            "user_a_cast_time": 1,
            "user_a_wait_time": 1,
            "user_a_weight_limit": 1,
            "user_a_status_stun": "False",
            "user_a_status_stun_time": 1,
            "user_a_status_blind": "False",
            "user_a_status_blind_time": 0,
            "user_a_status_conf": "False",
            "user_a_status_conf_time": 0,
            "user_a_status_silent": "False",
            "user_a_status_silent_time": 0,
            "user_a_status_poison": "False",
            "user_a_status_poison_time": 0,
            "user_a_status_burning": "False",
            "user_a_status_burning_time": 0,
            "user_a_status_freezing": "False",
            "user_a_status_freezing_time": 0,
            "user_a_status_sleep": "False",
            "user_a_status_sleep_time": 0,
            "user_a_status_hidden": "False",
            "user_a_status_hidden_time": 0,
            "user_a_status_alive": "False",
            "user_a_status_alive_time": 0,
            "user_a_status_death": "False",
            "user_a_status_death_time": 0,
            "user_a_status_in_party": "False",
            "user_a_status_in_guild": "False",
            "user_a_status_own_castle": "False",
            "user_a_status_own_nfts": "False",
            "user_a_status_own_collection": "False",
            "user_a_castle_atk": 0.00001,
            "user_a_castle_matk": 0.00001,
            "user_a_castle_def": 0.00001,
            "user_a_castle_mdef": 0.00001,
            "user_a_castle_hit_rate": 0.00001,
            "user_a_castle_crit_rate": 0.00001,
            "user_a_castle_hp_max": 0.00001,
            "user_a_castle_hp_rate": 0.00001,
            "user_a_castle_sp_max": 0.00001,
            "user_a_castle_sp_rate": 0.00001,
            "user_a_castle_item_rate": 1,
            "user_a_castle_attack_range": 1,
            "user_a_castle_cast_time": 1,
            "user_a_castle_wait_time": 1,
            "user_a_castle_weight_limit": 100,
            "user_a_castle_status_stun": "False",
            "user_a_castle_status_stun_time": 0,
            "user_a_castle_status_blind": "False",
            "user_a_castle_status_blind_time": 0,
            "user_a_castle_status_conf": "False",
            "user_a_castle_status_conf_time": 0,
            "user_a_castle_status_silent": "False",
            "user_a_castle_status_silent_time": 0,
            "user_a_castle_status_poison": "False",
            "user_a_castle_status_poison_time": 0,
            "user_a_castle_status_burning": "False",
            "user_a_castle_status_burning_time": 0,
            "user_a_castle_status_freezing": "False",
            "user_a_castle_status_freezing_time": 0,
            "user_a_castle_status_sleep": "False",
            "user_a_castle_status_sleep_time": 0,
            "user_a_castle_status_hidden": "False",
            "user_a_castle_status_hidden_time": 0,
            "user_a_castle_status_alive": "False",
            "user_a_castle_status_alive_time": 0,
            "user_a_castle_status_death": "False",
            "user_a_castle_status_death_time": 0,
            "user_a_castle_status_in_party": "False",
            "user_a_castle_status_in_guild": "False",
            "user_a_castle_status_own_castle": "False",
            "user_a_castle_status_own_nfts": "False",
            "user_a_castle_status_own_collection": "False",
            "user_a_level": 0.00001,
            "user_a_exp": 0.00001,
            "user_a_exp_to_next_lv": 0.00001,
            "user_a_exp_max": 0.00001,
            "user_a_pet_exp": 0.00001,
            "user_a_pet_exp_max": 0.00001,
            "user_a_pet_exp_to_next_lv": 0.00001,
            "user_a_pet_level": 0.00001,
            "user_a_pet_name":"False",
            "user_a_pet_id": 0,
            "user_a_pet_house_name": "False",
            "user_a_pet_house_id": "False",
            "user_a_pet_house_roll": [],
            "user_a_castle_level": 0.00001,
            "user_a_castle_id": "False",
            "user_a_castle_wood": 0.00000,
            "user_a_castle_stone": 0.00000,
            "user_a_castle_metal": 0.00000,
            "user_a_castle_gold": 0.00000,
            "user_a_castle_boco": 0.00000,
            "user_a_castle_people": 0.00000,
            "user_a_pet_status_stun": "False",
            "user_a_pet_status_stun_time": 0,
            "user_a_pet_status_blind": "False",
            "user_a_pet_status_blind_time": 0,
            "user_a_pet_status_conf": "False",
            "user_a_pet_status_conf_time": 0,
            "user_a_pet_status_silent": "False",
            "user_a_pet_status_silent_time": 0,
            "user_a_pet_status_poison": "False",
            "user_a_pet_status_poison_time": 0,
            "user_a_pet_status_burning": "False",
            "user_a_pet_status_burning_time": 0,
            "user_a_pet_status_freezing": "False",
            "user_a_pet_status_freezing_time": 0,
            "user_a_pet_status_sleep": "False",
            "user_a_pet_status_sleep_time": 0,
            "user_a_pet_status_hidden": "False",
            "user_a_pet_status_hidden_time": 0,
            "user_a_pet_status_alive": "False",
            "user_a_pet_status_alive_time": 0,
            "user_a_pet_status_death": "False",
            "user_a_pet_status_death_time": 0,
            "user_a_pet_status_in_party": "False",
            "user_a_pet_status_in_guild": "False",
            "user_a_pet_status_own_castle": "False",
            "user_a_pet_status_own_nfts": "False",
            "user_a_pet_status_own_collection": "False",
            "user_a_pet_status_active": "False",
            "user_b_atk": 0.00001,
            "user_b_matk": 0.00001,
            "user_b_def": 0.00001,
            "user_b_mdef": 0.00001,
            "user_b_hit_reate": 0.00001,
            "user_b_crit_rate": 0.00001,
            "user_b_flee_rate": 0.00001,
            "user_b_move_rate": 0.00001,
            "user_b_hp_max": 0.00001,
            "user_b_hp_rate": 0.00001,
            "user_b_sp_max": 0.00001,
            "user_b_sp_rate": 0.00001,
            "user_b_item_rate": 1,
            "user_b_attack_range": 1,
            "user_b_cast_time": 1,
            "user_b_wait_time": 1,
            "user_b_weight_limit": 1,
            "user_b_status_stun": "False",
            "user_b_status_stun_time": 0,
            "user_b_status_blind": "False",
            "user_b_status_blind_time": 0,
            "user_b_status_conf": "False",
            "user_b_status_conf_time": 0,
            "user_b_status_silent": "False",
            "user_b_status_silent_time": 0,
            "user_b_status_poison": "False",
            "user_b_status_poison_time": 0,
            "user_b_status_burning": "False",
            "user_b_status_burning_time": 0,
            "user_b_status_freezing": "False",
            "user_b_status_freezing_time": 0,
            "user_b_status_sleep": "False",
            "user_b_status_sleep_time": 0,
            "user_b_status_hidden": "False",
            "user_b_status_hidden_time": 0,
            "user_b_status_alive": "False",
            "user_b_status_alive_time": 0,
            "user_b_status_death": "False",
            "user_b_status_death_time": 0,
            "user_b_status_in_party": "False",
            "user_b_status_in_guild": "False",
            "user_b_status_own_castle": "False",
            "user_b_status_own_nfts": "False",
            "user_b_status_own_collection": "False",
            "user_b_castle_atk": 0.00001,
            "user_b_castle_matk": 0.00001,
            "user_b_castle_def": 0.00001,
            "user_b_castle_mdef": 0.00001,
            "user_b_castle_hit_reate": 0.00001,
            "user_b_castle_crit_rate": 0.00001,
            "user_b_castle_hp_max": 0.00001,
            "user_b_castle_hp_rate": 0.00001,
            "user_b_castle_sp_max": 0.00001,
            "user_b_castle_sp_rate": 0.00001,
            "user_b_castle_item_rate": 1,
            "user_b_castle_attack_range": 1,
            "user_b_castle_cast_time": 1,
            "user_b_castle_wait_time": 1,
            "user_b_castle_weight_limit": 100,
            "user_b_castle_status_stun": "False",
            "user_b_castle_status_stun_time": 0,
            "user_b_castle_status_blind": "False",
            "user_b_castle_status_blind_time": 0,
            "user_b_castle_status_conf": "False",
            "user_b_castle_status_conf_time": 0,
            "user_b_castle_status_silent": "False",
            "user_b_castle_status_silent_time": 0,
            "user_b_castle_status_poison": "False",
            "user_b_castle_status_poison_time": 0,
            "user_b_castle_status_burning": "False",
            "user_b_castle_status_burning_time": 0,
            "user_b_castle_status_freezing": "False",
            "user_b_castle_status_freezing_time": 0,
            "user_b_castle_status_sleep": "False",
            "user_b_castle_status_sleep_time": 0,
            "user_b_castle_status_hidden": "False",
            "user_b_castle_status_hidden_time": 0,
            "user_b_castle_status_alive": "False",
            "user_b_castle_status_alive_time": 0,
            "user_b_castle_status_death": "False",
            "user_b_castle_status_death_time": 0,
            "user_b_castle_status_in_party": "False",
            "user_b_castle_status_in_guild": "False",
            "user_b_castle_status_own_castle": "False",
            "user_b_castle_status_own_nfts": "False",
            "user_b_castle_status_own_collection": "False",
            "user_b_level": 0.00001,
            "user_b_exp": 0.00001,
            "user_b_exp_to_next_lv": 0.00001,
            "user_b_exp_max": 0.00001,
            "user_b_pet_exp": 0.00001,
            "user_b_pet_exp_max": 0.00001,
            "user_b_pet_exp_to_next_lv": 0.00001,
            "user_b_pet_level": 0.00001,
            "user_b_pet_name": "False",
            "user_b_pet_id": "False",
            "user_b_pet_house_name": "False",
            "user_b_pet_house_id": "False",
            "user_b_pet_house_roll": [],
            "user_b_castle_level": 0.00001,
            "user_b_castle_id": "False",
            "user_b_castle_wood": 0.00000,
            "user_b_castle_stone": 0.00000,
            "user_b_castle_metal": 0.00000,
            "user_b_castle_gold": 0.00000,
            "user_b_castle_boco": 0.00000,
            "user_b_castle_people": 0.00000,
            "user_b_pet_status_stun": "False",
            "user_b_pet_status_stun_time": 0,
            "user_b_pet_status_blind": "False",
            "user_b_pet_status_blind_time": 0,
            "user_b_pet_status_conf": "False",
            "user_b_pet_status_conf_time": 0,
            "user_b_pet_status_silent": "False",
            "user_b_pet_status_silent_time": 0,
            "user_b_pet_status_poison": "False",
            "user_b_pet_status_poison_time": 0,
            "user_b_pet_status_burning": "False",
            "user_b_pet_status_burning_time": 0,
            "user_b_pet_status_freezing": "False",
            "user_b_pet_status_freezing_time": 0,
            "user_b_pet_status_sleep": "False",
            "user_b_pet_status_sleep_time": 0,
            "user_b_pet_status_hidden": "False",
            "user_b_pet_status_hidden_time": 0,
            "user_b_pet_status_alive": "False",
            "user_b_pet_status_alive_time": 0,
            "user_b_pet_status_death": "False",
            "user_b_pet_status_death_time": 0,
            "user_b_pet_status_in_party": "False",
            "user_b_pet_status_in_guild": "False",
            "user_b_pet_status_own_castle": "False",
            "user_b_pet_status_own_nfts": "False",
            "user_b_pet_status_own_collection": "False",
            "user_b_pet_status_active": "False",
            "wallet_balance_str" : 0,
            "wallet_balance_agi" : 0,
            "wallet_balance_vit" : 0,
            "wallet_balance_int" : 0,
            "wallet_balance_dex" : 0,
            "wallet_balance_luk" : 0,
            "wallet_balance_bopixbo" : 0,
            "wallet_balance_bpvalue" : 0,
            "wallet_balance_boco" : 0,
            "wallet_balance_gold" : 0,
            "wallet_balance_rock" : 0,
            "wallet_balance_scissor" : 0,
            "wallet_balance_paper" : 0,
            "wallet_balance_wood" : 0,
            "wallet_balance_stone" : 0,
            "wallet_balance_metal" : 0,
            "wallet_balance_food" : 0,
            "wallet_balance_people" : 0,
            "wallet_balance_door" : 0,
            "wallet_balance_key" : 0,
            "wallet_balance_armro" : 0,
            "wallet_balance_armpa" : 0,
            "wallet_balance_armsc" : 0,
            "wallet_balance_depts" : 0,
            "wallet_balance_points" : 0,
            "wallet_balance_coffee" : 0,
            "wallet_balance_energy" : 0,
            "wallet_balance_wax" : 0,
            "wallet_balance_wojak" : 0,
            "wallet_balance_pixel123" : 0,
            "wallet_balance_aether" : 0,
            "wallet_balance_tlm" : 0,
            "wallet_balance_dust" : 0,
            "wallet_balance_waxgoli":0,
            "wallet_balance_":0,
            "wallet_balance_rank" : 0,
            "score_wallet_total" : 0,
            "serverGuild_id": 0,
            "enemyhp":0,
            "meters":0,
            "meters_max":1,
            "meters_high":1,
            "selected_enemy_player":"None",
            "zombie_kill_count_total":0,
            "WalletSetupDone" : 0,
            "account" : "None",
            "account_to_check" : "None",
            "accountset" : 0,
            "assetspixilminiwax" : 0,
            "assetspixellabs123" : 0,
            "assetshoodpunknfts" : 0,
            "assetspackage" : 0,
            "assetsrock" : 0,
            "assetsscissor" : 0,
            "assetspaper" : 0,
            "assetscoffee" : 0,
            "assetsspace" : 0,
            "assetsmemberpass" : 0,
            "a" : 0,
            "all_" : "None",
            "all_attack" : 0.01,
            "all_base_a" : "None",
            "all_base_attack" : 0.01,
            "all_base_boco" : 0.01,
            "all_base_defence" : 0.01,
            "all_base_door" : 0.01,
            "all_base_drop" : 0.01,
            "all_base_exp" : 0.01,
            "all_base_food" : 0.01,
            "all_base_gold" : 0.01,
            "all_base_hp" : 0.01,
            "all_base_key" : 0.01,
            "all_base_metal" : 0.01,
            "all_base_mp" : 0.01,
            "all_base_people" : 0.01,
            "all_base_pot" : 0.01,
            "all_base_skexp" : 0.01,
            "all_base_sp" : 0.01,
            "all_base_stone" : 0.01,
            "all_base_wood" : 0.01,
            "all_defence" : 0.01,
            "all_drop" : 0.01,
            "all_drop_attack" : 0.01,
            "all_drop_boco" : 0.01,
            "all_drop_defence" : 0.01,
            "all_drop_door" : 0.1,
            "all_drop_exp" : 0.01,
            "all_drop_food" : 0.01,
            "all_drop_gold" : 0.01,
            "all_drop_hp" : 0.01,
            "all_drop_key" : 0.01,
            "all_drop_metal" : 0.01,
            "all_drop_mp" : 0.01,
            "all_drop_people" : 0.1,
            "all_drop_pot" : 0.01,
            "all_drop_skexp" : 0.01,
            "all_drop_sp" : 0.01,
            "all_drop_stone" : 0.01,
            "all_drop_wood" : 0.01,
            "all_inventory" : [
                "Hand",
                "Hand"
            ],
            "all_inventory_space" : 5000,
            "all_total_base_attack" : 0.01,
            "all_total_base_boco" : 0.01,
            "all_total_base_defence" : 0.01,
            "all_total_base_door" : 0.01,
            "all_total_base_drop" : 0.01,
            "all_total_base_exp" : 0.01,
            "all_total_base_food" : 0.01,
            "all_total_base_gold" : 0.01,
            "all_total_base_hp" : 0.01,
            "all_total_base_key" : 0.01,
            "all_total_base_metal" : 0.01,
            "all_total_base_mp" : 0.01,
            "all_total_base_people" : 0.01,
            "all_total_base_pot" : 0.01,
            "all_total_base_skexp" : 0.01,
            "all_total_base_sp" : 0.01,
            "all_total_base_stone" : 0.01,
            "all_total_base_wood" : 0.01,
            "ammo_arrow" : 0,
            "ammo_arrow_steal" : 0,
            "ammo_arrow_trap" : 0,
            "ammo_earth_pot" : 0,
            "ammo_fire_pot" : 0,
            "ammo_water_pot" : 0,
            "ammo_wind_pot" : 0,
            "amnesiapot" : 0,
            "amnesiaatk" : 0,
            "assets" : "None",
            "assets_fg" : "0",
            "assets_to_add" : "None",
            "attack0" : 0,
            "attack1" : 0,
            "attack10" : 0,
            "attack11" : 0,
            "attack12" : 0,
            "attack13" : 0,
            "attack14" : 0,
            "attack15" : 0,
            "attack16" : 0,
            "attack17" : 0,
            "attack18" : 0,
            "attack19" : 0,
            "attack2" : 0,
            "attack20" : 0,
            "attack21" : 0,
            "attack22" : 0,
            "attack23" : 0,
            "attack24" : 0,
            "attack25" : 0,
            "attack3" : 0,
            "attack4" : 0,
            "attack5" : 0,
            "attack6" : 0,
            "attack7" : 0,
            "attack8" : 0,
            "attack9" : 0,
            "authorID" : "None",
            "bag_army" : 0,
            "bag_boco" : 0,
            "bag_food" : 0,
            "bag_gold" : 0,
            "bag_key" : 0,
            "bag_metal" : 0,
            "bag_people" : 0,
            "bag_small" : 0,
            "bag_stone" : 0,
            "bag_wood" : 0,
            "bbvalue" : 0,
            "bbvalue_stats" : 0,
            "bbvalue_total_stats" : 0,
            "bbvaluef" : 0,
            "bet_guess100" : 0,
            "bet_tguess100" : 0,
            "bigpot" : 0,
            "boco" : 0,
            "boco_drop" : 0,
            "bocodropp0" : 0,
            "bocodropp1" : 0,
            "bocodropp10" : 0,
            "bocodropp11" : 0,
            "bocodropp12" : 0,
            "bocodropp13" : 0,
            "bocodropp14" : 0,
            "bocodropp15" : 0,
            "bocodropp16" : 0,
            "bocodropp17" : 0,
            "bocodropp18" : 0,
            "bocodropp19" : 0,
            "bocodropp2" : 0,
            "bocodropp20" : 0,
            "bocodropp21" : 0,
            "bocodropp22" : 0,
            "bocodropp23" : 0,
            "bocodropp24" : 0,
            "bocodropp25" : 0,
            "bocodropp3" : 0,
            "bocodropp4" : 0,
            "bocodropp5" : 0,
            "bocodropp6" : 0,
            "bocodropp7" : 0,
            "bocodropp8" : 0,
            "bocodropp9" : 0,
            "box_army" : 0,
            "box_army_block" : 0,
            "box_army_lvl" : 1,
            "box_boco" : 0,
            "box_boco_block" : 0,
            "box_boco_lvl" : 1,
            "box_buff" : [],
            "box_coin_block" : 0,
            "box_food" : 0,
            "box_food_block" : 0,
            "box_food_lvl" : 1,
            "box_gold" : 0,
            "box_gold_block" : 0,
            "box_gold_lvl" : 1,
            "box_inventory" : [],
            "box_inventory_lvl" : 1,
            "box_key_lvl" : 1,
            "box_lvl" : 0,
            "box_metal" : 0,
            "box_metal_block" : 0,
            "box_metal_lvl" : 1,
            "box_people" : 0,
            "box_people_block" : 0,
            "box_people_lvl" : 1,
            "box_pot_block" : 0,
            "box_pot_lvl" : 1,
            "box_stone" : 0,
            "box_stone_block" : 0,
            "box_stone_lvl" : 1,
            "box_wood" : 0,
            "box_wood_block" : 0,
            "box_wood_lvl" : 1,
            "bp0" : 0,
            "bp1" : 0,
            "bp10" : 0,
            "bp11" : 0,
            "bp12" : 0,
            "bp13" : 0,
            "bp14" : 0,
            "bp15" : 0,
            "bp16" : 0,
            "bp17" : 0,
            "bp18" : 0,
            "bp19" : 0,
            "bp2" : 0,
            "bp20" : 0,
            "bp21" : 0,
            "bp22" : 0,
            "bp23" : 0,
            "bp24" : 0,
            "bp25" : 0,
            "bp3" : 0,
            "bp4" : 0,
            "bp5" : 0,
            "bp6" : 0,
            "bp7" : 0,
            "bp8" : 0,
            "bp9" : 0,
            "bpbalcrit" : 0,
            "bpcbwhite" : 0,
            "bpccc" : 0,
            "bpcccValue" : 0,
            "bpcclassic" : 0,
            "bpcclean" : 0,
            "bpcdirty" : 0,
            "bpcretro" : 0,
            "bpf0" : 0,
            "bpf1" : 0,
            "bpf10" : 0,
            "bpf11" : 0,
            "bpf12" : 0,
            "bpf13" : 0,
            "bpf14" : 0,
            "bpf15" : 0,
            "bpf16" : 0,
            "bpf17" : 0,
            "bpf18" : 0,
            "bpf19" : 0,
            "bpf2" : 0,
            "bpf20" : 0,
            "bpf21" : 0,
            "bpf22" : 0,
            "bpf23" : 0,
            "bpf24" : 0,
            "bpf25" : 0,
            "bpf3" : 0,
            "bpf4" : 0,
            "bpf5" : 0,
            "bpf6" : 0,
            "bpf7" : 0,
            "bpf8" : 0,
            "bpf9" : 0,
            "bpfire0" : 0,
            "bpfire1" : 0,
            "bpfire10" : 0,
            "bpfire11" : 0,
            "bpfire12" : 0,
            "bpfire13" : 0,
            "bpfire14" : 0,
            "bpfire15" : 0,
            "bpfire16" : 0,
            "bpfire17" : 0,
            "bpfire18" : 0,
            "bpfire19" : 0,
            "bpfire2" : 0,
            "bpfire20" : 0,
            "bpfire21" : 0,
            "bpfire22" : 0,
            "bpfire23" : 0,
            "bpfire24" : 0,
            "bpfire25" : 0,
            "bpfire3" : 0,
            "bpfire4" : 0,
            "bpfire5" : 0,
            "bpfire6" : 0,
            "bpfire7" : 0,
            "bpfire8" : 0,
            "bpfire9" : 0,
            "bpfireprofe" : 0,
            "bpfreecandy" : 0,
            "bpfreecandylv52" : 0,
            "bpfreecandytwitch3" : 0,
            "bpjacktick" : 0,
            "bppacksv1" : 0,
            "bppacksv2" : 0,
            "bppacksv4525" : 0,
            "bppacksv4550" : 0,
            "bppacksv4575" : 0,
            "bppacksv51025" : 0,
            "bppacksv51050" : 0,
            "bppacksv51075" : 0,
            "bppacksv6f" : 0,
            "bppacksv71" : 0,
            "bppacksv710" : 0,
            "bppacksv75" : 0,
            "bppacksv81" : 0,
            "bppacksv825" : 0,
            "bpqualityam" : 0,
            "bpramdonator" : 0,
            "bproll_0" : 0,
            "bproll_1" : 0,
            "bproll_10" : 0,
            "bproll_11" : 0,
            "bproll_12" : 0,
            "bproll_13" : 0,
            "bproll_14" : 0,
            "bproll_2" : 0,
            "bproll_3" : 0,
            "bproll_4" : 0,
            "bproll_5" : 0,
            "bproll_6" : 0,
            "bproll_7" : 0,
            "bproll_8" : 0,
            "bproll_9" : 0,
            "bprpg_270" : 0,
            "bprpg_271" : 0,
            "bprpg_272" : 0,
            "bprpg_273" : 0,
            "bprpg_274" : 0,
            "bprpg_275" : 0,
            "bprpg_276" : 0,
            "bprpg_277" : 0,
            "bprpg_278" : 0,
            "bprpg_279" : 0,
            "bprpg_280" : 0,
            "bprpg_281" : 0,
            "bprpg_282" : 0,
            "bprpg_283" : 0,
            "bprpg_284" : 0,
            "bprpg_285" : 0,
            "bprpg_286" : 0,
            "bprpg_287" : 0,
            "bprpg_288" : 0,
            "bprpg_289" : 0,
            "bprpg_290" : 0,
            "bprpg_291" : 0,
            "bprpg_292" : 0,
            "bprpg_293" : 0,
            "bprpg_294" : 0,
            "bprpg_295" : 0,
            "bprpg_296" : 0,
            "bprpg_297" : 0,
            "bprpg_298" : 0,
            "bprpg_299" : 0,
            "bprpg_300" : 0,
            "bprpg_301" : 0,
            "bprpg_302" : 0,
            "bprpg_303" : 0,
            "bprpg_304" : 0,
            "bprpg_305" : 0,
            "bprpg_306" : 0,
            "bprpg_307" : 0,
            "bprpg_308" : 0,
            "bprpg_309" : 0,
            "bprpg_310" : 0,
            "bprpg_311" : 0,
            "bprpg_312" : 0,
            "bprpg_313" : 0,
            "bprpg_314" : 0,
            "bprpg_315" : 0,
            "bprpg_316" : 0,
            "bprpg_317" : 0,
            "bprpg_318" : 0,
            "bprpg_319" : 0,
            "bprpg_320" : 0,
            "bprpg_321" : 0,
            "bprpg_322" : 0,
            "bprpg_323" : 0,
            "bprpg_324" : 0,
            "bprpg_325" : 0,
            "bprpg_326" : 0,
            "bprpg_327" : 0,
            "bprpg_328" : 0,
            "bprpg_329" : 0,
            "bprpg_330" : 0,
            "bprpg_331" : 0,
            "bprpg_332" : 0,
            "bprpg_333" : 0,
            "bprpg_334" : 0,
            "bprpg_335" : 0,
            "bprpg_336" : 0,
            "bprpg_337" : 0,
            "bprpg_338" : 0,
            "bprpg_339" : 0,
            "bprpg_340" : 0,
            "bprpg_341" : 0,
            "bprpg_342" : 0,
            "bprpg_343" : 0,
            "bprpg_344" : 0,
            "bprpg_345" : 0,
            "bprpg_346" : 0,
            "bprpg_347" : 0,
            "bprpg_348" : 0,
            "bprpg_349" : 0,
            "bprpg_350" : 0,
            "bprpg_351" : 0,
            "bprpg_352" : 0,
            "bprpg_353" : 0,
            "bprpg_354" : 0,
            "bprpg_355" : 0,
            "bprpg_357" : 0,
            "bprpg_358" : 0,
            "bprpg_359" : 0,
            "bprpg_360" : 0,
            "bprpg_361" : 0,
            "bprpg_362" : 0,
            "bprpg_363" : 0,
            "bprpg_364" : 0,
            "bprpg_365" : 0,
            "bprpg_366" : 0,
            "bprpg_367" : 0,
            "bprpg_368" : 0,
            "bprpg_369" : 0,
            "bprpg_370" : 0,
            "bprpg_371" : 0,
            "bprpg_372" : 0,
            "bprpg_373" : 0,
            "bprpg_374" : 0,
            "bprpg_375" : 0,
            "bprpg_376" : 0,
            "bprpg_377" : 0,
            "bprpg_378" : 0,
            "bprpg_379" : 0,
            "bprpg_380" : 0,
            "bprpg_381" : 0,
            "bprpg_382" : 0,
            "bprpg_383" : 0,
            "bprpg_384" : 0,
            "bprpg_385" : 0,
            "bprpg_386" : 0,
            "bprpg_387" : 0,
            "bprpg_388" : 0,
            "bprpg_389" : 0,
            "bprpg_390" : 0,
            "bprpg_391" : 0,
            "bprpg_392" : 0,
            "bprpg_393" : 0,
            "bprpg_394" : 0,
            "bprpg_395" : 0,
            "bprpg_396" : 0,
            "bprpg_397" : 0,
            "bprpg_398" : 0,
            "bprpg_399" : 0,
            "bprpg_40" : 0,
            "bprpg_400" : 0,
            "bprpg_401" : 0,
            "bprpg_402" : 0,
            "bprpg_403" : 0,
            "bprpg_404" : 0,
            "bprpg_405" : 0,
            "bprpg_406" : 0,
            "bprpg_407" : 0,
            "bprpg_408" : 0,
            "bprpg_409" : 0,
            "bprpg_65287" : 0,
            "bpv0" : 0,
            "bpv1" : 0,
            "bpv10" : 0,
            "bpv11" : 0,
            "bpv12" : 0,
            "bpv13" : 0,
            "bpv14" : 0,
            "bpv15" : 0,
            "bpv16" : 0,
            "bpv17" : 0,
            "bpv18" : 0,
            "bpv19" : 0,
            "bpv2" : 0,
            "bpv20" : 0,
            "bpv21" : 0,
            "bpv22" : 0,
            "bpv23" : 0,
            "bpv24" : 0,
            "bpv25" : 0,
            "bpv3" : 0,
            "bpv4" : 0,
            "bpv5" : 0,
            "bpv6" : 0,
            "bpv7" : 0,
            "bpv8" : 0,
            "bpv9" : 0,
            "bpvf0" : 0,
            "bpvf1" : 0,
            "bpvf10" : 0,
            "bpvf11" : 0,
            "bpvf12" : 0,
            "bpvf13" : 0,
            "bpvf14" : 0,
            "bpvf15" : 0,
            "bpvf16" : 0,
            "bpvf17" : 0,
            "bpvf18" : 0,
            "bpvf19" : 0,
            "bpvf2" : 0,
            "bpvf20" : 0,
            "bpvf21" : 0,
            "bpvf22" : 0,
            "bpvf23" : 0,
            "bpvf24" : 0,
            "bpvf25" : 0,
            "bpvf3" : 0,
            "bpvf4" : 0,
            "bpvf5" : 0,
            "bpvf6" : 0,
            "bpvf7" : 0,
            "bpvf8" : 0,
            "bpvf9" : 0,
            "bpwhite" : 0,
            "buff" : [],
            "castle_aether" : 0,
            "castle_ali" : "None",
            "castle_all_attack" : 0,
            "castle_all_attack_drop" : 0,
            "castle_all_attack_lvl" : 0,
            "castle_all_defence" : 0,
            "castle_all_defence_drop" : 0,
            "castle_all_defence_lvl" : 0,
            "castle_antimat" : 0,
            "castle_army" : 0,
            "castle_army_lvl" : 0,
            "castle_army_paper" : 0,
            "castle_army_paper_lvl" : 0,
            "castle_army_paper_total" : 0,
            "castle_army_rock" : 0,
            "castle_army_rock_lvl" : 0,
            "castle_army_rock_total" : 0,
            "castle_army_scissor" : 0,
            "castle_army_scissor_lvl" : 0,
            "castle_army_scissor_total" : 0,
            "castle_army_total" : 0,
            "castle_army_total1" : 0,
            "castle_armym" : 0,
            "castle_atk" : 0,
            "castle_bgold" : 0,
            "castle_blue" : 0,
            "castle_bobocoin" : 0,
            "castle_boco" : 0,
            "castle_bocom" : 0,
            "castle_bopigol" : 0,
            "castle_bopixbo" : 0,
            "castle_bbpv" : 0,
            "castle_box_lvl" : 0,
            "castle_cait" : 0,
            "castle_channel" : 156,
            "castle_count_draw" : 0,
            "castle_count_lose" : 0,
            "castle_count_played" : 0,
            "castle_count_score" : 0,
            "castle_count_win" : 0,
            "castle_def" : 0,
            "castle_dept" : 0,
            "castle_door" : 0,
            "castle_drop_atk" : 0,
            "castle_drop_boco" : 0,
            "castle_drop_def" : 0,
            "castle_drop_door" : 0,
            "castle_drop_exp" : 0,
            "castle_drop_food" : 0,
            "castle_drop_gold" : 0,
            "castle_drop_hp" : 0,
            "castle_drop_key" : 0,
            "castle_drop_max" : 0,
            "castle_drop_metal" : 0,
            "castle_drop_mp" : 0,
            "castle_drop_people" : 0,
            "castle_drop_rate" : 0,
            "castle_drop_skexp" : 0,
            "castle_drop_sp" : 0,
            "castle_drop_stone" : 0,
            "castle_drop_wood" : 0,
            "castle_dust" : 0,
            "castle_eos" : 0,
            "castle_food" : 0,
            "castle_foodm" : 0,
            "castle_gold" : 0,
            "castle_goldm" : 0,
            "castle_guard" : 0,
            "castle_guard_lvl" : 0,
            "castle_guild_all_drop" : 0.01,
            "castle_guild_all_inventory" : [
                "Hand",
                "Hand"
            ],
            "castle_guild_army_paper" : 0,
            "castle_guild_army_paperOpen" : 0,
            "castle_guild_army_rock" : 0,
            "castle_guild_army_rockOpen" : 0,
            "castle_guild_army_scissor" : 0,
            "castle_guild_army_scissorOpen" : 0,
            "castle_guild_army_total" : 0,
            "castle_guild_army_totalOpen" : 0,
            "castle_guild_attack" : 0,
            "castle_guild_attack_lvl" : 0,
            "castle_guild_defense" : 0,
            "castle_guild_defense_lvl" : 0,
            "castle_guild_door" : 0,
            "castle_guild_drop_boco" : 0,
            "castle_guild_drop_exp" : 0,
            "castle_guild_drop_food" : 0,
            "castle_guild_drop_gold" : 0,
            "castle_guild_drop_hp" : 0,
            "castle_guild_drop_key" : 0,
            "castle_guild_drop_metal" : 0,
            "castle_guild_drop_mp" : 0,
            "castle_guild_drop_people" : 0,
            "castle_guild_drop_pot" : 0,
            "castle_guild_drop_skexp" : 0,
            "castle_guild_drop_sp" : 0,
            "castle_guild_drop_stone" : 0,
            "castle_guild_drop_wood" : 0,
            "castle_guild_food" : 0,
            "castle_guild_gold" : 0,
            "castle_guild_guard" : 0,
            "castle_guild_guard_lvl" : 0,
            "castle_guild_hp" : 100,
            "castle_guild_key" : 0,
            "castle_guild_lvl" : 0,
            "castle_guild_metal" : 0,
            "castle_guild_mp" : 100,
            "castle_guild_name" : "",
            "castle_guild_people" : 0,
            "castle_guild_pot" : 1,
            "castle_guild_skexp" : 0,
            "castle_guild_sp" : 100,
            "castle_guild_stone" : 0,
            "castle_guild_tower" : 0,
            "castle_guild_tower_lvl" : 0,
            "castle_guild_wood" : 0,
            "castle_img" : 0,
            "castle_inventory" : [],
            "castle_invv_space" : 10000,
            "castle_key" : 0,
            "castle_keym" : 0,
            "castle_lvl" : 0,
            "castle_metal" : 0,
            "castle_metalm" : 0,
            "castle_name" : "None",
            "castle_nefty" : 0,
            "castle_owner" : "False",
            "castle_owner_paper" : "None",
            "castle_owner_rock" : "None",
            "castle_owner_scissor" : "None",
            "castle_paper" : 0,
            "castle_people" : 0,
            "castle_peoplem" : 0,
            "castle_pixel" : 0,
            "castle_power" : 0,
            "castle_rank" : 0,
            "castle_rock" : 0,
            "castle_scissor" : 0,
            "castle_status" : "Working progress ALFA",
            "castle_stone" : 0,
            "castle_stonem" : 0,
            "castle_tlm" : 0,
            "castle_token_pixel" : 0,
            "castle_total" : 0,
            "castle_tower" : 0,
            "castle_tower_lvl" : 0,
            "castle_usdt" : 0,
            "castle_wall_hp" : 1000,
            "castle_wall_hpmax" : 1000,
            "castle_wall_lvl" : 0,
            "castle_wax" : 0,
            "castle_wgold" : 0,
            "castle_wojak" : 0,
            "castle_wood" : 0,
            "castle_woodm" : 0,
            "castle_str" : 0,
            "castle_vit" : 0,
            "castle_agi" : 0,
            "castle_dex" : 0,
            "castle_int" : 0,
            "castle_luk" : 0,
            "castle_work_block" : 0,
            "channel" : 234,
            "check_a" : 0,
            "check_b" : 0,
            "check_c" : 0,
            "check_ccc" : 0,
            "check_d" : 0,
            "check_drop" : 0,
            "check_e" : 0,
            "check_f" : 0,
            "check_fakeingheros" : 0,
            "check_g" : 0,
            "check_guess" : 0,
            "check_h" : 0,
            "check_i" : 0,
            "check_j" : 0,
            "check_k" : 0,
            "check_l" : 0,
            "check_m" : 0,
            "check_nft" : 0,
            "check_pack" : 0,
            "chop_block" : 0,
            "class" : "None",
            "clime_try" : 0,
            "code" : 0,
            "coinflip_block" : 0,
            "count_amnesiaatk" : 0,
            "count_click" : 0,
            "count_draw" : 0,
            "count_lose" : 0,
            "count_played" : 0,
            "count_pvp_draw" : 0,
            "count_pvp_lose" : 0,
            "count_pvp_played" : 0,
            "count_pvp_win" : 0,
            "count_titlenum" : 0,
            "count_treue" : 0,
            "count_win" : 0,
            "count_wincry" : "None",
            "counterWoodFail" : 0,
            "cppValue" : 0,
            "cpp_cool_block" : 0,
            "craftable" : [],
            "daily_block" : 0,
            "data" : [],
            "deaths" : 0,
            "defence" : 0,
            "defence0" : 0,
            "defence1" : 0,
            "defence10" : 0,
            "defence11" : 0,
            "defence12" : 0,
            "defence13" : 0,
            "defence14" : 0,
            "defence15" : 0,
            "defence16" : 0,
            "defence17" : 0,
            "defence18" : 0,
            "defence19" : 0,
            "defence2" : 0,
            "defence20" : 0,
            "defence21" : 0,
            "defence22" : 0,
            "defence23" : 0,
            "defence24" : 0,
            "defence25" : 0,
            "defence3" : 0,
            "defence4" : 0,
            "defence5" : 0,
            "defence6" : 0,
            "defence7" : 0,
            "defence8" : 0,
            "defence9" : 0,
            "dice_bet" : 0,
            "dice_block" : 0,
            "dice_count" : 0,
            "dice_count_played" : 0,
            "dice_lose" : 0,
            "dice_row" : 0,
            "dice_win" : 0,
            "dice_win_money" : 0,
            "dice_win_money_bet" : 0,
            "dig_block" : 0,
            "door" : "None",
            "door0" : 0,
            "door1" : 0,
            "door10" : 0,
            "door11" : 0,
            "door12" : 0,
            "door13" : 0,
            "door14" : 0,
            "door15" : 0,
            "door16" : 0,
            "door17" : 0,
            "door18" : 0,
            "door19" : 0,
            "door2" : 0,
            "door20" : 0,
            "door21" : 0,
            "door22" : 0,
            "door23" : 0,
            "door24" : 0,
            "door25" : 0,
            "door3" : 0,
            "door4" : 0,
            "door5" : 0,
            "door6" : 0,
            "door7" : 0,
            "door8" : 0,
            "door9" : 0,
            "door_enemy" : "None",
            "door_enemy_hp" : 0,
            "doorenemyhp" : 50,
            "doorenemylvl" : 0,
            "dragon_holding_time" : 0,
            "dragon_hunt" : "False",
            "dragon_time" : 0,
            "drop_boco" : 0,
            "drop_door" : 0,
            "drop_food" : 0,
            "drop_gold" : 0,
            "drop_key" : 0,
            "drop_metal" : 0,
            "drop_people" : 0,
            "drop_stone" : 0,
            "drop_wood" : 0,
            "dropdrop0" : 0,
            "dropdrop1" : 0,
            "dropdrop10" : 0,
            "dropdrop11" : 0,
            "dropdrop12" : 0,
            "dropdrop13" : 0,
            "dropdrop14" : 0,
            "dropdrop15" : 0,
            "dropdrop16" : 0,
            "dropdrop17" : 0,
            "dropdrop18" : 0,
            "dropdrop19" : 0,
            "dropdrop2" : 0,
            "dropdrop20" : 0,
            "dropdrop21" : 0,
            "dropdrop22" : 0,
            "dropdrop23" : 0,
            "dropdrop24" : 0,
            "dropdrop25" : 0,
            "dropdrop3" : 0,
            "dropdrop4" : 0,
            "dropdrop5" : 0,
            "dropdrop6" : 0,
            "dropdrop7" : 0,
            "dropdrop8" : 0,
            "dropdrop9" : 0,
            "duneon_enemy_hp" : 0,
            "dungeon_enemy" : "None",
            "emptybag" : 0,
            "enemieskilled" : 0,
            "equip_skills0" : [],
            "equip_skills1" : [],
            "equip_skills2" : [],
            "equip_skills3" : [],
            "exp" : 0,
            "expdropp0" : 0,
            "expdropp1" : 0,
            "expdropp10" : 0,
            "expdropp11" : 0,
            "expdropp12" : 0,
            "expdropp13" : 0,
            "expdropp14" : 0,
            "expdropp15" : 0,
            "expdropp16" : 0,
            "expdropp17" : 0,
            "expdropp18" : 0,
            "expdropp19" : 0,
            "expdropp2" : 0,
            "expdropp20" : 0,
            "expdropp21" : 0,
            "expdropp22" : 0,
            "expdropp23" : 0,
            "expdropp24" : 0,
            "expdropp25" : 0,
            "expdropp3" : 0,
            "expdropp4" : 0,
            "expdropp5" : 0,
            "expdropp6" : 0,
            "expdropp7" : 0,
            "expdropp8" : 0,
            "expdropp9" : 0,
            "expmax" : 1,
            "expmaxsk" : 1,
            "expsk" : 1,
            "food" : 0,
            "food_drop" : 0,
            "fooddropp0" : 0,
            "fooddropp1" : 0,
            "fooddropp10" : 0,
            "fooddropp11" : 0,
            "fooddropp12" : 0,
            "fooddropp13" : 0,
            "fooddropp14" : 0,
            "fooddropp15" : 0,
            "fooddropp16" : 0,
            "fooddropp17" : 0,
            "fooddropp18" : 0,
            "fooddropp19" : 0,
            "fooddropp2" : 0,
            "fooddropp20" : 0,
            "fooddropp21" : 0,
            "fooddropp22" : 0,
            "fooddropp23" : 0,
            "fooddropp24" : 0,
            "fooddropp25" : 0,
            "fooddropp3" : 0,
            "fooddropp4" : 0,
            "fooddropp5" : 0,
            "fooddropp6" : 0,
            "fooddropp7" : 0,
            "fooddropp8" : 0,
            "fooddropp9" : 0,
            "free1_cool_block" : 0,
            "free_cool_block" : 0,
            "free_cool_block1" : 0,
            "gold" : 0,
            "gold_drop" : 0,
            "golddropp0" : 0,
            "golddropp1" : 0,
            "golddropp10" : 0,
            "golddropp11" : 0,
            "golddropp12" : 0,
            "golddropp13" : 0,
            "golddropp14" : 0,
            "golddropp15" : 0,
            "golddropp16" : 0,
            "golddropp17" : 0,
            "golddropp18" : 0,
            "golddropp19" : 0,
            "golddropp2" : 0,
            "golddropp20" : 0,
            "golddropp21" : 0,
            "golddropp22" : 0,
            "golddropp23" : 0,
            "golddropp24" : 0,
            "golddropp25" : 0,
            "golddropp3" : 0,
            "golddropp4" : 0,
            "golddropp5" : 0,
            "golddropp6" : 0,
            "golddropp7" : 0,
            "golddropp8" : 0,
            "golddropp9" : 0,
            "guess100_versuch" : 0,
            "guild" : "None",
            "hacker_antivirus" : 0,
            "hacker_botnet" : 1,
            "hacker_cracker" : 0,
            "hacker_firewall" : 0,
            "hacker_name" : 0,
            "hacker_password" : 0,
            "hacker_virus" : 0,
            "health" : 100,
            "healthmax" : 100,
            "how_many_time" : 0,
            "hp_drop" : 0.01,
            "hpdrop0" : 0,
            "hpdrop1" : 0,
            "hpdrop10" : 0,
            "hpdrop11" : 0,
            "hpdrop12" : 0,
            "hpdrop13" : 0,
            "hpdrop14" : 0,
            "hpdrop15" : 0,
            "hpdrop16" : 0,
            "hpdrop17" : 0,
            "hpdrop18" : 0,
            "hpdrop19" : 0,
            "hpdrop2" : 0,
            "hpdrop20" : 0,
            "hpdrop21" : 0,
            "hpdrop22" : 0,
            "hpdrop23" : 0,
            "hpdrop24" : 0,
            "hpdrop25" : 0,
            "hpdrop3" : 0,
            "hpdrop4" : 0,
            "hpdrop5" : 0,
            "hpdrop6" : 0,
            "hpdrop7" : 0,
            "hpdrop8" : 0,
            "hpdrop9" : 0,
            "hunt_block" : 0,
            "in_dungeon" : "False",
            "in_party" : [],
            "inbuff" : "False",
            "infight_status" : "False",
            "info_member" : 0,
            "inguild" : "None",
            "inhavenft_status" : "False",
            "inventory" : [],
            "inventory_lvl" : [],
            "itemdrop_test" : "None",
            "key" : 0,
            "key_drop" : 0,
            "keydropp0" : 0,
            "keydropp1" : 0,
            "keydropp10" : 0,
            "keydropp11" : 0,
            "keydropp12" : 0,
            "keydropp13" : 0,
            "keydropp14" : 0,
            "keydropp15" : 0,
            "keydropp16" : 0,
            "keydropp17" : 0,
            "keydropp18" : 0,
            "keydropp19" : 0,
            "keydropp2" : 0,
            "keydropp20" : 0,
            "keydropp21" : 0,
            "keydropp22" : 0,
            "keydropp23" : 0,
            "keydropp24" : 0,
            "keydropp25" : 0,
            "keydropp3" : 0,
            "keydropp4" : 0,
            "keydropp5" : 0,
            "keydropp6" : 0,
            "keydropp7" : 0,
            "keydropp8" : 0,
            "keydropp9" : 0,
            "location" : "Newbe Training Ground",
            "lockedbox" : 0,
            "lootbag" : 0,
            "losecry" : "None",
            "lottery_tickets" : [],
            "lotto_num_guess" : 0,
            "lotto_pot" : 0,
            "lucky_bet" : 0,
            "lucky_block" : 0,
            "lucky_num" : 0,
            "luknum" : 0,
            "lvl" : 1,
            "lvl_attack" : "0",
            "lvl_defence" : "0",
            "lvljump" : 1,
            "mana" : 100,
            "manamax" : 100,
            "max_def" : 0,
            "max_dmg" : 0,
            "max_skexp" : 1,
            "mediumpot" : 0,
            "memberid" : "None",
            "metal" : 0,
            "metal_drop" : 0.01,
            "metaldropp0" : 0,
            "metaldropp1" : 0,
            "metaldropp10" : 0,
            "metaldropp11" : 0,
            "metaldropp12" : 0,
            "metaldropp13" : 0,
            "metaldropp14" : 0,
            "metaldropp15" : 0,
            "metaldropp16" : 0,
            "metaldropp17" : 0,
            "metaldropp18" : 0,
            "metaldropp19" : 0,
            "metaldropp2" : 0,
            "metaldropp20" : 0,
            "metaldropp21" : 0,
            "metaldropp22" : 0,
            "metaldropp23" : 0,
            "metaldropp24" : 0,
            "metaldropp25" : 0,
            "metaldropp3" : 0,
            "metaldropp4" : 0,
            "metaldropp5" : 0,
            "metaldropp6" : 0,
            "metaldropp7" : 0,
            "metaldropp8" : 0,
            "metaldropp9" : 0,
            "mind" : "Less",
            "mine_block" : 0,
            "mp_drop" : 0.01,
            "mpdrop0" : 0,
            "mpdrop1" : 0,
            "mpdrop10" : 0,
            "mpdrop11" : 0,
            "mpdrop12" : 0,
            "mpdrop13" : 0,
            "mpdrop14" : 0,
            "mpdrop15" : 0,
            "mpdrop16" : 0,
            "mpdrop17" : 0,
            "mpdrop18" : 0,
            "mpdrop19" : 0,
            "mpdrop2" : 0,
            "mpdrop20" : 0,
            "mpdrop21" : 0,
            "mpdrop22" : 0,
            "mpdrop23" : 0,
            "mpdrop24" : 0,
            "mpdrop25" : 0,
            "mpdrop3" : 0,
            "mpdrop4" : 0,
            "mpdrop5" : 0,
            "mpdrop6" : 0,
            "mpdrop7" : 0,
            "mpdrop8" : 0,
            "mpdrop9" : 0,
            "multybp0x0" : 0,
            "name_castle_owner" : "None",
            "number_guess100" : 0,
            "people" : 0,
            "people0" : 0,
            "people1" : 0,
            "people10" : 0,
            "people11" : 0,
            "people12" : 0,
            "people13" : 0,
            "people14" : 0,
            "people15" : 0,
            "people16" : 0,
            "people17" : 0,
            "people18" : 0,
            "people19" : 0,
            "people2" : 0,
            "people20" : 0,
            "people21" : 0,
            "people22" : 0,
            "people23" : 0,
            "people24" : 0,
            "people25" : 0,
            "people3" : 0,
            "people4" : 0,
            "people5" : 0,
            "people6" : 0,
            "people7" : 0,
            "people8" : 0,
            "people9" : 0,
            "pet" : "None",
            "pot0" : 0,
            "pot1" : 0,
            "pot10" : 0,
            "pot11" : 0,
            "pot12" : 0,
            "pot13" : 0,
            "pot14" : 0,
            "pot15" : 0,
            "pot16" : 0,
            "pot17" : 0,
            "pot18" : 0,
            "pot19" : 0,
            "pot2" : 0,
            "pot20" : 0,
            "pot21" : 0,
            "pot22" : 0,
            "pot23" : 0,
            "pot24" : 0,
            "pot25" : 0,
            "pot3" : 0,
            "pot4" : 0,
            "pot5" : 0,
            "pot6" : 0,
            "pot7" : 0,
            "pot8" : 0,
            "pot9" : 0,
            "qakey" : 0,
            "rabbat" : 0.01,
            "rabbat0" : 0,
            "rabbat1" : 0,
            "rabbat10" : 0,
            "rabbat11" : 0,
            "rabbat12" : 0,
            "rabbat13" : 0,
            "rabbat14" : 0,
            "rabbat15" : 0,
            "rabbat16" : 0,
            "rabbat17" : 0,
            "rabbat18" : 0,
            "rabbat19" : 0,
            "rabbat2" : 0,
            "rabbat20" : 0,
            "rabbat21" : 0,
            "rabbat22" : 0,
            "rabbat23" : 0,
            "rabbat24" : 0,
            "rabbat25" : 0,
            "rabbat3" : 0,
            "rabbat4" : 0,
            "rabbat5" : 0,
            "rabbat6" : 0,
            "rabbat7" : 0,
            "rabbat8" : 0,
            "rabbat9" : 0,
            "race" : "None",
            "rank" : "None",
            "rankkill" : 0,
            "rest_block" : 0,
            "roaming" : "False",
            "score" : 0,
            "selected_attack" : "None",
            "selected_castle" : "None",
            "selected_defence" : "None",
            "selected_enemy" : "None",
            "selected_enemy_player" : "None",
            "selected_enemy_attack" : 0,
            "selected_enemy_cardid" : 0,
            "selected_enemy_castle" : 0,
            "selected_enemy_castle_aliance" : 0,
            "selected_enemy_castle_exp" : 0,
            "selected_enemy_castle_exp_drop" : 0,
            "selected_enemy_castle_lvl" : 0,
            "selected_enemy_castle_name" : 0,
            "selected_enemy_defence" : 0,
            "selected_enemy_drop" : 0,
            "selected_enemy_exp" : 0,
            "selected_enemy_exp_drop" : 0,
            "selected_enemy_fight_status" : 0,
            "selected_enemy_gold" : 0,
            "selected_enemy_hp" : 0,
            "selected_enemy_indoor" : "None",
            "selected_enemy_lvl" : 0,
            "selected_enemy_name" : 0,
            "selected_enemy_skill" : 0,
            "selected_enemy_skill_exp" : 0,
            "selected_enemy_skill_exp_drop" : 0,
            "selected_enemy_skill_lvl" : 0,
            "selected_enemy_status" : 0,
            "selected_hp" : "None",
            "selected_item" : "None",
            "selected_item_type" : "None",
            "selected_lvl" : "None",
            "selected_name" : "None",
            "selected_p" : "None",
            "selected_player" : "None",
            "selected_rank" : "None",
            "selected_status" : "None",
            "setdone" : 0,
            "setnamecastledone" : 0,
            "setnamedone" : 0,
            "setwalletdone" : 0,
            "skexp" : 1,
            "skexpdropp0" : 0,
            "skexpdropp1" : 0,
            "skexpdropp10" : 0,
            "skexpdropp11" : 0,
            "skexpdropp12" : 0,
            "skexpdropp13" : 0,
            "skexpdropp14" : 0,
            "skexpdropp15" : 0,
            "skexpdropp16" : 0,
            "skexpdropp17" : 0,
            "skexpdropp18" : 0,
            "skexpdropp19" : 0,
            "skexpdropp2" : 0,
            "skexpdropp20" : 0,
            "skexpdropp21" : 0,
            "skexpdropp22" : 0,
            "skexpdropp23" : 0,
            "skexpdropp24" : 0,
            "skexpdropp25" : 0,
            "skexpdropp3" : 0,
            "skexpdropp4" : 0,
            "skexpdropp5" : 0,
            "skexpdropp6" : 0,
            "skexpdropp7" : 0,
            "skexpdropp8" : 0,
            "skexpdropp9" : 0,
            "skill_inventory" : [],
            "skills_learned" : [],
            "sklvl" : 1,
            "slotnum" : "0",
            "smallpot" : 0,
            "smallpot_drop" : 0.01,
            "sp_drop" : 0.01,
            "spdrop0" : 0,
            "spdrop1" : 0,
            "spdrop10" : 0,
            "spdrop11" : 0,
            "spdrop12" : 0,
            "spdrop13" : 0,
            "spdrop14" : 0,
            "spdrop15" : 0,
            "spdrop16" : 0,
            "spdrop17" : 0,
            "spdrop18" : 0,
            "spdrop19" : 0,
            "spdrop2" : 0,
            "spdrop20" : 0,
            "spdrop21" : 0,
            "spdrop22" : 0,
            "spdrop23" : 0,
            "spdrop24" : 0,
            "spdrop25" : 0,
            "spdrop3" : 0,
            "spdrop4" : 0,
            "spdrop5" : 0,
            "spdrop6" : 0,
            "spdrop7" : 0,
            "spdrop8" : 0,
            "spdrop9" : 0,
            "speedpot" : 0,
            "stamina" : 100,
            "staminamax" : 100,
            "status" : "Unhappy",
            "status_confuse" : "False",
            "status_crack" : "False",
            "status_ddos" : "False",
            "status_hide" : "False",
            "status_install" : "False",
            "status_install_who" : "None",
            "status_jump" : "False",
            "status_scan" : "False",
            "status_trap" : "False",
            "stone" : 0,
            "stone_drop" : 0,
            "stonedropp0" : 0,
            "stonedropp1" : 0,
            "stonedropp10" : 0,
            "stonedropp11" : 0,
            "stonedropp12" : 0,
            "stonedropp13" : 0,
            "stonedropp14" : 0,
            "stonedropp15" : 0,
            "stonedropp16" : 0,
            "stonedropp17" : 0,
            "stonedropp18" : 0,
            "stonedropp19" : 0,
            "stonedropp2" : 0,
            "stonedropp20" : 0,
            "stonedropp21" : 0,
            "stonedropp22" : 0,
            "stonedropp23" : 0,
            "stonedropp24" : 0,
            "stonedropp25" : 0,
            "stonedropp3" : 0,
            "stonedropp4" : 0,
            "stonedropp5" : 0,
            "stonedropp6" : 0,
            "stonedropp7" : 0,
            "stonedropp8" : 0,
            "stonedropp9" : 0,
            "successCheck" : "False",
            "time_block" : 0,
            "time_reduce" : 0,
            "title" : "None",
            "token_aether" : 0,
            "token_antimat" : 0,
            "token_bgold" : 0,
            "token_blue" : 0,
            "token_bobocoin" : 0,
            "token_boco" : 0,
            "token_bopixbo" : 0,
            "token_cait" : 0,
            "token_dept" : 0,
            "token_door" : 0,
            "token_dust" : 0,
            "token_eos" : 0,
            "token_food" : 0,
            "token_bpvalue" : 0,
            "token_gold" : 0,
            "token_key" : 0,
            "token_metal" : 0,
            "token_nefty" : 0,
            "token_paper" : 0,
            "token_people" : 0,
            "token_rock" : 0,
            "token_scissor" : 0,
            "token_stone" : 0,
            "token_tlm" : 0,
            "token_token_pixel" : 0,
            "token_usdt" : 0,
            "token_wax" : 0,
            "token_wgold" : 0,
            "token_wojak" : 0,
            "token_wood" : 0,
            "token_str" : 0,
            "token_vit" : 0,
            "token_agi" : 0,
            "token_dex" : 0,
            "token_int" : 0,
            "token_luk" : 0,
            "tower_inventory" : [],
            "traveling_block" : 0,
            "try_guess100" : 0,
            "try_lvl100" : 0,
            "try_tguess100" : 0,
            "try_tlvl100" : 0,
            "upitem" : [],
            "wall" : 0,
            "wall_active" : "None",
            "wall_block" : 0,
            "wall_equip_0" : "None",
            "wall_equip_1" : "None",
            "wall_equip_2" : "None",
            "wall_equip_3" : "None",
            "wall_hp" : 0,
            "wall_inventory" : [],
            "wall_lvl" : 0,
            "wall_percent" : 0,
            "wall_repair" : 0,
            "wall_status" : 0,
            "wall_time" : 0,
            "wallet" : "None",
            "wearing" : "Shoe",
            "where" : 0,
            "where_player" : 0,
            "where_castle_player" : 0,
            "where_castle_player_set" : "True",
            "where_castle_guild" : 0,
            "wherecastle" : 0,
            "whereServer" : 0,
            "wood" : 0,
            "wood_drop" : 0,
            "woodbox" : 0,
            "wooddropp0" : 0,
            "wooddropp1" : 0,
            "wooddropp10" : 0,
            "wooddropp11" : 0,
            "wooddropp12" : 0,
            "wooddropp13" : 0,
            "wooddropp14" : 0,
            "wooddropp15" : 0,
            "wooddropp16" : 0,
            "wooddropp17" : 0,
            "wooddropp18" : 0,
            "wooddropp19" : 0,
            "wooddropp2" : 0,
            "wooddropp20" : 0,
            "wooddropp21" : 0,
            "wooddropp22" : 0,
            "wooddropp23" : 0,
            "wooddropp24" : 0,
            "wooddropp25" : 0,
            "wooddropp3" : 0,
            "wooddropp4" : 0,
            "wooddropp5" : 0,
            "wooddropp6" : 0,
            "wooddropp7" : 0,
            "wooddropp8" : 0,
            "wooddropp9" : 0,
            "zadown" : "None",
            "zaup" : "None",
            "zaupitemtype" : "None",
            "zslot0_equip" : "None",
            "zslot0_unequip" : "None",
            "zslot10_equip" : "None",
            "zslot10_unequip" : "None",
            "zslot11_equip" : "None",
            "zslot11_unequip" : "None",
            "zslot12_equip" : "None",
            "zslot12_unequip" : "None",
            "zslot13_equip" : "None",
            "zslot13_unequip" : "None",
            "zslot14_equip" : "None",
            "zslot14_unequip" : "None",
            "zslot15_equip" : "None",
            "zslot15_unequip" : "None",
            "zslot16_equip" : "None",
            "zslot16_unequip" : "None",
            "zslot17_equip" : "None",
            "zslot17_unequip" : "None",
            "zslot18_equip" : "None",
            "zslot18_unequip" : "None",
            "zslot19_equip" : "None",
            "zslot19_unequip" : "None",
            "zslot1_equip" : "None",
            "zslot1_unequip" : "None",
            "zslot20_equip" : "None",
            "zslot20_unequip" : "None",
            "zslot21_equip" : "None",
            "zslot21_unequip" : "None",
            "zslot22_equip" : "None",
            "zslot22_unequip" : "None",
            "zslot23_equip" : "None",
            "zslot23_unequip" : "None",
            "zslot24_equip" : "None",
            "zslot24_unequip" : "None",
            "zslot25_equip" : "None",
            "zslot25_unequip" : "None",
            "zslot2_equip" : "None",
            "zslot2_unequip" : "None",
            "zslot3_equip" : "None",
            "zslot3_unequip" : "None",
            "zslot4_equip" : "None",
            "zslot4_unequip" : "None",
            "zslot5_equip" : "None",
            "zslot5_unequip" : "None",
            "zslot6_equip" : "None",
            "zslot6_unequip" : "None",
            "zslot7_equip" : "None",
            "zslot7_unequip" : "None",
            "zslot8_equip" : "None",
            "zslot8_unequip" : "None",
            "zslot9_equip" : "None",
            "zslot9_unequip" : "None",
            "zslot_0_inventory" : [],
            "zslot_10_inventory" : [],
            "zslot_11_inventory" : [],
            "zslot_12_inventory" : [],
            "zslot_13_inventory" : [],
            "zslot_14_inventory" : [],
            "zslot_15_inventory" : [],
            "zslot_16_inventory" : [],
            "zslot_17_inventory" : [],
            "zslot_18_inventory" : [],
            "zslot_19_inventory" : [],
            "zslot_1_inventory" : [],
            "zslot_20_inventory" : [],
            "zslot_21_inventory" : [],
            "zslot_22_inventory" : [],
            "zslot_23_inventory" : [],
            "zslot_24_inventory" : [],
            "zslot_25_inventory" : [],
            "zslot_2_inventory" : [],
            "zslot_3_inventory" : [],
            "zslot_4_inventory" : [],
            "zslot_5_inventory" : [],
            "zslot_6_inventory" : [],
            "zslot_7_inventory" : [],
            "zslot_8_inventory" : [],
            "zslot_9_inventory" : [],
            "castle_exp" : 0,
            "castle_exp_max" : 0.01,
            "castle_to_next_lvl" : 1,
            "b_1":0,
            "b_2": 0,
            "b_3": 0,
            "b_4": 0,
            "b_5": 0,
            "b_6": 0,
            "b_7": 0,
            "b_8": 0,
            "b_9": 0,
            "b_10": 0,
            "b_11": 0,
            "b_12": 0,
            "b_13": 0,
            "b_14": 0,
            "b_16": 0,
            "b_17": 0,
            "b_18": 0,
            "b_19": 0,
            "b_20": 0,
            "b_21": 0,
            "b_22": 0,
            "b_23": 0,
            "b_24": 0,
            "b_25": 0,
            "b_26": 0,
            "b_27": 0,
            "b_28": 0,
            "b_29": 0,
            "b_30": 0,
            "b_31": 0,
            "b_32": 0,
            "b_33": 0,
            "b_34": 0,
            "b_35": 0,
            "b_36": 0,
            "b_37": 0,
            "b_38": 0,
            "b_39": 0,
            "b_40": 0,
            "b_41": 0,
            "b_42": 0,
            "b_43": 0,
            "b_44": 0,
            "b_45": 0,
            "b_46": 0,
            "b_47": 0,
            "b_48": 0,
            "b_49": 0,
            "b_50": 0,
            "b_51": 0,
            "b_52": 0,
            "b_53": 0,
            "b_54": 0,
            "b_55": 0,
            "b_56": 0,
            "b_57": 0,
            "b_58": 0,
            "b_59": 0,
            "b_60": 0,
            "b_61": 0,
            "b_62": 0,
            "b_63": 0,
            "b_64": 0,
            "b_65": 0,
            "b_66": 0,
            "b_67": 0,
            "b_68": 0,
            "b_69": 0,
            "b_a": 0,
            "b_b": 0,
            "b_c": 0,
            "b_rR": 0,
            "b_r1": 0,
            "b_r3": 0,
            "b_r5": 0,
            "b_r9": 0,
            "antDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ANTIMAT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "ANTIMAT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "ANTIMAT"
            },
            "bgoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOPIGOL" : 0,
                "code" : "alcorammswap",
                "contract" : "alcorammswap",
                "currency" : "BOPIGOL",
                "decimals" : 6,
                "issuer" : "alcorammswap",
                "maximum_supply" : 46116860184.27388,
                "symbol" : "BOPIGOL"
            },
            "bocoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCO" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "BOPIXBO",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 6710886400.0,
                "symbol" : "BOCO"
            },
            "cofDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_COFFEE" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "COFFEE",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 3355443200.0, # 3,355,443,200
                "symbol" : "COFFEE"
            },
            "bopiDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOPIXBO" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "BOPIXBO",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "BOPIXBO"
            },
            "bpvDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BPVALUE" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "BPVALUE",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13743895374.0, # 13,743,895,374
                "symbol" : "BPVALUE"
            },
            "doorDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_DOOR" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "DOOR",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "DOOR"
            },
            "fooDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FOOD" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "FOOD",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "FOOD"
            },
            "goldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_GOLD" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "GOLD",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 124217728.0,
                "symbol" : "GOLD"
            },
            "keyDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_KEY" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "KEY",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "KEY"
            },
            "metDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_METAL" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "METAL",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "METAL"
            },
            "deptDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_DEPT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "DEPT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 8388608000.0,
                "symbol" : "DEPT"
            },
            "papDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PAPER" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "PAPER",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13421772800.0,
                "symbol" : "PAPER"
            },
            "peoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PEOPLE" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "PEOPLE",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 33554432000.0,
                "symbol" : "PEOPLE"
            },
            "pixelDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PIXEL" : 0,
                "code" : "penguincoins",
                "contract" : "penguincoins",
                "currency" : "PIXEL",
                "decimals" : 6,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "PIXEL"
            },
            "rocDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCK" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "ROCK",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13421772800.0,
                "symbol" : "ROCK"
            },
            "runaways" : 0,
            "sciDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SCISSOR" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "SCISSOR",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 13421772800.0,
                "symbol" : "SCISSOR"
            },
            "stodDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_STONE" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "STONE",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "STONE"
            },
            "userDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount" : [],
                "code" : "none",
                "contract" : "none",
                "currency" : "none",
                "decimals" : 8,
                "issuer" : "none",
                "maximum_supply" : 0,
                "symbol" : "none"
            },
            "waxDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAX" : 0,
                "code" : "eosio.token",
                "contract" : "eosio.token",
                "currency" : "WAX",
                "decimals" : 8,
                "issuer" : "eosio",
                "maximum_supply" : 33554432000.0,
                "symbol" : "WAX"
            },
            "wgoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAXGOLI" : 0,
                "code" : "alcorammswap",
                "contract" : "alcorammswap",
                "currency" : "WAXGOLI",
                "decimals" : 8,
                "issuer" : "alcorammswap",
                "maximum_supply" : 33554432000.0,
                "symbol" : "WAXGOLI"
            },
            "wojakDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "aetherDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "tlmDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "bitDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "brwlDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "bluDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "caitDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "dustDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "waxdaoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "bjDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "nbmfusDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "krownDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "cprDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_CPR" : 0,
                "code" : "coin.pirate",
                "contract" : "coin.pirate",
                "currency" : "CPR",
                "decimals" : 0,
                "issuer" : "coin.pirate",
                "maximum_supply" : 0.0,
                "symbol" : "CPR"
            },
            "racoonDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "collectwhale",
                "contract" : "collectwhale",
                "currency" : "RACOON",
                "decimals" : 0,
                "issuer" : "collectwhale",
                "maximum_supply" : 0.0,
                "symbol" : "RACOON"
            },
            "pixDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PIX" : 0,
                "code" : "cyberpixnfts",
                "contract" : "cyberpixnfts",
                "currency" : "PIX",
                "decimals" : 0,
                "issuer" : "cyberpixnfts",
                "maximum_supply" : 0.0,
                "symbol" : "PIX"
            },
            "caponDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_CAPON" : 0,
                "code" : "e.rplanet",
                "contract" : "e.rplanet",
                "currency" : "CAPON",
                "decimals" : 0,
                "issuer" : "e.rplanet",
                "maximum_supply" : 0.0,
                "symbol" : "CAPON"
            },
            "eneftDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ENEFT" : 0,
                "code" : "e.rplanet",
                "contract" : "e.rplanet",
                "currency" : "ENEFT",
                "decimals" : 0,
                "issuer" : "e.rplanet",
                "maximum_supply" : 0.0,
                "symbol" : "ENEFT"
            },
            "gnokentokensDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_GNOKEN" : 0,
                "code" : "gnokentokens",
                "contract" : "gnokentokens",
                "currency" : "GNOKEN",
                "decimals" : 0,
                "issuer" : "gnokentokens",
                "maximum_supply" : 0.0,
                "symbol" : "GNOKEN"
            },
            "gnlDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_GNL" : 0,
                "code" : "godsnlegends",
                "contract" : "godsnlegends",
                "currency" : "GNL",
                "decimals" : 0,
                "issuer" : "godsnlegends",
                "maximum_supply" : 0.0,
                "symbol" : "GNL"
            },
            "waxonDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAXON" : 0,
                "code" : "e.rplanet",
                "contract" : "e.rplanet",
                "currency" : "WAXON",
                "decimals" : 0,
                "issuer" : "e.rplanet",
                "maximum_supply" : 0.0,
                "symbol" : "WAXON"
            },
            "fwfDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FWF" : 0,
                "code" : "farmerstoken",
                "contract" : "farmerstoken",
                "currency" : "FWF",
                "decimals" : 0,
                "issuer" : "farmerstoken",
                "maximum_supply" : 0.0,
                "symbol" : "FWF"
            },
            "fateDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FATE" : 0,
                "code" : "f.immersys",
                "contract" : "f.immersys",
                "currency" : "FATE",
                "decimals" : 0,
                "issuer" : "f.immersys",
                "maximum_supply" : 0.0,
                "symbol" : "FATE"
            },
            "wecanDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WECAN" : 0,
                "code" : "e.rplanet",
                "contract" : "e.rplanet",
                "currency" : "WECAN",
                "decimals" : 0,
                "issuer" : "e.rplanet",
                "maximum_supply" : 0.0,
                "symbol" : "WECAN"
            },
            "lfgkDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_LFGK" : 0,
                "code" : "kingsofgraff",
                "contract" : "kingsofgraff",
                "currency" : "LFGK",
                "decimals" : 0,
                "issuer" : "kingsofgraff",
                "maximum_supply" : 0.0,
                "symbol" : "LFGK"
            },
            "kbucksDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_KBUCKS" : 0,
                "code" : "kolobokbucks",
                "contract" : "kolobokbucks",
                "currency" : "KBUCKS",
                "decimals" : 0,
                "issuer" : "kolobokbucks",
                "maximum_supply" : 0.0,
                "symbol" : "KBUCKS"
            },
            "leefDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "lightDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "ltkDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_LTK" : 0,
                "code" : "litecake.gm",
                "contract" : "litecake.gm",
                "currency" : "LTK",
                "decimals" : 0,
                "issuer" : "litecake.gm",
                "maximum_supply" : 0.0,
                "symbol" : "LTK"
            },
            "btkDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BTK" : 0,
                "code" : "miningntwrkt",
                "contract" : "miningntwrkt",
                "currency" : "BTK",
                "decimals" : 0,
                "issuer" : "miningntwrkt",
                "maximum_supply" : 0.0,
                "symbol" : "BTK"
            },
            "xyteDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_XYTE" : 0,
                "code" : "metatoken.gm",
                "contract" : "metatoken.gm",
                "currency" : "XYTE",
                "decimals" : 0,
                "issuer" : "metatoken.gm",
                "maximum_supply" : 0.0,
                "symbol" : "XYTE"
            },
            "snakoilDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SNAKOIL" : 0,
                "code" : "novarallytok",
                "contract" : "novarallytok",
                "currency" : "SNAKOIL",
                "decimals" : 0,
                "issuer" : "novarallytok",
                "maximum_supply" : 0.0,
                "symbol" : "SNAKOIL"
            },
            "voidDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_VOID" : 0,
                "code" : "onessusonwax",
                "contract" : "onessusonwax",
                "currency" : "VOID",
                "decimals" : 0,
                "issuer" : "onessusonwax",
                "maximum_supply" : 0.0,
                "symbol" : "VOID"
            },
            "pixelDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PIXEL" : 0,
                "code" : "penguincoins",
                "contract" : "penguincoins",
                "currency" : "PIXEL",
                "decimals" : 0,
                "issuer" : "penguincoins",
                "maximum_supply" : 0.0,
                "symbol" : "PIXEL"
            },
            "pglDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PGL" : 0,
                "code" : "prospectorsw",
                "contract" : "prospectorsw",
                "currency" : "PGL",
                "decimals" : 0,
                "issuer" : "prospectorsw",
                "maximum_supply" : 0.0,
                "symbol" : "PGL"
            },
            "purpleDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PURPLE" : 0,
                "code" : "purplepurple",
                "contract" : "purplepurple",
                "currency" : "PURPLE",
                "decimals" : 0,
                "issuer" : "purplepurple",
                "maximum_supply" : 0.0,
                "symbol" : "PURPLE"
            },
            "silvergoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SILVER" : 0,
                "code" : "silversilver",
                "contract" : "silversilver",
                "currency" : "SILVER",
                "decimals" : 0,
                "issuer" : "silversilver",
                "maximum_supply" : 0.0,
                "symbol" : "SILVER"
            },
            "goldgoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_GOLD" : 0,
                "code" : "goldgoldgold",
                "contract" : "goldgoldgold",
                "currency" : "GOLD",
                "decimals" : 0,
                "issuer" : "goldgoldgold",
                "maximum_supply" : 0.0,
                "symbol" : "GOLD"
            },
            "stonkptDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_STONKPT" : 0,
                "code" : "stonkcitytkn",
                "contract" : "stonkcitytkn",
                "currency" : "STONKPT",
                "decimals" : 0,
                "issuer" : "stonkcitytkn",
                "maximum_supply" : 0.0,
                "symbol" : "STONKPT"
            },
            "karmaDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_KARMA" : 0,
                "code" : "theonlykarma",
                "contract" : "theonlykarma",
                "currency" : "KARMA",
                "decimals" : 0,
                "issuer" : "theonlykarma",
                "maximum_supply" : 0.0,
                "symbol" : "KARMA"
            },
            "metalkeyADict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_METAKEA" : 0,
                "code" : "METAL-KEY",
                "contract" : "alcorammswap",
                "currency" : "METAKEA",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "METAKEA"
            },
            "bocometalDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCOMEA" : 0,
                "code" : "BOCO-Metal",
                "contract" : "alcorammswap",
                "currency" : "BOCOMEA",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOCOMEA"
            },
            "bocowoodDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCOWOA" : 0,
                "code" : "BOCO-WOOD",
                "contract" : "alcorammswap",
                "currency" : "BOCOWOA",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOCOWOA"
            },
            "bobostoneDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCOSTA" : 0,
                "code" : "BOCO-STONE",
                "contract" : "alcorammswap",
                "currency" : "BOCOSTA",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOCOSTA"
            },
            "bopixbobocoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOPIBOC" : 0,
                "code" : "METAL-KEY",
                "contract" : "alcorammswap",
                "currency" : "BOPIBOC",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOPIBOC"
            },
            "waxgoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAXGOLI" : 0,
                "code" : "WAX-GOLD",
                "contract" : "alcorammswap",
                "currency" : "WAXGOLI",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "WAXGOLI"
            },
            "bopixbogoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOPIGOL" : 0,
                "code" : "BOPIXBO-GOLD",
                "contract" : "alcorammswap",
                "currency" : "BOPIGOL",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOPIGOL"
            },
            "bocogoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCOGOL" : 0,
                "code" : "BOCO-GOLD",
                "contract" : "alcorammswap",
                "currency" : "BOCOGOL",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOCOGOL"
            },
            "waxbocoDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WAXBOCO" : 0,
                "code" : "BOCO-GOLD",
                "contract" : "alcorammswap",
                "currency" : "WAXBOCO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "WAXBOCO"
            },
            "bocogoldDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BOCOGOL" : 0,
                "code" : "BOCO-GOLD",
                "contract" : "alcorammswap",
                "currency" : "BOCOGOL",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "BOCOGOL"
            },
            "foodpeopleDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FOODPEO" : 0,
                "code" : "FOOD-PEOPLE",
                "contract" : "alcorammswap",
                "currency" : "FOODPEO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "FOODPEO"
            },
            "paperwoodDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PAPEWOO" : 0,
                "code" : "PAPER-WOOD",
                "contract" : "alcorammswap",
                "currency" : "PAPEWOO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "PAPEWOO"
            },
            "foodmepDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FOODMEP" : 0,
                "code" : "FOOD-MEDIUMPOT",
                "contract" : "alcorammswap",
                "currency" : "FOODMEP",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "FOODMEP"
            },
            "foodbipDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FOODBIP" : 0,
                "code" : "FOOD-BIGPOT",
                "contract" : "alcorammswap",
                "currency" : "FOODBIP",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "FOODBIP"
            },
            "foodsmpDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_FOODSMP" : 0,
                "code" : "FOOD-SMALLPOT",
                "contract" : "alcorammswap",
                "currency" : "FOODSMP",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "FOODSMP"
            },
            "rockstoneDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCKSTO" : 0,
                "code" : "ROCK-STONE",
                "contract" : "alcorammswap",
                "currency" : "ROCKSTO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "ROCKSTO"
            },
            "scissormetalDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SCISMET" : 0,
                "code" : "SCISSOR-METAL",
                "contract" : "alcorammswap",
                "currency" : "SCISMET",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "SCISMET"
            },
            "rockstoneDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCKSTO" : 0,
                "code" : "ROCK-STONE",
                "contract" : "alcorammswap",
                "currency" : "ROCKSTO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "ROCKSTO"
            },
            "rockstoneDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCKSTO" : 0,
                "code" : "ROCK-STONE",
                "contract" : "alcorammswap",
                "currency" : "ROCKSTO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "ROCKSTO"
            },
            "rockstoneDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCKSTO" : 0,
                "code" : "ROCK-STONE",
                "contract" : "alcorammswap",
                "currency" : "ROCKSTO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "ROCKSTO"
            },
            "rockstoneDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROCKSTO" : 0,
                "code" : "ROCK-STONE",
                "contract" : "alcorammswap",
                "currency" : "ROCKSTO",
                "decimals" : 0,
                "issuer" : "alcorammswap",
                "maximum_supply" : 0.0,
                "symbol" : "ROCKSTO"
            },
            "wojakDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOJAK" : 0,
                "code" : "mdcryptonfts",
                "contract" : "mdcryptonfts",
                "currency" : "WOJAK",
                "decimals" : 0,
                "issuer" : "mdcryptonfts",
                "maximum_supply" : 0.0,
                "symbol" : "WOJAK"
            },
            "wooDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_WOOD" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "WOOD",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "WOOD"
            },
            "strDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_STR" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "STR",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "STR"
            },
            "vitDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_VIT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "VIT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "VIT"
            },
            "agiDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_AGI" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "AGI",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "AGI"
            },
            "dexDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_DEX" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "DEX",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "DEX"
            },
            "intDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_INT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "INT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "INT"
            },
            "lukDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_LUK" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "LUK",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "LUK"
            },
            "bipotDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_BIPOT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "BIPOT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "BIPOT"
            },
            "mepotDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_MEPOT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "MEPOT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "MEPOT"
            },
            "paarmyDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_PAARMY" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "PAARMY",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "PAARMY"
            },
            "roarmyDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_ROARMY" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "ROARMY",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "ROARMY"
            },
            "scarmyDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SCARMY" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "SCARMY",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "SCARMY"
            },
            "smpotDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_SMPOT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "SMPOT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "SMPOT"
            },
            "depDict" : {
                "account" : "none",
                "amount" : 0,
                "balance" : 0,
                "balances_amount_DEPT" : 0,
                "code" : "bobocoin.gm",
                "contract" : "bobocoin.gm",
                "currency" : "DEPT",
                "decimals" : 8,
                "issuer" : "bobocoin.gm",
                "maximum_supply" : 26843545600.0,
                "symbol" : "DEPT"
            },
            "zucker_freecandy" : 0.9
        }
        fileIO("players/{}/info.json".format(author.id), "save", new_account)
    info = fileIO("players/{}/info.json".format(author.id), "load")
#bot.add_cog(MyCog(bot))    57943
bot.run(secrets.DISCORD_TOKEN)
